
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6e0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800d89c  0800d89c  0001d89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d984  0800d984  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d984  0800d984  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d98c  0800d98c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d98c  0800d98c  0001d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d990  0800d990  0001d990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  20000190  0800db24  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200020c0  0800db24  000220c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f4e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005010  00000000  00000000  0004810e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0004d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  0004f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000318a5  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ec9  00000000  00000000  000828ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119eaa  00000000  00000000  000ac776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089ac  00000000  00000000  001c6670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d884 	.word	0x0800d884

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800d884 	.word	0x0800d884

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b0a0      	sub	sp, #128	; 0x80
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <main+0x8c>)
 8000508:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800050c:	461d      	mov	r5, r3
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000516:	c403      	stmia	r4!, {r0, r1}
 8000518:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe46 	bl	80011aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83d 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa87 	bl	8000a34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f897 	bl	8000658 <MX_I2C1_Init>
  MX_I2C2_Init();
 800052a:	f000 f8d5 	bl	80006d8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800052e:	f000 f913 	bl	8000758 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000532:	f000 f933 	bl	800079c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f9e5 	bl	8000904 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800053a:	f000 fa2f 	bl	800099c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800053e:	f00a fccd 	bl	800aedc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000542:	f00c fb4f 	bl	800cbe4 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000546:	f000 f967 	bl	8000818 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800054a:	f000 f879 	bl	8000640 <MX_NVIC_Init>
    			}
    		}
    	}
    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);*/

  HAL_TIM_Base_Start_IT(&htim17);
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x90>)
 8000550:	f006 fef6 	bl	8007340 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  tick = 0;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (tick == 0) {
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <main+0x94>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1fa      	bne.n	800055a <main+0x5a>
		  tick = 10;
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <main+0x94>)
 8000566:	220a      	movs	r2, #10
 8000568:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800056a:	2108      	movs	r1, #8
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0x98>)
 800056e:	f001 f989 	bl	8001884 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000572:	2110      	movs	r1, #16
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <main+0x98>)
 8000576:	f001 f985 	bl	8001884 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800057a:	2120      	movs	r1, #32
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <main+0x98>)
 800057e:	f001 f981 	bl	8001884 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <main+0x98>)
 8000586:	f001 f97d 	bl	8001884 <HAL_GPIO_TogglePin>
	  if (tick == 0) {
 800058a:	e7e6      	b.n	800055a <main+0x5a>
 800058c:	0800d89c 	.word	0x0800d89c
 8000590:	20000338 	.word	0x20000338
 8000594:	200004a4 	.word	0x200004a4
 8000598:	48000c00 	.word	0x48000c00

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	; 0x58
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f00d f962 	bl	800d874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005be:	2000      	movs	r0, #0
 80005c0:	f002 fc80 	bl	8002ec4 <HAL_PWREx_ControlVoltageScaling>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005ca:	f000 fb11 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005ce:	2321      	movs	r3, #33	; 0x21
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e0:	2303      	movs	r3, #3
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005e8:	231e      	movs	r3, #30
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80005ec:	2314      	movs	r3, #20
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fd15 	bl	800302c <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000608:	f000 faf2 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f003 f91b 	bl	8003860 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 fade 	bl	8000bf0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000634:	f003 fb12 	bl	8003c5c <HAL_RCC_EnableCSS>
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	; 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	201a      	movs	r0, #26
 800064a:	f000 ff22 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800064e:	201a      	movs	r0, #26
 8000650:	f000 ff3b 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	; (80006cc <MX_I2C1_Init+0x74>)
 8000694:	f001 f910 	bl	80018b8 <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 faa7 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <MX_I2C1_Init+0x74>)
 80006a6:	f001 f996 	bl	80019d6 <HAL_I2CEx_ConfigAnalogFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 fa9e 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2C1_Init+0x74>)
 80006b8:	f001 f9d8 	bl	8001a6c <HAL_I2CEx_ConfigDigitalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 fa95 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001ac 	.word	0x200001ac
 80006d0:	40005400 	.word	0x40005400
 80006d4:	307075b1 	.word	0x307075b1

080006d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C2_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C2_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C2_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C2_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C2_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <MX_I2C2_Init+0x74>)
 8000714:	f001 f8d0 	bl	80018b8 <HAL_I2C_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 fa67 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <MX_I2C2_Init+0x74>)
 8000726:	f001 f956 	bl	80019d6 <HAL_I2CEx_ConfigAnalogFilter>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 fa5e 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2C2_Init+0x74>)
 8000738:	f001 f998 	bl	8001a6c <HAL_I2CEx_ConfigDigitalFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 fa55 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000200 	.word	0x20000200
 8000750:	40005800 	.word	0x40005800
 8000754:	307075b1 	.word	0x307075b1

08000758 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <MX_SDMMC1_SD_Init+0x40>)
 8000760:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 8000770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000774:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <MX_SDMMC1_SD_Init+0x3c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000254 	.word	0x20000254
 8000798:	50062400 	.word	0x50062400

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_SPI1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SPI1_Init+0x74>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI1_Init+0x74>)
 80007b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI1_Init+0x74>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI1_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_SPI1_Init+0x74>)
 80007fc:	f006 fca5 	bl	800714a <HAL_SPI_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f9f3 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200002d4 	.word	0x200002d4
 8000814:	40013000 	.word	0x40013000

08000818 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b092      	sub	sp, #72	; 0x48
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	222c      	movs	r2, #44	; 0x2c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f00d f81b 	bl	800d874 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_TIM17_Init+0xe4>)
 8000840:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_TIM17_Init+0xe8>)
 8000842:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_TIM17_Init+0xe4>)
 8000846:	f240 32e7 	movw	r2, #999	; 0x3e7
 800084a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_TIM17_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_TIM17_Init+0xe4>)
 8000854:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000858:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_TIM17_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_TIM17_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_TIM17_Init+0xe4>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800086c:	4823      	ldr	r0, [pc, #140]	; (80008fc <MX_TIM17_Init+0xe4>)
 800086e:	f006 fd0f 	bl	8007290 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000878:	f000 f9ba 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <MX_TIM17_Init+0xe4>)
 800087e:	f006 fdcf 	bl	8007420 <HAL_TIM_OC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000888:	f000 f9b2 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_TIM17_Init+0xe4>)
 80008b2:	f006 ff35 	bl	8007720 <HAL_TIM_OC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80008bc:	f000 f998 	bl	8000bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM17_Init+0xe4>)
 80008e4:	f007 fb38 	bl	8007f58 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80008ee:	f000 f97f 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3748      	adds	r7, #72	; 0x48
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000338 	.word	0x20000338
 8000900:	40014800 	.word	0x40014800

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_USART1_UART_Init+0x90>)
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <MX_USART1_UART_Init+0x94>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_USART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_USART1_UART_Init+0x90>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x90>)
 800094e:	f007 fb9f 	bl	8008090 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f94a 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000960:	f008 f8d0 	bl	8008b04 <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f941 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000972:	f008 f905 	bl	8008b80 <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f938 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_USART1_UART_Init+0x90>)
 8000982:	f008 f886 	bl	8008a92 <HAL_UARTEx_DisableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f930 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000384 	.word	0x20000384
 8000998:	40013800 	.word	0x40013800

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009a2:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <MX_USART2_UART_Init+0x94>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009e6:	f007 fb53 	bl	8008090 <HAL_UART_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f0:	f000 f8fe 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 80009f8:	f008 f884 	bl	8008b04 <HAL_UARTEx_SetTxFifoThreshold>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a02:	f000 f8f5 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 8000a0a:	f008 f8b9 	bl	8008b80 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f8ec 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_USART2_UART_Init+0x90>)
 8000a1a:	f008 f83a 	bl	8008a92 <HAL_UARTEx_DisableFifoMode>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a24:	f000 f8e4 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000414 	.word	0x20000414
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a63      	ldr	r2, [pc, #396]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a5d      	ldr	r2, [pc, #372]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b52      	ldr	r3, [pc, #328]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a4b      	ldr	r2, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000ada:	2200      	movs	r2, #0
 8000adc:	f641 013c 	movw	r1, #6204	; 0x183c
 8000ae0:	483f      	ldr	r0, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000ae2:	f000 feb7 	bl	8001854 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2130      	movs	r1, #48	; 0x30
 8000aea:	483e      	ldr	r0, [pc, #248]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000aec:	f000 feb2 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2178      	movs	r1, #120	; 0x78
 8000af4:	483c      	ldr	r0, [pc, #240]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000af6:	f000 fead 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000afa:	f641 033c 	movw	r3, #6204	; 0x183c
 8000afe:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4833      	ldr	r0, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000b14:	f000 fcf4 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	482d      	ldr	r0, [pc, #180]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000b2e:	f000 fce7 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fcda 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000b4c:	2330      	movs	r3, #48	; 0x30
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4820      	ldr	r0, [pc, #128]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000b64:	f000 fccc 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000b7e:	f000 fcbf 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fcb1 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000b9e:	2378      	movs	r3, #120	; 0x78
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000bb6:	f000 fca3 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000bce:	f000 fc97 	bl	8001500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48001000 	.word	0x48001000
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48000400 	.word	0x48000400

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b0      	sub	sp, #192	; 0xc0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	2294      	movs	r2, #148	; 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00c fe05 	bl	800d874 <memset>
  if(hi2c->Instance==I2C1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <HAL_I2C_MspInit+0x134>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13b      	bne.n	8000cec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f8d7 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff ffb0 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca8:	23c0      	movs	r3, #192	; 0xc0
 8000caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cca:	4619      	mov	r1, r3
 8000ccc:	482c      	ldr	r0, [pc, #176]	; (8000d80 <HAL_I2C_MspInit+0x13c>)
 8000cce:	f000 fc17 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cea:	e040      	b.n	8000d6e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <HAL_I2C_MspInit+0x140>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d13b      	bne.n	8000d6e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 f896 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000d0e:	f7ff ff6f 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_I2C_MspInit+0x13c>)
 8000d52:	f000 fbd5 	bl	8001500 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_I2C_MspInit+0x138>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
}
 8000d6e:	bf00      	nop
 8000d70:	37c0      	adds	r7, #192	; 0xc0
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	40005800 	.word	0x40005800

08000d88 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b0      	sub	sp, #192	; 0xc0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	2294      	movs	r2, #148	; 0x94
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00c fd63 	bl	800d874 <memset>
  if(hsd->Instance==SDMMC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <HAL_SD_MspInit+0xf8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d15f      	bne.n	8000e78 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 f832 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000dd6:	f7ff ff0b 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_SD_MspInit+0xfc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <HAL_SD_MspInit+0x100>)
 8000e4a:	f000 fb59 	bl	8001500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e66:	230c      	movs	r3, #12
 8000e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <HAL_SD_MspInit+0x104>)
 8000e74:	f000 fb44 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37c0      	adds	r7, #192	; 0xc0
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	50062400 	.word	0x50062400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	48000c00 	.word	0x48000c00

08000e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <HAL_SPI_MspInit+0x7c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d128      	bne.n	8000f04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_SPI_MspInit+0x80>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ee2:	23f0      	movs	r3, #240	; 0xf0
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fafe 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40013000 	.word	0x40013000
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_TIM_Base_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x3c>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_TIM_Base_MspInit+0x3c>)
 8000f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_Base_MspInit+0x3c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40014800 	.word	0x40014800
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0b0      	sub	sp, #192	; 0xc0
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	2294      	movs	r2, #148	; 0x94
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00c fc7d 	bl	800d874 <memset>
  if(huart->Instance==USART1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_UART_MspInit+0x138>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d13d      	bne.n	8001000 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 ff4f 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f9c:	f7ff fe28 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6613      	str	r3, [r2, #96]	; 0x60
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	4a34      	ldr	r2, [pc, #208]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000fd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fea:	2307      	movs	r3, #7
 8000fec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f000 fa81 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffe:	e040      	b.n	8001082 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_UART_MspInit+0x140>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d13b      	bne.n	8001082 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800100e:	2300      	movs	r3, #0
 8001010:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	4618      	mov	r0, r3
 8001018:	f002 ff0c 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001022:	f7ff fde5 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x13c>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_UART_MspInit+0x13c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x13c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f000 fa3f 	bl	8001500 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	37c0      	adds	r7, #192	; 0xc0
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40013800 	.word	0x40013800
 8001090:	40021000 	.word	0x40021000
 8001094:	40004400 	.word	0x40004400

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800109c:	f002 fdee 	bl	8003c7c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x8>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f8b4 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	3b01      	subs	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 800110a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 800110e:	f006 f9e8 	bl	80074e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004a4 	.word	0x200004a4
 800111c:	20000338 	.word	0x20000338

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f000 fe40 	bl	8001daa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20001994 	.word	0x20001994

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	; (80011a4 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f00c fb51 	bl	800d82c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff f9b9 	bl	8000500 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001190:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800119c:	0800d994 	.word	0x0800d994
  ldr r2, =_sbss
 80011a0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80011a4:	200020c0 	.word	0x200020c0

080011a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_IRQHandler>

080011aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f961 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f80e 	bl	80011dc <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011cc:	f7ff fd16 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_InitTick+0x70>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f96d 	bl	80014e6 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d809      	bhi.n	800122c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001220:	f000 f937 	bl	8001492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_InitTick+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e007      	b.n	800123c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e001      	b.n	800123c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	200004a8 	.word	0x200004a8

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200004a8 	.word	0x200004a8

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e166      	b.n	80017de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8158 	beq.w	80017d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d005      	beq.n	8001540 <HAL_GPIO_Init+0x40>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d130      	bne.n	80015a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001576:	2201      	movs	r2, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 0201 	and.w	r2, r3, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d123      	bne.n	8001632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	6939      	ldr	r1, [r7, #16]
 800162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0203 	and.w	r2, r3, #3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80b2 	beq.w	80017d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	4b61      	ldr	r3, [pc, #388]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	4a60      	ldr	r2, [pc, #384]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6613      	str	r3, [r2, #96]	; 0x60
 8001680:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800168c:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_GPIO_Init+0x300>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b6:	d02b      	beq.n	8001710 <HAL_GPIO_Init+0x210>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_GPIO_Init+0x304>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d025      	beq.n	800170c <HAL_GPIO_Init+0x20c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a51      	ldr	r2, [pc, #324]	; (8001808 <HAL_GPIO_Init+0x308>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d01f      	beq.n	8001708 <HAL_GPIO_Init+0x208>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a50      	ldr	r2, [pc, #320]	; (800180c <HAL_GPIO_Init+0x30c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d019      	beq.n	8001704 <HAL_GPIO_Init+0x204>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x200>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1fc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1f8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a4c      	ldr	r2, [pc, #304]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1f4>
 80016f0:	2307      	movs	r3, #7
 80016f2:	e00e      	b.n	8001712 <HAL_GPIO_Init+0x212>
 80016f4:	2308      	movs	r3, #8
 80016f6:	e00c      	b.n	8001712 <HAL_GPIO_Init+0x212>
 80016f8:	2306      	movs	r3, #6
 80016fa:	e00a      	b.n	8001712 <HAL_GPIO_Init+0x212>
 80016fc:	2305      	movs	r3, #5
 80016fe:	e008      	b.n	8001712 <HAL_GPIO_Init+0x212>
 8001700:	2304      	movs	r3, #4
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x212>
 8001704:	2303      	movs	r3, #3
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x212>
 8001708:	2302      	movs	r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x212>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x212>
 8001710:	2300      	movs	r3, #0
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001722:	4937      	ldr	r1, [pc, #220]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001730:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001754:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_GPIO_Init+0x320>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f ae91 	bne.w	8001510 <HAL_GPIO_Init+0x10>
  }
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	48000400 	.word	0x48000400
 8001808:	48000800 	.word	0x48000800
 800180c:	48000c00 	.word	0x48000c00
 8001810:	48001000 	.word	0x48001000
 8001814:	48001400 	.word	0x48001400
 8001818:	48001800 	.word	0x48001800
 800181c:	48001c00 	.word	0x48001c00
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001870:	e002      	b.n	8001878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43d9      	mvns	r1, r3
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	400b      	ands	r3, r1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e081      	b.n	80019ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff f9b0 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e006      	b.n	8001940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800193e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d104      	bne.n	8001952 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001950:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69d9      	ldr	r1, [r3, #28]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d138      	bne.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e032      	b.n	8001a60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2224      	movs	r2, #36	; 0x24
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5e:	2302      	movs	r3, #2
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d139      	bne.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e033      	b.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	; 0x24
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001abe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b08f      	sub	sp, #60	; 0x3c
 8001b08:	af0a      	add	r7, sp, #40	; 0x28
 8001b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e116      	b.n	8001d44 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f00b fa49 	bl	800cfc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 ff5e 	bl	8009a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	687e      	ldr	r6, [r7, #4]
 8001b62:	466d      	mov	r5, sp
 8001b64:	f106 0410 	add.w	r4, r6, #16
 8001b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b78:	1d33      	adds	r3, r6, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f007 fe71 	bl	8009864 <USB_CoreInit>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d7      	b.n	8001d44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f007 ff4c 	bl	8009a38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e04a      	b.n	8001c3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333d      	adds	r3, #61	; 0x3d
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	333c      	adds	r3, #60	; 0x3c
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3344      	adds	r3, #68	; 0x44
 8001be2:	4602      	mov	r2, r0
 8001be4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3340      	adds	r3, #64	; 0x40
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3348      	adds	r3, #72	; 0x48
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	334c      	adds	r3, #76	; 0x4c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3354      	adds	r3, #84	; 0x54
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3af      	bcc.n	8001ba6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e044      	b.n	8001cd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3b5      	bcc.n	8001c4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	687e      	ldr	r6, [r7, #4]
 8001ce8:	466d      	mov	r5, sp
 8001cea:	f106 0410 	add.w	r4, r6, #16
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cfe:	1d33      	adds	r3, r6, #4
 8001d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f007 fee4 	bl	8009ad0 <USB_DevInit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e014      	b.n	8001d44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f001 f882 	bl	8002e3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f008 ff6c 	bl	800ac1a <USB_DevDisconnect>

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_Start+0x1c>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e01c      	b.n	8001da2 <HAL_PCD_Start+0x56>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f007 fe33 	bl	80099f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f008 ff20 	bl	800abd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001daa:	b590      	push	{r4, r7, lr}
 8001dac:	b08d      	sub	sp, #52	; 0x34
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f008 ffde 	bl	800ad82 <USB_GetMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 847e 	bne.w	80026ca <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f008 ff42 	bl	800ac5c <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8474 	beq.w	80026c8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f008 ff2f 	bl	800ac5c <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d107      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f002 0202 	and.w	r2, r2, #2
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f008 ff1d 	bl	800ac5c <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d161      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0210 	bic.w	r2, r2, #16
 8001e3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	0c5b      	lsrs	r3, r3, #17
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d124      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d035      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a38      	ldr	r0, [r7, #32]
 8001e88:	f008 fd54 	bl	800a934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e98:	441a      	add	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6a1a      	ldr	r2, [r3, #32]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eaa:	441a      	add	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	e016      	b.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	0c5b      	lsrs	r3, r3, #17
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d110      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6a38      	ldr	r0, [r7, #32]
 8001eca:	f008 fd33 	bl	800a934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eda:	441a      	add	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0210 	orr.w	r2, r2, #16
 8001eee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f008 feb1 	bl	800ac5c <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f04:	f040 80a7 	bne.w	8002056 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f008 feb6 	bl	800ac82 <USB_ReadDevAllOutEpInterrupt>
 8001f16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f18:	e099      	b.n	800204e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 808e 	beq.w	8002042 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f008 feda 	bl	800acea <USB_ReadDevOutEPInterrupt>
 8001f36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2301      	movs	r3, #1
 8001f52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fe96 	bl	8002c88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f72:	461a      	mov	r2, r3
 8001f74:	2308      	movs	r3, #8
 8001f76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fed2 	bl	8002d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	2310      	movs	r3, #16
 8001f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d030      	beq.n	8002008 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b80      	cmp	r3, #128	; 0x80
 8001fb0:	d109      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	78db      	ldrb	r3, [r3, #3]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d108      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f00b f92d 	bl	800d250 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002002:	461a      	mov	r2, r3
 8002004:	2302      	movs	r3, #2
 8002006:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2320      	movs	r3, #32
 8002022:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002040:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f af62 	bne.w	8001f1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f008 fdfe 	bl	800ac5c <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800206a:	f040 80a4 	bne.w	80021b6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f008 fe1f 	bl	800acb6 <USB_ReadDevAllInEpInterrupt>
 8002078:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800207e:	e096      	b.n	80021ae <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 808b 	beq.w	80021a2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f008 fe45 	bl	800ad26 <USB_ReadDevInEPInterrupt>
 800209c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	2201      	movs	r2, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c8:	4013      	ands	r3, r2
 80020ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	461a      	mov	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f00b f81e 	bl	800d126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002100:	461a      	mov	r2, r3
 8002102:	2308      	movs	r3, #8
 8002104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211c:	461a      	mov	r2, r3
 800211e:	2310      	movs	r3, #16
 8002120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002138:	461a      	mov	r2, r3
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d023      	beq.n	8002190 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214a:	6a38      	ldr	r0, [r7, #32]
 800214c:	f007 fe0c 	bl	8009d68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f00b f87b 	bl	800d274 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800218a:	461a      	mov	r2, r3
 800218c:	2302      	movs	r3, #2
 800218e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800219a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fcea 	bl	8002b76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3301      	adds	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	085b      	lsrs	r3, r3, #1
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f af65 	bne.w	8002080 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f008 fd4e 	bl	800ac5c <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ca:	d122      	bne.n	8002212 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021f2:	2100      	movs	r1, #0
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f00b faad 	bl	800d754 <HAL_PCDEx_LPM_Callback>
 80021fa:	e002      	b.n	8002202 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f00a ffff 	bl	800d200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f008 fd20 	bl	800ac5c <USB_ReadInterrupts>
 800221c:	4603      	mov	r3, r0
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002226:	d112      	bne.n	800224e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f00a ffbb 	bl	800d1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800224c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f008 fd02 	bl	800ac5c <USB_ReadInterrupts>
 8002258:	4603      	mov	r3, r0
 800225a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800225e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002262:	d121      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002272:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d111      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002298:	2101      	movs	r1, #1
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f00b fa5a 	bl	800d754 <HAL_PCDEx_LPM_Callback>
 80022a0:	e002      	b.n	80022a8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f00a ff86 	bl	800d1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f008 fcd5 	bl	800ac5c <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022bc:	f040 80b5 	bne.w	800242a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2110      	movs	r1, #16
 80022da:	4618      	mov	r0, r3
 80022dc:	f007 fd44 	bl	8009d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e4:	e046      	b.n	8002374 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	0151      	lsls	r1, r2, #5
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	440a      	add	r2, r1
 8002310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002318:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002326:	461a      	mov	r2, r3
 8002328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800232c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	440a      	add	r2, r1
 8002344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002348:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800234c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235e:	0151      	lsls	r1, r2, #5
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	440a      	add	r2, r1
 8002364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800236c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	3301      	adds	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237a:	429a      	cmp	r2, r3
 800237c:	d3b3      	bcc.n	80022e6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002390:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f043 030b 	orr.w	r3, r3, #11
 80023ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c0:	f043 030b 	orr.w	r3, r3, #11
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	e015      	b.n	80023f4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ee:	f043 030b 	orr.w	r3, r3, #11
 80023f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002402:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002406:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f008 fce5 	bl	800ade4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f008 fc14 	bl	800ac5c <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	d124      	bne.n	800248a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f008 fcaa 	bl	800ad9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f007 fd07 	bl	8009e62 <USB_GetDevSpeed>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681c      	ldr	r4, [r3, #0]
 8002460:	f001 fbc4 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f007 fa24 	bl	80098bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f00a fe7e 	bl	800d176 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002488:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f008 fbe4 	bl	800ac5c <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	d10a      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f00a fe5b 	bl	800d15a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f002 0208 	and.w	r2, r2, #8
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f008 fbcf 	bl	800ac5c <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d122      	bne.n	800250e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d4:	2301      	movs	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	e014      	b.n	8002504 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb0b 	bl	8002b14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	429a      	cmp	r2, r3
 800250c:	d3e5      	bcc.n	80024da <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f008 fba2 	bl	800ac5c <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d13b      	bne.n	800259c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002524:	2301      	movs	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e02b      	b.n	8002582 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3340      	adds	r3, #64	; 0x40
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d115      	bne.n	800257c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002550:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	da12      	bge.n	800257c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	333f      	adds	r3, #63	; 0x3f
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 facc 	bl	8002b14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3301      	adds	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	429a      	cmp	r2, r3
 800258a:	d3ce      	bcc.n	800252a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800259a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f008 fb5b 	bl	800ac5c <USB_ReadInterrupts>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b0:	d155      	bne.n	800265e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b2:	2301      	movs	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e045      	b.n	8002644 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d12e      	bne.n	800263e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da2b      	bge.n	800263e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d121      	bne.n	800263e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263a:	6053      	str	r3, [r2, #4]
            break;
 800263c:	e007      	b.n	800264e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	429a      	cmp	r2, r3
 800264c:	d3b4      	bcc.n	80025b8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800265c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fafa 	bl	800ac5c <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d10a      	bne.n	800268a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f00a fe0f 	bl	800d298 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f008 fae4 	bl	800ac5c <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d115      	bne.n	80026ca <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f00a fdff 	bl	800d2b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	e000      	b.n	80026ca <HAL_PCD_IRQHandler+0x920>
      return;
 80026c8:	bf00      	nop
    }
  }
}
 80026ca:	3734      	adds	r7, #52	; 0x34
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_SetAddress+0x1a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e013      	b.n	8002712 <HAL_PCD_SetAddress+0x42>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f008 fa42 	bl	800ab8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	4608      	mov	r0, r1
 8002724:	4611      	mov	r1, r2
 8002726:	461a      	mov	r2, r3
 8002728:	4603      	mov	r3, r0
 800272a:	70fb      	strb	r3, [r7, #3]
 800272c:	460b      	mov	r3, r1
 800272e:	803b      	strh	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da0f      	bge.n	8002760 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 020f 	and.w	r2, r3, #15
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	705a      	strb	r2, [r3, #1]
 800275e:	e00f      	b.n	8002780 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800278c:	883a      	ldrh	r2, [r7, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	78ba      	ldrb	r2, [r7, #2]
 8002796:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027aa:	78bb      	ldrb	r3, [r7, #2]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d102      	bne.n	80027b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_PCD_EP_Open+0xaa>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e00e      	b.n	80027e2 <HAL_PCD_EP_Open+0xc8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f007 fb64 	bl	8009ea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da0f      	bge.n	800281e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	3338      	adds	r3, #56	; 0x38
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	3304      	adds	r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	705a      	strb	r2, [r3, #1]
 800281c:	e00f      	b.n	800283e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 020f 	and.w	r2, r3, #15
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_PCD_EP_Close+0x6e>
 8002854:	2302      	movs	r3, #2
 8002856:	e00e      	b.n	8002876 <HAL_PCD_EP_Close+0x8c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f007 fba2 	bl	8009fb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	460b      	mov	r3, r1
 800288c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f003 020f 	and.w	r2, r3, #15
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6979      	ldr	r1, [r7, #20]
 80028dc:	4618      	mov	r0, r3
 80028de:	f007 fe23 	bl	800a528 <USB_EP0StartXfer>
 80028e2:	e005      	b.n	80028f0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6979      	ldr	r1, [r7, #20]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f007 fc3c 	bl	800a168 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800291c:	681b      	ldr	r3, [r3, #0]
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	460b      	mov	r3, r1
 8002938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3338      	adds	r3, #56	; 0x38
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2201      	movs	r2, #1
 8002968:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	b2da      	uxtb	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	4618      	mov	r0, r3
 8002988:	f007 fdce 	bl	800a528 <USB_EP0StartXfer>
 800298c:	e005      	b.n	800299a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	4618      	mov	r0, r3
 8002996:	f007 fbe7 	bl	800a168 <USB_EPStartXfer>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d901      	bls.n	80029c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e04e      	b.n	8002a60 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0f      	bge.n	80029ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3338      	adds	r3, #56	; 0x38
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
 80029e8:	e00d      	b.n	8002a06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_PCD_EP_SetStall+0x82>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e01c      	b.n	8002a60 <HAL_PCD_EP_SetStall+0xbc>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f007 ffd5 	bl	800a9e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f008 f9c7 	bl	800ade4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 020f 	and.w	r2, r3, #15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d901      	bls.n	8002a86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e042      	b.n	8002b0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da0f      	bge.n	8002aae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 020f 	and.w	r2, r3, #15
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3338      	adds	r3, #56	; 0x38
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00f      	b.n	8002ace <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_PCD_EP_ClrStall+0x86>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_ClrStall+0xa4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 ffdf 	bl	800aac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0c      	bge.n	8002b42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e00c      	b.n	8002b5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f007 fe02 	bl	800a76c <USB_EPStopXfer>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3338      	adds	r3, #56	; 0x38
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d902      	bls.n	8002bca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd2:	e026      	b.n	8002c22 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d902      	bls.n	8002bf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	6978      	ldr	r0, [r7, #20]
 8002c06:	f007 fe5b 	bl	800a8c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	441a      	add	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d809      	bhi.n	8002c4c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d203      	bcs.n	8002c4c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1c3      	bne.n	8002bd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d811      	bhi.n	8002c7c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	2201      	movs	r2, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	6939      	ldr	r1, [r7, #16]
 8002c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c78:	4013      	ands	r3, r2
 8002c7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	333c      	adds	r3, #60	; 0x3c
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <PCD_EP_OutXfrComplete_int+0x98>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d124      	bne.n	8002d08 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cda:	6093      	str	r3, [r2, #8]
 8002cdc:	e01a      	b.n	8002d14 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f00a f9f5 	bl	800d0f0 <HAL_PCD_DataOutStageCallback>
 8002d06:	e005      	b.n	8002d14 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f00a f9ee 	bl	800d0f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	4f54310a 	.word	0x4f54310a

08002d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	333c      	adds	r3, #60	; 0x3c
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <PCD_EP_OutSetupPacket_int+0x64>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d90e      	bls.n	8002d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d70:	461a      	mov	r2, r3
 8002d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f00a f9a7 	bl	800d0cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	4f54300a 	.word	0x4f54300a

08002d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002daa:	883b      	ldrh	r3, [r7, #0]
 8002dac:	0419      	lsls	r1, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
 8002db8:	e028      	b.n	8002e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e00d      	b.n	8002dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	3340      	adds	r3, #64	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3ec      	bcc.n	8002dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	0418      	lsls	r0, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4302      	orrs	r2, r0
 8002e04:	3340      	adds	r3, #64	; 0x40
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	f043 0303 	orr.w	r3, r3, #3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d102      	bne.n	8002e9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9a:	e00b      	b.n	8002eb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb0:	e000      	b.n	8002eb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002eb2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d141      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d131      	bne.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	4a46      	ldr	r2, [pc, #280]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2232      	movs	r2, #50	; 0x32
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	4a3f      	ldr	r2, [pc, #252]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	0c9b      	lsrs	r3, r3, #18
 8002f12:	3301      	adds	r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f16:	e002      	b.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d102      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f2      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f32:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d158      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e057      	b.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f44:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f54:	e04d      	b.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5c:	d141      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f5e:	4b28      	ldr	r3, [pc, #160]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d131      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f72:	4a23      	ldr	r2, [pc, #140]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2232      	movs	r2, #50	; 0x32
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0c9b      	lsrs	r3, r3, #18
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa2:	e002      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d102      	bne.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f2      	bne.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d112      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e011      	b.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fe0:	e007      	b.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40007000 	.word	0x40007000
 8003004:	20000000 	.word	0x20000000
 8003008:	431bde83 	.word	0x431bde83

0800300c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301a:	6053      	str	r3, [r2, #4]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40007000 	.word	0x40007000

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f000 bc08 	b.w	8003850 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b96      	ldr	r3, [pc, #600]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304a:	4b94      	ldr	r3, [pc, #592]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80e4 	beq.w	800322a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_RCC_OscConfig+0x4c>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	f040 808b 	bne.w	8003186 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b01      	cmp	r3, #1
 8003074:	f040 8087 	bne.w	8003186 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003078:	4b88      	ldr	r3, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x64>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e3df      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <HAL_RCC_OscConfig+0x7e>
 80030a0:	4b7e      	ldr	r3, [pc, #504]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a8:	e005      	b.n	80030b6 <HAL_RCC_OscConfig+0x8a>
 80030aa:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d223      	bcs.n	8003102 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fdf8 	bl	8003cb4 <RCC_SetFlashLatencyFromMSIRange>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e3c0      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ce:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b70      	ldr	r3, [pc, #448]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	496d      	ldr	r1, [pc, #436]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ec:	4b6b      	ldr	r3, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	4968      	ldr	r1, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e025      	b.n	800314e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003102:	4b66      	ldr	r3, [pc, #408]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4960      	ldr	r1, [pc, #384]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003120:	4b5e      	ldr	r3, [pc, #376]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	495b      	ldr	r1, [pc, #364]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fdb8 	bl	8003cb4 <RCC_SetFlashLatencyFromMSIRange>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e380      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800314e:	f000 fcc1 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	4950      	ldr	r1, [pc, #320]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a4e      	ldr	r2, [pc, #312]	; (80032a4 <HAL_RCC_OscConfig+0x278>)
 800316c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <HAL_RCC_OscConfig+0x27c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f832 	bl	80011dc <HAL_InitTick>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d052      	beq.n	8003228 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	e364      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d032      	beq.n	80031f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800318e:	4b43      	ldr	r3, [pc, #268]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a42      	ldr	r2, [pc, #264]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800319a:	f7fe f86f 	bl	800127c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a2:	f7fe f86b 	bl	800127c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e34d      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b4:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a35      	ldr	r2, [pc, #212]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4930      	ldr	r1, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	492b      	ldr	r1, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
 80031f2:	e01a      	b.n	800322a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003200:	f7fe f83c 	bl	800127c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003208:	f7fe f838 	bl	800127c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e31a      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1dc>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d073      	beq.n	800331e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x21c>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d10e      	bne.n	8003260 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d063      	beq.n	800331c <HAL_RCC_OscConfig+0x2f0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d15f      	bne.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e2f7      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x24c>
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e025      	b.n	80032c4 <HAL_RCC_OscConfig+0x298>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d114      	bne.n	80032ac <HAL_RCC_OscConfig+0x280>
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a02      	ldr	r2, [pc, #8]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e013      	b.n	80032c4 <HAL_RCC_OscConfig+0x298>
 800329c:	40021000 	.word	0x40021000
 80032a0:	0800d900 	.word	0x0800d900
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a9f      	ldr	r2, [pc, #636]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a9c      	ldr	r2, [pc, #624]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd ffd6 	bl	800127c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fd ffd2 	bl	800127c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e2b4      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e6:	4b92      	ldr	r3, [pc, #584]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2a8>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fd ffc2 	bl	800127c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd ffbe 	bl	800127c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e2a0      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	4b88      	ldr	r3, [pc, #544]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x2d0>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d060      	beq.n	80033ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x310>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d119      	bne.n	800336a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d116      	bne.n	800336a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333c:	4b7c      	ldr	r3, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_OscConfig+0x328>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e27d      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	4973      	ldr	r1, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	e040      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d023      	beq.n	80033ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003372:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd ff7d 	bl	800127c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003386:	f7fd ff79 	bl	800127c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e25b      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003398:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b62      	ldr	r3, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	495f      	ldr	r1, [pc, #380]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5c      	ldr	r2, [pc, #368]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80033c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd ff59 	bl	800127c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fd ff55 	bl	800127c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e237      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d03c      	beq.n	8003472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003406:	4a4a      	ldr	r2, [pc, #296]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd ff34 	bl	800127c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fd ff30 	bl	800127c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e212      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCC_OscConfig+0x3ec>
 8003438:	e01b      	b.n	8003472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003440:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fd ff17 	bl	800127c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003452:	f7fd ff13 	bl	800127c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1f5      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ef      	bne.n	8003452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80a6 	beq.w	80035cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a26      	ldr	r2, [pc, #152]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
 800349c:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_OscConfig+0x508>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d118      	bne.n	80034ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_RCC_OscConfig+0x508>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x508>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c4:	f7fd feda 	bl	800127c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fd fed6 	bl	800127c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1b8      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCC_OscConfig+0x508>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_OscConfig+0x4d8>
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003502:	e029      	b.n	8003558 <HAL_RCC_OscConfig+0x52c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d115      	bne.n	8003538 <HAL_RCC_OscConfig+0x50c>
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	4a03      	ldr	r2, [pc, #12]	; (8003530 <HAL_RCC_OscConfig+0x504>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x52c>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	4b9d      	ldr	r3, [pc, #628]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a9c      	ldr	r2, [pc, #624]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003548:	4b99      	ldr	r3, [pc, #612]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a98      	ldr	r2, [pc, #608]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d016      	beq.n	800358e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fe8c 	bl	800127c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fd fe88 	bl	800127c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e168      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ed      	beq.n	8003568 <HAL_RCC_OscConfig+0x53c>
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fe75 	bl	800127c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd fe71 	bl	800127c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e151      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ac:	4b80      	ldr	r3, [pc, #512]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ed      	bne.n	8003596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	4a7a      	ldr	r2, [pc, #488]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d03c      	beq.n	8003652 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01c      	beq.n	800361a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e0:	4b73      	ldr	r3, [pc, #460]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80035e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e6:	4a72      	ldr	r2, [pc, #456]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd fe44 	bl	800127c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f8:	f7fd fe40 	bl	800127c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e122      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800360c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ef      	beq.n	80035f8 <HAL_RCC_OscConfig+0x5cc>
 8003618:	e01b      	b.n	8003652 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361a:	4b65      	ldr	r3, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800361c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003620:	4a63      	ldr	r2, [pc, #396]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fd fe27 	bl	800127c <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fd fe23 	bl	800127c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e105      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003644:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ef      	bne.n	8003632 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80f9 	beq.w	800384e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	2b02      	cmp	r3, #2
 8003662:	f040 80cf 	bne.w	8003804 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003666:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	d12c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	3b01      	subs	r3, #1
 8003686:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d123      	bne.n	80036d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d11b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d113      	bne.n	80036d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d071      	beq.n	80037b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d068      	beq.n	80037ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0ac      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2d      	ldr	r2, [pc, #180]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003702:	f7fd fdbb 	bl	800127c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd fdb7 	bl	800127c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e099      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_RCC_OscConfig+0x788>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003738:	3a01      	subs	r2, #1
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003742:	0212      	lsls	r2, r2, #8
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800374a:	0852      	lsrs	r2, r2, #1
 800374c:	3a01      	subs	r2, #1
 800374e:	0552      	lsls	r2, r2, #21
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0652      	lsls	r2, r2, #25
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	430a      	orrs	r2, r1
 8003766:	4912      	ldr	r1, [pc, #72]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003784:	f7fd fd7a 	bl	800127c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd fd76 	bl	800127c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e058      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_OscConfig+0x784>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037aa:	e050      	b.n	800384e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e04f      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
 80037b0:	40021000 	.word	0x40021000
 80037b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d144      	bne.n	800384e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a23      	ldr	r2, [pc, #140]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037dc:	f7fd fd4e 	bl	800127c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd fd4a 	bl	800127c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e02c      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x7b8>
 8003802:	e024      	b.n	800384e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d01f      	beq.n	800384a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 8003810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fd fd31 	bl	800127c <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381e:	f7fd fd2d 	bl	800127c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e00f      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	4905      	ldr	r1, [pc, #20]	; (8003858 <HAL_RCC_OscConfig+0x82c>)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x830>)
 8003844:	4013      	ands	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
 8003848:	e001      	b.n	800384e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	feeefffc 	.word	0xfeeefffc

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e11d      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b90      	ldr	r3, [pc, #576]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d910      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	498b      	ldr	r1, [pc, #556]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b89      	ldr	r3, [pc, #548]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e105      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d908      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b7e      	ldr	r3, [pc, #504]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	497b      	ldr	r1, [pc, #492]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d079      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d11e      	bne.n	8003928 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	4b75      	ldr	r3, [pc, #468]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0dc      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038fa:	f000 fa35 	bl	8003d68 <RCC_GetSysClockFreqFromPLLSource>
 80038fe:	4603      	mov	r3, r0
 8003900:	4a70      	ldr	r2, [pc, #448]	; (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d946      	bls.n	8003994 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003906:	4b6e      	ldr	r3, [pc, #440]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d140      	bne.n	8003994 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003912:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391a:	4a69      	ldr	r2, [pc, #420]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e035      	b.n	8003994 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003930:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d115      	bne.n	8003968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0b9      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003948:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0ad      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b59      	ldr	r3, [pc, #356]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0a5      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003968:	f000 f8b4 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800396c:	4603      	mov	r3, r0
 800396e:	4a55      	ldr	r2, [pc, #340]	; (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d90f      	bls.n	8003994 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003974:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 800398a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003994:	4b4a      	ldr	r3, [pc, #296]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4947      	ldr	r1, [pc, #284]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a6:	f7fd fc69 	bl	800127c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7fd fc65 	bl	800127c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e077      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 020c 	and.w	r2, r3, #12
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d1eb      	bne.n	80039ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a37      	ldr	r2, [pc, #220]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d208      	bcs.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	492b      	ldr	r1, [pc, #172]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d210      	bcs.n	8003a46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 020f 	bic.w	r2, r3, #15
 8003a2c:	4923      	ldr	r1, [pc, #140]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a34:	4b21      	ldr	r3, [pc, #132]	; (8003abc <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e036      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4918      	ldr	r1, [pc, #96]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a84:	f000 f826 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <HAL_RCC_ClockConfig+0x268>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x26c>)
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fb97 	bl	80011dc <HAL_InitTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	04c4b400 	.word	0x04c4b400
 8003ac8:	0800d900 	.word	0x0800d900
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	; 0x24
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aec:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x34>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d121      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11e      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b08:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e005      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b30:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e004      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d134      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d003      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0xac>
 8003b78:	e005      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b7c:	617b      	str	r3, [r7, #20]
      break;
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b82:	617b      	str	r3, [r7, #20]
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	617b      	str	r3, [r7, #20]
      break;
 8003b8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3301      	adds	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	0e5b      	lsrs	r3, r3, #25
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800d918 	.word	0x0800d918
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	0800d910 	.word	0x0800d910

08003c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c34:	f7ff ffda 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0adb      	lsrs	r3, r3, #11
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4904      	ldr	r1, [pc, #16]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	0800d910 	.word	0x0800d910

08003c5c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_EnableCSS+0x1c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_RCC_EnableCSS+0x1c>)
 8003c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003c8e:	f000 f809 	bl	8003ca4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003c92:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c98:	621a      	str	r2, [r3, #32]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ccc:	f7ff f8da 	bl	8002e84 <HAL_PWREx_GetVoltageRange>
 8003cd0:	6178      	str	r0, [r7, #20]
 8003cd2:	e014      	b.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cec:	f7ff f8ca 	bl	8002e84 <HAL_PWREx_GetVoltageRange>
 8003cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d10b      	bne.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d913      	bls.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d10:	d902      	bls.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d12:	2302      	movs	r3, #2
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	e00d      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d18:	2301      	movs	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e00a      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b7f      	cmp	r3, #127	; 0x7f
 8003d22:	d902      	bls.n	8003d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d24:	2302      	movs	r3, #2
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e004      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b70      	cmp	r3, #112	; 0x70
 8003d2e:	d101      	bne.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d30:	2301      	movs	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 020f 	bic.w	r2, r3, #15
 8003d3c:	4909      	ldr	r1, [pc, #36]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d001      	beq.n	8003d56 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40022000 	.word	0x40022000

08003d68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d00b      	beq.n	8003d96 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d825      	bhi.n	8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d008      	beq.n	8003d9c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d11f      	bne.n	8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d92:	613b      	str	r3, [r7, #16]
    break;
 8003d94:	e01f      	b.n	8003dd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d98:	613b      	str	r3, [r7, #16]
    break;
 8003d9a:	e01c      	b.n	8003dd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d107      	bne.n	8003db8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e005      	b.n	8003dc4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	613b      	str	r3, [r7, #16]
    break;
 8003dce:	e002      	b.n	8003dd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
    break;
 8003dd4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	3301      	adds	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	fb03 f202 	mul.w	r2, r3, r2
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	0e5b      	lsrs	r3, r3, #25
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e16:	683b      	ldr	r3, [r7, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40021000 	.word	0x40021000
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	0800d918 	.word	0x0800d918

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d040      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d02a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d825      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d026      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d821      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d006      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d81d      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d010      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e74:	e018      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a88      	ldr	r2, [pc, #544]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e82:	e015      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 fa24 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e94:	e00c      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fb0f 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea6:	e003      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	74fb      	strb	r3, [r7, #19]
      break;
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb6:	4b79      	ldr	r3, [pc, #484]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec4:	4975      	ldr	r1, [pc, #468]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d047      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d030      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d82a      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef2:	d02a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef8:	d824      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efe:	d008      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f04:	d81e      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f10:	e018      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4a61      	ldr	r2, [pc, #388]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f1e:	e015      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f9d6 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f30:	e00c      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3320      	adds	r3, #32
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fac1 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	74fb      	strb	r3, [r7, #19]
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	494e      	ldr	r1, [pc, #312]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f68:	e001      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 809f 	beq.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3a      	ldr	r2, [pc, #232]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd f95d 	bl	800127c <HAL_GetTick>
 8003fc2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc4:	e009      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fd f959 	bl	800127c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d902      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ef      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d15b      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01f      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	429a      	cmp	r2, r3
 8004008:	d019      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d016      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd f918 	bl	800127c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	e00b      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd f914 	bl	800127c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d902      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	74fb      	strb	r3, [r7, #19]
            break;
 8004066:	e006      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ec      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10c      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
 800409a:	e005      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a8:	7c7b      	ldrb	r3, [r7, #17]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ae:	4ba0      	ldr	r3, [pc, #640]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	4a9f      	ldr	r2, [pc, #636]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c6:	4b9a      	ldr	r3, [pc, #616]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 0203 	bic.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	4996      	ldr	r1, [pc, #600]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e8:	4b91      	ldr	r3, [pc, #580]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 020c 	bic.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	498e      	ldr	r1, [pc, #568]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800410a:	4b89      	ldr	r3, [pc, #548]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	4985      	ldr	r1, [pc, #532]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800412c:	4b80      	ldr	r3, [pc, #512]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	497d      	ldr	r1, [pc, #500]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414e:	4b78      	ldr	r3, [pc, #480]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	4974      	ldr	r1, [pc, #464]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	496c      	ldr	r1, [pc, #432]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	4963      	ldr	r1, [pc, #396]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c2:	495b      	ldr	r1, [pc, #364]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d6:	4b56      	ldr	r3, [pc, #344]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	4952      	ldr	r1, [pc, #328]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f8:	4b4d      	ldr	r3, [pc, #308]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	494a      	ldr	r1, [pc, #296]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800421a:	4b45      	ldr	r3, [pc, #276]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	4941      	ldr	r1, [pc, #260]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423c:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	4939      	ldr	r1, [pc, #228]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d028      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425e:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	4930      	ldr	r1, [pc, #192]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427c:	d106      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427e:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004288:	60d3      	str	r3, [r2, #12]
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2101      	movs	r1, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f001 f81b 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04d      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c4:	d108      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042d6:	e012      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042de:	4a14      	ldr	r2, [pc, #80]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	490e      	ldr	r1, [pc, #56]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004306:	d106      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a08      	ldr	r2, [pc, #32]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004312:	60d3      	str	r3, [r2, #12]
 8004314:	e020      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d109      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a02      	ldr	r2, [pc, #8]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	e014      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2101      	movs	r1, #1
 8004344:	4618      	mov	r0, r3
 8004346:	f000 ffc7 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d028      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004364:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004372:	4947      	ldr	r1, [pc, #284]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004382:	d106      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004384:	4b42      	ldr	r3, [pc, #264]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a41      	ldr	r2, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438e:	60d3      	str	r3, [r2, #12]
 8004390:	e011      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439a:	d10c      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ff98 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	492f      	ldr	r1, [pc, #188]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 ff73 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004412:	f023 0204 	bic.w	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	491c      	ldr	r1, [pc, #112]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004436:	f023 0218 	bic.w	r2, r3, #24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	4913      	ldr	r1, [pc, #76]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004482:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004484:	7cbb      	ldrb	r3, [r7, #18]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a6:	d13e      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044a8:	4bb6      	ldr	r3, [pc, #728]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ba:	d028      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c2:	f200 86f4 	bhi.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d005      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d00e      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80044d6:	f000 beea 	b.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044da:	4baa      	ldr	r3, [pc, #680]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f040 86e4 	bne.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	61fb      	str	r3, [r7, #28]
      break;
 80044f0:	f000 bedf 	b.w	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044f4:	4ba3      	ldr	r3, [pc, #652]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 86d9 	bne.w	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004504:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004508:	61fb      	str	r3, [r7, #28]
      break;
 800450a:	f000 bed4 	b.w	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800450e:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800451a:	f040 86ce 	bne.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800451e:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004520:	61fb      	str	r3, [r7, #28]
      break;
 8004522:	f000 beca 	b.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004526:	4b97      	ldr	r3, [pc, #604]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d036      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d840      	bhi.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d020      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004548:	e039      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800454a:	4b8e      	ldr	r3, [pc, #568]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d116      	bne.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004556:	4b8b      	ldr	r3, [pc, #556]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	e005      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4a84      	ldr	r2, [pc, #528]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004580:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004582:	e01f      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
      break;
 8004588:	e01c      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800458a:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d102      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004598:	4b7d      	ldr	r3, [pc, #500]	; (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800459a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800459c:	e012      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
      break;
 80045a2:	e00f      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045a4:	4b77      	ldr	r3, [pc, #476]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045b0:	d102      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80045b2:	4b78      	ldr	r3, [pc, #480]	; (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80045b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
      break;
 80045bc:	e002      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
      break;
 80045c2:	bf00      	nop
    }

    switch(PeriphClk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ca:	f000 8606 	beq.w	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d4:	f200 8673 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045de:	f000 8469 	beq.w	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e8:	f200 8669 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f2:	f000 8531 	beq.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fc:	f200 865f 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004606:	f000 8187 	beq.w	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004610:	f200 8655 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800461a:	f000 80cd 	beq.w	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004624:	f200 864b 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462e:	f000 8430 	beq.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	f200 8641 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004642:	f000 83e4 	beq.w	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	f200 8637 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f000 80af 	beq.w	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004660:	f200 862d 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	f000 809d 	beq.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	f200 8623 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467e:	f000 808b 	beq.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004688:	f200 8619 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	f000 8554 	beq.w	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469c:	f200 860f 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a6:	f000 8500 	beq.w	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b0:	f200 8605 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	f000 84a1 	beq.w	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c4:	f200 85fb 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	f000 846c 	beq.w	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	f200 85f3 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d84c      	bhi.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 85ec 	beq.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	2b1f      	cmp	r3, #31
 80046ec:	f200 85e7 	bhi.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004b0d 	.word	0x08004b0d
 80046fc:	08004b7b 	.word	0x08004b7b
 8004700:	080052bf 	.word	0x080052bf
 8004704:	08004c0f 	.word	0x08004c0f
 8004708:	080052bf 	.word	0x080052bf
 800470c:	080052bf 	.word	0x080052bf
 8004710:	080052bf 	.word	0x080052bf
 8004714:	08004c87 	.word	0x08004c87
 8004718:	080052bf 	.word	0x080052bf
 800471c:	080052bf 	.word	0x080052bf
 8004720:	080052bf 	.word	0x080052bf
 8004724:	080052bf 	.word	0x080052bf
 8004728:	080052bf 	.word	0x080052bf
 800472c:	080052bf 	.word	0x080052bf
 8004730:	080052bf 	.word	0x080052bf
 8004734:	08004d0b 	.word	0x08004d0b
 8004738:	080052bf 	.word	0x080052bf
 800473c:	080052bf 	.word	0x080052bf
 8004740:	080052bf 	.word	0x080052bf
 8004744:	080052bf 	.word	0x080052bf
 8004748:	080052bf 	.word	0x080052bf
 800474c:	080052bf 	.word	0x080052bf
 8004750:	080052bf 	.word	0x080052bf
 8004754:	080052bf 	.word	0x080052bf
 8004758:	080052bf 	.word	0x080052bf
 800475c:	080052bf 	.word	0x080052bf
 8004760:	080052bf 	.word	0x080052bf
 8004764:	080052bf 	.word	0x080052bf
 8004768:	080052bf 	.word	0x080052bf
 800476c:	080052bf 	.word	0x080052bf
 8004770:	080052bf 	.word	0x080052bf
 8004774:	08004d8d 	.word	0x08004d8d
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	f000 83e8 	beq.w	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004780:	f000 bd9d 	b.w	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004784:	40021000 	.word	0x40021000
 8004788:	0003d090 	.word	0x0003d090
 800478c:	0800d918 	.word	0x0800d918
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800479e:	f000 ff83 	bl	80056a8 <RCCEx_GetSAIxPeriphCLKFreq>
 80047a2:	61f8      	str	r0, [r7, #28]
      break;
 80047a4:	f000 bd8e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80047a8:	69b9      	ldr	r1, [r7, #24]
 80047aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047ae:	f000 ff7b 	bl	80056a8 <RCCEx_GetSAIxPeriphCLKFreq>
 80047b2:	61f8      	str	r0, [r7, #28]
      break;
 80047b4:	f000 bd86 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80047b8:	4b9a      	ldr	r3, [pc, #616]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047ca:	d015      	beq.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047d2:	f200 8092 	bhi.w	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047dc:	d029      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e4:	f200 8089 	bhi.w	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d07b      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f4:	d04a      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80047f6:	e080      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047f8:	4b8a      	ldr	r3, [pc, #552]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d17d      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004804:	4b87      	ldr	r3, [pc, #540]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004810:	4b84      	ldr	r3, [pc, #528]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	e005      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	4a7f      	ldr	r2, [pc, #508]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	61fb      	str	r3, [r7, #28]
          break;
 8004830:	e066      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004832:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800483e:	d162      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004840:	4b78      	ldr	r3, [pc, #480]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484c:	d15b      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800484e:	4b75      	ldr	r3, [pc, #468]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	fb03 f202 	mul.w	r2, r3, r2
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	3301      	adds	r3, #1
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004874:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0d5b      	lsrs	r3, r3, #21
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	3301      	adds	r3, #1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	61fb      	str	r3, [r7, #28]
          break;
 800488a:	e03c      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800488c:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004898:	d138      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a6:	d131      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80048a8:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	fb03 f202 	mul.w	r2, r3, r2
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3301      	adds	r3, #1
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80048ce:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	0d5b      	lsrs	r3, r3, #21
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	3301      	adds	r3, #1
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	61fb      	str	r3, [r7, #28]
          break;
 80048e4:	e012      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d10e      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80048f4:	4b4d      	ldr	r3, [pc, #308]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048f6:	61fb      	str	r3, [r7, #28]
          break;
 80048f8:	e00b      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80048fa:	bf00      	nop
 80048fc:	f000 bce2 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004900:	bf00      	nop
 8004902:	f000 bcdf 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004906:	bf00      	nop
 8004908:	f000 bcdc 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800490c:	bf00      	nop
 800490e:	f000 bcd9 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004912:	bf00      	nop
        break;
 8004914:	f000 bcd6 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800491a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800491e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004926:	d13d      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004934:	f040 84c5 	bne.w	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004938:	4b3a      	ldr	r3, [pc, #232]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004944:	f040 84bd 	bne.w	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	fb03 f202 	mul.w	r2, r3, r2
 800495c:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	3301      	adds	r3, #1
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	0edb      	lsrs	r3, r3, #27
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800498c:	2311      	movs	r3, #17
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e001      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004992:	2307      	movs	r3, #7
 8004994:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61fb      	str	r3, [r7, #28]
      break;
 80049a0:	f000 bc8f 	b.w	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049b6:	d016      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049be:	f200 809b 	bhi.w	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c8:	d032      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d0:	f200 8092 	bhi.w	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8084 	beq.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e2:	d052      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80049e4:	e088      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	f040 8084 	bne.w	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	e005      	b.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	61fb      	str	r3, [r7, #28]
          break;
 8004a20:	e06c      	b.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	0800d918 	.word	0x0800d918
 8004a2c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a30:	4ba5      	ldr	r3, [pc, #660]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3c:	d160      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a3e:	4ba2      	ldr	r3, [pc, #648]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d159      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a4c:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a56:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	fb03 f202 	mul.w	r2, r3, r2
 8004a60:	4b99      	ldr	r3, [pc, #612]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a72:	4b95      	ldr	r3, [pc, #596]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	0d5b      	lsrs	r3, r3, #21
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	61fb      	str	r3, [r7, #28]
          break;
 8004a88:	e03a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a8a:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a96:	d135      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004a98:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa4:	d12e      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004aa6:	4b88      	ldr	r3, [pc, #544]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	fb03 f202 	mul.w	r2, r3, r2
 8004aba:	4b83      	ldr	r3, [pc, #524]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004acc:	4b7e      	ldr	r3, [pc, #504]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	0d5b      	lsrs	r3, r3, #21
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	61fb      	str	r3, [r7, #28]
          break;
 8004ae2:	e00f      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004ae4:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d10a      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004af4:	61fb      	str	r3, [r7, #28]
          break;
 8004af6:	e007      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004af8:	bf00      	nop
 8004afa:	e3e2      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004afc:	bf00      	nop
 8004afe:	e3e0      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004b00:	bf00      	nop
 8004b02:	e3de      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004b04:	bf00      	nop
 8004b06:	e3dc      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004b08:	bf00      	nop
      break;
 8004b0a:	e3da      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004b0c:	4b6e      	ldr	r3, [pc, #440]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d827      	bhi.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b3d 	.word	0x08004b3d
 8004b2c:	08004b45 	.word	0x08004b45
 8004b30:	08004b59 	.word	0x08004b59
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7ff f87c 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 8004b38:	61f8      	str	r0, [r7, #28]
          break;
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b3c:	f7fe ffca 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004b40:	61f8      	str	r0, [r7, #28]
          break;
 8004b42:	e019      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b44:	4b60      	ldr	r3, [pc, #384]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d10f      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b54:	61fb      	str	r3, [r7, #28]
          break;
 8004b56:	e00c      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b58:	4b5b      	ldr	r3, [pc, #364]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
          break;
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004b6e:	bf00      	nop
 8004b70:	e3a8      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b72:	bf00      	nop
 8004b74:	e3a6      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b76:	bf00      	nop
        break;
 8004b78:	e3a4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b7a:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f003 030c 	and.w	r3, r3, #12
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d83a      	bhi.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004c03 	.word	0x08004c03
 8004b9c:	08004c03 	.word	0x08004c03
 8004ba0:	08004c03 	.word	0x08004c03
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004c03 	.word	0x08004c03
 8004bac:	08004c03 	.word	0x08004c03
 8004bb0:	08004c03 	.word	0x08004c03
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004c03 	.word	0x08004c03
 8004bbc:	08004c03 	.word	0x08004c03
 8004bc0:	08004c03 	.word	0x08004c03
 8004bc4:	08004bed 	.word	0x08004bed
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f7ff f81c 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	61f8      	str	r0, [r7, #28]
          break;
 8004bce:	e01d      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bd0:	f7fe ff80 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004bd4:	61f8      	str	r0, [r7, #28]
          break;
 8004bd6:	e019      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d10f      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004be6:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004be8:	61fb      	str	r3, [r7, #28]
          break;
 8004bea:	e00c      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfe:	61fb      	str	r3, [r7, #28]
          break;
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004c02:	bf00      	nop
 8004c04:	e35e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c06:	bf00      	nop
 8004c08:	e35c      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c0a:	bf00      	nop
        break;
 8004c0c:	e35a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d021      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b30      	cmp	r3, #48	; 0x30
 8004c24:	d829      	bhi.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d011      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d823      	bhi.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d004      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004c3e:	e01c      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe ffe0 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
          break;
 8004c46:	e01d      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c48:	f7fe ff44 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004c4c:	61f8      	str	r0, [r7, #28]
          break;
 8004c4e:	e019      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c60:	61fb      	str	r3, [r7, #28]
          break;
 8004c62:	e00c      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d107      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c76:	61fb      	str	r3, [r7, #28]
          break;
 8004c78:	e003      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004c7a:	bf00      	nop
 8004c7c:	e322      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c7e:	bf00      	nop
 8004c80:	e320      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004c82:	bf00      	nop
        break;
 8004c84:	e31e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2bc0      	cmp	r3, #192	; 0xc0
 8004c96:	d027      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c9c:	d82f      	bhi.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b80      	cmp	r3, #128	; 0x80
 8004ca2:	d017      	beq.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d829      	bhi.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d004      	beq.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004cb6:	e022      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fe ffa4 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	61f8      	str	r0, [r7, #28]
          break;
 8004cbe:	e023      	b.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cc0:	f7fe ff08 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004cc4:	61f8      	str	r0, [r7, #28]
          break;
 8004cc6:	e01f      	b.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	02dc6c00 	.word	0x02dc6c00
 8004cd0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cd4:	4b9b      	ldr	r3, [pc, #620]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce0:	d10f      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004ce2:	4b99      	ldr	r3, [pc, #612]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ce4:	61fb      	str	r3, [r7, #28]
          break;
 8004ce6:	e00c      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ce8:	4b96      	ldr	r3, [pc, #600]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	61fb      	str	r3, [r7, #28]
          break;
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004cfe:	bf00      	nop
 8004d00:	e2e0      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d02:	bf00      	nop
 8004d04:	e2de      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d06:	bf00      	nop
        break;
 8004d08:	e2dc      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004d0a:	4b8e      	ldr	r3, [pc, #568]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1c:	d025      	beq.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d24:	d82c      	bhi.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d013      	beq.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d824      	bhi.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d42:	d004      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004d44:	e01c      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d46:	f7fe ff5d 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004d4a:	61f8      	str	r0, [r7, #28]
          break;
 8004d4c:	e01d      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe fec1 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004d52:	61f8      	str	r0, [r7, #28]
          break;
 8004d54:	e019      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d56:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d10f      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004d64:	4b78      	ldr	r3, [pc, #480]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004d66:	61fb      	str	r3, [r7, #28]
          break;
 8004d68:	e00c      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d6a:	4b76      	ldr	r3, [pc, #472]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d107      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7c:	61fb      	str	r3, [r7, #28]
          break;
 8004d7e:	e003      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004d80:	bf00      	nop
 8004d82:	e29f      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d84:	bf00      	nop
 8004d86:	e29d      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d88:	bf00      	nop
        break;
 8004d8a:	e29b      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d8c:	4b6d      	ldr	r3, [pc, #436]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d9e:	d025      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da6:	d82c      	bhi.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db6:	d824      	bhi.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc4:	d004      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004dc6:	e01c      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fe ff1c 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
          break;
 8004dce:	e01d      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dd0:	f7fe fe80 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004dd4:	61f8      	str	r0, [r7, #28]
          break;
 8004dd6:	e019      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de4:	d10f      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004de6:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004de8:	61fb      	str	r3, [r7, #28]
          break;
 8004dea:	e00c      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dec:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d107      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	61fb      	str	r3, [r7, #28]
          break;
 8004e00:	e003      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8004e02:	bf00      	nop
 8004e04:	e25e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e06:	bf00      	nop
 8004e08:	e25c      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e0a:	bf00      	nop
        break;
 8004e0c:	e25a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004e0e:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e20:	d007      	beq.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e28:	d12f      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe fe53 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004e2e:	61f8      	str	r0, [r7, #28]
          break;
 8004e30:	e02e      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004e32:	4b44      	ldr	r3, [pc, #272]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3e:	d126      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004e40:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e4c:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e56:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	fb03 f202 	mul.w	r2, r3, r2
 8004e60:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004e72:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	0e5b      	lsrs	r3, r3, #25
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61fb      	str	r3, [r7, #28]
          break;
 8004e88:	e001      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8004e8a:	bf00      	nop
 8004e8c:	e21a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e8e:	bf00      	nop
        break;
 8004e90:	e218      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fec4 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	61f8      	str	r0, [r7, #28]
        break;
 8004eaa:	e20b      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8004eac:	f7fe fe12 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004eb0:	61f8      	str	r0, [r7, #28]
        break;
 8004eb2:	e207      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004eb4:	4b23      	ldr	r3, [pc, #140]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eba:	f003 0318 	and.w	r3, r3, #24
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d834      	bhi.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d024      	beq.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8004ed8:	e02d      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ee0:	f000 fbe2 	bl	80056a8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004ee4:	61f8      	str	r0, [r7, #28]
          break;
 8004ee6:	e02b      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d122      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	e005      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	61fb      	str	r3, [r7, #28]
          break;
 8004f20:	e00b      	b.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004f32:	61fb      	str	r3, [r7, #28]
          break;
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8004f36:	bf00      	nop
 8004f38:	e1c4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f3a:	bf00      	nop
 8004f3c:	e1c2      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f3e:	bf00      	nop
        break;
 8004f40:	e1c0      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	0800d918 	.word	0x0800d918
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f50:	4b96      	ldr	r3, [pc, #600]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d013      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	d819      	bhi.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d004      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8004f7a:	e011      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fe42 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004f80:	61f8      	str	r0, [r7, #28]
          break;
 8004f82:	e010      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f84:	f7fe fda6 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004f88:	61f8      	str	r0, [r7, #28]
          break;
 8004f8a:	e00c      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f8c:	4b87      	ldr	r3, [pc, #540]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d104      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004f9c:	61fb      	str	r3, [r7, #28]
          break;
 8004f9e:	e001      	b.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8004fa0:	bf00      	nop
 8004fa2:	e18f      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004fa4:	bf00      	nop
        break;
 8004fa6:	e18d      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004fa8:	4b80      	ldr	r3, [pc, #512]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d013      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	d819      	bhi.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd0:	d004      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8004fd2:	e011      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fe16 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
          break;
 8004fda:	e010      	b.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fdc:	f7fe fd7a 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8004fe0:	61f8      	str	r0, [r7, #28]
          break;
 8004fe2:	e00c      	b.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fe4:	4b71      	ldr	r3, [pc, #452]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d104      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8004ff2:	4b6f      	ldr	r3, [pc, #444]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8004ff4:	61fb      	str	r3, [r7, #28]
          break;
 8004ff6:	e001      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8004ff8:	bf00      	nop
 8004ffa:	e163      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004ffc:	bf00      	nop
        break;
 8004ffe:	e161      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005012:	d013      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d819      	bhi.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800502a:	e011      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fdea 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8005030:	61f8      	str	r0, [r7, #28]
          break;
 8005032:	e010      	b.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005034:	f7fe fd4e 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8005038:	61f8      	str	r0, [r7, #28]
          break;
 800503a:	e00c      	b.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800503c:	4b5b      	ldr	r3, [pc, #364]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005048:	d104      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800504a:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800504c:	61fb      	str	r3, [r7, #28]
          break;
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005050:	bf00      	nop
 8005052:	e137      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005054:	bf00      	nop
        break;
 8005056:	e135      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005058:	4b54      	ldr	r3, [pc, #336]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800505a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d011      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d818      	bhi.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d004      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800507c:	e011      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800507e:	f7fe fdc1 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8005082:	61f8      	str	r0, [r7, #28]
          break;
 8005084:	e010      	b.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe fd25 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800508a:	61f8      	str	r0, [r7, #28]
          break;
 800508c:	e00c      	b.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509a:	d104      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800509c:	4b44      	ldr	r3, [pc, #272]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800509e:	61fb      	str	r3, [r7, #28]
          break;
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80050a2:	bf00      	nop
 80050a4:	e10e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050a6:	bf00      	nop
        break;
 80050a8:	e10c      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80050aa:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050bc:	d02c      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050c4:	d833      	bhi.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050cc:	d01a      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050d4:	d82b      	bhi.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e2:	d004      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80050e4:	e023      	b.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7fe fd8d 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 80050ea:	61f8      	str	r0, [r7, #28]
          break;
 80050ec:	e026      	b.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80050f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d11a      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80050fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005100:	61fb      	str	r3, [r7, #28]
          break;
 8005102:	e016      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005104:	4b29      	ldr	r3, [pc, #164]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	d111      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005114:	61fb      	str	r3, [r7, #28]
          break;
 8005116:	e00e      	b.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d109      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	61fb      	str	r3, [r7, #28]
          break;
 800512c:	e005      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800512e:	bf00      	nop
 8005130:	e0c8      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005132:	bf00      	nop
 8005134:	e0c6      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005136:	bf00      	nop
 8005138:	e0c4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800513a:	bf00      	nop
        break;
 800513c:	e0c2      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005150:	d030      	beq.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005158:	d837      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005160:	d01a      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005168:	d82f      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d004      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005178:	e027      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800517a:	f7fe fd43 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 800517e:	61f8      	str	r0, [r7, #28]
          break;
 8005180:	e02a      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d11e      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005190:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005194:	61fb      	str	r3, [r7, #28]
          break;
 8005196:	e01a      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d115      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80051a6:	4b02      	ldr	r3, [pc, #8]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80051a8:	61fb      	str	r3, [r7, #28]
          break;
 80051aa:	e012      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051b4:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d109      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	61fb      	str	r3, [r7, #28]
          break;
 80051c8:	e005      	b.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80051ca:	bf00      	nop
 80051cc:	e07a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051ce:	bf00      	nop
 80051d0:	e078      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051d2:	bf00      	nop
 80051d4:	e076      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051d6:	bf00      	nop
        break;
 80051d8:	e074      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80051da:	4b3d      	ldr	r3, [pc, #244]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80051dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ec:	d02c      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f4:	d855      	bhi.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d004      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005204:	e04d      	b.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe fc65 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800520a:	61f8      	str	r0, [r7, #28]
          break;
 800520c:	e04e      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800520e:	4b30      	ldr	r3, [pc, #192]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d145      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800521a:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005226:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	e005      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005232:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005238:	0a1b      	lsrs	r3, r3, #8
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005244:	61fb      	str	r3, [r7, #28]
          break;
 8005246:	e02e      	b.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005254:	d129      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005262:	d122      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	fb03 f202 	mul.w	r2, r3, r2
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	3301      	adds	r3, #1
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	0d5b      	lsrs	r3, r3, #21
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	61fb      	str	r3, [r7, #28]
          break;
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80052a2:	bf00      	nop
 80052a4:	e00e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052a6:	bf00      	nop
 80052a8:	e00c      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052aa:	bf00      	nop
        break;
 80052ac:	e00a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052ae:	bf00      	nop
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052b2:	bf00      	nop
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052b6:	bf00      	nop
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80052c2:	bf00      	nop
    }
  }

  return(frequency);
 80052c4:	69fb      	ldr	r3, [r7, #28]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800d918 	.word	0x0800d918

080052d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e6:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f2:	4b6f      	ldr	r3, [pc, #444]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
       ||
 8005306:	2b00      	cmp	r3, #0
 8005308:	d142      	bne.n	8005390 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e03f      	b.n	8005390 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d018      	beq.n	800534a <RCCEx_PLLSAI1_Config+0x72>
 8005318:	2b03      	cmp	r3, #3
 800531a:	d825      	bhi.n	8005368 <RCCEx_PLLSAI1_Config+0x90>
 800531c:	2b01      	cmp	r3, #1
 800531e:	d002      	beq.n	8005326 <RCCEx_PLLSAI1_Config+0x4e>
 8005320:	2b02      	cmp	r3, #2
 8005322:	d009      	beq.n	8005338 <RCCEx_PLLSAI1_Config+0x60>
 8005324:	e020      	b.n	8005368 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005326:	4b62      	ldr	r3, [pc, #392]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11d      	bne.n	800536e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005336:	e01a      	b.n	800536e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005338:	4b5d      	ldr	r3, [pc, #372]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d116      	bne.n	8005372 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005348:	e013      	b.n	8005372 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800534a:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005356:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005366:	e006      	b.n	8005376 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e004      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005376:	bf00      	nop
    }

    if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800537e:	4b4c      	ldr	r3, [pc, #304]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 0203 	bic.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4949      	ldr	r1, [pc, #292]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 8086 	bne.w	80054a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005398:	4b45      	ldr	r3, [pc, #276]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a44      	ldr	r2, [pc, #272]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a4:	f7fb ff6a 	bl	800127c <HAL_GetTick>
 80053a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053aa:	e009      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ac:	f7fb ff66 	bl	800127c <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d902      	bls.n	80053c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	73fb      	strb	r3, [r7, #15]
        break;
 80053be:	e005      	b.n	80053cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1ef      	bne.n	80053ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d168      	bne.n	80054a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d113      	bne.n	8005400 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d8:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	0211      	lsls	r1, r2, #8
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	06d2      	lsls	r2, r2, #27
 80053ec:	4311      	orrs	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6852      	ldr	r2, [r2, #4]
 80053f2:	3a01      	subs	r2, #1
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	430a      	orrs	r2, r1
 80053f8:	492d      	ldr	r1, [pc, #180]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
 80053fe:	e02d      	b.n	800545c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d115      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005406:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6892      	ldr	r2, [r2, #8]
 8005412:	0211      	lsls	r1, r2, #8
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6912      	ldr	r2, [r2, #16]
 8005418:	0852      	lsrs	r2, r2, #1
 800541a:	3a01      	subs	r2, #1
 800541c:	0552      	lsls	r2, r2, #21
 800541e:	4311      	orrs	r1, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6852      	ldr	r2, [r2, #4]
 8005424:	3a01      	subs	r2, #1
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	430a      	orrs	r2, r1
 800542a:	4921      	ldr	r1, [pc, #132]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
 8005430:	e014      	b.n	800545c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005432:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	0211      	lsls	r1, r2, #8
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6952      	ldr	r2, [r2, #20]
 8005444:	0852      	lsrs	r2, r2, #1
 8005446:	3a01      	subs	r2, #1
 8005448:	0652      	lsls	r2, r2, #25
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6852      	ldr	r2, [r2, #4]
 8005450:	3a01      	subs	r2, #1
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	4916      	ldr	r1, [pc, #88]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005458:	4313      	orrs	r3, r2
 800545a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005466:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fb ff08 	bl	800127c <HAL_GetTick>
 800546c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800546e:	e009      	b.n	8005484 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005470:	f7fb ff04 	bl	800127c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d902      	bls.n	8005484 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	73fb      	strb	r3, [r7, #15]
          break;
 8005482:	e005      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ef      	beq.n	8005470 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005496:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	4904      	ldr	r1, [pc, #16]	; (80054b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000
 80054b4:	07ff800f 	.word	0x07ff800f
 80054b8:	ff9f800f 	.word	0xff9f800f
 80054bc:	f9ff800f 	.word	0xf9ff800f

080054c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054da:	4b6f      	ldr	r3, [pc, #444]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
       ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d142      	bne.n	8005578 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e03f      	b.n	8005578 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d018      	beq.n	8005532 <RCCEx_PLLSAI2_Config+0x72>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d825      	bhi.n	8005550 <RCCEx_PLLSAI2_Config+0x90>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d002      	beq.n	800550e <RCCEx_PLLSAI2_Config+0x4e>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d009      	beq.n	8005520 <RCCEx_PLLSAI2_Config+0x60>
 800550c:	e020      	b.n	8005550 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550e:	4b62      	ldr	r3, [pc, #392]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e01a      	b.n	8005556 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005520:	4b5d      	ldr	r3, [pc, #372]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e013      	b.n	800555a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005532:	4b59      	ldr	r3, [pc, #356]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554e:	e006      	b.n	800555e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005566:	4b4c      	ldr	r3, [pc, #304]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4949      	ldr	r1, [pc, #292]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 8086 	bne.w	800568c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a44      	ldr	r2, [pc, #272]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fb fe76 	bl	800127c <HAL_GetTick>
 8005590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005592:	e009      	b.n	80055a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005594:	f7fb fe72 	bl	800127c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	73fb      	strb	r3, [r7, #15]
        break;
 80055a6:	e005      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055a8:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ef      	bne.n	8005594 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d168      	bne.n	800568c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d113      	bne.n	80055e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <RCCEx_PLLSAI2_Config+0x1dc>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	06d2      	lsls	r2, r2, #27
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	3a01      	subs	r2, #1
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	430a      	orrs	r2, r1
 80055e0:	492d      	ldr	r1, [pc, #180]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	614b      	str	r3, [r1, #20]
 80055e6:	e02d      	b.n	8005644 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d115      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6892      	ldr	r2, [r2, #8]
 80055fa:	0211      	lsls	r1, r2, #8
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6912      	ldr	r2, [r2, #16]
 8005600:	0852      	lsrs	r2, r2, #1
 8005602:	3a01      	subs	r2, #1
 8005604:	0552      	lsls	r2, r2, #21
 8005606:	4311      	orrs	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	3a01      	subs	r2, #1
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	430a      	orrs	r2, r1
 8005612:	4921      	ldr	r1, [pc, #132]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	614b      	str	r3, [r1, #20]
 8005618:	e014      	b.n	8005644 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6892      	ldr	r2, [r2, #8]
 8005626:	0211      	lsls	r1, r2, #8
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6952      	ldr	r2, [r2, #20]
 800562c:	0852      	lsrs	r2, r2, #1
 800562e:	3a01      	subs	r2, #1
 8005630:	0652      	lsls	r2, r2, #25
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	430a      	orrs	r2, r1
 800563e:	4916      	ldr	r1, [pc, #88]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fb fe14 	bl	800127c <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005658:	f7fb fe10 	bl	800127c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
          break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ef      	beq.n	8005658 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	4904      	ldr	r1, [pc, #16]	; (8005698 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005688:	4313      	orrs	r3, r2
 800568a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	07ff800f 	.word	0x07ff800f
 80056a0:	ff9f800f 	.word	0xff9f800f
 80056a4:	f9ff800f 	.word	0xf9ff800f

080056a8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c4:	d10b      	bne.n	80056de <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056c6:	4b7e      	ldr	r3, [pc, #504]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056cc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80056d0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d112      	bne.n	80056fe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056d8:	4b7a      	ldr	r3, [pc, #488]	; (80058c4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e00f      	b.n	80056fe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d10b      	bne.n	80056fe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056e6:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80056e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056f0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f8:	d101      	bne.n	80056fe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056fa:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80056fc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 80d6 	bne.w	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d003      	beq.n	8005718 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005716:	d13b      	bne.n	8005790 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005718:	4b69      	ldr	r3, [pc, #420]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005724:	f040 80c4 	bne.w	80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005728:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80bd 	beq.w	80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005736:	4b62      	ldr	r3, [pc, #392]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	3301      	adds	r3, #1
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005754:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005756:	4b5a      	ldr	r3, [pc, #360]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	0edb      	lsrs	r3, r3, #27
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005768:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005774:	2311      	movs	r3, #17
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e001      	b.n	800577e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800577a:	2307      	movs	r3, #7
 800577c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fb03 f202 	mul.w	r2, r3, r2
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800578e:	e08f      	b.n	80058b0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d13a      	bne.n	800580c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005796:	4b4a      	ldr	r3, [pc, #296]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a2:	f040 8086 	bne.w	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80057a6:	4b46      	ldr	r3, [pc, #280]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d07f      	beq.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	3301      	adds	r3, #1
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80057d2:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	0edb      	lsrs	r3, r3, #27
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057e4:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80057f0:	2311      	movs	r3, #17
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e001      	b.n	80057fa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80057f6:	2307      	movs	r3, #7
 80057f8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	fb03 f202 	mul.w	r2, r3, r2
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	e052      	b.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d003      	beq.n	800581a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005818:	d109      	bne.n	800582e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800581a:	4b29      	ldr	r3, [pc, #164]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	d144      	bne.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800582a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800582c:	e041      	b.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b20      	cmp	r3, #32
 8005832:	d003      	beq.n	800583c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583a:	d13a      	bne.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d133      	bne.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02d      	beq.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	3301      	adds	r3, #1
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005874:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	0edb      	lsrs	r3, r3, #27
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005894:	2311      	movs	r3, #17
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e001      	b.n	800589e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800589a:	2307      	movs	r3, #7
 800589c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	fb03 f202 	mul.w	r2, r3, r2
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e000      	b.n	80058b2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80058b0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80058b2:	69fb      	ldr	r3, [r7, #28]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3724      	adds	r7, #36	; 0x24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40021000 	.word	0x40021000
 80058c4:	001fff68 	.word	0x001fff68
 80058c8:	00f42400 	.word	0x00f42400

080058cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e078      	b.n	80059d0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fb fa49 	bl	8000d88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2203      	movs	r2, #3
 80058fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f86a 	bl	80059d8 <HAL_SD_InitCard>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e060      	b.n	80059d0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fdcd 	bl	80064b4 <HAL_SD_GetCardStatus>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e055      	b.n	80059d0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005924:	7e3b      	ldrb	r3, [r7, #24]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800592a:	7e7b      	ldrb	r3, [r7, #25]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10a      	bne.n	800594e <HAL_SD_Init+0x82>
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <HAL_SD_Init+0x78>
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594a:	65da      	str	r2, [r3, #92]	; 0x5c
 800594c:	e00b      	b.n	8005966 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d104      	bne.n	8005960 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595c:	65da      	str	r2, [r3, #92]	; 0x5c
 800595e:	e002      	b.n	8005966 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe83 	bl	8006678 <HAL_SD_ConfigWideBusOperation>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e029      	b.n	80059d0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800597c:	f7fb fc7e 	bl	800127c <HAL_GetTick>
 8005980:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005982:	e014      	b.n	80059ae <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005984:	f7fb fc7a 	bl	800127c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005992:	d10c      	bne.n	80059ae <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e010      	b.n	80059d0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 ff76 	bl	80068a0 <HAL_SD_GetCardState>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d1e4      	bne.n	8005984 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059d8:	b5b0      	push	{r4, r5, r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af04      	add	r7, sp, #16
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80059f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059f4:	f7fe fd4e 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e079      	b.n	8005b08 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	4a3d      	ldr	r2, [pc, #244]	; (8005b10 <HAL_SD_InitCard+0x138>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d107      	bne.n	8005a40 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0210 	orr.w	r2, r2, #16
 8005a3e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681d      	ldr	r5, [r3, #0]
 8005a44:	466c      	mov	r4, sp
 8005a46:	f107 0314 	add.w	r3, r7, #20
 8005a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f003 f91d 	bl	8008c98 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f003 f960 	bl	8008d28 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <HAL_SD_InitCard+0x13c>)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb fc08 	bl	8001294 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 ffeb 	bl	8006a60 <SD_PowerON>
 8005a8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02e      	b.n	8005b08 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 ff18 	bl	80068e0 <SD_InitCard>
 8005ab0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e01b      	b.n	8005b08 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f003 f9bb 	bl	8008e54 <SDMMC_CmdBlockLength>
 8005ade:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <HAL_SD_InitCard+0x140>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3728      	adds	r7, #40	; 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b10:	014f8b59 	.word	0x014f8b59
 8005b14:	00012110 	.word	0x00012110
 8005b18:	1fe00fff 	.word	0x1fe00fff

08005b1c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b092      	sub	sp, #72	; 0x48
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b2a:	f7fb fba7 	bl	800127c <HAL_GetTick>
 8005b2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e170      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	f040 8163 	bne.w	8005e22 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	441a      	add	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d907      	bls.n	8005b80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e157      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d002      	beq.n	8005b9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	025b      	lsls	r3, r3, #9
 8005b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005baa:	2390      	movs	r3, #144	; 0x90
 8005bac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f107 0214 	add.w	r2, r7, #20
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f003 f919 	bl	8008dfc <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d90a      	bls.n	8005bf6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2202      	movs	r2, #2
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bec:	4618      	mov	r0, r3
 8005bee:	f003 f977 	bl	8008ee0 <SDMMC_CmdReadMultiBlock>
 8005bf2:	6478      	str	r0, [r7, #68]	; 0x44
 8005bf4:	e009      	b.n	8005c0a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c02:	4618      	mov	r0, r3
 8005c04:	f003 f949 	bl	8008e9a <SDMMC_CmdReadSingleBlock>
 8005c08:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a88      	ldr	r2, [pc, #544]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0fc      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c3a:	e061      	b.n	8005d00 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03c      	beq.n	8005cc4 <HAL_SD_ReadBlocks+0x1a8>
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d039      	beq.n	8005cc4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	643b      	str	r3, [r7, #64]	; 0x40
 8005c54:	e033      	b.n	8005cbe <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 f846 	bl	8008cec <SDMMC_ReadFIFO>
 8005c60:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	3b01      	subs	r3, #1
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	3301      	adds	r3, #1
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	3301      	adds	r3, #1
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	3301      	adds	r3, #1
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	3301      	adds	r3, #1
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc0:	2b07      	cmp	r3, #7
 8005cc2:	d9c8      	bls.n	8005c56 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cc4:	f7fb fada 	bl	800127c <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d902      	bls.n	8005cda <HAL_SD_ReadBlocks+0x1be>
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d112      	bne.n	8005d00 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a56      	ldr	r2, [pc, #344]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e097      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d096      	beq.n	8005c3c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d022      	beq.n	8005d72 <HAL_SD_ReadBlocks+0x256>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d91f      	bls.n	8005d72 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d01b      	beq.n	8005d72 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f003 f938 	bl	8008fb4 <SDMMC_CmdStopTransfer>
 8005d44:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d012      	beq.n	8005d72 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a39      	ldr	r2, [pc, #228]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e05e      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	f043 0208 	orr.w	r2, r3, #8
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e044      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e02a      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a12      	ldr	r2, [pc, #72]	; (8005e38 <HAL_SD_ReadBlocks+0x31c>)
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e010      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <HAL_SD_ReadBlocks+0x320>)
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e006      	b.n	8005e30 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3748      	adds	r7, #72	; 0x48
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	1fe00fff 	.word	0x1fe00fff
 8005e3c:	18000f3a 	.word	0x18000f3a

08005e40 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b092      	sub	sp, #72	; 0x48
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e4e:	f7fb fa15 	bl	800127c <HAL_GetTick>
 8005e52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e174      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f040 8167 	bne.w	800614e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d907      	bls.n	8005ea4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e15b      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d002      	beq.n	8005ec2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	025b      	lsls	r3, r3, #9
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ec6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	025b      	lsls	r3, r3, #9
 8005ecc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ece:	2390      	movs	r3, #144	; 0x90
 8005ed0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f107 0218 	add.w	r2, r7, #24
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f002 ff87 	bl	8008dfc <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005efc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d90a      	bls.n	8005f1a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f10:	4618      	mov	r0, r3
 8005f12:	f003 f82b 	bl	8008f6c <SDMMC_CmdWriteMultiBlock>
 8005f16:	6478      	str	r0, [r7, #68]	; 0x44
 8005f18:	e009      	b.n	8005f2e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f26:	4618      	mov	r0, r3
 8005f28:	f002 fffd 	bl	8008f26 <SDMMC_CmdWriteSingleBlock>
 8005f2c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d012      	beq.n	8005f5a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a8a      	ldr	r2, [pc, #552]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e100      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f5e:	e065      	b.n	800602c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d040      	beq.n	8005ff0 <HAL_SD_WriteBlocks+0x1b0>
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d03d      	beq.n	8005ff0 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
 8005f78:	e037      	b.n	8005fea <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	3301      	adds	r3, #1
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	021a      	lsls	r2, r3, #8
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	041a      	lsls	r2, r3, #16
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	061a      	lsls	r2, r3, #24
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	3301      	adds	r3, #1
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f107 0214 	add.w	r2, r7, #20
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f002 fe91 	bl	8008d06 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	d9c4      	bls.n	8005f7a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005ff0:	f7fb f944 	bl	800127c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d902      	bls.n	8006006 <HAL_SD_WriteBlocks+0x1c6>
 8006000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d112      	bne.n	800602c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a56      	ldr	r2, [pc, #344]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006014:	431a      	orrs	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e097      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006036:	2b00      	cmp	r3, #0
 8006038:	d092      	beq.n	8005f60 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d022      	beq.n	800609e <HAL_SD_WriteBlocks+0x25e>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d91f      	bls.n	800609e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	2b03      	cmp	r3, #3
 8006064:	d01b      	beq.n	800609e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f002 ffa2 	bl	8008fb4 <SDMMC_CmdStopTransfer>
 8006070:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006074:	2b00      	cmp	r3, #0
 8006076:	d012      	beq.n	800609e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a39      	ldr	r2, [pc, #228]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006086:	431a      	orrs	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e05e      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f043 0208 	orr.w	r2, r3, #8
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e044      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d012      	beq.n	8006106 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	f043 0202 	orr.w	r2, r3, #2
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e02a      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <HAL_SD_WriteBlocks+0x324>)
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	f043 0210 	orr.w	r2, r3, #16
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e010      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <HAL_SD_WriteBlocks+0x328>)
 8006140:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e006      	b.n	800615c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3748      	adds	r7, #72	; 0x48
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	1fe00fff 	.word	0x1fe00fff
 8006168:	18000f3a 	.word	0x18000f3a

0800616c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617a:	0f9b      	lsrs	r3, r3, #30
 800617c:	b2da      	uxtb	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006186:	0e9b      	lsrs	r3, r3, #26
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061cc:	0d1b      	lsrs	r3, r3, #20
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ea:	0bdb      	lsrs	r3, r3, #15
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	0b9b      	lsrs	r3, r3, #14
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	0b5b      	lsrs	r3, r3, #13
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006220:	0b1b      	lsrs	r3, r3, #12
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d163      	bne.n	8006304 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	009a      	lsls	r2, r3, #2
 8006242:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006246:	4013      	ands	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800624c:	0f92      	lsrs	r2, r2, #30
 800624e:	431a      	orrs	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006258:	0edb      	lsrs	r3, r3, #27
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	b2da      	uxtb	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	b2da      	uxtb	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627c:	0d5b      	lsrs	r3, r3, #21
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	b2da      	uxtb	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800628e:	0c9b      	lsrs	r3, r3, #18
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	b2da      	uxtb	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a0:	0bdb      	lsrs	r3, r3, #15
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	7e1b      	ldrb	r3, [r3, #24]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	3302      	adds	r3, #2
 80062c4:	2201      	movs	r2, #1
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062ce:	fb03 f202 	mul.w	r2, r3, r2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	7a1b      	ldrb	r3, [r3, #8]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062f0:	0a52      	lsrs	r2, r2, #9
 80062f2:	fb03 f202 	mul.w	r2, r3, r2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	659a      	str	r2, [r3, #88]	; 0x58
 8006302:	e031      	b.n	8006368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11d      	bne.n	8006348 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	431a      	orrs	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	3301      	adds	r3, #1
 8006328:	029a      	lsls	r2, r3, #10
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	659a      	str	r2, [r3, #88]	; 0x58
 8006346:	e00f      	b.n	8006368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a58      	ldr	r2, [pc, #352]	; (80064b0 <HAL_SD_GetCardCSD+0x344>)
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e09d      	b.n	80064a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	0b9b      	lsrs	r3, r3, #14
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637e:	09db      	lsrs	r3, r3, #7
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006396:	b2da      	uxtb	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	0fdb      	lsrs	r3, r3, #31
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ac:	0f5b      	lsrs	r3, r3, #29
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063be:	0e9b      	lsrs	r3, r3, #26
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d0:	0d9b      	lsrs	r3, r3, #22
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	0d5b      	lsrs	r3, r3, #21
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006412:	0bdb      	lsrs	r3, r3, #15
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006426:	0b9b      	lsrs	r3, r3, #14
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643a:	0b5b      	lsrs	r3, r3, #13
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644e:	0b1b      	lsrs	r3, r3, #12
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	1fe00fff 	.word	0x1fe00fff

080064b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b094      	sub	sp, #80	; 0x50
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80064c4:	f107 0308 	add.w	r3, r7, #8
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fbd4 	bl	8006c78 <SD_SendSDStatus>
 80064d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80064d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a4f      	ldr	r2, [pc, #316]	; (800661c <HAL_SD_GetCardStatus+0x168>)
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80064fa:	e070      	b.n	80065de <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b29b      	uxth	r3, r3
 8006522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006526:	b29a      	uxth	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	0e1b      	lsrs	r3, r3, #24
 800652c:	b29b      	uxth	r3, r3
 800652e:	4313      	orrs	r3, r2
 8006530:	b29a      	uxth	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	061a      	lsls	r2, r3, #24
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006542:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800654c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	0e1b      	lsrs	r3, r3, #24
 8006552:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b2da      	uxtb	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	0d1b      	lsrs	r3, r3, #20
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006584:	b29a      	uxth	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	b29b      	uxth	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b29a      	uxth	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	0a9b      	lsrs	r3, r3, #10
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	0e1b      	lsrs	r3, r3, #24
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065e6:	4618      	mov	r0, r3
 80065e8:	f002 fc34 	bl	8008e54 <SDMMC_CmdBlockLength>
 80065ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <HAL_SD_GetCardStatus+0x168>)
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006614:	4618      	mov	r0, r3
 8006616:	3750      	adds	r7, #80	; 0x50
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	1fe00fff 	.word	0x1fe00fff

08006620 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006678:	b5b0      	push	{r4, r5, r7, lr}
 800667a:	b090      	sub	sp, #64	; 0x40
 800667c:	af04      	add	r7, sp, #16
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2203      	movs	r2, #3
 800668c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	2b03      	cmp	r3, #3
 8006696:	d02e      	beq.n	80066f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669e:	d106      	bne.n	80066ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
 80066ac:	e029      	b.n	8006702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b4:	d10a      	bne.n	80066cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fbd6 	bl	8006e68 <SD_WideBus_Enable>
 80066bc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
 80066ca:	e01a      	b.n	8006702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc13 	bl	8006efe <SD_WideBus_Disable>
 80066d8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
 80066e6:	e00c      	b.n	8006702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
 80066f4:	e005      	b.n	8006702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a60      	ldr	r2, [pc, #384]	; (8006890 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006718:	e097      	b.n	800684a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800671a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800671e:	f7fd feb9 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 8006722:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8086 	beq.w	8006838 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	4952      	ldr	r1, [pc, #328]	; (8006894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800674a:	fba1 1303 	umull	r1, r3, r1, r3
 800674e:	0e1b      	lsrs	r3, r3, #24
 8006750:	429a      	cmp	r2, r3
 8006752:	d303      	bcc.n	800675c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e05a      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d103      	bne.n	800676e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e051      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d126      	bne.n	80067c6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10e      	bne.n	800679e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	4a45      	ldr	r2, [pc, #276]	; (8006898 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d906      	bls.n	8006796 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	4a42      	ldr	r2, [pc, #264]	; (8006894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	0e5b      	lsrs	r3, r3, #25
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e03d      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e039      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	4a3b      	ldr	r2, [pc, #236]	; (8006898 <HAL_SD_ConfigWideBusOperation+0x220>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d906      	bls.n	80067be <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	4a38      	ldr	r2, [pc, #224]	; (8006894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	0e5b      	lsrs	r3, r3, #25
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e029      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e025      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10e      	bne.n	80067ec <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	4a32      	ldr	r2, [pc, #200]	; (800689c <HAL_SD_ConfigWideBusOperation+0x224>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d906      	bls.n	80067e4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	0e1b      	lsrs	r3, r3, #24
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e016      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e012      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	4a28      	ldr	r2, [pc, #160]	; (800689c <HAL_SD_ConfigWideBusOperation+0x224>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d906      	bls.n	800680c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	4a24      	ldr	r2, [pc, #144]	; (8006894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	0e1b      	lsrs	r3, r3, #24
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e002      	b.n	8006812 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681d      	ldr	r5, [r3, #0]
 800681c:	466c      	mov	r4, sp
 800681e:	f107 0318 	add.w	r3, r7, #24
 8006822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006830:	4628      	mov	r0, r5
 8006832:	f002 fa31 	bl	8008c98 <SDMMC_Init>
 8006836:	e008      	b.n	800684a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006852:	4618      	mov	r0, r3
 8006854:	f002 fafe 	bl	8008e54 <SDMMC_CmdBlockLength>
 8006858:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00c      	beq.n	800687a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006886:	4618      	mov	r0, r3
 8006888:	3730      	adds	r7, #48	; 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bdb0      	pop	{r4, r5, r7, pc}
 800688e:	bf00      	nop
 8006890:	1fe00fff 	.word	0x1fe00fff
 8006894:	55e63b89 	.word	0x55e63b89
 8006898:	02faf080 	.word	0x02faf080
 800689c:	017d7840 	.word	0x017d7840

080068a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fab0 	bl	8006e18 <SD_SendStatus>
 80068b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	0a5b      	lsrs	r3, r3, #9
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068d6:	693b      	ldr	r3, [r7, #16]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068e0:	b5b0      	push	{r4, r5, r7, lr}
 80068e2:	b090      	sub	sp, #64	; 0x40
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068e8:	2301      	movs	r3, #1
 80068ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f002 fa2b 	bl	8008d4c <SDMMC_GetPowerState>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006900:	e0a9      	b.n	8006a56 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	2b03      	cmp	r3, #3
 8006908:	d02e      	beq.n	8006968 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f002 fc70 	bl	80091f4 <SDMMC_CmdSendCID>
 8006914:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <SD_InitCard+0x40>
    {
      return errorstate;
 800691c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691e:	e09a      	b.n	8006a56 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f002 fa55 	bl	8008dd6 <SDMMC_GetResponse>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2104      	movs	r1, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f002 fa4c 	bl	8008dd6 <SDMMC_GetResponse>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2108      	movs	r1, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f002 fa43 	bl	8008dd6 <SDMMC_GetResponse>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	210c      	movs	r1, #12
 800695c:	4618      	mov	r0, r3
 800695e:	f002 fa3a 	bl	8008dd6 <SDMMC_GetResponse>
 8006962:	4602      	mov	r2, r0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	2b03      	cmp	r3, #3
 800696e:	d00d      	beq.n	800698c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f107 020e 	add.w	r2, r7, #14
 8006978:	4611      	mov	r1, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f002 fc79 	bl	8009272 <SDMMC_CmdSetRelAdd>
 8006980:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <SD_InitCard+0xac>
    {
      return errorstate;
 8006988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698a:	e064      	b.n	8006a56 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	2b03      	cmp	r3, #3
 8006992:	d036      	beq.n	8006a02 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006994:	89fb      	ldrh	r3, [r7, #14]
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f002 fc42 	bl	8009232 <SDMMC_CmdSendCSD>
 80069ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <SD_InitCard+0xda>
    {
      return errorstate;
 80069b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b8:	e04d      	b.n	8006a56 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 fa08 	bl	8008dd6 <SDMMC_GetResponse>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2104      	movs	r1, #4
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 f9ff 	bl	8008dd6 <SDMMC_GetResponse>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2108      	movs	r1, #8
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 f9f6 	bl	8008dd6 <SDMMC_GetResponse>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	210c      	movs	r1, #12
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 f9ed 	bl	8008dd6 <SDMMC_GetResponse>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2104      	movs	r1, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f002 f9e4 	bl	8008dd6 <SDMMC_GetResponse>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	0d1a      	lsrs	r2, r3, #20
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a16:	f107 0310 	add.w	r3, r7, #16
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fba5 	bl	800616c <HAL_SD_GetCardCSD>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a2c:	e013      	b.n	8006a56 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	041b      	lsls	r3, r3, #16
 8006a38:	2200      	movs	r2, #0
 8006a3a:	461c      	mov	r4, r3
 8006a3c:	4615      	mov	r5, r2
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	4608      	mov	r0, r1
 8006a44:	f002 faec 	bl	8009020 <SDMMC_CmdSelDesel>
 8006a48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <SD_InitCard+0x174>
  {
    return errorstate;
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	e000      	b.n	8006a56 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3740      	adds	r7, #64	; 0x40
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006a74:	f7fa fc02 	bl	800127c <HAL_GetTick>
 8006a78:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f002 faf2 	bl	8009068 <SDMMC_CmdGoIdleState>
 8006a84:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <SD_PowerON+0x30>
  {
    return errorstate;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	e0ed      	b.n	8006c6c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fb05 	bl	80090a4 <SDMMC_CmdOperCond>
 8006a9a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 fadb 	bl	8009068 <SDMMC_CmdGoIdleState>
 8006ab2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <SD_PowerON+0x64>
    {
      return errorstate;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	e0d6      	b.n	8006c6c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d137      	bne.n	8006b3c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 fb06 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006ad8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02d      	beq.n	8006b3c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ae4:	e0c2      	b.n	8006c6c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f002 faf9 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006af2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <SD_PowerON+0x9e>
    {
      return errorstate;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	e0b6      	b.n	8006c6c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	495c      	ldr	r1, [pc, #368]	; (8006c74 <SD_PowerON+0x214>)
 8006b04:	4618      	mov	r0, r3
 8006b06:	f002 fb10 	bl	800912a <SDMMC_CmdAppOperCommand>
 8006b0a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b16:	e0a9      	b.n	8006c6c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 f959 	bl	8008dd6 <SDMMC_GetResponse>
 8006b24:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	0fdb      	lsrs	r3, r3, #31
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <SD_PowerON+0xd2>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <SD_PowerON+0xd4>
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]

    count++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d802      	bhi.n	8006b4c <SD_PowerON+0xec>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0cc      	beq.n	8006ae6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d902      	bls.n	8006b5c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b5a:	e087      	b.n	8006c6c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d07e      	beq.n	8006c64 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d17a      	bne.n	8006c6a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d075      	beq.n	8006c6a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b84:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0208 	orr.w	r2, r2, #8
 8006b94:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f002 fbd0 	bl	8009340 <SDMMC_CmdVoltageSwitch>
 8006ba0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00c      	beq.n	8006bc2 <SD_PowerON+0x162>
        {
          return errorstate;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	e05f      	b.n	8006c6c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bac:	f7fa fb66 	bl	800127c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bba:	d102      	bne.n	8006bc2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc0:	e054      	b.n	8006c6c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd0:	d1ec      	bne.n	8006bac <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bea:	d002      	beq.n	8006bf2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bf0:	e03c      	b.n	8006c6c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f000 fa9e 	bl	8007134 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0204 	orr.w	r2, r2, #4
 8006c06:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006c08:	e00a      	b.n	8006c20 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c0a:	f7fa fb37 	bl	800127c <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c18:	d102      	bne.n	8006c20 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006c1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c1e:	e025      	b.n	8006c6c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c2e:	d1ec      	bne.n	8006c0a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c48:	d102      	bne.n	8006c50 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c4e:	e00d      	b.n	8006c6c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2213      	movs	r2, #19
 8006c56:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
 8006c62:	e002      	b.n	8006c6a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	c1100000 	.word	0xc1100000

08006c78 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	; 0x30
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c82:	f7fa fafb 	bl	800127c <HAL_GetTick>
 8006c86:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f002 f89f 	bl	8008dd6 <SDMMC_GetResponse>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca2:	d102      	bne.n	8006caa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ca8:	e0b0      	b.n	8006e0c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2140      	movs	r1, #64	; 0x40
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f002 f8cf 	bl	8008e54 <SDMMC_CmdBlockLength>
 8006cb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	e0a0      	b.n	8006e0c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f002 fa04 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006cdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	e08d      	b.n	8006e0c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006cfa:	2360      	movs	r3, #96	; 0x60
 8006cfc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d06:	2301      	movs	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f107 0208 	add.w	r2, r7, #8
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f002 f871 	bl	8008dfc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f002 faec 	bl	80092fc <SDMMC_CmdStatusRegister>
 8006d24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02b      	beq.n	8006d84 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	e069      	b.n	8006e0c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4a:	e00d      	b.n	8006d68 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 ffcb 	bl	8008cec <SDMMC_ReadFIFO>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	601a      	str	r2, [r3, #0]
        pData++;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	3304      	adds	r3, #4
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	3301      	adds	r3, #1
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	2b07      	cmp	r3, #7
 8006d6c:	d9ee      	bls.n	8006d4c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d6e:	f7fa fa85 	bl	800127c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7c:	d102      	bne.n	8006d84 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d82:	e043      	b.n	8006e0c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0d2      	beq.n	8006d38 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006da0:	2308      	movs	r3, #8
 8006da2:	e033      	b.n	8006e0c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	e02a      	b.n	8006e0c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	e021      	b.n	8006e0c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 ff8d 	bl	8008cec <SDMMC_ReadFIFO>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	601a      	str	r2, [r3, #0]
    pData++;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	3304      	adds	r3, #4
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006dde:	f7fa fa4d 	bl	800127c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d102      	bne.n	8006df4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006df2:	e00b      	b.n	8006e0c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e2      	bne.n	8006dc8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a03      	ldr	r2, [pc, #12]	; (8006e14 <SD_SendSDStatus+0x19c>)
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3730      	adds	r7, #48	; 0x30
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	18000f3a 	.word	0x18000f3a

08006e18 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e2c:	e018      	b.n	8006e60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f002 fa3b 	bl	80092b6 <SDMMC_CmdSendStatus>
 8006e40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	e009      	b.n	8006e60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 ffbf 	bl	8008dd6 <SDMMC_GetResponse>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 ffa9 	bl	8008dd6 <SDMMC_GetResponse>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e8e:	d102      	bne.n	8006e96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e94:	e02f      	b.n	8006ef6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f879 	bl	8006f94 <SD_FindSCR>
 8006ea2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	e023      	b.n	8006ef6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01c      	beq.n	8006ef2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f002 f90d 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006eca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	e00f      	b.n	8006ef6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 f944 	bl	800916a <SDMMC_CmdBusWidth>
 8006ee2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	e003      	b.n	8006ef6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e001      	b.n	8006ef6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ef2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 ff5e 	bl	8008dd6 <SDMMC_GetResponse>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f24:	d102      	bne.n	8006f2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f2a:	e02f      	b.n	8006f8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f82e 	bl	8006f94 <SD_FindSCR>
 8006f38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	e023      	b.n	8006f8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01c      	beq.n	8006f88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f002 f8c2 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006f60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	e00f      	b.n	8006f8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 f8f9 	bl	800916a <SDMMC_CmdBusWidth>
 8006f78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	e003      	b.n	8006f8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e001      	b.n	8006f8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	; 0x38
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f9e:	f7fa f96d 	bl	800127c <HAL_GetTick>
 8006fa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60bb      	str	r3, [r7, #8]
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2108      	movs	r1, #8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 ff4a 	bl	8008e54 <SDMMC_CmdBlockLength>
 8006fc0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	e0ad      	b.n	8007128 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f002 f883 	bl	80090e4 <SDMMC_CmdAppCommand>
 8006fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <SD_FindSCR+0x56>
  {
    return errorstate;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	e09e      	b.n	8007128 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006ff4:	2330      	movs	r3, #48	; 0x30
 8006ff6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007000:	2301      	movs	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f107 0210 	add.w	r2, r7, #16
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 fef4 	bl	8008dfc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f002 f8c9 	bl	80091b0 <SDMMC_CmdSendSCR>
 800701e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d027      	beq.n	8007076 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	e07e      	b.n	8007128 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d113      	bne.n	8007060 <SD_FindSCR+0xcc>
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	d110      	bne.n	8007060 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fe52 	bl	8008cec <SDMMC_ReadFIFO>
 8007048:	4603      	mov	r3, r0
 800704a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f001 fe4b 	bl	8008cec <SDMMC_ReadFIFO>
 8007056:	4603      	mov	r3, r0
 8007058:	60fb      	str	r3, [r7, #12]
      index++;
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	3301      	adds	r3, #1
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007060:	f7fa f90c 	bl	800127c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706e:	d102      	bne.n	8007076 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007074:	e058      	b.n	8007128 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0d1      	beq.n	800702a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2208      	movs	r2, #8
 800709a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800709c:	2308      	movs	r3, #8
 800709e:	e043      	b.n	8007128 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2202      	movs	r2, #2
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070b6:	2302      	movs	r3, #2
 80070b8:	e036      	b.n	8007128 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2220      	movs	r2, #32
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070d0:	2320      	movs	r3, #32
 80070d2:	e029      	b.n	8007128 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a15      	ldr	r2, [pc, #84]	; (8007130 <SD_FindSCR+0x19c>)
 80070da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	061a      	lsls	r2, r3, #24
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	0e1b      	lsrs	r3, r3, #24
 80070f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	601a      	str	r2, [r3, #0]
    scr++;
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	3304      	adds	r3, #4
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	061a      	lsls	r2, r3, #24
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007110:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800711a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	0e1b      	lsrs	r3, r3, #24
 8007120:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3738      	adds	r7, #56	; 0x38
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	18000f3a 	.word	0x18000f3a

08007134 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e095      	b.n	8007288 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d108      	bne.n	8007176 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716c:	d009      	beq.n	8007182 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	61da      	str	r2, [r3, #28]
 8007174:	e005      	b.n	8007182 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7f9 fe77 	bl	8000e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c2:	d902      	bls.n	80071ca <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e002      	b.n	80071d0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071d8:	d007      	beq.n	80071ea <HAL_SPI_Init+0xa0>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722c:	ea42 0103 	orr.w	r1, r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	0c1b      	lsrs	r3, r3, #16
 8007246:	f003 0204 	and.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007266:	ea42 0103 	orr.w	r1, r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e049      	b.n	8007336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7f9 fe2c 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f000 fad2 	bl	8007878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d001      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e04f      	b.n	80073f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a23      	ldr	r2, [pc, #140]	; (8007404 <HAL_TIM_Base_Start_IT+0xc4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01d      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007382:	d018      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <HAL_TIM_Base_Start_IT+0xc8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d013      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1e      	ldr	r2, [pc, #120]	; (800740c <HAL_TIM_Base_Start_IT+0xcc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00e      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <HAL_TIM_Base_Start_IT+0xd0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d009      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIM_Base_Start_IT+0xd4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <HAL_TIM_Base_Start_IT+0x76>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <HAL_TIM_Base_Start_IT+0xd8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d115      	bne.n	80073e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	4b17      	ldr	r3, [pc, #92]	; (800741c <HAL_TIM_Base_Start_IT+0xdc>)
 80073be:	4013      	ands	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b06      	cmp	r3, #6
 80073c6:	d015      	beq.n	80073f4 <HAL_TIM_Base_Start_IT+0xb4>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ce:	d011      	beq.n	80073f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e0:	e008      	b.n	80073f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0201 	orr.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e000      	b.n	80073f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40013400 	.word	0x40013400
 8007418:	40014000 	.word	0x40014000
 800741c:	00010007 	.word	0x00010007

08007420 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e049      	b.n	80074c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f841 	bl	80074ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f000 fa0a 	bl	8007878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d122      	bne.n	800753e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d11b      	bne.n	800753e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f06f 0202 	mvn.w	r2, #2
 800750e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f989 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 800752a:	e005      	b.n	8007538 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f97b 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f98c 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d122      	bne.n	8007592 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b04      	cmp	r3, #4
 8007558:	d11b      	bne.n	8007592 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f06f 0204 	mvn.w	r2, #4
 8007562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f95f 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 800757e:	e005      	b.n	800758c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f951 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f962 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b08      	cmp	r3, #8
 800759e:	d122      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d11b      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0208 	mvn.w	r2, #8
 80075b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2204      	movs	r2, #4
 80075bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f935 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f927 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f938 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d122      	bne.n	800763a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d11b      	bne.n	800763a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0210 	mvn.w	r2, #16
 800760a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2208      	movs	r2, #8
 8007610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f90b 	bl	800783c <HAL_TIM_IC_CaptureCallback>
 8007626:	e005      	b.n	8007634 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f8fd 	bl	8007828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f90e 	bl	8007850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10e      	bne.n	8007666 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d107      	bne.n	8007666 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0201 	mvn.w	r2, #1
 800765e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f8d7 	bl	8007814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b80      	cmp	r3, #128	; 0x80
 8007672:	d10e      	bne.n	8007692 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d107      	bne.n	8007692 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800768a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fceb 	bl	8008068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ac:	2b80      	cmp	r3, #128	; 0x80
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fcde 	bl	800807c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8bc 	bl	8007864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d10e      	bne.n	8007718 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b20      	cmp	r3, #32
 8007706:	d107      	bne.n	8007718 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0220 	mvn.w	r2, #32
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fc9e 	bl	8008054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_TIM_OC_ConfigChannel+0x1e>
 800773a:	2302      	movs	r3, #2
 800773c:	e066      	b.n	800780c <HAL_TIM_OC_ConfigChannel+0xec>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b14      	cmp	r3, #20
 800774a:	d857      	bhi.n	80077fc <HAL_TIM_OC_ConfigChannel+0xdc>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <HAL_TIM_OC_ConfigChannel+0x34>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	080077a9 	.word	0x080077a9
 8007758:	080077fd 	.word	0x080077fd
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077fd 	.word	0x080077fd
 8007764:	080077b7 	.word	0x080077b7
 8007768:	080077fd 	.word	0x080077fd
 800776c:	080077fd 	.word	0x080077fd
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077c5 	.word	0x080077c5
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077fd 	.word	0x080077fd
 8007780:	080077fd 	.word	0x080077fd
 8007784:	080077d3 	.word	0x080077d3
 8007788:	080077fd 	.word	0x080077fd
 800778c:	080077fd 	.word	0x080077fd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080077e1 	.word	0x080077e1
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	080077ef 	.word	0x080077ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f8fc 	bl	80079ac <TIM_OC1_SetConfig>
      break;
 80077b4:	e025      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f985 	bl	8007acc <TIM_OC2_SetConfig>
      break;
 80077c2:	e01e      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fa08 	bl	8007be0 <TIM_OC3_SetConfig>
      break;
 80077d0:	e017      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fa89 	bl	8007cf0 <TIM_OC4_SetConfig>
      break;
 80077de:	e010      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 faec 	bl	8007dc4 <TIM_OC5_SetConfig>
      break;
 80077ec:	e009      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fb49 	bl	8007e8c <TIM_OC6_SetConfig>
      break;
 80077fa:	e002      	b.n	8007802 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a40      	ldr	r2, [pc, #256]	; (800798c <TIM_Base_SetConfig+0x114>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007896:	d00f      	beq.n	80078b8 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3d      	ldr	r2, [pc, #244]	; (8007990 <TIM_Base_SetConfig+0x118>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00b      	beq.n	80078b8 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3c      	ldr	r2, [pc, #240]	; (8007994 <TIM_Base_SetConfig+0x11c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3b      	ldr	r2, [pc, #236]	; (8007998 <TIM_Base_SetConfig+0x120>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3a      	ldr	r2, [pc, #232]	; (800799c <TIM_Base_SetConfig+0x124>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d108      	bne.n	80078ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2f      	ldr	r2, [pc, #188]	; (800798c <TIM_Base_SetConfig+0x114>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01f      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d01b      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2c      	ldr	r2, [pc, #176]	; (8007990 <TIM_Base_SetConfig+0x118>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d017      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2b      	ldr	r2, [pc, #172]	; (8007994 <TIM_Base_SetConfig+0x11c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2a      	ldr	r2, [pc, #168]	; (8007998 <TIM_Base_SetConfig+0x120>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00f      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a29      	ldr	r2, [pc, #164]	; (800799c <TIM_Base_SetConfig+0x124>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00b      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a28      	ldr	r2, [pc, #160]	; (80079a0 <TIM_Base_SetConfig+0x128>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d007      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a27      	ldr	r2, [pc, #156]	; (80079a4 <TIM_Base_SetConfig+0x12c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d003      	beq.n	8007912 <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a26      	ldr	r2, [pc, #152]	; (80079a8 <TIM_Base_SetConfig+0x130>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d108      	bne.n	8007924 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a10      	ldr	r2, [pc, #64]	; (800798c <TIM_Base_SetConfig+0x114>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00f      	beq.n	8007970 <TIM_Base_SetConfig+0xf8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a12      	ldr	r2, [pc, #72]	; (800799c <TIM_Base_SetConfig+0x124>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_Base_SetConfig+0xf8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a11      	ldr	r2, [pc, #68]	; (80079a0 <TIM_Base_SetConfig+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a10      	ldr	r2, [pc, #64]	; (80079a4 <TIM_Base_SetConfig+0x12c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_Base_SetConfig+0xf8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a0f      	ldr	r2, [pc, #60]	; (80079a8 <TIM_Base_SetConfig+0x130>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d103      	bne.n	8007978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	615a      	str	r2, [r3, #20]
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40000400 	.word	0x40000400
 8007994:	40000800 	.word	0x40000800
 8007998:	40000c00 	.word	0x40000c00
 800799c:	40013400 	.word	0x40013400
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f023 0201 	bic.w	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 0302 	bic.w	r3, r3, #2
 80079f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a2c      	ldr	r2, [pc, #176]	; (8007ab8 <TIM_OC1_SetConfig+0x10c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00f      	beq.n	8007a2c <TIM_OC1_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <TIM_OC1_SetConfig+0x110>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <TIM_OC1_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <TIM_OC1_SetConfig+0x114>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_OC1_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <TIM_OC1_SetConfig+0x118>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_OC1_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a28      	ldr	r2, [pc, #160]	; (8007ac8 <TIM_OC1_SetConfig+0x11c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10c      	bne.n	8007a46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0308 	bic.w	r3, r3, #8
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 0304 	bic.w	r3, r3, #4
 8007a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <TIM_OC1_SetConfig+0x10c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00f      	beq.n	8007a6e <TIM_OC1_SetConfig+0xc2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1a      	ldr	r2, [pc, #104]	; (8007abc <TIM_OC1_SetConfig+0x110>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <TIM_OC1_SetConfig+0xc2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <TIM_OC1_SetConfig+0x114>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_OC1_SetConfig+0xc2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <TIM_OC1_SetConfig+0x118>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC1_SetConfig+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <TIM_OC1_SetConfig+0x11c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d111      	bne.n	8007a92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	621a      	str	r2, [r3, #32]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40013400 	.word	0x40013400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800

08007acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f023 0210 	bic.w	r2, r3, #16
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 0320 	bic.w	r3, r3, #32
 8007b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a28      	ldr	r2, [pc, #160]	; (8007bcc <TIM_OC2_SetConfig+0x100>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_OC2_SetConfig+0x6c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a27      	ldr	r2, [pc, #156]	; (8007bd0 <TIM_OC2_SetConfig+0x104>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d10d      	bne.n	8007b54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <TIM_OC2_SetConfig+0x100>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00f      	beq.n	8007b7c <TIM_OC2_SetConfig+0xb0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <TIM_OC2_SetConfig+0x104>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_OC2_SetConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1b      	ldr	r2, [pc, #108]	; (8007bd4 <TIM_OC2_SetConfig+0x108>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_OC2_SetConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1a      	ldr	r2, [pc, #104]	; (8007bd8 <TIM_OC2_SetConfig+0x10c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC2_SetConfig+0xb0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <TIM_OC2_SetConfig+0x110>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d113      	bne.n	8007ba4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	40012c00 	.word	0x40012c00
 8007bd0:	40013400 	.word	0x40013400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800

08007be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	021b      	lsls	r3, r3, #8
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a27      	ldr	r2, [pc, #156]	; (8007cdc <TIM_OC3_SetConfig+0xfc>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_OC3_SetConfig+0x6a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <TIM_OC3_SetConfig+0x100>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d10d      	bne.n	8007c66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1c      	ldr	r2, [pc, #112]	; (8007cdc <TIM_OC3_SetConfig+0xfc>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_OC3_SetConfig+0xae>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <TIM_OC3_SetConfig+0x100>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_OC3_SetConfig+0xae>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <TIM_OC3_SetConfig+0x104>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_OC3_SetConfig+0xae>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <TIM_OC3_SetConfig+0x108>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_OC3_SetConfig+0xae>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a18      	ldr	r2, [pc, #96]	; (8007cec <TIM_OC3_SetConfig+0x10c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d113      	bne.n	8007cb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	621a      	str	r2, [r3, #32]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800

08007cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	031b      	lsls	r3, r3, #12
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <TIM_OC4_SetConfig+0xc0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00f      	beq.n	8007d74 <TIM_OC4_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a17      	ldr	r2, [pc, #92]	; (8007db4 <TIM_OC4_SetConfig+0xc4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00b      	beq.n	8007d74 <TIM_OC4_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a16      	ldr	r2, [pc, #88]	; (8007db8 <TIM_OC4_SetConfig+0xc8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d007      	beq.n	8007d74 <TIM_OC4_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <TIM_OC4_SetConfig+0xcc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_OC4_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <TIM_OC4_SetConfig+0xd0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d109      	bne.n	8007d88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	019b      	lsls	r3, r3, #6
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40013400 	.word	0x40013400
 8007db8:	40014000 	.word	0x40014000
 8007dbc:	40014400 	.word	0x40014400
 8007dc0:	40014800 	.word	0x40014800

08007dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	041b      	lsls	r3, r3, #16
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <TIM_OC5_SetConfig+0xb4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00f      	beq.n	8007e3e <TIM_OC5_SetConfig+0x7a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a16      	ldr	r2, [pc, #88]	; (8007e7c <TIM_OC5_SetConfig+0xb8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00b      	beq.n	8007e3e <TIM_OC5_SetConfig+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <TIM_OC5_SetConfig+0xbc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_OC5_SetConfig+0x7a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a14      	ldr	r2, [pc, #80]	; (8007e84 <TIM_OC5_SetConfig+0xc0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_OC5_SetConfig+0x7a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a13      	ldr	r2, [pc, #76]	; (8007e88 <TIM_OC5_SetConfig+0xc4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d109      	bne.n	8007e52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800

08007e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	051b      	lsls	r3, r3, #20
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a18      	ldr	r2, [pc, #96]	; (8007f44 <TIM_OC6_SetConfig+0xb8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00f      	beq.n	8007f08 <TIM_OC6_SetConfig+0x7c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <TIM_OC6_SetConfig+0xbc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <TIM_OC6_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <TIM_OC6_SetConfig+0xc0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <TIM_OC6_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a15      	ldr	r2, [pc, #84]	; (8007f50 <TIM_OC6_SetConfig+0xc4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_OC6_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a14      	ldr	r2, [pc, #80]	; (8007f54 <TIM_OC6_SetConfig+0xc8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d109      	bne.n	8007f1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	029b      	lsls	r3, r3, #10
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800

08007f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e065      	b.n	8008040 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a16      	ldr	r2, [pc, #88]	; (800804c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a14      	ldr	r2, [pc, #80]	; (8008050 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d115      	bne.n	800802e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40012c00 	.word	0x40012c00
 8008050:	40013400 	.word	0x40013400

08008054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e042      	b.n	8008128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d106      	bne.n	80080ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7f8 ff4d 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2224      	movs	r2, #36	; 0x24
 80080be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0201 	bic.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f82c 	bl	8008130 <UART_SetConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e022      	b.n	8008128 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fb1c 	bl	8008728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800810e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fba3 	bl	800886c <UART_CheckIdleState>
 8008126:	4603      	mov	r3, r0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008134:	b08c      	sub	sp, #48	; 0x30
 8008136:	af00      	add	r7, sp, #0
 8008138:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	431a      	orrs	r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	431a      	orrs	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	4313      	orrs	r3, r2
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4baa      	ldr	r3, [pc, #680]	; (8008408 <UART_SetConfig+0x2d8>)
 8008160:	4013      	ands	r3, r2
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008168:	430b      	orrs	r3, r1
 800816a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a9f      	ldr	r2, [pc, #636]	; (800840c <UART_SetConfig+0x2dc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008198:	4313      	orrs	r3, r2
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b0:	430b      	orrs	r3, r1
 80081b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f023 010f 	bic.w	r1, r3, #15
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a90      	ldr	r2, [pc, #576]	; (8008410 <UART_SetConfig+0x2e0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d125      	bne.n	8008220 <UART_SetConfig+0xf0>
 80081d4:	4b8f      	ldr	r3, [pc, #572]	; (8008414 <UART_SetConfig+0x2e4>)
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d81a      	bhi.n	8008218 <UART_SetConfig+0xe8>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <UART_SetConfig+0xb8>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	08008209 	.word	0x08008209
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008211 	.word	0x08008211
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e116      	b.n	800842e <UART_SetConfig+0x2fe>
 8008200:	2302      	movs	r3, #2
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e112      	b.n	800842e <UART_SetConfig+0x2fe>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e10e      	b.n	800842e <UART_SetConfig+0x2fe>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e10a      	b.n	800842e <UART_SetConfig+0x2fe>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e106      	b.n	800842e <UART_SetConfig+0x2fe>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a7c      	ldr	r2, [pc, #496]	; (8008418 <UART_SetConfig+0x2e8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d138      	bne.n	800829c <UART_SetConfig+0x16c>
 800822a:	4b7a      	ldr	r3, [pc, #488]	; (8008414 <UART_SetConfig+0x2e4>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f003 030c 	and.w	r3, r3, #12
 8008234:	2b0c      	cmp	r3, #12
 8008236:	d82d      	bhi.n	8008294 <UART_SetConfig+0x164>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <UART_SetConfig+0x110>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008275 	.word	0x08008275
 8008244:	08008295 	.word	0x08008295
 8008248:	08008295 	.word	0x08008295
 800824c:	08008295 	.word	0x08008295
 8008250:	08008285 	.word	0x08008285
 8008254:	08008295 	.word	0x08008295
 8008258:	08008295 	.word	0x08008295
 800825c:	08008295 	.word	0x08008295
 8008260:	0800827d 	.word	0x0800827d
 8008264:	08008295 	.word	0x08008295
 8008268:	08008295 	.word	0x08008295
 800826c:	08008295 	.word	0x08008295
 8008270:	0800828d 	.word	0x0800828d
 8008274:	2300      	movs	r3, #0
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827a:	e0d8      	b.n	800842e <UART_SetConfig+0x2fe>
 800827c:	2302      	movs	r3, #2
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e0d4      	b.n	800842e <UART_SetConfig+0x2fe>
 8008284:	2304      	movs	r3, #4
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e0d0      	b.n	800842e <UART_SetConfig+0x2fe>
 800828c:	2308      	movs	r3, #8
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008292:	e0cc      	b.n	800842e <UART_SetConfig+0x2fe>
 8008294:	2310      	movs	r3, #16
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829a:	e0c8      	b.n	800842e <UART_SetConfig+0x2fe>
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a5e      	ldr	r2, [pc, #376]	; (800841c <UART_SetConfig+0x2ec>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d125      	bne.n	80082f2 <UART_SetConfig+0x1c2>
 80082a6:	4b5b      	ldr	r3, [pc, #364]	; (8008414 <UART_SetConfig+0x2e4>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082b0:	2b30      	cmp	r3, #48	; 0x30
 80082b2:	d016      	beq.n	80082e2 <UART_SetConfig+0x1b2>
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d818      	bhi.n	80082ea <UART_SetConfig+0x1ba>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d00a      	beq.n	80082d2 <UART_SetConfig+0x1a2>
 80082bc:	2b20      	cmp	r3, #32
 80082be:	d814      	bhi.n	80082ea <UART_SetConfig+0x1ba>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <UART_SetConfig+0x19a>
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d008      	beq.n	80082da <UART_SetConfig+0x1aa>
 80082c8:	e00f      	b.n	80082ea <UART_SetConfig+0x1ba>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d0:	e0ad      	b.n	800842e <UART_SetConfig+0x2fe>
 80082d2:	2302      	movs	r3, #2
 80082d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d8:	e0a9      	b.n	800842e <UART_SetConfig+0x2fe>
 80082da:	2304      	movs	r3, #4
 80082dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e0:	e0a5      	b.n	800842e <UART_SetConfig+0x2fe>
 80082e2:	2308      	movs	r3, #8
 80082e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e8:	e0a1      	b.n	800842e <UART_SetConfig+0x2fe>
 80082ea:	2310      	movs	r3, #16
 80082ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f0:	e09d      	b.n	800842e <UART_SetConfig+0x2fe>
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a4a      	ldr	r2, [pc, #296]	; (8008420 <UART_SetConfig+0x2f0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d125      	bne.n	8008348 <UART_SetConfig+0x218>
 80082fc:	4b45      	ldr	r3, [pc, #276]	; (8008414 <UART_SetConfig+0x2e4>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008306:	2bc0      	cmp	r3, #192	; 0xc0
 8008308:	d016      	beq.n	8008338 <UART_SetConfig+0x208>
 800830a:	2bc0      	cmp	r3, #192	; 0xc0
 800830c:	d818      	bhi.n	8008340 <UART_SetConfig+0x210>
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d00a      	beq.n	8008328 <UART_SetConfig+0x1f8>
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d814      	bhi.n	8008340 <UART_SetConfig+0x210>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <UART_SetConfig+0x1f0>
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d008      	beq.n	8008330 <UART_SetConfig+0x200>
 800831e:	e00f      	b.n	8008340 <UART_SetConfig+0x210>
 8008320:	2300      	movs	r3, #0
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e082      	b.n	800842e <UART_SetConfig+0x2fe>
 8008328:	2302      	movs	r3, #2
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832e:	e07e      	b.n	800842e <UART_SetConfig+0x2fe>
 8008330:	2304      	movs	r3, #4
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e07a      	b.n	800842e <UART_SetConfig+0x2fe>
 8008338:	2308      	movs	r3, #8
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e076      	b.n	800842e <UART_SetConfig+0x2fe>
 8008340:	2310      	movs	r3, #16
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e072      	b.n	800842e <UART_SetConfig+0x2fe>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a35      	ldr	r2, [pc, #212]	; (8008424 <UART_SetConfig+0x2f4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d12a      	bne.n	80083a8 <UART_SetConfig+0x278>
 8008352:	4b30      	ldr	r3, [pc, #192]	; (8008414 <UART_SetConfig+0x2e4>)
 8008354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800835c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008360:	d01a      	beq.n	8008398 <UART_SetConfig+0x268>
 8008362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008366:	d81b      	bhi.n	80083a0 <UART_SetConfig+0x270>
 8008368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836c:	d00c      	beq.n	8008388 <UART_SetConfig+0x258>
 800836e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008372:	d815      	bhi.n	80083a0 <UART_SetConfig+0x270>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <UART_SetConfig+0x250>
 8008378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837c:	d008      	beq.n	8008390 <UART_SetConfig+0x260>
 800837e:	e00f      	b.n	80083a0 <UART_SetConfig+0x270>
 8008380:	2300      	movs	r3, #0
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e052      	b.n	800842e <UART_SetConfig+0x2fe>
 8008388:	2302      	movs	r3, #2
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e04e      	b.n	800842e <UART_SetConfig+0x2fe>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e04a      	b.n	800842e <UART_SetConfig+0x2fe>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e046      	b.n	800842e <UART_SetConfig+0x2fe>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e042      	b.n	800842e <UART_SetConfig+0x2fe>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a17      	ldr	r2, [pc, #92]	; (800840c <UART_SetConfig+0x2dc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d13a      	bne.n	8008428 <UART_SetConfig+0x2f8>
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <UART_SetConfig+0x2e4>)
 80083b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c0:	d01a      	beq.n	80083f8 <UART_SetConfig+0x2c8>
 80083c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c6:	d81b      	bhi.n	8008400 <UART_SetConfig+0x2d0>
 80083c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083cc:	d00c      	beq.n	80083e8 <UART_SetConfig+0x2b8>
 80083ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d2:	d815      	bhi.n	8008400 <UART_SetConfig+0x2d0>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <UART_SetConfig+0x2b0>
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083dc:	d008      	beq.n	80083f0 <UART_SetConfig+0x2c0>
 80083de:	e00f      	b.n	8008400 <UART_SetConfig+0x2d0>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e022      	b.n	800842e <UART_SetConfig+0x2fe>
 80083e8:	2302      	movs	r3, #2
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e01e      	b.n	800842e <UART_SetConfig+0x2fe>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e01a      	b.n	800842e <UART_SetConfig+0x2fe>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e016      	b.n	800842e <UART_SetConfig+0x2fe>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e012      	b.n	800842e <UART_SetConfig+0x2fe>
 8008408:	cfff69f3 	.word	0xcfff69f3
 800840c:	40008000 	.word	0x40008000
 8008410:	40013800 	.word	0x40013800
 8008414:	40021000 	.word	0x40021000
 8008418:	40004400 	.word	0x40004400
 800841c:	40004800 	.word	0x40004800
 8008420:	40004c00 	.word	0x40004c00
 8008424:	40005000 	.word	0x40005000
 8008428:	2310      	movs	r3, #16
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4aae      	ldr	r2, [pc, #696]	; (80086ec <UART_SetConfig+0x5bc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	f040 8097 	bne.w	8008568 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800843a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800843e:	2b08      	cmp	r3, #8
 8008440:	d823      	bhi.n	800848a <UART_SetConfig+0x35a>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x318>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	0800846d 	.word	0x0800846d
 800844c:	0800848b 	.word	0x0800848b
 8008450:	08008475 	.word	0x08008475
 8008454:	0800848b 	.word	0x0800848b
 8008458:	0800847b 	.word	0x0800847b
 800845c:	0800848b 	.word	0x0800848b
 8008460:	0800848b 	.word	0x0800848b
 8008464:	0800848b 	.word	0x0800848b
 8008468:	08008483 	.word	0x08008483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fb fbca 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008472:	e010      	b.n	8008496 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008474:	4b9e      	ldr	r3, [pc, #632]	; (80086f0 <UART_SetConfig+0x5c0>)
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008478:	e00d      	b.n	8008496 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800847a:	f7fb fb2b 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008480:	e009      	b.n	8008496 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008488:	e005      	b.n	8008496 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8130 	beq.w	80086fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	4a94      	ldr	r2, [pc, #592]	; (80086f4 <UART_SetConfig+0x5c4>)
 80084a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	4413      	add	r3, r2
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d305      	bcc.n	80084ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d903      	bls.n	80084d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084d4:	e113      	b.n	80086fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	2200      	movs	r2, #0
 80084da:	60bb      	str	r3, [r7, #8]
 80084dc:	60fa      	str	r2, [r7, #12]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	4a84      	ldr	r2, [pc, #528]	; (80086f4 <UART_SetConfig+0x5c4>)
 80084e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2200      	movs	r2, #0
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084f8:	f7f7 fe80 	bl	80001fc <__aeabi_uldivmod>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4610      	mov	r0, r2
 8008502:	4619      	mov	r1, r3
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	f04f 0300 	mov.w	r3, #0
 800850c:	020b      	lsls	r3, r1, #8
 800850e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008512:	0202      	lsls	r2, r0, #8
 8008514:	6979      	ldr	r1, [r7, #20]
 8008516:	6849      	ldr	r1, [r1, #4]
 8008518:	0849      	lsrs	r1, r1, #1
 800851a:	2000      	movs	r0, #0
 800851c:	460c      	mov	r4, r1
 800851e:	4605      	mov	r5, r0
 8008520:	eb12 0804 	adds.w	r8, r2, r4
 8008524:	eb43 0905 	adc.w	r9, r3, r5
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	469a      	mov	sl, r3
 8008530:	4693      	mov	fp, r2
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	4640      	mov	r0, r8
 8008538:	4649      	mov	r1, r9
 800853a:	f7f7 fe5f 	bl	80001fc <__aeabi_uldivmod>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4613      	mov	r3, r2
 8008544:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800854c:	d308      	bcc.n	8008560 <UART_SetConfig+0x430>
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008554:	d204      	bcs.n	8008560 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a3a      	ldr	r2, [r7, #32]
 800855c:	60da      	str	r2, [r3, #12]
 800855e:	e0ce      	b.n	80086fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008566:	e0ca      	b.n	80086fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008570:	d166      	bne.n	8008640 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008576:	2b08      	cmp	r3, #8
 8008578:	d827      	bhi.n	80085ca <UART_SetConfig+0x49a>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <UART_SetConfig+0x450>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085b5 	.word	0x080085b5
 800858c:	080085cb 	.word	0x080085cb
 8008590:	080085bb 	.word	0x080085bb
 8008594:	080085cb 	.word	0x080085cb
 8008598:	080085cb 	.word	0x080085cb
 800859c:	080085cb 	.word	0x080085cb
 80085a0:	080085c3 	.word	0x080085c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a4:	f7fb fb2e 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085aa:	e014      	b.n	80085d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ac:	f7fb fb40 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 80085b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b2:	e010      	b.n	80085d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085b4:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <UART_SetConfig+0x5c0>)
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b8:	e00d      	b.n	80085d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ba:	f7fb fa8b 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 80085be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085c0:	e009      	b.n	80085d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c8:	e005      	b.n	80085d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8090 	beq.w	80086fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	4a44      	ldr	r2, [pc, #272]	; (80086f4 <UART_SetConfig+0x5c4>)
 80085e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f0:	005a      	lsls	r2, r3, #1
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	441a      	add	r2, r3
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008602:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	2b0f      	cmp	r3, #15
 8008608:	d916      	bls.n	8008638 <UART_SetConfig+0x508>
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008610:	d212      	bcs.n	8008638 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f023 030f 	bic.w	r3, r3, #15
 800861a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	b29b      	uxth	r3, r3
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	b29a      	uxth	r2, r3
 8008628:	8bfb      	ldrh	r3, [r7, #30]
 800862a:	4313      	orrs	r3, r2
 800862c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	8bfa      	ldrh	r2, [r7, #30]
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	e062      	b.n	80086fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800863e:	e05e      	b.n	80086fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008644:	2b08      	cmp	r3, #8
 8008646:	d828      	bhi.n	800869a <UART_SetConfig+0x56a>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x520>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008675 	.word	0x08008675
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008685 	.word	0x08008685
 800865c:	0800869b 	.word	0x0800869b
 8008660:	0800868b 	.word	0x0800868b
 8008664:	0800869b 	.word	0x0800869b
 8008668:	0800869b 	.word	0x0800869b
 800866c:	0800869b 	.word	0x0800869b
 8008670:	08008693 	.word	0x08008693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008674:	f7fb fac6 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800867a:	e014      	b.n	80086a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800867c:	f7fb fad8 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008682:	e010      	b.n	80086a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008684:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <UART_SetConfig+0x5c0>)
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008688:	e00d      	b.n	80086a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800868a:	f7fb fa23 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008690:	e009      	b.n	80086a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008698:	e005      	b.n	80086a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086a4:	bf00      	nop
    }

    if (pclk != 0U)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d028      	beq.n	80086fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <UART_SetConfig+0x5c4>)
 80086b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b6:	461a      	mov	r2, r3
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d910      	bls.n	80086f8 <UART_SetConfig+0x5c8>
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d20c      	bcs.n	80086f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60da      	str	r2, [r3, #12]
 80086e8:	e009      	b.n	80086fe <UART_SetConfig+0x5ce>
 80086ea:	bf00      	nop
 80086ec:	40008000 	.word	0x40008000
 80086f0:	00f42400 	.word	0x00f42400
 80086f4:	0800d948 	.word	0x0800d948
      }
      else
      {
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2201      	movs	r2, #1
 8008702:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2201      	movs	r2, #1
 800870a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2200      	movs	r2, #0
 8008718:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800871a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800871e:	4618      	mov	r0, r3
 8008720:	3730      	adds	r7, #48	; 0x30
 8008722:	46bd      	mov	sp, r7
 8008724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01a      	beq.n	800883e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008826:	d10a      	bne.n	800883e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800887c:	f7f8 fcfe 	bl	800127c <HAL_GetTick>
 8008880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b08      	cmp	r3, #8
 800888e:	d10e      	bne.n	80088ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f82f 	bl	8008902 <UART_WaitOnFlagUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e025      	b.n	80088fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d10e      	bne.n	80088da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f819 	bl	8008902 <UART_WaitOnFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e00f      	b.n	80088fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b09c      	sub	sp, #112	; 0x70
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008912:	e0a9      	b.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891a:	f000 80a5 	beq.w	8008a68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800891e:	f7f8 fcad 	bl	800127c <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800892a:	429a      	cmp	r2, r3
 800892c:	d302      	bcc.n	8008934 <UART_WaitOnFlagUntilTimeout+0x32>
 800892e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008930:	2b00      	cmp	r3, #0
 8008932:	d140      	bne.n	80089b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008948:	667b      	str	r3, [r7, #100]	; 0x64
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008954:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e6      	bne.n	8008934 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	663b      	str	r3, [r7, #96]	; 0x60
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008986:	64ba      	str	r2, [r7, #72]	; 0x48
 8008988:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800898c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e5      	bne.n	8008966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e069      	b.n	8008a8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d051      	beq.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d2:	d149      	bne.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
 80089fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e6      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f023 0301 	bic.w	r3, r3, #1
 8008a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a30:	623a      	str	r2, [r7, #32]
 8008a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	69f9      	ldr	r1, [r7, #28]
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e010      	b.n	8008a8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69da      	ldr	r2, [r3, #28]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	f43f af46 	beq.w	8008914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3770      	adds	r7, #112	; 0x70
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e027      	b.n	8008af8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2224      	movs	r2, #36	; 0x24
 8008ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0201 	bic.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ad6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e02d      	b.n	8008b78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2224      	movs	r2, #36	; 0x24
 8008b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 0201 	bic.w	r2, r2, #1
 8008b42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f84f 	bl	8008bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e02d      	b.n	8008bf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2224      	movs	r2, #36	; 0x24
 8008ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0201 	bic.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f811 	bl	8008bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d108      	bne.n	8008c1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c1c:	e031      	b.n	8008c82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c1e:	2308      	movs	r3, #8
 8008c20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c22:	2308      	movs	r3, #8
 8008c24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	0e5b      	lsrs	r3, r3, #25
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	0f5b      	lsrs	r3, r3, #29
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	7b3a      	ldrb	r2, [r7, #12]
 8008c4a:	4911      	ldr	r1, [pc, #68]	; (8008c90 <UARTEx_SetNbDataToProcess+0x94>)
 8008c4c:	5c8a      	ldrb	r2, [r1, r2]
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c52:	7b3a      	ldrb	r2, [r7, #12]
 8008c54:	490f      	ldr	r1, [pc, #60]	; (8008c94 <UARTEx_SetNbDataToProcess+0x98>)
 8008c56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	7b7a      	ldrb	r2, [r7, #13]
 8008c68:	4909      	ldr	r1, [pc, #36]	; (8008c90 <UARTEx_SetNbDataToProcess+0x94>)
 8008c6a:	5c8a      	ldrb	r2, [r1, r2]
 8008c6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c70:	7b7a      	ldrb	r2, [r7, #13]
 8008c72:	4908      	ldr	r1, [pc, #32]	; (8008c94 <UARTEx_SetNbDataToProcess+0x98>)
 8008c74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c76:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	0800d960 	.word	0x0800d960
 8008c94:	0800d968 	.word	0x0800d968

08008c98 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008c98:	b084      	sub	sp, #16
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	f107 001c 	add.w	r0, r7, #28
 8008ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008cae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008cb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008cb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008cba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008cbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <SDMMC_Init+0x50>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	b004      	add	sp, #16
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	ffc02c00 	.word	0xffc02c00

08008cec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f043 0203 	orr.w	r2, r3, #3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008d3c:	2002      	movs	r0, #2
 8008d3e:	f7f8 faa9 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0303 	and.w	r3, r3, #3
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <SDMMC_SendCommand+0x50>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	431a      	orrs	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	fffee0c0 	.word	0xfffee0c0

08008dbc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	b2db      	uxtb	r3, r3
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3314      	adds	r3, #20
 8008de4:	461a      	mov	r2, r3
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	4413      	add	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0

}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e62:	2310      	movs	r3, #16
 8008e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff ff73 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e86:	2110      	movs	r1, #16
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa7b 	bl	8009384 <SDMMC_GetCmdResp1>
 8008e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e90:	69fb      	ldr	r3, [r7, #28]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b088      	sub	sp, #32
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ea8:	2311      	movs	r3, #17
 8008eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff50 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ecc:	2111      	movs	r1, #17
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa58 	bl	8009384 <SDMMC_GetCmdResp1>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008eee:	2312      	movs	r3, #18
 8008ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ff2d 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f12:	2112      	movs	r1, #18
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa35 	bl	8009384 <SDMMC_GetCmdResp1>
 8008f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f34:	2318      	movs	r3, #24
 8008f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff ff0a 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	2118      	movs	r1, #24
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa12 	bl	8009384 <SDMMC_GetCmdResp1>
 8008f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f62:	69fb      	ldr	r3, [r7, #28]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f7a:	2319      	movs	r3, #25
 8008f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff fee7 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9e:	2119      	movs	r1, #25
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f9ef 	bl	8009384 <SDMMC_GetCmdResp1>
 8008fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff feb8 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008ff8:	4a08      	ldr	r2, [pc, #32]	; (800901c <SDMMC_CmdStopTransfer+0x68>)
 8008ffa:	210c      	movs	r1, #12
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9c1 	bl	8009384 <SDMMC_GetCmdResp1>
 8009002:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009010:	69fb      	ldr	r3, [r7, #28]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	05f5e100 	.word	0x05f5e100

08009020 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009030:	2307      	movs	r3, #7
 8009032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009038:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800903e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009042:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009044:	f107 0310 	add.w	r3, r7, #16
 8009048:	4619      	mov	r1, r3
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fe8c 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009050:	f241 3288 	movw	r2, #5000	; 0x1388
 8009054:	2107      	movs	r1, #7
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f994 	bl	8009384 <SDMMC_GetCmdResp1>
 800905c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009060:	4618      	mov	r0, r3
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009086:	f107 0308 	add.w	r3, r7, #8
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff fe6b 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fbb8 	bl	8009808 <SDMMC_GetCmdError>
 8009098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909a:	69fb      	ldr	r3, [r7, #28]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80090ac:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80090b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80090b2:	2308      	movs	r3, #8
 80090b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fe4b 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fb4a 	bl	800976c <SDMMC_GetCmdResp7>
 80090d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090f2:	2337      	movs	r3, #55	; 0x37
 80090f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff fe2b 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	2137      	movs	r1, #55	; 0x37
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f933 	bl	8009384 <SDMMC_GetCmdResp1>
 800911e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009120:	69fb      	ldr	r3, [r7, #28]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3720      	adds	r7, #32
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b088      	sub	sp, #32
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009138:	2329      	movs	r3, #41	; 0x29
 800913a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800913c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800914a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fe08 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fa4f 	bl	80095fc <SDMMC_GetCmdResp3>
 800915e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009160:	69fb      	ldr	r3, [r7, #28]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b088      	sub	sp, #32
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009178:	2306      	movs	r3, #6
 800917a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800917c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800918a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800918c:	f107 0308 	add.w	r3, r7, #8
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fde8 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009198:	f241 3288 	movw	r2, #5000	; 0x1388
 800919c:	2106      	movs	r1, #6
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8f0 	bl	8009384 <SDMMC_GetCmdResp1>
 80091a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091bc:	2333      	movs	r3, #51	; 0x33
 80091be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d0:	f107 0308 	add.w	r3, r7, #8
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fdc6 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e0:	2133      	movs	r1, #51	; 0x33
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8ce 	bl	8009384 <SDMMC_GetCmdResp1>
 80091e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ea:	69fb      	ldr	r3, [r7, #28]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009200:	2302      	movs	r3, #2
 8009202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009204:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800920e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009214:	f107 0308 	add.w	r3, r7, #8
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fda4 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9a1 	bl	8009568 <SDMMC_GetCmdResp2>
 8009226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009228:	69fb      	ldr	r3, [r7, #28]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b088      	sub	sp, #32
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009240:	2309      	movs	r3, #9
 8009242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800924a:	2300      	movs	r3, #0
 800924c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800924e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009252:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009254:	f107 0308 	add.w	r3, r7, #8
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fd84 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f981 	bl	8009568 <SDMMC_GetCmdResp2>
 8009266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009268:	69fb      	ldr	r3, [r7, #28]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3720      	adds	r7, #32
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b088      	sub	sp, #32
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009280:	2303      	movs	r3, #3
 8009282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800928e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fd64 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	2103      	movs	r1, #3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f9e9 	bl	800967c <SDMMC_GetCmdResp6>
 80092aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ac:	69fb      	ldr	r3, [r7, #28]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b088      	sub	sp, #32
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092c4:	230d      	movs	r3, #13
 80092c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7ff fd42 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80092e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e8:	210d      	movs	r1, #13
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f84a 	bl	8009384 <SDMMC_GetCmdResp1>
 80092f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092f2:	69fb      	ldr	r3, [r7, #28]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009308:	230d      	movs	r3, #13
 800930a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800930c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800931a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800931c:	f107 0308 	add.w	r3, r7, #8
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fd20 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009328:	f241 3288 	movw	r2, #5000	; 0x1388
 800932c:	210d      	movs	r1, #13
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f828 	bl	8009384 <SDMMC_GetCmdResp1>
 8009334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009336:	69fb      	ldr	r3, [r7, #28]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3720      	adds	r7, #32
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009348:	2300      	movs	r3, #0
 800934a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800934c:	230b      	movs	r3, #11
 800934e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800935a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800935e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009360:	f107 0308 	add.w	r3, r7, #8
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fcfe 	bl	8008d68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800936c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009370:	210b      	movs	r1, #11
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f806 	bl	8009384 <SDMMC_GetCmdResp1>
 8009378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937a:	69fb      	ldr	r3, [r7, #28]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	460b      	mov	r3, r1
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009392:	4b70      	ldr	r3, [pc, #448]	; (8009554 <SDMMC_GetCmdResp1+0x1d0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a70      	ldr	r2, [pc, #448]	; (8009558 <SDMMC_GetCmdResp1+0x1d4>)
 8009398:	fba2 2303 	umull	r2, r3, r2, r3
 800939c:	0a5a      	lsrs	r2, r3, #9
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	1e5a      	subs	r2, r3, #1
 80093aa:	61fa      	str	r2, [r7, #28]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093b4:	e0c9      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	4b67      	ldr	r3, [pc, #412]	; (800955c <SDMMC_GetCmdResp1+0x1d8>)
 80093c0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0ef      	beq.n	80093a6 <SDMMC_GetCmdResp1+0x22>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1ea      	bne.n	80093a6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2204      	movs	r2, #4
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093e2:	2304      	movs	r3, #4
 80093e4:	e0b1      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e0a6      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4a58      	ldr	r2, [pc, #352]	; (8009560 <SDMMC_GetCmdResp1+0x1dc>)
 8009400:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fcda 	bl	8008dbc <SDMMC_GetCommandResponse>
 8009408:	4603      	mov	r3, r0
 800940a:	461a      	mov	r2, r3
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	4293      	cmp	r3, r2
 8009410:	d001      	beq.n	8009416 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009412:	2301      	movs	r3, #1
 8009414:	e099      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009416:	2100      	movs	r1, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff fcdc 	bl	8008dd6 <SDMMC_GetResponse>
 800941e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4b50      	ldr	r3, [pc, #320]	; (8009564 <SDMMC_GetCmdResp1+0x1e0>)
 8009424:	4013      	ands	r3, r2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	e08d      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	da02      	bge.n	800943a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009438:	e087      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009444:	2340      	movs	r3, #64	; 0x40
 8009446:	e080      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009452:	2380      	movs	r3, #128	; 0x80
 8009454:	e079      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009464:	e071      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009474:	e069      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009484:	e061      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009494:	e059      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a4:	e051      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094b4:	e049      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80094c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094c4:	e041      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80094d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d4:	e039      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80094e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094e4:	e031      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80094f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094f4:	e029      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009504:	e021      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009514:	e019      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009524:	e011      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009534:	e009      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009540:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009544:	e001      	b.n	800954a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000000 	.word	0x20000000
 8009558:	10624dd3 	.word	0x10624dd3
 800955c:	00200045 	.word	0x00200045
 8009560:	002000c5 	.word	0x002000c5
 8009564:	fdffe008 	.word	0xfdffe008

08009568 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009570:	4b1f      	ldr	r3, [pc, #124]	; (80095f0 <SDMMC_GetCmdResp2+0x88>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1f      	ldr	r2, [pc, #124]	; (80095f4 <SDMMC_GetCmdResp2+0x8c>)
 8009576:	fba2 2303 	umull	r2, r3, r2, r3
 800957a:	0a5b      	lsrs	r3, r3, #9
 800957c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009580:	fb02 f303 	mul.w	r3, r2, r3
 8009584:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1e5a      	subs	r2, r3, #1
 800958a:	60fa      	str	r2, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d102      	bne.n	8009596 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009594:	e026      	b.n	80095e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0ef      	beq.n	8009586 <SDMMC_GetCmdResp2+0x1e>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1ea      	bne.n	8009586 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2204      	movs	r2, #4
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095c2:	2304      	movs	r3, #4
 80095c4:	e00e      	b.n	80095e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d004      	beq.n	80095dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095d8:	2301      	movs	r3, #1
 80095da:	e003      	b.n	80095e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a06      	ldr	r2, [pc, #24]	; (80095f8 <SDMMC_GetCmdResp2+0x90>)
 80095e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20000000 	.word	0x20000000
 80095f4:	10624dd3 	.word	0x10624dd3
 80095f8:	002000c5 	.word	0x002000c5

080095fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009604:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <SDMMC_GetCmdResp3+0x74>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <SDMMC_GetCmdResp3+0x78>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	0a5b      	lsrs	r3, r3, #9
 8009610:	f241 3288 	movw	r2, #5000	; 0x1388
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	60fa      	str	r2, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009628:	e01b      	b.n	8009662 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0ef      	beq.n	800961a <SDMMC_GetCmdResp3+0x1e>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1ea      	bne.n	800961a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2204      	movs	r2, #4
 8009654:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009656:	2304      	movs	r3, #4
 8009658:	e003      	b.n	8009662 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a06      	ldr	r2, [pc, #24]	; (8009678 <SDMMC_GetCmdResp3+0x7c>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20000000 	.word	0x20000000
 8009674:	10624dd3 	.word	0x10624dd3
 8009678:	002000c5 	.word	0x002000c5

0800967c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	460b      	mov	r3, r1
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800968a:	4b35      	ldr	r3, [pc, #212]	; (8009760 <SDMMC_GetCmdResp6+0xe4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a35      	ldr	r2, [pc, #212]	; (8009764 <SDMMC_GetCmdResp6+0xe8>)
 8009690:	fba2 2303 	umull	r2, r3, r2, r3
 8009694:	0a5b      	lsrs	r3, r3, #9
 8009696:	f241 3288 	movw	r2, #5000	; 0x1388
 800969a:	fb02 f303 	mul.w	r3, r2, r3
 800969e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	1e5a      	subs	r2, r3, #1
 80096a4:	61fa      	str	r2, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ae:	e052      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0ef      	beq.n	80096a0 <SDMMC_GetCmdResp6+0x24>
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1ea      	bne.n	80096a0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2204      	movs	r2, #4
 80096da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096dc:	2304      	movs	r3, #4
 80096de:	e03a      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e02f      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff fb60 	bl	8008dbc <SDMMC_GetCommandResponse>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	4293      	cmp	r3, r2
 8009704:	d001      	beq.n	800970a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009706:	2301      	movs	r3, #1
 8009708:	e025      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <SDMMC_GetCmdResp6+0xec>)
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009710:	2100      	movs	r1, #0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff fb5f 	bl	8008dd6 <SDMMC_GetResponse>
 8009718:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800972e:	2300      	movs	r3, #0
 8009730:	e011      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800973c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009740:	e009      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800974c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009750:	e001      	b.n	8009756 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20000000 	.word	0x20000000
 8009764:	10624dd3 	.word	0x10624dd3
 8009768:	002000c5 	.word	0x002000c5

0800976c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009774:	4b22      	ldr	r3, [pc, #136]	; (8009800 <SDMMC_GetCmdResp7+0x94>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a22      	ldr	r2, [pc, #136]	; (8009804 <SDMMC_GetCmdResp7+0x98>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	0a5b      	lsrs	r3, r3, #9
 8009780:	f241 3288 	movw	r2, #5000	; 0x1388
 8009784:	fb02 f303 	mul.w	r3, r2, r3
 8009788:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	60fa      	str	r2, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009798:	e02c      	b.n	80097f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0ef      	beq.n	800978a <SDMMC_GetCmdResp7+0x1e>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1ea      	bne.n	800978a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2204      	movs	r2, #4
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097c6:	2304      	movs	r3, #4
 80097c8:	e014      	b.n	80097f4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097dc:	2301      	movs	r3, #1
 80097de:	e009      	b.n	80097f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2240      	movs	r2, #64	; 0x40
 80097f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097f2:	2300      	movs	r3, #0

}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20000000 	.word	0x20000000
 8009804:	10624dd3 	.word	0x10624dd3

08009808 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <SDMMC_GetCmdError+0x50>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a11      	ldr	r2, [pc, #68]	; (800985c <SDMMC_GetCmdError+0x54>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	0a5b      	lsrs	r3, r3, #9
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	fb02 f303 	mul.w	r3, r2, r3
 8009824:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1e5a      	subs	r2, r3, #1
 800982a:	60fa      	str	r2, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009834:	e009      	b.n	800984a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f1      	beq.n	8009826 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a06      	ldr	r2, [pc, #24]	; (8009860 <SDMMC_GetCmdError+0x58>)
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000000 	.word	0x20000000
 800985c:	10624dd3 	.word	0x10624dd3
 8009860:	002000c5 	.word	0x002000c5

08009864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009864:	b084      	sub	sp, #16
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	f107 001c 	add.w	r0, r7, #28
 8009872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 faf6 	bl	800ae74 <USB_CoreReset>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800988c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
 800989e:	e005      	b.n	80098ac <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098b8:	b004      	add	sp, #16
 80098ba:	4770      	bx	lr

080098bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d165      	bne.n	800999c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4a3e      	ldr	r2, [pc, #248]	; (80099cc <USB_SetTurnaroundTime+0x110>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d906      	bls.n	80098e6 <USB_SetTurnaroundTime+0x2a>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <USB_SetTurnaroundTime+0x114>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d202      	bcs.n	80098e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098e0:	230f      	movs	r3, #15
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	e05c      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	4a39      	ldr	r2, [pc, #228]	; (80099d0 <USB_SetTurnaroundTime+0x114>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d306      	bcc.n	80098fc <USB_SetTurnaroundTime+0x40>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4a38      	ldr	r2, [pc, #224]	; (80099d4 <USB_SetTurnaroundTime+0x118>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d202      	bcs.n	80098fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098f6:	230e      	movs	r3, #14
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e051      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4a35      	ldr	r2, [pc, #212]	; (80099d4 <USB_SetTurnaroundTime+0x118>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d306      	bcc.n	8009912 <USB_SetTurnaroundTime+0x56>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4a34      	ldr	r2, [pc, #208]	; (80099d8 <USB_SetTurnaroundTime+0x11c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d202      	bcs.n	8009912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800990c:	230d      	movs	r3, #13
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e046      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4a30      	ldr	r2, [pc, #192]	; (80099d8 <USB_SetTurnaroundTime+0x11c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d306      	bcc.n	8009928 <USB_SetTurnaroundTime+0x6c>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4a2f      	ldr	r2, [pc, #188]	; (80099dc <USB_SetTurnaroundTime+0x120>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d802      	bhi.n	8009928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009922:	230c      	movs	r3, #12
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e03b      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4a2c      	ldr	r2, [pc, #176]	; (80099dc <USB_SetTurnaroundTime+0x120>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d906      	bls.n	800993e <USB_SetTurnaroundTime+0x82>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4a2b      	ldr	r2, [pc, #172]	; (80099e0 <USB_SetTurnaroundTime+0x124>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d802      	bhi.n	800993e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009938:	230b      	movs	r3, #11
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e030      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4a27      	ldr	r2, [pc, #156]	; (80099e0 <USB_SetTurnaroundTime+0x124>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d906      	bls.n	8009954 <USB_SetTurnaroundTime+0x98>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4a26      	ldr	r2, [pc, #152]	; (80099e4 <USB_SetTurnaroundTime+0x128>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d802      	bhi.n	8009954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800994e:	230a      	movs	r3, #10
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e025      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4a23      	ldr	r2, [pc, #140]	; (80099e4 <USB_SetTurnaroundTime+0x128>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d906      	bls.n	800996a <USB_SetTurnaroundTime+0xae>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4a22      	ldr	r2, [pc, #136]	; (80099e8 <USB_SetTurnaroundTime+0x12c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d202      	bcs.n	800996a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009964:	2309      	movs	r3, #9
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e01a      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4a1e      	ldr	r2, [pc, #120]	; (80099e8 <USB_SetTurnaroundTime+0x12c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d306      	bcc.n	8009980 <USB_SetTurnaroundTime+0xc4>
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4a1d      	ldr	r2, [pc, #116]	; (80099ec <USB_SetTurnaroundTime+0x130>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d802      	bhi.n	8009980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800997a:	2308      	movs	r3, #8
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e00f      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4a1a      	ldr	r2, [pc, #104]	; (80099ec <USB_SetTurnaroundTime+0x130>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d906      	bls.n	8009996 <USB_SetTurnaroundTime+0xda>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4a19      	ldr	r2, [pc, #100]	; (80099f0 <USB_SetTurnaroundTime+0x134>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d202      	bcs.n	8009996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009990:	2307      	movs	r3, #7
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e004      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009996:	2306      	movs	r3, #6
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e001      	b.n	80099a0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800999c:	2309      	movs	r3, #9
 800999e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	029b      	lsls	r3, r3, #10
 80099b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099b8:	431a      	orrs	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	00d8acbf 	.word	0x00d8acbf
 80099d0:	00e4e1c0 	.word	0x00e4e1c0
 80099d4:	00f42400 	.word	0x00f42400
 80099d8:	01067380 	.word	0x01067380
 80099dc:	011a499f 	.word	0x011a499f
 80099e0:	01312cff 	.word	0x01312cff
 80099e4:	014ca43f 	.word	0x014ca43f
 80099e8:	016e3600 	.word	0x016e3600
 80099ec:	01a6ab1f 	.word	0x01a6ab1f
 80099f0:	01e84800 	.word	0x01e84800

080099f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f043 0201 	orr.w	r2, r3, #1
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f023 0201 	bic.w	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d115      	bne.n	8009a86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a66:	2001      	movs	r0, #1
 8009a68:	f7f7 fc14 	bl	8001294 <HAL_Delay>
      ms++;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 f985 	bl	800ad82 <USB_GetMode>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d01e      	beq.n	8009abc <USB_SetCurrentMode+0x84>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b31      	cmp	r3, #49	; 0x31
 8009a82:	d9f0      	bls.n	8009a66 <USB_SetCurrentMode+0x2e>
 8009a84:	e01a      	b.n	8009abc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d115      	bne.n	8009ab8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a98:	2001      	movs	r0, #1
 8009a9a:	f7f7 fbfb 	bl	8001294 <HAL_Delay>
      ms++;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f96c 	bl	800ad82 <USB_GetMode>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <USB_SetCurrentMode+0x84>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b31      	cmp	r3, #49	; 0x31
 8009ab4:	d9f0      	bls.n	8009a98 <USB_SetCurrentMode+0x60>
 8009ab6:	e001      	b.n	8009abc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e005      	b.n	8009ac8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b32      	cmp	r3, #50	; 0x32
 8009ac0:	d101      	bne.n	8009ac6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	e009      	b.n	8009b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3340      	adds	r3, #64	; 0x40
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3301      	adds	r3, #1
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2b0e      	cmp	r3, #14
 8009b08:	d9f2      	bls.n	8009af0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d11c      	bne.n	8009b4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b1e:	f043 0302 	orr.w	r3, r3, #2
 8009b22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	e005      	b.n	8009b56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b70:	461a      	mov	r2, r3
 8009b72:	680b      	ldr	r3, [r1, #0]
 8009b74:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b76:	2103      	movs	r1, #3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f959 	bl	8009e30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b7e:	2110      	movs	r1, #16
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f8f1 	bl	8009d68 <USB_FlushTxFifo>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f91d 	bl	8009dd0 <USB_FlushRxFifo>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	e043      	b.n	8009c52 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be0:	d118      	bne.n	8009c14 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	e013      	b.n	8009c26 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	e008      	b.n	8009c26 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c32:	461a      	mov	r2, r3
 8009c34:	2300      	movs	r3, #0
 8009c36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	461a      	mov	r2, r3
 8009c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d3b7      	bcc.n	8009bca <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	e043      	b.n	8009ce8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c76:	d118      	bne.n	8009caa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e013      	b.n	8009cbc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e008      	b.n	8009cbc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	2300      	movs	r3, #0
 8009cba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc8:	461a      	mov	r2, r3
 8009cca:	2300      	movs	r3, #0
 8009ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ce0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d3b7      	bcc.n	8009c60 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f043 0210 	orr.w	r2, r3, #16
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <USB_DevInit+0x294>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	f043 0208 	orr.w	r2, r3, #8
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d107      	bne.n	8009d52 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d4a:	f043 0304 	orr.w	r3, r3, #4
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d5e:	b004      	add	sp, #16
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	803c3800 	.word	0x803c3800

08009d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <USB_FlushTxFifo+0x64>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d901      	bls.n	8009d88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e01b      	b.n	8009dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	daf2      	bge.n	8009d76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	019b      	lsls	r3, r3, #6
 8009d98:	f043 0220 	orr.w	r2, r3, #32
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3301      	adds	r3, #1
 8009da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4a08      	ldr	r2, [pc, #32]	; (8009dcc <USB_FlushTxFifo+0x64>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d901      	bls.n	8009db2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e006      	b.n	8009dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d0f0      	beq.n	8009da0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	00030d40 	.word	0x00030d40

08009dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4a11      	ldr	r2, [pc, #68]	; (8009e2c <USB_FlushRxFifo+0x5c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d901      	bls.n	8009dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e018      	b.n	8009e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	daf2      	bge.n	8009ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2210      	movs	r2, #16
 8009dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4a08      	ldr	r2, [pc, #32]	; (8009e2c <USB_FlushRxFifo+0x5c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d901      	bls.n	8009e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e006      	b.n	8009e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d0f0      	beq.n	8009e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	00030d40 	.word	0x00030d40

08009e30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e50:	4313      	orrs	r3, r2
 8009e52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b087      	sub	sp, #28
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 0306 	and.w	r3, r3, #6
 8009e7a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d002      	beq.n	8009e88 <USB_GetDevSpeed+0x26>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b06      	cmp	r3, #6
 8009e86:	d102      	bne.n	8009e8e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	e001      	b.n	8009e92 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009e8e:	230f      	movs	r3, #15
 8009e90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d13a      	bne.n	8009f32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	2101      	movs	r1, #1
 8009ece:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	68f9      	ldr	r1, [r7, #12]
 8009ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eda:	4313      	orrs	r3, r2
 8009edc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d155      	bne.n	8009fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	791b      	ldrb	r3, [r3, #4]
 8009f0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	059b      	lsls	r3, r3, #22
 8009f16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	e036      	b.n	8009fa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f38:	69da      	ldr	r2, [r3, #28]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	2101      	movs	r1, #1
 8009f44:	fa01 f303 	lsl.w	r3, r1, r3
 8009f48:	041b      	lsls	r3, r3, #16
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f50:	4313      	orrs	r3, r2
 8009f52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d11a      	bne.n	8009fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	791b      	ldrb	r3, [r3, #4]
 8009f84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f86:	430b      	orrs	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
	...

08009fb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d161      	bne.n	800a090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe2:	d11f      	bne.n	800a024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a01e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	43db      	mvns	r3, r3
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a044:	4013      	ands	r3, r2
 800a046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 f303 	lsl.w	r3, r1, r3
 800a05e:	b29b      	uxth	r3, r3
 800a060:	43db      	mvns	r3, r3
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a068:	4013      	ands	r3, r2
 800a06a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	0159      	lsls	r1, r3, #5
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	440b      	add	r3, r1
 800a082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a086:	4619      	mov	r1, r3
 800a088:	4b35      	ldr	r3, [pc, #212]	; (800a160 <USB_DeactivateEndpoint+0x1b0>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]
 800a08e:	e060      	b.n	800a152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a6:	d11f      	bne.n	800a0e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	43db      	mvns	r3, r3
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a108:	4013      	ands	r3, r2
 800a10a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	2101      	movs	r1, #1
 800a11e:	fa01 f303 	lsl.w	r3, r1, r3
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	43db      	mvns	r3, r3
 800a126:	68f9      	ldr	r1, [r7, #12]
 800a128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a12c:	4013      	ands	r3, r2
 800a12e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	0159      	lsls	r1, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	440b      	add	r3, r1
 800a146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a14a:	4619      	mov	r1, r3
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <USB_DeactivateEndpoint+0x1b4>)
 800a14e:	4013      	ands	r3, r2
 800a150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	ec337800 	.word	0xec337800
 800a164:	eff37800 	.word	0xeff37800

0800a168 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b01      	cmp	r3, #1
 800a182:	f040 810a 	bne.w	800a39a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d132      	bne.n	800a1f4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	0151      	lsls	r1, r2, #5
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ec:	0cdb      	lsrs	r3, r3, #19
 800a1ee:	04db      	lsls	r3, r3, #19
 800a1f0:	6113      	str	r3, [r2, #16]
 800a1f2:	e074      	b.n	800a2de <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20e:	0cdb      	lsrs	r3, r3, #19
 800a210:	04db      	lsls	r3, r3, #19
 800a212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a244:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6999      	ldr	r1, [r3, #24]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	440b      	add	r3, r1
 800a250:	1e59      	subs	r1, r3, #1
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	fbb1 f3f3 	udiv	r3, r1, r3
 800a25a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a25c:	4b9e      	ldr	r3, [pc, #632]	; (800a4d8 <USB_EPStartXfer+0x370>)
 800a25e:	400b      	ands	r3, r1
 800a260:	6939      	ldr	r1, [r7, #16]
 800a262:	0148      	lsls	r0, r1, #5
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	4401      	add	r1, r0
 800a268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a26c:	4313      	orrs	r3, r2
 800a26e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27c:	691a      	ldr	r2, [r3, #16]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a286:	6939      	ldr	r1, [r7, #16]
 800a288:	0148      	lsls	r0, r1, #5
 800a28a:	6979      	ldr	r1, [r7, #20]
 800a28c:	4401      	add	r1, r0
 800a28e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a292:	4313      	orrs	r3, r2
 800a294:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	791b      	ldrb	r3, [r3, #4]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d11f      	bne.n	800a2de <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a2bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2dc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2fc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	791b      	ldrb	r3, [r3, #4]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d015      	beq.n	800a332 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8106 	beq.w	800a51c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	2101      	movs	r1, #1
 800a322:	fa01 f303 	lsl.w	r3, r1, r3
 800a326:	6979      	ldr	r1, [r7, #20]
 800a328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a32c:	4313      	orrs	r3, r2
 800a32e:	634b      	str	r3, [r1, #52]	; 0x34
 800a330:	e0f4      	b.n	800a51c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d110      	bne.n	800a364 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	440a      	add	r2, r1
 800a358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	e00f      	b.n	800a384 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	0151      	lsls	r1, r2, #5
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	440a      	add	r2, r1
 800a37a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a382:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	6919      	ldr	r1, [r3, #16]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	b29b      	uxth	r3, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fa94 	bl	800a8c0 <USB_WritePacket>
 800a398:	e0c0      	b.n	800a51c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b4:	0cdb      	lsrs	r3, r3, #19
 800a3b6:	04db      	lsls	r3, r3, #19
 800a3b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	0151      	lsls	r1, r2, #5
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	440a      	add	r2, r1
 800a3d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d123      	bne.n	800a42e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f2:	691a      	ldr	r2, [r3, #16]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3fc:	6939      	ldr	r1, [r7, #16]
 800a3fe:	0148      	lsls	r0, r1, #5
 800a400:	6979      	ldr	r1, [r7, #20]
 800a402:	4401      	add	r1, r0
 800a404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a408:	4313      	orrs	r3, r2
 800a40a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a42a:	6113      	str	r3, [r2, #16]
 800a42c:	e037      	b.n	800a49e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	4413      	add	r3, r2
 800a438:	1e5a      	subs	r2, r3, #1
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a442:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	89fa      	ldrh	r2, [r7, #14]
 800a44a:	fb03 f202 	mul.w	r2, r3, r2
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	89fb      	ldrh	r3, [r7, #14]
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	4b1c      	ldr	r3, [pc, #112]	; (800a4d8 <USB_EPStartXfer+0x370>)
 800a466:	400b      	ands	r3, r1
 800a468:	6939      	ldr	r1, [r7, #16]
 800a46a:	0148      	lsls	r0, r1, #5
 800a46c:	6979      	ldr	r1, [r7, #20]
 800a46e:	4401      	add	r1, r0
 800a470:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a474:	4313      	orrs	r3, r2
 800a476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a48e:	6939      	ldr	r1, [r7, #16]
 800a490:	0148      	lsls	r0, r1, #5
 800a492:	6979      	ldr	r1, [r7, #20]
 800a494:	4401      	add	r1, r0
 800a496:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a49a:	4313      	orrs	r3, r2
 800a49c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d12a      	bne.n	800a4fc <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d112      	bne.n	800a4dc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	e011      	b.n	800a4fc <USB_EPStartXfer+0x394>
 800a4d8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	0151      	lsls	r1, r2, #5
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	440a      	add	r2, r1
 800a512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a51a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop

0800a528 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	2b01      	cmp	r3, #1
 800a542:	f040 80ab 	bne.w	800a69c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d132      	bne.n	800a5b4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	0151      	lsls	r1, r2, #5
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	440a      	add	r2, r1
 800a564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a56c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	0151      	lsls	r1, r2, #5
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	440a      	add	r2, r1
 800a5a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ac:	0cdb      	lsrs	r3, r3, #19
 800a5ae:	04db      	lsls	r3, r3, #19
 800a5b0:	6113      	str	r3, [r2, #16]
 800a5b2:	e04e      	b.n	800a652 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ce:	0cdb      	lsrs	r3, r3, #19
 800a5d0:	04db      	lsls	r3, r3, #19
 800a5d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	0151      	lsls	r1, r2, #5
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	440a      	add	r2, r1
 800a5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	699a      	ldr	r2, [r3, #24]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d903      	bls.n	800a60c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	440a      	add	r2, r1
 800a622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a62a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	0148      	lsls	r0, r1, #5
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	4401      	add	r1, r0
 800a64a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a64e:	4313      	orrs	r3, r2
 800a650:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	440a      	add	r2, r1
 800a668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a670:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d071      	beq.n	800a75e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f003 030f 	and.w	r3, r3, #15
 800a68a:	2101      	movs	r1, #1
 800a68c:	fa01 f303 	lsl.w	r3, r1, r3
 800a690:	68f9      	ldr	r1, [r7, #12]
 800a692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a696:	4313      	orrs	r3, r2
 800a698:	634b      	str	r3, [r1, #52]	; 0x34
 800a69a:	e060      	b.n	800a75e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0151      	lsls	r1, r2, #5
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b6:	0cdb      	lsrs	r3, r3, #19
 800a6b8:	04db      	lsls	r3, r3, #19
 800a6ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	68da      	ldr	r2, [r3, #12]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	0148      	lsls	r0, r1, #5
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	4401      	add	r1, r0
 800a736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a73a:	4313      	orrs	r3, r2
 800a73c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a75c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d14a      	bne.n	800a820 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4413      	add	r3, r2
 800a794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a79e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a2:	f040 8086 	bne.w	800a8b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	7812      	ldrb	r2, [r2, #0]
 800a7ba:	0151      	lsls	r1, r2, #5
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	440a      	add	r2, r1
 800a7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	7812      	ldrb	r2, [r2, #0]
 800a7de:	0151      	lsls	r1, r2, #5
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	440a      	add	r2, r1
 800a7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d902      	bls.n	800a804 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
          break;
 800a802:	e056      	b.n	800a8b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81c:	d0e7      	beq.n	800a7ee <USB_EPStopXfer+0x82>
 800a81e:	e048      	b.n	800a8b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a838:	d13b      	bne.n	800a8b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	7812      	ldrb	r2, [r2, #0]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	440a      	add	r2, r1
 800a854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a85c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	0151      	lsls	r1, r2, #5
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	440a      	add	r2, r1
 800a878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a87c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a88e:	4293      	cmp	r3, r2
 800a890:	d902      	bls.n	800a898 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]
          break;
 800a896:	e00c      	b.n	800a8b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8b0:	d0e7      	beq.n	800a882 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b089      	sub	sp, #36	; 0x24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	71fb      	strb	r3, [r7, #7]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a8de:	88bb      	ldrh	r3, [r7, #4]
 800a8e0:	3303      	adds	r3, #3
 800a8e2:	089b      	lsrs	r3, r3, #2
 800a8e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61bb      	str	r3, [r7, #24]
 800a8ea:	e018      	b.n	800a91e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	031a      	lsls	r2, r3, #12
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	3301      	adds	r3, #1
 800a904:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	3301      	adds	r3, #1
 800a90a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	3301      	adds	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3301      	adds	r3, #1
 800a916:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	3301      	adds	r3, #1
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	d3e2      	bcc.n	800a8ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3724      	adds	r7, #36	; 0x24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a934:	b480      	push	{r7}
 800a936:	b08b      	sub	sp, #44	; 0x2c
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4613      	mov	r3, r2
 800a940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	089b      	lsrs	r3, r3, #2
 800a94e:	b29b      	uxth	r3, r3
 800a950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	623b      	str	r3, [r7, #32]
 800a95e:	e014      	b.n	800a98a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	3301      	adds	r3, #1
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	3301      	adds	r3, #1
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	3301      	adds	r3, #1
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	3301      	adds	r3, #1
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	3301      	adds	r3, #1
 800a988:	623b      	str	r3, [r7, #32]
 800a98a:	6a3a      	ldr	r2, [r7, #32]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d3e6      	bcc.n	800a960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a992:	8bfb      	ldrh	r3, [r7, #30]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d01e      	beq.n	800a9d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f107 0310 	add.w	r3, r7, #16
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	701a      	strb	r2, [r3, #0]
      i++;
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9ca:	8bfb      	ldrh	r3, [r7, #30]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9d0:	8bfb      	ldrh	r3, [r7, #30]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1ea      	bne.n	800a9ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	372c      	adds	r7, #44	; 0x2c
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d12c      	bne.n	800aa5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	db12      	blt.n	800aa38 <USB_EPSetStall+0x54>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	0151      	lsls	r1, r2, #5
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	440a      	add	r2, r1
 800aa2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	0151      	lsls	r1, r2, #5
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	440a      	add	r2, r1
 800aa4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	e02b      	b.n	800aab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	db12      	blt.n	800aa92 <USB_EPSetStall+0xae>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00f      	beq.n	800aa92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	0151      	lsls	r1, r2, #5
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	440a      	add	r2, r1
 800aaa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d128      	bne.n	800ab2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	0151      	lsls	r1, r2, #5
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	440a      	add	r2, r1
 800aaf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aafa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	791b      	ldrb	r3, [r3, #4]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d003      	beq.n	800ab0c <USB_EPClearStall+0x4c>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	791b      	ldrb	r3, [r3, #4]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d138      	bne.n	800ab7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	0151      	lsls	r1, r2, #5
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	440a      	add	r2, r1
 800ab22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	e027      	b.n	800ab7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	0151      	lsls	r1, r2, #5
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	440a      	add	r2, r1
 800ab44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	791b      	ldrb	r3, [r3, #4]
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d003      	beq.n	800ab5e <USB_EPClearStall+0x9e>
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	791b      	ldrb	r3, [r3, #4]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d10f      	bne.n	800ab7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	011b      	lsls	r3, r3, #4
 800abbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc6:	4313      	orrs	r3, r2
 800abc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac06:	f023 0302 	bic.w	r3, r3, #2
 800ac0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac34:	f023 0303 	bic.w	r3, r3, #3
 800ac38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac48:	f043 0302 	orr.w	r3, r3, #2
 800ac4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4013      	ands	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac74:	68fb      	ldr	r3, [r7, #12]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	4013      	ands	r3, r2
 800aca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	0c1b      	lsrs	r3, r3, #16
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	4013      	ands	r3, r2
 800acd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	b29b      	uxth	r3, r3
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	015a      	lsls	r2, r3, #5
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	4013      	ands	r3, r2
 800ad16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad18:	68bb      	ldr	r3, [r7, #8]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	fa22 f303 	lsr.w	r3, r2, r3
 800ad56:	01db      	lsls	r3, r3, #7
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4013      	ands	r3, r2
 800ad72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad74:	68bb      	ldr	r3, [r7, #8]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	371c      	adds	r7, #28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b083      	sub	sp, #12
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b085      	sub	sp, #20
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800adbc:	f023 0307 	bic.w	r3, r3, #7
 800adc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800add0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800add4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	333c      	adds	r3, #60	; 0x3c
 800adf6:	3304      	adds	r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	4a1c      	ldr	r2, [pc, #112]	; (800ae70 <USB_EP0_OutStart+0x8c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d90a      	bls.n	800ae1a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae14:	d101      	bne.n	800ae1a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e024      	b.n	800ae64 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae20:	461a      	mov	r2, r3
 800ae22:	2300      	movs	r3, #0
 800ae24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae48:	f043 0318 	orr.w	r3, r3, #24
 800ae4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae60:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	4f54300a 	.word	0x4f54300a

0800ae74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	4a13      	ldr	r2, [pc, #76]	; (800aed8 <USB_CoreReset+0x64>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d901      	bls.n	800ae92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e01b      	b.n	800aeca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	daf2      	bge.n	800ae80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	f043 0201 	orr.w	r2, r3, #1
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <USB_CoreReset+0x64>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d901      	bls.n	800aebc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e006      	b.n	800aeca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d0f0      	beq.n	800aeaa <USB_CoreReset+0x36>

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	00030d40 	.word	0x00030d40

0800aedc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aee0:	4904      	ldr	r1, [pc, #16]	; (800aef4 <MX_FATFS_Init+0x18>)
 800aee2:	4805      	ldr	r0, [pc, #20]	; (800aef8 <MX_FATFS_Init+0x1c>)
 800aee4:	f001 fe6e 	bl	800cbc4 <FATFS_LinkDriver>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	4b03      	ldr	r3, [pc, #12]	; (800aefc <MX_FATFS_Init+0x20>)
 800aeee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aef0:	bf00      	nop
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	200004b0 	.word	0x200004b0
 800aef8:	0800d970 	.word	0x0800d970
 800aefc:	200004ac 	.word	0x200004ac

0800af00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af0a:	f000 f879 	bl	800b000 <BSP_SD_IsDetected>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b01      	cmp	r3, #1
 800af12:	d001      	beq.n	800af18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af14:	2302      	movs	r3, #2
 800af16:	e012      	b.n	800af3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af18:	480b      	ldr	r0, [pc, #44]	; (800af48 <BSP_SD_Init+0x48>)
 800af1a:	f7fa fcd7 	bl	80058cc <HAL_SD_Init>
 800af1e:	4603      	mov	r3, r0
 800af20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af2c:	4806      	ldr	r0, [pc, #24]	; (800af48 <BSP_SD_Init+0x48>)
 800af2e:	f7fb fba3 	bl	8006678 <HAL_SD_ConfigWideBusOperation>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af3c:	79fb      	ldrb	r3, [r7, #7]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000254 	.word	0x20000254

0800af4c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af02      	add	r7, sp, #8
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	4806      	ldr	r0, [pc, #24]	; (800af84 <BSP_SD_ReadBlocks+0x38>)
 800af6a:	f7fa fdd7 	bl	8005b1c <HAL_SD_ReadBlocks>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20000254 	.word	0x20000254

0800af88 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	4806      	ldr	r0, [pc, #24]	; (800afc0 <BSP_SD_WriteBlocks+0x38>)
 800afa6:	f7fa ff4b 	bl	8005e40 <HAL_SD_WriteBlocks>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000254 	.word	0x20000254

0800afc4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afc8:	4805      	ldr	r0, [pc, #20]	; (800afe0 <BSP_SD_GetCardState+0x1c>)
 800afca:	f7fb fc69 	bl	80068a0 <HAL_SD_GetCardState>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	bf14      	ite	ne
 800afd4:	2301      	movne	r3, #1
 800afd6:	2300      	moveq	r3, #0
 800afd8:	b2db      	uxtb	r3, r3
}
 800afda:	4618      	mov	r0, r3
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000254 	.word	0x20000254

0800afe4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4803      	ldr	r0, [pc, #12]	; (800affc <BSP_SD_GetCardInfo+0x18>)
 800aff0:	f7fb fb16 	bl	8006620 <HAL_SD_GetCardInfo>
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000254 	.word	0x20000254

0800b000 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b006:	2301      	movs	r3, #1
 800b008:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b00a:	f000 f80b 	bl	800b024 <BSP_PlatformIsDetected>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b014:	2300      	movs	r3, #0
 800b016:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	b2db      	uxtb	r3, r3
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b02a:	2301      	movs	r3, #1
 800b02c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b02e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b036:	f7f6 fbf5 	bl	8001824 <HAL_GPIO_ReadPin>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800b040:	2300      	movs	r3, #0
 800b042:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b044:	79fb      	ldrb	r3, [r7, #7]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b05a:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <SD_CheckStatus+0x38>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b060:	f7ff ffb0 	bl	800afc4 <BSP_SD_GetCardState>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d107      	bne.n	800b07a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <SD_CheckStatus+0x38>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f023 0301 	bic.w	r3, r3, #1
 800b074:	b2da      	uxtb	r2, r3
 800b076:	4b04      	ldr	r3, [pc, #16]	; (800b088 <SD_CheckStatus+0x38>)
 800b078:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b07a:	4b03      	ldr	r3, [pc, #12]	; (800b088 <SD_CheckStatus+0x38>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b2db      	uxtb	r3, r3
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000009 	.word	0x20000009

0800b08c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <SD_initialize+0x38>)
 800b098:	2201      	movs	r2, #1
 800b09a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b09c:	f7ff ff30 	bl	800af00 <BSP_SD_Init>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff ffd1 	bl	800b050 <SD_CheckStatus>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <SD_initialize+0x38>)
 800b0b4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b0b6:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <SD_initialize+0x38>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	b2db      	uxtb	r3, r3
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20000009 	.word	0x20000009

0800b0c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff ffbb 	bl	800b050 <SD_CheckStatus>
 800b0da:	4603      	mov	r3, r0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	68b8      	ldr	r0, [r7, #8]
 800b102:	f7ff ff23 	bl	800af4c <BSP_SD_ReadBlocks>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d107      	bne.n	800b11c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b10c:	bf00      	nop
 800b10e:	f7ff ff59 	bl	800afc4 <BSP_SD_GetCardState>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1fa      	bne.n	800b10e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	4603      	mov	r3, r0
 800b134:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f7ff ff20 	bl	800af88 <BSP_SD_WriteBlocks>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d107      	bne.n	800b15e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b14e:	bf00      	nop
 800b150:	f7ff ff38 	bl	800afc4 <BSP_SD_GetCardState>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1fa      	bne.n	800b150 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08c      	sub	sp, #48	; 0x30
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	603a      	str	r2, [r7, #0]
 800b172:	71fb      	strb	r3, [r7, #7]
 800b174:	460b      	mov	r3, r1
 800b176:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b17e:	4b25      	ldr	r3, [pc, #148]	; (800b214 <SD_ioctl+0xac>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <SD_ioctl+0x28>
 800b18c:	2303      	movs	r3, #3
 800b18e:	e03c      	b.n	800b20a <SD_ioctl+0xa2>

  switch (cmd)
 800b190:	79bb      	ldrb	r3, [r7, #6]
 800b192:	2b03      	cmp	r3, #3
 800b194:	d834      	bhi.n	800b200 <SD_ioctl+0x98>
 800b196:	a201      	add	r2, pc, #4	; (adr r2, 800b19c <SD_ioctl+0x34>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b1ad 	.word	0x0800b1ad
 800b1a0:	0800b1b5 	.word	0x0800b1b5
 800b1a4:	0800b1cd 	.word	0x0800b1cd
 800b1a8:	0800b1e7 	.word	0x0800b1e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1b2:	e028      	b.n	800b206 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1b4:	f107 0308 	add.w	r3, r7, #8
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff ff13 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1be:	6a3a      	ldr	r2, [r7, #32]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1ca:	e01c      	b.n	800b206 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1cc:	f107 0308 	add.w	r3, r7, #8
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff ff07 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1e4:	e00f      	b.n	800b206 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fefa 	bl	800afe4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	0a5a      	lsrs	r2, r3, #9
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1fe:	e002      	b.n	800b206 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b200:	2304      	movs	r3, #4
 800b202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3730      	adds	r7, #48	; 0x30
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000009 	.word	0x20000009

0800b218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b224:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b228:	f002 fae2 	bl	800d7f0 <USBD_static_malloc>
 800b22c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d105      	bne.n	800b240 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b23c:	2302      	movs	r3, #2
 800b23e:	e066      	b.n	800b30e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	7c1b      	ldrb	r3, [r3, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d119      	bne.n	800b284 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b250:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b254:	2202      	movs	r2, #2
 800b256:	2181      	movs	r1, #129	; 0x81
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f002 f8b5 	bl	800d3c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b268:	2202      	movs	r2, #2
 800b26a:	2101      	movs	r1, #1
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f002 f8ab 	bl	800d3c8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2210      	movs	r2, #16
 800b27e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b282:	e016      	b.n	800b2b2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b284:	2340      	movs	r3, #64	; 0x40
 800b286:	2202      	movs	r2, #2
 800b288:	2181      	movs	r1, #129	; 0x81
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f002 f89c 	bl	800d3c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b296:	2340      	movs	r3, #64	; 0x40
 800b298:	2202      	movs	r2, #2
 800b29a:	2101      	movs	r1, #1
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f002 f893 	bl	800d3c8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2210      	movs	r2, #16
 800b2ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2b2:	2308      	movs	r3, #8
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	2182      	movs	r1, #130	; 0x82
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f002 f885 	bl	800d3c8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7c1b      	ldrb	r3, [r3, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d109      	bne.n	800b2fc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f002 f9e1 	bl	800d6bc <USBD_LL_PrepareReceive>
 800b2fa:	e007      	b.n	800b30c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b302:	2340      	movs	r3, #64	; 0x40
 800b304:	2101      	movs	r1, #1
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f002 f9d8 	bl	800d6bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b322:	2181      	movs	r1, #129	; 0x81
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f002 f88d 	bl	800d444 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b330:	2101      	movs	r1, #1
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f002 f886 	bl	800d444 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b340:	2182      	movs	r1, #130	; 0x82
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f002 f87e 	bl	800d444 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00e      	beq.n	800b380 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b372:	4618      	mov	r0, r3
 800b374:	f002 fa4a 	bl	800d80c <USBD_static_free>
    pdev->pClassData = NULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b39c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e0af      	b.n	800b514 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d03f      	beq.n	800b440 <USBD_CDC_Setup+0xb4>
 800b3c0:	2b20      	cmp	r3, #32
 800b3c2:	f040 809f 	bne.w	800b504 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	88db      	ldrh	r3, [r3, #6]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d02e      	beq.n	800b42c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	b25b      	sxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	da16      	bge.n	800b406 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b3e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	88d2      	ldrh	r2, [r2, #6]
 800b3ea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	88db      	ldrh	r3, [r3, #6]
 800b3f0:	2b07      	cmp	r3, #7
 800b3f2:	bf28      	it	cs
 800b3f4:	2307      	movcs	r3, #7
 800b3f6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	89fa      	ldrh	r2, [r7, #14]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 fb13 	bl	800ca2a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b404:	e085      	b.n	800b512 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	785a      	ldrb	r2, [r3, #1]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	88db      	ldrh	r3, [r3, #6]
 800b414:	b2da      	uxtb	r2, r3
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b41c:	6939      	ldr	r1, [r7, #16]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	88db      	ldrh	r3, [r3, #6]
 800b422:	461a      	mov	r2, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f001 fb2c 	bl	800ca82 <USBD_CtlPrepareRx>
      break;
 800b42a:	e072      	b.n	800b512 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	7850      	ldrb	r0, [r2, #1]
 800b438:	2200      	movs	r2, #0
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	4798      	blx	r3
      break;
 800b43e:	e068      	b.n	800b512 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	2b0b      	cmp	r3, #11
 800b446:	d852      	bhi.n	800b4ee <USBD_CDC_Setup+0x162>
 800b448:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <USBD_CDC_Setup+0xc4>)
 800b44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44e:	bf00      	nop
 800b450:	0800b481 	.word	0x0800b481
 800b454:	0800b4fd 	.word	0x0800b4fd
 800b458:	0800b4ef 	.word	0x0800b4ef
 800b45c:	0800b4ef 	.word	0x0800b4ef
 800b460:	0800b4ef 	.word	0x0800b4ef
 800b464:	0800b4ef 	.word	0x0800b4ef
 800b468:	0800b4ef 	.word	0x0800b4ef
 800b46c:	0800b4ef 	.word	0x0800b4ef
 800b470:	0800b4ef 	.word	0x0800b4ef
 800b474:	0800b4ef 	.word	0x0800b4ef
 800b478:	0800b4ab 	.word	0x0800b4ab
 800b47c:	0800b4d5 	.word	0x0800b4d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d107      	bne.n	800b49c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b48c:	f107 030a 	add.w	r3, r7, #10
 800b490:	2202      	movs	r2, #2
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 fac8 	bl	800ca2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b49a:	e032      	b.n	800b502 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 fa52 	bl	800c948 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	75fb      	strb	r3, [r7, #23]
          break;
 800b4a8:	e02b      	b.n	800b502 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d107      	bne.n	800b4c6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4b6:	f107 030d 	add.w	r3, r7, #13
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 fab3 	bl	800ca2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4c4:	e01d      	b.n	800b502 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fa3d 	bl	800c948 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b4d2:	e016      	b.n	800b502 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d00f      	beq.n	800b500 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 fa30 	bl	800c948 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4ec:	e008      	b.n	800b500 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fa29 	bl	800c948 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b4fa:	e002      	b.n	800b502 <USBD_CDC_Setup+0x176>
          break;
 800b4fc:	bf00      	nop
 800b4fe:	e008      	b.n	800b512 <USBD_CDC_Setup+0x186>
          break;
 800b500:	bf00      	nop
      }
      break;
 800b502:	e006      	b.n	800b512 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 fa1e 	bl	800c948 <USBD_CtlError>
      ret = USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	75fb      	strb	r3, [r7, #23]
      break;
 800b510:	bf00      	nop
  }

  return (uint8_t)ret;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b52e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e04f      	b.n	800b5de <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b544:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b546:	78fa      	ldrb	r2, [r7, #3]
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3318      	adds	r3, #24
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d029      	beq.n	800b5b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	3318      	adds	r3, #24
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	78f9      	ldrb	r1, [r7, #3]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	460b      	mov	r3, r1
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	440b      	add	r3, r1
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4403      	add	r3, r0
 800b57c:	3348      	adds	r3, #72	; 0x48
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	fbb2 f1f3 	udiv	r1, r2, r3
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d110      	bne.n	800b5b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b58e:	78fa      	ldrb	r2, [r7, #3]
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	4613      	mov	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	3318      	adds	r3, #24
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b5a2:	78f9      	ldrb	r1, [r7, #3]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f002 f84f 	bl	800d64c <USBD_LL_Transmit>
 800b5ae:	e015      	b.n	800b5dc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b5d8:	78fa      	ldrb	r2, [r7, #3]
 800b5da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e015      	b.n	800b634 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f002 f88d 	bl	800d72c <USBD_LL_GetRxDataSize>
 800b612:	4602      	mov	r2, r0
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b62e:	4611      	mov	r1, r2
 800b630:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b64a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b652:	2303      	movs	r3, #3
 800b654:	e01b      	b.n	800b68e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d015      	beq.n	800b68c <USBD_CDC_EP0_RxReady+0x50>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b666:	2bff      	cmp	r3, #255	; 0xff
 800b668:	d010      	beq.n	800b68c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b678:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b680:	b292      	uxth	r2, r2
 800b682:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	22ff      	movs	r2, #255	; 0xff
 800b688:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2243      	movs	r2, #67	; 0x43
 800b6a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b6a6:	4b03      	ldr	r3, [pc, #12]	; (800b6b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	20000094 	.word	0x20000094

0800b6b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2243      	movs	r2, #67	; 0x43
 800b6c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b6c6:	4b03      	ldr	r3, [pc, #12]	; (800b6d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	20000050 	.word	0x20000050

0800b6d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2243      	movs	r2, #67	; 0x43
 800b6e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	200000d8 	.word	0x200000d8

0800b6f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	220a      	movs	r2, #10
 800b704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b706:	4b03      	ldr	r3, [pc, #12]	; (800b714 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	2000000c 	.word	0x2000000c

0800b718 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b728:	2303      	movs	r3, #3
 800b72a:	e004      	b.n	800b736 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b754:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e008      	b.n	800b772 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b77e:	b480      	push	{r7}
 800b780:	b085      	sub	sp, #20
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b78e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b796:	2303      	movs	r3, #3
 800b798:	e004      	b.n	800b7a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e016      	b.n	800b7fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	7c1b      	ldrb	r3, [r3, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 ff6a 	bl	800d6bc <USBD_LL_PrepareReceive>
 800b7e8:	e007      	b.n	800b7fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 ff61 	bl	800d6bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b818:	2303      	movs	r3, #3
 800b81a:	e01f      	b.n	800b85c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	79fa      	ldrb	r2, [r7, #7]
 800b84e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f001 fd3d 	bl	800d2d0 <USBD_LL_Init>
 800b856:	4603      	mov	r3, r0
 800b858:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	e016      	b.n	800b8aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	f107 020e 	add.w	r2, r7, #14
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fd52 	bl	800d364 <USBD_LL_Start>
 800b8c0:	4603      	mov	r3, r0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	4611      	mov	r1, r2
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d007      	beq.n	800b93e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	78fa      	ldrb	r2, [r7, #3]
 800b938:	4611      	mov	r1, r2
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	4798      	blx	r3
  }

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 ffba 	bl	800c8d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b96e:	461a      	mov	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b97c:	f003 031f 	and.w	r3, r3, #31
 800b980:	2b02      	cmp	r3, #2
 800b982:	d01a      	beq.n	800b9ba <USBD_LL_SetupStage+0x72>
 800b984:	2b02      	cmp	r3, #2
 800b986:	d822      	bhi.n	800b9ce <USBD_LL_SetupStage+0x86>
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <USBD_LL_SetupStage+0x4a>
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d00a      	beq.n	800b9a6 <USBD_LL_SetupStage+0x5e>
 800b990:	e01d      	b.n	800b9ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fa62 	bl	800be64 <USBD_StdDevReq>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a4:	e020      	b.n	800b9e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fac6 	bl	800bf40 <USBD_StdItfReq>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b8:	e016      	b.n	800b9e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fb05 	bl	800bfd2 <USBD_StdEPReq>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b9cc:	e00c      	b.n	800b9e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 fd67 	bl	800d4b0 <USBD_LL_StallEP>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e6:	bf00      	nop
  }

  return ret;
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d138      	bne.n	800ba78 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	d14a      	bne.n	800baae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d913      	bls.n	800ba4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	1ad2      	subs	r2, r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	bf28      	it	cs
 800ba3e:	4613      	movcs	r3, r2
 800ba40:	461a      	mov	r2, r3
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f001 f839 	bl	800cabc <USBD_CtlContinueRx>
 800ba4a:	e030      	b.n	800baae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d10b      	bne.n	800ba70 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f001 f834 	bl	800cade <USBD_CtlSendStatus>
 800ba76:	e01a      	b.n	800baae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d114      	bne.n	800baae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	7afa      	ldrb	r2, [r7, #11]
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	4798      	blx	r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	e000      	b.n	800bab0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	460b      	mov	r3, r1
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d16b      	bne.n	800bba4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3314      	adds	r3, #20
 800bad0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d156      	bne.n	800bb8a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d914      	bls.n	800bb12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	1ad2      	subs	r2, r2, r3
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	461a      	mov	r2, r3
 800bafc:	6879      	ldr	r1, [r7, #4]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 ffae 	bl	800ca60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f001 fdd6 	bl	800d6bc <USBD_LL_PrepareReceive>
 800bb10:	e03b      	b.n	800bb8a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d11c      	bne.n	800bb58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d316      	bcc.n	800bb58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d20f      	bcs.n	800bb58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 ff8f 	bl	800ca60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2100      	movs	r1, #0
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 fdb3 	bl	800d6bc <USBD_LL_PrepareReceive>
 800bb56:	e018      	b.n	800bb8a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d10b      	bne.n	800bb7c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb7c:	2180      	movs	r1, #128	; 0x80
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f001 fc96 	bl	800d4b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 ffbd 	bl	800cb04 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d122      	bne.n	800bbda <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff fe98 	bl	800b8ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bba2:	e01a      	b.n	800bbda <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d114      	bne.n	800bbda <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00e      	beq.n	800bbda <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	7afa      	ldrb	r2, [r7, #11]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	4798      	blx	r3
 800bbcc:	4603      	mov	r3, r0
 800bbce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	e000      	b.n	800bbdc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e02f      	b.n	800bc78 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00f      	beq.n	800bc42 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	6852      	ldr	r2, [r2, #4]
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc42:	2340      	movs	r3, #64	; 0x40
 800bc44:	2200      	movs	r2, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f001 fbbd 	bl	800d3c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2240      	movs	r2, #64	; 0x40
 800bc5a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc5e:	2340      	movs	r3, #64	; 0x40
 800bc60:	2200      	movs	r2, #0
 800bc62:	2180      	movs	r1, #128	; 0x80
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f001 fbaf 	bl	800d3c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2240      	movs	r2, #64	; 0x40
 800bc74:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	78fa      	ldrb	r2, [r7, #3]
 800bc90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2204      	movs	r2, #4
 800bcba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b04      	cmp	r3, #4
 800bcde:	d106      	bne.n	800bcee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e012      	b.n	800bd38 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d10b      	bne.n	800bd36 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d005      	beq.n	800bd36 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e014      	b.n	800bd84 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d10d      	bne.n	800bd82 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d007      	beq.n	800bd82 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e014      	b.n	800bdd0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d10d      	bne.n	800bdce <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d007      	beq.n	800bdce <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	6852      	ldr	r2, [r2, #4]
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	4611      	mov	r1, r2
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	4798      	blx	r3
  }

  return USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be26:	b480      	push	{r7}
 800be28:	b087      	sub	sp, #28
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	3301      	adds	r3, #1
 800be3c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be44:	8a3b      	ldrh	r3, [r7, #16]
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	b21a      	sxth	r2, r3
 800be4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be4e:	4313      	orrs	r3, r2
 800be50:	b21b      	sxth	r3, r3
 800be52:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be54:	89fb      	ldrh	r3, [r7, #14]
}
 800be56:	4618      	mov	r0, r3
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
	...

0800be64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be7a:	2b40      	cmp	r3, #64	; 0x40
 800be7c:	d005      	beq.n	800be8a <USBD_StdDevReq+0x26>
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	d853      	bhi.n	800bf2a <USBD_StdDevReq+0xc6>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00b      	beq.n	800be9e <USBD_StdDevReq+0x3a>
 800be86:	2b20      	cmp	r3, #32
 800be88:	d14f      	bne.n	800bf2a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]
      break;
 800be9c:	e04a      	b.n	800bf34 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	785b      	ldrb	r3, [r3, #1]
 800bea2:	2b09      	cmp	r3, #9
 800bea4:	d83b      	bhi.n	800bf1e <USBD_StdDevReq+0xba>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <USBD_StdDevReq+0x48>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bf01 	.word	0x0800bf01
 800beb0:	0800bf15 	.word	0x0800bf15
 800beb4:	0800bf1f 	.word	0x0800bf1f
 800beb8:	0800bf0b 	.word	0x0800bf0b
 800bebc:	0800bf1f 	.word	0x0800bf1f
 800bec0:	0800bedf 	.word	0x0800bedf
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bf1f 	.word	0x0800bf1f
 800becc:	0800bef7 	.word	0x0800bef7
 800bed0:	0800bee9 	.word	0x0800bee9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f9de 	bl	800c298 <USBD_GetDescriptor>
          break;
 800bedc:	e024      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fb6d 	bl	800c5c0 <USBD_SetAddress>
          break;
 800bee6:	e01f      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fbac 	bl	800c648 <USBD_SetConfig>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
          break;
 800bef4:	e018      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fc4b 	bl	800c794 <USBD_GetConfig>
          break;
 800befe:	e013      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fc7c 	bl	800c800 <USBD_GetStatus>
          break;
 800bf08:	e00e      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fcab 	bl	800c868 <USBD_SetFeature>
          break;
 800bf12:	e009      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fcba 	bl	800c890 <USBD_ClrFeature>
          break;
 800bf1c:	e004      	b.n	800bf28 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fd11 	bl	800c948 <USBD_CtlError>
          break;
 800bf26:	bf00      	nop
      }
      break;
 800bf28:	e004      	b.n	800bf34 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fd0b 	bl	800c948 <USBD_CtlError>
      break;
 800bf32:	bf00      	nop
  }

  return ret;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop

0800bf40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf56:	2b40      	cmp	r3, #64	; 0x40
 800bf58:	d005      	beq.n	800bf66 <USBD_StdItfReq+0x26>
 800bf5a:	2b40      	cmp	r3, #64	; 0x40
 800bf5c:	d82f      	bhi.n	800bfbe <USBD_StdItfReq+0x7e>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <USBD_StdItfReq+0x26>
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d12b      	bne.n	800bfbe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d81d      	bhi.n	800bfb0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	889b      	ldrh	r3, [r3, #4]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d813      	bhi.n	800bfa6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	4798      	blx	r3
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d110      	bne.n	800bfba <USBD_StdItfReq+0x7a>
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10d      	bne.n	800bfba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fd9d 	bl	800cade <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfa4:	e009      	b.n	800bfba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fccd 	bl	800c948 <USBD_CtlError>
          break;
 800bfae:	e004      	b.n	800bfba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fcc8 	bl	800c948 <USBD_CtlError>
          break;
 800bfb8:	e000      	b.n	800bfbc <USBD_StdItfReq+0x7c>
          break;
 800bfba:	bf00      	nop
      }
      break;
 800bfbc:	e004      	b.n	800bfc8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fcc1 	bl	800c948 <USBD_CtlError>
      break;
 800bfc6:	bf00      	nop
  }

  return ret;
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	889b      	ldrh	r3, [r3, #4]
 800bfe4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfee:	2b40      	cmp	r3, #64	; 0x40
 800bff0:	d007      	beq.n	800c002 <USBD_StdEPReq+0x30>
 800bff2:	2b40      	cmp	r3, #64	; 0x40
 800bff4:	f200 8145 	bhi.w	800c282 <USBD_StdEPReq+0x2b0>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00c      	beq.n	800c016 <USBD_StdEPReq+0x44>
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	f040 8140 	bne.w	800c282 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	4798      	blx	r3
 800c010:	4603      	mov	r3, r0
 800c012:	73fb      	strb	r3, [r7, #15]
      break;
 800c014:	e13a      	b.n	800c28c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d007      	beq.n	800c02e <USBD_StdEPReq+0x5c>
 800c01e:	2b03      	cmp	r3, #3
 800c020:	f300 8129 	bgt.w	800c276 <USBD_StdEPReq+0x2a4>
 800c024:	2b00      	cmp	r3, #0
 800c026:	d07f      	beq.n	800c128 <USBD_StdEPReq+0x156>
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d03c      	beq.n	800c0a6 <USBD_StdEPReq+0xd4>
 800c02c:	e123      	b.n	800c276 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b02      	cmp	r3, #2
 800c038:	d002      	beq.n	800c040 <USBD_StdEPReq+0x6e>
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d016      	beq.n	800c06c <USBD_StdEPReq+0x9a>
 800c03e:	e02c      	b.n	800c09a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00d      	beq.n	800c062 <USBD_StdEPReq+0x90>
 800c046:	7bbb      	ldrb	r3, [r7, #14]
 800c048:	2b80      	cmp	r3, #128	; 0x80
 800c04a:	d00a      	beq.n	800c062 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 fa2d 	bl	800d4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c056:	2180      	movs	r1, #128	; 0x80
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 fa29 	bl	800d4b0 <USBD_LL_StallEP>
 800c05e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c060:	e020      	b.n	800c0a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fc6f 	bl	800c948 <USBD_CtlError>
              break;
 800c06a:	e01b      	b.n	800c0a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	885b      	ldrh	r3, [r3, #2]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10e      	bne.n	800c092 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <USBD_StdEPReq+0xc0>
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	2b80      	cmp	r3, #128	; 0x80
 800c07e:	d008      	beq.n	800c092 <USBD_StdEPReq+0xc0>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	88db      	ldrh	r3, [r3, #6]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d104      	bne.n	800c092 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f001 fa0f 	bl	800d4b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fd23 	bl	800cade <USBD_CtlSendStatus>

              break;
 800c098:	e004      	b.n	800c0a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fc53 	bl	800c948 <USBD_CtlError>
              break;
 800c0a2:	bf00      	nop
          }
          break;
 800c0a4:	e0ec      	b.n	800c280 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d002      	beq.n	800c0b8 <USBD_StdEPReq+0xe6>
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d016      	beq.n	800c0e4 <USBD_StdEPReq+0x112>
 800c0b6:	e030      	b.n	800c11a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00d      	beq.n	800c0da <USBD_StdEPReq+0x108>
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b80      	cmp	r3, #128	; 0x80
 800c0c2:	d00a      	beq.n	800c0da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 f9f1 	bl	800d4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ce:	2180      	movs	r1, #128	; 0x80
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f001 f9ed 	bl	800d4b0 <USBD_LL_StallEP>
 800c0d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0d8:	e025      	b.n	800c126 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fc33 	bl	800c948 <USBD_CtlError>
              break;
 800c0e2:	e020      	b.n	800c126 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	885b      	ldrh	r3, [r3, #2]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d11b      	bne.n	800c124 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f001 fa0e 	bl	800d51c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fcec 	bl	800cade <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	4798      	blx	r3
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c118:	e004      	b.n	800c124 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fc13 	bl	800c948 <USBD_CtlError>
              break;
 800c122:	e000      	b.n	800c126 <USBD_StdEPReq+0x154>
              break;
 800c124:	bf00      	nop
          }
          break;
 800c126:	e0ab      	b.n	800c280 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b02      	cmp	r3, #2
 800c132:	d002      	beq.n	800c13a <USBD_StdEPReq+0x168>
 800c134:	2b03      	cmp	r3, #3
 800c136:	d032      	beq.n	800c19e <USBD_StdEPReq+0x1cc>
 800c138:	e097      	b.n	800c26a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <USBD_StdEPReq+0x17e>
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d004      	beq.n	800c150 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fbfd 	bl	800c948 <USBD_CtlError>
                break;
 800c14e:	e091      	b.n	800c274 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c154:	2b00      	cmp	r3, #0
 800c156:	da0b      	bge.n	800c170 <USBD_StdEPReq+0x19e>
 800c158:	7bbb      	ldrb	r3, [r7, #14]
 800c15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	3310      	adds	r3, #16
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4413      	add	r3, r2
 800c16c:	3304      	adds	r3, #4
 800c16e:	e00b      	b.n	800c188 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	4413      	add	r3, r2
 800c186:	3304      	adds	r3, #4
 800c188:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2202      	movs	r2, #2
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fc47 	bl	800ca2a <USBD_CtlSendData>
              break;
 800c19c:	e06a      	b.n	800c274 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c19e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	da11      	bge.n	800c1ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1a6:	7bbb      	ldrb	r3, [r7, #14]
 800c1a8:	f003 020f 	and.w	r2, r3, #15
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3324      	adds	r3, #36	; 0x24
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d117      	bne.n	800c1f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fbc0 	bl	800c948 <USBD_CtlError>
                  break;
 800c1c8:	e054      	b.n	800c274 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1ca:	7bbb      	ldrb	r3, [r7, #14]
 800c1cc:	f003 020f 	and.w	r2, r3, #15
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	440b      	add	r3, r1
 800c1dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d104      	bne.n	800c1f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fbad 	bl	800c948 <USBD_CtlError>
                  break;
 800c1ee:	e041      	b.n	800c274 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da0b      	bge.n	800c210 <USBD_StdEPReq+0x23e>
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	3310      	adds	r3, #16
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	4413      	add	r3, r2
 800c20c:	3304      	adds	r3, #4
 800c20e:	e00b      	b.n	800c228 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	4413      	add	r3, r2
 800c226:	3304      	adds	r3, #4
 800c228:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <USBD_StdEPReq+0x264>
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2b80      	cmp	r3, #128	; 0x80
 800c234:	d103      	bne.n	800c23e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	e00e      	b.n	800c25c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	4619      	mov	r1, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 f9a0 	bl	800d588 <USBD_LL_IsStallEP>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2201      	movs	r2, #1
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e002      	b.n	800c25c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2202      	movs	r2, #2
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fbe1 	bl	800ca2a <USBD_CtlSendData>
              break;
 800c268:	e004      	b.n	800c274 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fb6b 	bl	800c948 <USBD_CtlError>
              break;
 800c272:	bf00      	nop
          }
          break;
 800c274:	e004      	b.n	800c280 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fb65 	bl	800c948 <USBD_CtlError>
          break;
 800c27e:	bf00      	nop
      }
      break;
 800c280:	e004      	b.n	800c28c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fb5f 	bl	800c948 <USBD_CtlError>
      break;
 800c28a:	bf00      	nop
  }

  return ret;
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	0a1b      	lsrs	r3, r3, #8
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	2b0e      	cmp	r3, #14
 800c2ba:	f200 8152 	bhi.w	800c562 <USBD_GetDescriptor+0x2ca>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <USBD_GetDescriptor+0x2c>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c335 	.word	0x0800c335
 800c2c8:	0800c34d 	.word	0x0800c34d
 800c2cc:	0800c38d 	.word	0x0800c38d
 800c2d0:	0800c563 	.word	0x0800c563
 800c2d4:	0800c563 	.word	0x0800c563
 800c2d8:	0800c503 	.word	0x0800c503
 800c2dc:	0800c52f 	.word	0x0800c52f
 800c2e0:	0800c563 	.word	0x0800c563
 800c2e4:	0800c563 	.word	0x0800c563
 800c2e8:	0800c563 	.word	0x0800c563
 800c2ec:	0800c563 	.word	0x0800c563
 800c2f0:	0800c563 	.word	0x0800c563
 800c2f4:	0800c563 	.word	0x0800c563
 800c2f8:	0800c563 	.word	0x0800c563
 800c2fc:	0800c301 	.word	0x0800c301
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	7c12      	ldrb	r2, [r2, #16]
 800c318:	f107 0108 	add.w	r1, r7, #8
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
 800c320:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c322:	e126      	b.n	800c572 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fb0e 	bl	800c948 <USBD_CtlError>
        err++;
 800c32c:	7afb      	ldrb	r3, [r7, #11]
 800c32e:	3301      	adds	r3, #1
 800c330:	72fb      	strb	r3, [r7, #11]
      break;
 800c332:	e11e      	b.n	800c572 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	7c12      	ldrb	r2, [r2, #16]
 800c340:	f107 0108 	add.w	r1, r7, #8
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3
 800c348:	60f8      	str	r0, [r7, #12]
      break;
 800c34a:	e112      	b.n	800c572 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7c1b      	ldrb	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10d      	bne.n	800c370 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35c:	f107 0208 	add.w	r2, r7, #8
 800c360:	4610      	mov	r0, r2
 800c362:	4798      	blx	r3
 800c364:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3301      	adds	r3, #1
 800c36a:	2202      	movs	r2, #2
 800c36c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c36e:	e100      	b.n	800c572 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c378:	f107 0208 	add.w	r2, r7, #8
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
 800c380:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3301      	adds	r3, #1
 800c386:	2202      	movs	r2, #2
 800c388:	701a      	strb	r2, [r3, #0]
      break;
 800c38a:	e0f2      	b.n	800c572 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	885b      	ldrh	r3, [r3, #2]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b05      	cmp	r3, #5
 800c394:	f200 80ac 	bhi.w	800c4f0 <USBD_GetDescriptor+0x258>
 800c398:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USBD_GetDescriptor+0x108>)
 800c39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39e:	bf00      	nop
 800c3a0:	0800c3b9 	.word	0x0800c3b9
 800c3a4:	0800c3ed 	.word	0x0800c3ed
 800c3a8:	0800c421 	.word	0x0800c421
 800c3ac:	0800c455 	.word	0x0800c455
 800c3b0:	0800c489 	.word	0x0800c489
 800c3b4:	0800c4bd 	.word	0x0800c4bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3da:	e091      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fab2 	bl	800c948 <USBD_CtlError>
            err++;
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ea:	e089      	b.n	800c500 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00b      	beq.n	800c410 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7c12      	ldrb	r2, [r2, #16]
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c40e:	e077      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa98 	bl	800c948 <USBD_CtlError>
            err++;
 800c418:	7afb      	ldrb	r3, [r7, #11]
 800c41a:	3301      	adds	r3, #1
 800c41c:	72fb      	strb	r3, [r7, #11]
          break;
 800c41e:	e06f      	b.n	800c500 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	7c12      	ldrb	r2, [r2, #16]
 800c438:	f107 0108 	add.w	r1, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c442:	e05d      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa7e 	bl	800c948 <USBD_CtlError>
            err++;
 800c44c:	7afb      	ldrb	r3, [r7, #11]
 800c44e:	3301      	adds	r3, #1
 800c450:	72fb      	strb	r3, [r7, #11]
          break;
 800c452:	e055      	b.n	800c500 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	7c12      	ldrb	r2, [r2, #16]
 800c46c:	f107 0108 	add.w	r1, r7, #8
 800c470:	4610      	mov	r0, r2
 800c472:	4798      	blx	r3
 800c474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c476:	e043      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fa64 	bl	800c948 <USBD_CtlError>
            err++;
 800c480:	7afb      	ldrb	r3, [r7, #11]
 800c482:	3301      	adds	r3, #1
 800c484:	72fb      	strb	r3, [r7, #11]
          break;
 800c486:	e03b      	b.n	800c500 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00b      	beq.n	800c4ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c49a:	695b      	ldr	r3, [r3, #20]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	7c12      	ldrb	r2, [r2, #16]
 800c4a0:	f107 0108 	add.w	r1, r7, #8
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4798      	blx	r3
 800c4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4aa:	e029      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fa4a 	bl	800c948 <USBD_CtlError>
            err++;
 800c4b4:	7afb      	ldrb	r3, [r7, #11]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ba:	e021      	b.n	800c500 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00b      	beq.n	800c4e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	7c12      	ldrb	r2, [r2, #16]
 800c4d4:	f107 0108 	add.w	r1, r7, #8
 800c4d8:	4610      	mov	r0, r2
 800c4da:	4798      	blx	r3
 800c4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4de:	e00f      	b.n	800c500 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fa30 	bl	800c948 <USBD_CtlError>
            err++;
 800c4e8:	7afb      	ldrb	r3, [r7, #11]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ee:	e007      	b.n	800c500 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fa28 	bl	800c948 <USBD_CtlError>
          err++;
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c4fe:	bf00      	nop
      }
      break;
 800c500:	e037      	b.n	800c572 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	7c1b      	ldrb	r3, [r3, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d109      	bne.n	800c51e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c512:	f107 0208 	add.w	r2, r7, #8
 800c516:	4610      	mov	r0, r2
 800c518:	4798      	blx	r3
 800c51a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c51c:	e029      	b.n	800c572 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fa11 	bl	800c948 <USBD_CtlError>
        err++;
 800c526:	7afb      	ldrb	r3, [r7, #11]
 800c528:	3301      	adds	r3, #1
 800c52a:	72fb      	strb	r3, [r7, #11]
      break;
 800c52c:	e021      	b.n	800c572 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7c1b      	ldrb	r3, [r3, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10d      	bne.n	800c552 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53e:	f107 0208 	add.w	r2, r7, #8
 800c542:	4610      	mov	r0, r2
 800c544:	4798      	blx	r3
 800c546:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	3301      	adds	r3, #1
 800c54c:	2207      	movs	r2, #7
 800c54e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c550:	e00f      	b.n	800c572 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f9f7 	bl	800c948 <USBD_CtlError>
        err++;
 800c55a:	7afb      	ldrb	r3, [r7, #11]
 800c55c:	3301      	adds	r3, #1
 800c55e:	72fb      	strb	r3, [r7, #11]
      break;
 800c560:	e007      	b.n	800c572 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f9ef 	bl	800c948 <USBD_CtlError>
      err++;
 800c56a:	7afb      	ldrb	r3, [r7, #11]
 800c56c:	3301      	adds	r3, #1
 800c56e:	72fb      	strb	r3, [r7, #11]
      break;
 800c570:	bf00      	nop
  }

  if (err != 0U)
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d11e      	bne.n	800c5b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	88db      	ldrh	r3, [r3, #6]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d016      	beq.n	800c5ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c580:	893b      	ldrh	r3, [r7, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	88da      	ldrh	r2, [r3, #6]
 800c58a:	893b      	ldrh	r3, [r7, #8]
 800c58c:	4293      	cmp	r3, r2
 800c58e:	bf28      	it	cs
 800c590:	4613      	movcs	r3, r2
 800c592:	b29b      	uxth	r3, r3
 800c594:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c596:	893b      	ldrh	r3, [r7, #8]
 800c598:	461a      	mov	r2, r3
 800c59a:	68f9      	ldr	r1, [r7, #12]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa44 	bl	800ca2a <USBD_CtlSendData>
 800c5a2:	e009      	b.n	800c5b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f9ce 	bl	800c948 <USBD_CtlError>
 800c5ac:	e004      	b.n	800c5b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa95 	bl	800cade <USBD_CtlSendStatus>
 800c5b4:	e000      	b.n	800c5b8 <USBD_GetDescriptor+0x320>
    return;
 800c5b6:	bf00      	nop
  }
}
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop

0800c5c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	889b      	ldrh	r3, [r3, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d131      	bne.n	800c636 <USBD_SetAddress+0x76>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	88db      	ldrh	r3, [r3, #6]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d12d      	bne.n	800c636 <USBD_SetAddress+0x76>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	885b      	ldrh	r3, [r3, #2]
 800c5de:	2b7f      	cmp	r3, #127	; 0x7f
 800c5e0:	d829      	bhi.n	800c636 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	d104      	bne.n	800c604 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f9a3 	bl	800c948 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	e01d      	b.n	800c640 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7bfa      	ldrb	r2, [r7, #15]
 800c608:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 ffe5 	bl	800d5e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa61 	bl	800cade <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d004      	beq.n	800c62c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2202      	movs	r2, #2
 800c626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	e009      	b.n	800c640 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c634:	e004      	b.n	800c640 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f985 	bl	800c948 <USBD_CtlError>
  }
}
 800c63e:	bf00      	nop
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	885b      	ldrh	r3, [r3, #2]
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	4b4c      	ldr	r3, [pc, #304]	; (800c790 <USBD_SetConfig+0x148>)
 800c65e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c660:	4b4b      	ldr	r3, [pc, #300]	; (800c790 <USBD_SetConfig+0x148>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d905      	bls.n	800c674 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f96c 	bl	800c948 <USBD_CtlError>
    return USBD_FAIL;
 800c670:	2303      	movs	r3, #3
 800c672:	e088      	b.n	800c786 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d002      	beq.n	800c686 <USBD_SetConfig+0x3e>
 800c680:	2b03      	cmp	r3, #3
 800c682:	d025      	beq.n	800c6d0 <USBD_SetConfig+0x88>
 800c684:	e071      	b.n	800c76a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c686:	4b42      	ldr	r3, [pc, #264]	; (800c790 <USBD_SetConfig+0x148>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d01c      	beq.n	800c6c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c68e:	4b40      	ldr	r3, [pc, #256]	; (800c790 <USBD_SetConfig+0x148>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c698:	4b3d      	ldr	r3, [pc, #244]	; (800c790 <USBD_SetConfig+0x148>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	4619      	mov	r1, r3
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff f91e 	bl	800b8e0 <USBD_SetClassConfig>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f949 	bl	800c948 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6b6:	e065      	b.n	800c784 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fa10 	bl	800cade <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2203      	movs	r2, #3
 800c6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6c6:	e05d      	b.n	800c784 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa08 	bl	800cade <USBD_CtlSendStatus>
      break;
 800c6ce:	e059      	b.n	800c784 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6d0:	4b2f      	ldr	r3, [pc, #188]	; (800c790 <USBD_SetConfig+0x148>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d112      	bne.n	800c6fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c6e0:	4b2b      	ldr	r3, [pc, #172]	; (800c790 <USBD_SetConfig+0x148>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6ea:	4b29      	ldr	r3, [pc, #164]	; (800c790 <USBD_SetConfig+0x148>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff f911 	bl	800b918 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f9f1 	bl	800cade <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6fc:	e042      	b.n	800c784 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c6fe:	4b24      	ldr	r3, [pc, #144]	; (800c790 <USBD_SetConfig+0x148>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d02a      	beq.n	800c762 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7ff f8ff 	bl	800b918 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c71a:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <USBD_SetConfig+0x148>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c724:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <USBD_SetConfig+0x148>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7ff f8d8 	bl	800b8e0 <USBD_SetClassConfig>
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c734:	7bfb      	ldrb	r3, [r7, #15]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00f      	beq.n	800c75a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f903 	bl	800c948 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	b2db      	uxtb	r3, r3
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff f8e4 	bl	800b918 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c758:	e014      	b.n	800c784 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f9bf 	bl	800cade <USBD_CtlSendStatus>
      break;
 800c760:	e010      	b.n	800c784 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9bb 	bl	800cade <USBD_CtlSendStatus>
      break;
 800c768:	e00c      	b.n	800c784 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f8eb 	bl	800c948 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c772:	4b07      	ldr	r3, [pc, #28]	; (800c790 <USBD_SetConfig+0x148>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff f8cd 	bl	800b918 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c77e:	2303      	movs	r3, #3
 800c780:	73fb      	strb	r3, [r7, #15]
      break;
 800c782:	bf00      	nop
  }

  return ret;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	200004b4 	.word	0x200004b4

0800c794 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	88db      	ldrh	r3, [r3, #6]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d004      	beq.n	800c7b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f8cd 	bl	800c948 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ae:	e023      	b.n	800c7f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	dc02      	bgt.n	800c7c2 <USBD_GetConfig+0x2e>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dc03      	bgt.n	800c7c8 <USBD_GetConfig+0x34>
 800c7c0:	e015      	b.n	800c7ee <USBD_GetConfig+0x5a>
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d00b      	beq.n	800c7de <USBD_GetConfig+0x4a>
 800c7c6:	e012      	b.n	800c7ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f927 	bl	800ca2a <USBD_CtlSendData>
        break;
 800c7dc:	e00c      	b.n	800c7f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f91f 	bl	800ca2a <USBD_CtlSendData>
        break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f8a9 	bl	800c948 <USBD_CtlError>
        break;
 800c7f6:	bf00      	nop
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c810:	b2db      	uxtb	r3, r3
 800c812:	3b01      	subs	r3, #1
 800c814:	2b02      	cmp	r3, #2
 800c816:	d81e      	bhi.n	800c856 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	88db      	ldrh	r3, [r3, #6]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d004      	beq.n	800c82a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f890 	bl	800c948 <USBD_CtlError>
        break;
 800c828:	e01a      	b.n	800c860 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d005      	beq.n	800c846 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f043 0202 	orr.w	r2, r3, #2
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	330c      	adds	r3, #12
 800c84a:	2202      	movs	r2, #2
 800c84c:	4619      	mov	r1, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f8eb 	bl	800ca2a <USBD_CtlSendData>
      break;
 800c854:	e004      	b.n	800c860 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f875 	bl	800c948 <USBD_CtlError>
      break;
 800c85e:	bf00      	nop
  }
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d106      	bne.n	800c888 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f92b 	bl	800cade <USBD_CtlSendStatus>
  }
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d80b      	bhi.n	800c8c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	885b      	ldrh	r3, [r3, #2]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d10c      	bne.n	800c8ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f910 	bl	800cade <USBD_CtlSendStatus>
      }
      break;
 800c8be:	e004      	b.n	800c8ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f840 	bl	800c948 <USBD_CtlError>
      break;
 800c8c8:	e000      	b.n	800c8cc <USBD_ClrFeature+0x3c>
      break;
 800c8ca:	bf00      	nop
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	781a      	ldrb	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	781a      	ldrb	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7ff fa91 	bl	800be26 <SWAPBYTE>
 800c904:	4603      	mov	r3, r0
 800c906:	461a      	mov	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	3301      	adds	r3, #1
 800c910:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3301      	adds	r3, #1
 800c916:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff fa84 	bl	800be26 <SWAPBYTE>
 800c91e:	4603      	mov	r3, r0
 800c920:	461a      	mov	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3301      	adds	r3, #1
 800c930:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff fa77 	bl	800be26 <SWAPBYTE>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	80da      	strh	r2, [r3, #6]
}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c952:	2180      	movs	r1, #128	; 0x80
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fdab 	bl	800d4b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c95a:	2100      	movs	r1, #0
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fda7 	bl	800d4b0 <USBD_LL_StallEP>
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d036      	beq.n	800c9ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c984:	6938      	ldr	r0, [r7, #16]
 800c986:	f000 f836 	bl	800c9f6 <USBD_GetLen>
 800c98a:	4603      	mov	r3, r0
 800c98c:	3301      	adds	r3, #1
 800c98e:	b29b      	uxth	r3, r3
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c998:	7dfb      	ldrb	r3, [r7, #23]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	7812      	ldrb	r2, [r2, #0]
 800c9a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9aa:	7dfb      	ldrb	r3, [r7, #23]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	2203      	movs	r2, #3
 800c9b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9ba:	e013      	b.n	800c9e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	7812      	ldrb	r2, [r2, #0]
 800c9c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	613b      	str	r3, [r7, #16]
    idx++;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e7      	bne.n	800c9bc <USBD_GetString+0x52>
 800c9ec:	e000      	b.n	800c9f0 <USBD_GetString+0x86>
    return;
 800c9ee:	bf00      	nop
  }
}
 800c9f0:	3718      	adds	r7, #24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca06:	e005      	b.n	800ca14 <USBD_GetLen+0x1e>
  {
    len++;
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	3301      	adds	r3, #1
 800ca12:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1f5      	bne.n	800ca08 <USBD_GetLen+0x12>
  }

  return len;
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2202      	movs	r2, #2
 800ca3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	2100      	movs	r1, #0
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 fdfb 	bl	800d64c <USBD_LL_Transmit>

  return USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	2100      	movs	r1, #0
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 fdea 	bl	800d64c <USBD_LL_Transmit>

  return USBD_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	60b9      	str	r1, [r7, #8]
 800ca8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2203      	movs	r2, #3
 800ca92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	2100      	movs	r1, #0
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 fe05 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 fdf4 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2204      	movs	r2, #4
 800caea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800caee:	2300      	movs	r3, #0
 800caf0:	2200      	movs	r2, #0
 800caf2:	2100      	movs	r1, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fda9 	bl	800d64c <USBD_LL_Transmit>

  return USBD_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2205      	movs	r2, #5
 800cb10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb14:	2300      	movs	r3, #0
 800cb16:	2200      	movs	r2, #0
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fdce 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb42:	4b1f      	ldr	r3, [pc, #124]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d131      	bne.n	800cbb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb4c:	4b1c      	ldr	r3, [pc, #112]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	7a5b      	ldrb	r3, [r3, #9]
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb56:	2100      	movs	r1, #0
 800cb58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb5a:	4b19      	ldr	r3, [pc, #100]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb5c:	7a5b      	ldrb	r3, [r3, #9]
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb6a:	4b15      	ldr	r3, [pc, #84]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb6c:	7a5b      	ldrb	r3, [r3, #9]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb74:	4413      	add	r3, r2
 800cb76:	79fa      	ldrb	r2, [r7, #7]
 800cb78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb7a:	4b11      	ldr	r3, [pc, #68]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb7c:	7a5b      	ldrb	r3, [r3, #9]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	b2d1      	uxtb	r1, r2
 800cb84:	4a0e      	ldr	r2, [pc, #56]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb86:	7251      	strb	r1, [r2, #9]
 800cb88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb8a:	7dbb      	ldrb	r3, [r7, #22]
 800cb8c:	3330      	adds	r3, #48	; 0x30
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3301      	adds	r3, #1
 800cb98:	223a      	movs	r2, #58	; 0x3a
 800cb9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3302      	adds	r3, #2
 800cba0:	222f      	movs	r2, #47	; 0x2f
 800cba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	3303      	adds	r3, #3
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	371c      	adds	r7, #28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	200004b8 	.word	0x200004b8

0800cbc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbce:	2200      	movs	r2, #0
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff ffaa 	bl	800cb2c <FATFS_LinkDriverEx>
 800cbd8:	4603      	mov	r3, r0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4912      	ldr	r1, [pc, #72]	; (800cc34 <MX_USB_DEVICE_Init+0x50>)
 800cbec:	4812      	ldr	r0, [pc, #72]	; (800cc38 <MX_USB_DEVICE_Init+0x54>)
 800cbee:	f7fe fe09 	bl	800b804 <USBD_Init>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbf8:	f7f3 fffa 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbfc:	490f      	ldr	r1, [pc, #60]	; (800cc3c <MX_USB_DEVICE_Init+0x58>)
 800cbfe:	480e      	ldr	r0, [pc, #56]	; (800cc38 <MX_USB_DEVICE_Init+0x54>)
 800cc00:	f7fe fe30 	bl	800b864 <USBD_RegisterClass>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc0a:	f7f3 fff1 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc0e:	490c      	ldr	r1, [pc, #48]	; (800cc40 <MX_USB_DEVICE_Init+0x5c>)
 800cc10:	4809      	ldr	r0, [pc, #36]	; (800cc38 <MX_USB_DEVICE_Init+0x54>)
 800cc12:	f7fe fd81 	bl	800b718 <USBD_CDC_RegisterInterface>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d001      	beq.n	800cc20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc1c:	f7f3 ffe8 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc20:	4805      	ldr	r0, [pc, #20]	; (800cc38 <MX_USB_DEVICE_Init+0x54>)
 800cc22:	f7fe fe46 	bl	800b8b2 <USBD_Start>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc2c:	f7f3 ffe0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc30:	bf00      	nop
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20000130 	.word	0x20000130
 800cc38:	200004c4 	.word	0x200004c4
 800cc3c:	20000018 	.word	0x20000018
 800cc40:	2000011c 	.word	0x2000011c

0800cc44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4905      	ldr	r1, [pc, #20]	; (800cc60 <CDC_Init_FS+0x1c>)
 800cc4c:	4805      	ldr	r0, [pc, #20]	; (800cc64 <CDC_Init_FS+0x20>)
 800cc4e:	f7fe fd78 	bl	800b742 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc52:	4905      	ldr	r1, [pc, #20]	; (800cc68 <CDC_Init_FS+0x24>)
 800cc54:	4803      	ldr	r0, [pc, #12]	; (800cc64 <CDC_Init_FS+0x20>)
 800cc56:	f7fe fd92 	bl	800b77e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20000f94 	.word	0x20000f94
 800cc64:	200004c4 	.word	0x200004c4
 800cc68:	20000794 	.word	0x20000794

0800cc6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	6039      	str	r1, [r7, #0]
 800cc86:	71fb      	strb	r3, [r7, #7]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b23      	cmp	r3, #35	; 0x23
 800cc90:	d84a      	bhi.n	800cd28 <CDC_Control_FS+0xac>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <CDC_Control_FS+0x1c>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800cd29 	.word	0x0800cd29
 800cc9c:	0800cd29 	.word	0x0800cd29
 800cca0:	0800cd29 	.word	0x0800cd29
 800cca4:	0800cd29 	.word	0x0800cd29
 800cca8:	0800cd29 	.word	0x0800cd29
 800ccac:	0800cd29 	.word	0x0800cd29
 800ccb0:	0800cd29 	.word	0x0800cd29
 800ccb4:	0800cd29 	.word	0x0800cd29
 800ccb8:	0800cd29 	.word	0x0800cd29
 800ccbc:	0800cd29 	.word	0x0800cd29
 800ccc0:	0800cd29 	.word	0x0800cd29
 800ccc4:	0800cd29 	.word	0x0800cd29
 800ccc8:	0800cd29 	.word	0x0800cd29
 800cccc:	0800cd29 	.word	0x0800cd29
 800ccd0:	0800cd29 	.word	0x0800cd29
 800ccd4:	0800cd29 	.word	0x0800cd29
 800ccd8:	0800cd29 	.word	0x0800cd29
 800ccdc:	0800cd29 	.word	0x0800cd29
 800cce0:	0800cd29 	.word	0x0800cd29
 800cce4:	0800cd29 	.word	0x0800cd29
 800cce8:	0800cd29 	.word	0x0800cd29
 800ccec:	0800cd29 	.word	0x0800cd29
 800ccf0:	0800cd29 	.word	0x0800cd29
 800ccf4:	0800cd29 	.word	0x0800cd29
 800ccf8:	0800cd29 	.word	0x0800cd29
 800ccfc:	0800cd29 	.word	0x0800cd29
 800cd00:	0800cd29 	.word	0x0800cd29
 800cd04:	0800cd29 	.word	0x0800cd29
 800cd08:	0800cd29 	.word	0x0800cd29
 800cd0c:	0800cd29 	.word	0x0800cd29
 800cd10:	0800cd29 	.word	0x0800cd29
 800cd14:	0800cd29 	.word	0x0800cd29
 800cd18:	0800cd29 	.word	0x0800cd29
 800cd1c:	0800cd29 	.word	0x0800cd29
 800cd20:	0800cd29 	.word	0x0800cd29
 800cd24:	0800cd29 	.word	0x0800cd29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd28:	bf00      	nop
  }

  return (USBD_OK);
 800cd2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4805      	ldr	r0, [pc, #20]	; (800cd5c <CDC_Receive_FS+0x24>)
 800cd46:	f7fe fd1a 	bl	800b77e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd4a:	4804      	ldr	r0, [pc, #16]	; (800cd5c <CDC_Receive_FS+0x24>)
 800cd4c:	f7fe fd30 	bl	800b7b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	200004c4 	.word	0x200004c4

0800cd60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	371c      	adds	r7, #28
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
	...

0800cd84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	6039      	str	r1, [r7, #0]
 800cd8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2212      	movs	r2, #18
 800cd94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd96:	4b03      	ldr	r3, [pc, #12]	; (800cda4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	20000150 	.word	0x20000150

0800cda8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	6039      	str	r1, [r7, #0]
 800cdb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2204      	movs	r2, #4
 800cdb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdba:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	20000170 	.word	0x20000170

0800cdcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	6039      	str	r1, [r7, #0]
 800cdd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d105      	bne.n	800cdea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	4907      	ldr	r1, [pc, #28]	; (800ce00 <USBD_FS_ProductStrDescriptor+0x34>)
 800cde2:	4808      	ldr	r0, [pc, #32]	; (800ce04 <USBD_FS_ProductStrDescriptor+0x38>)
 800cde4:	f7ff fdc1 	bl	800c96a <USBD_GetString>
 800cde8:	e004      	b.n	800cdf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	4904      	ldr	r1, [pc, #16]	; (800ce00 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdee:	4805      	ldr	r0, [pc, #20]	; (800ce04 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdf0:	f7ff fdbb 	bl	800c96a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdf4:	4b02      	ldr	r3, [pc, #8]	; (800ce00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20001794 	.word	0x20001794
 800ce04:	0800d8b8 	.word	0x0800d8b8

0800ce08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	6039      	str	r1, [r7, #0]
 800ce12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	4904      	ldr	r1, [pc, #16]	; (800ce28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce18:	4804      	ldr	r0, [pc, #16]	; (800ce2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce1a:	f7ff fda6 	bl	800c96a <USBD_GetString>
  return USBD_StrDesc;
 800ce1e:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20001794 	.word	0x20001794
 800ce2c:	0800d8d0 	.word	0x0800d8d0

0800ce30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	221a      	movs	r2, #26
 800ce40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce42:	f000 f855 	bl	800cef0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce46:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20000174 	.word	0x20000174

0800ce54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d105      	bne.n	800ce72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	4907      	ldr	r1, [pc, #28]	; (800ce88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce6a:	4808      	ldr	r0, [pc, #32]	; (800ce8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce6c:	f7ff fd7d 	bl	800c96a <USBD_GetString>
 800ce70:	e004      	b.n	800ce7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	4904      	ldr	r1, [pc, #16]	; (800ce88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce76:	4805      	ldr	r0, [pc, #20]	; (800ce8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce78:	f7ff fd77 	bl	800c96a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20001794 	.word	0x20001794
 800ce8c:	0800d8e4 	.word	0x0800d8e4

0800ce90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d105      	bne.n	800ceae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	4907      	ldr	r1, [pc, #28]	; (800cec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cea6:	4808      	ldr	r0, [pc, #32]	; (800cec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cea8:	f7ff fd5f 	bl	800c96a <USBD_GetString>
 800ceac:	e004      	b.n	800ceb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	4904      	ldr	r1, [pc, #16]	; (800cec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceb2:	4805      	ldr	r0, [pc, #20]	; (800cec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ceb4:	f7ff fd59 	bl	800c96a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20001794 	.word	0x20001794
 800cec8:	0800d8f0 	.word	0x0800d8f0

0800cecc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	220c      	movs	r2, #12
 800cedc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cede:	4b03      	ldr	r3, [pc, #12]	; (800ceec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	20000164 	.word	0x20000164

0800cef0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cef6:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <Get_SerialNum+0x44>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cefc:	4b0e      	ldr	r3, [pc, #56]	; (800cf38 <Get_SerialNum+0x48>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf02:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <Get_SerialNum+0x4c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d009      	beq.n	800cf2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf16:	2208      	movs	r2, #8
 800cf18:	4909      	ldr	r1, [pc, #36]	; (800cf40 <Get_SerialNum+0x50>)
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 f814 	bl	800cf48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf20:	2204      	movs	r2, #4
 800cf22:	4908      	ldr	r1, [pc, #32]	; (800cf44 <Get_SerialNum+0x54>)
 800cf24:	68b8      	ldr	r0, [r7, #8]
 800cf26:	f000 f80f 	bl	800cf48 <IntToUnicode>
  }
}
 800cf2a:	bf00      	nop
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	1fff7590 	.word	0x1fff7590
 800cf38:	1fff7594 	.word	0x1fff7594
 800cf3c:	1fff7598 	.word	0x1fff7598
 800cf40:	20000176 	.word	0x20000176
 800cf44:	20000186 	.word	0x20000186

0800cf48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	75fb      	strb	r3, [r7, #23]
 800cf5e:	e027      	b.n	800cfb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	0f1b      	lsrs	r3, r3, #28
 800cf64:	2b09      	cmp	r3, #9
 800cf66:	d80b      	bhi.n	800cf80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	0f1b      	lsrs	r3, r3, #28
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4619      	mov	r1, r3
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	440b      	add	r3, r1
 800cf78:	3230      	adds	r2, #48	; 0x30
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	e00a      	b.n	800cf96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	0f1b      	lsrs	r3, r3, #28
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	440b      	add	r3, r1
 800cf90:	3237      	adds	r2, #55	; 0x37
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	011b      	lsls	r3, r3, #4
 800cf9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	3301      	adds	r3, #1
 800cfae:	75fb      	strb	r3, [r7, #23]
 800cfb0:	7dfa      	ldrb	r2, [r7, #23]
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d3d3      	bcc.n	800cf60 <IntToUnicode+0x18>
  }
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
	...

0800cfc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b0b0      	sub	sp, #192	; 0xc0
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	609a      	str	r2, [r3, #8]
 800cfdc:	60da      	str	r2, [r3, #12]
 800cfde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cfe0:	f107 0318 	add.w	r3, r7, #24
 800cfe4:	2294      	movs	r2, #148	; 0x94
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fc43 	bl	800d874 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cff6:	d163      	bne.n	800d0c0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cffc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cffe:	2300      	movs	r3, #0
 800d000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d004:	f107 0318 	add.w	r3, r7, #24
 800d008:	4618      	mov	r0, r3
 800d00a:	f7f6 ff13 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d014:	f7f3 fdec 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d018:	4b2b      	ldr	r3, [pc, #172]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d01c:	4a2a      	ldr	r2, [pc, #168]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d01e:	f043 0301 	orr.w	r3, r3, #1
 800d022:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d024:	4b28      	ldr	r3, [pc, #160]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	617b      	str	r3, [r7, #20]
 800d02e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d030:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d038:	2302      	movs	r3, #2
 800d03a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d044:	2303      	movs	r3, #3
 800d046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d04a:	230a      	movs	r3, #10
 800d04c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d050:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d054:	4619      	mov	r1, r3
 800d056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d05a:	f7f4 fa51 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d05e:	4b1a      	ldr	r3, [pc, #104]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d062:	4a19      	ldr	r2, [pc, #100]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d06a:	4b17      	ldr	r3, [pc, #92]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d06e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d072:	613b      	str	r3, [r7, #16]
 800d074:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d114      	bne.n	800d0ac <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d082:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d086:	4a10      	ldr	r2, [pc, #64]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d08c:	6593      	str	r3, [r2, #88]	; 0x58
 800d08e:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d09a:	f7f5 ffb7 	bl	800300c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a2:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <HAL_PCD_MspInit+0x100>)
 800d0a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0a8:	6593      	str	r3, [r2, #88]	; 0x58
 800d0aa:	e001      	b.n	800d0b0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d0ac:	f7f5 ffae 	bl	800300c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	2043      	movs	r0, #67	; 0x43
 800d0b6:	f7f4 f9ec 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0ba:	2043      	movs	r0, #67	; 0x43
 800d0bc:	f7f4 fa05 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0c0:	bf00      	nop
 800d0c2:	37c0      	adds	r7, #192	; 0xc0
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	40021000 	.word	0x40021000

0800d0cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7fe fc30 	bl	800b948 <USBD_LL_SetupStage>
}
 800d0e8:	bf00      	nop
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d102:	78fa      	ldrb	r2, [r7, #3]
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	78fb      	ldrb	r3, [r7, #3]
 800d118:	4619      	mov	r1, r3
 800d11a:	f7fe fc6a 	bl	800b9f2 <USBD_LL_DataOutStage>
}
 800d11e:	bf00      	nop
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	460b      	mov	r3, r1
 800d130:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d138:	78fa      	ldrb	r2, [r7, #3]
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4613      	mov	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	4413      	add	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	440b      	add	r3, r1
 800d146:	334c      	adds	r3, #76	; 0x4c
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	4619      	mov	r1, r3
 800d14e:	f7fe fcb3 	bl	800bab8 <USBD_LL_DataInStage>
}
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fdc7 	bl	800bcfc <USBD_LL_SOF>
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d17e:	2301      	movs	r3, #1
 800d180:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	2b02      	cmp	r3, #2
 800d188:	d001      	beq.n	800d18e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d18a:	f7f3 fd31 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d194:	7bfa      	ldrb	r2, [r7, #15]
 800d196:	4611      	mov	r1, r2
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fd71 	bl	800bc80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fd1d 	bl	800bbe4 <USBD_LL_Reset>
}
 800d1aa:	bf00      	nop
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	6812      	ldr	r2, [r2, #0]
 800d1ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1ce:	f043 0301 	orr.w	r3, r3, #1
 800d1d2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fd60 	bl	800bca0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a1b      	ldr	r3, [r3, #32]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d005      	beq.n	800d1f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1e8:	4b04      	ldr	r3, [pc, #16]	; (800d1fc <HAL_PCD_SuspendCallback+0x48>)
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	4a03      	ldr	r2, [pc, #12]	; (800d1fc <HAL_PCD_SuspendCallback+0x48>)
 800d1ee:	f043 0306 	orr.w	r3, r3, #6
 800d1f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	e000ed00 	.word	0xe000ed00

0800d200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6812      	ldr	r2, [r2, #0]
 800d216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d21a:	f023 0301 	bic.w	r3, r3, #1
 800d21e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a1b      	ldr	r3, [r3, #32]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d228:	4b08      	ldr	r3, [pc, #32]	; (800d24c <HAL_PCD_ResumeCallback+0x4c>)
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	4a07      	ldr	r2, [pc, #28]	; (800d24c <HAL_PCD_ResumeCallback+0x4c>)
 800d22e:	f023 0306 	bic.w	r3, r3, #6
 800d232:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d234:	f000 faf4 	bl	800d820 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fd44 	bl	800bccc <USBD_LL_Resume>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	e000ed00 	.word	0xe000ed00

0800d250 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d262:	78fa      	ldrb	r2, [r7, #3]
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe fd90 	bl	800bd8c <USBD_LL_IsoOUTIncomplete>
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	4611      	mov	r1, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fd58 	bl	800bd40 <USBD_LL_IsoINIncomplete>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fd96 	bl	800bdd8 <USBD_LL_DevConnected>
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fe fd93 	bl	800bdee <USBD_LL_DevDisconnected>
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d139      	bne.n	800d354 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2e0:	4a1f      	ldr	r2, [pc, #124]	; (800d360 <USBD_LL_Init+0x90>)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a1d      	ldr	r2, [pc, #116]	; (800d360 <USBD_LL_Init+0x90>)
 800d2ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2f0:	4b1b      	ldr	r3, [pc, #108]	; (800d360 <USBD_LL_Init+0x90>)
 800d2f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d2f8:	4b19      	ldr	r3, [pc, #100]	; (800d360 <USBD_LL_Init+0x90>)
 800d2fa:	2206      	movs	r2, #6
 800d2fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2fe:	4b18      	ldr	r3, [pc, #96]	; (800d360 <USBD_LL_Init+0x90>)
 800d300:	2202      	movs	r2, #2
 800d302:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d304:	4b16      	ldr	r3, [pc, #88]	; (800d360 <USBD_LL_Init+0x90>)
 800d306:	2200      	movs	r2, #0
 800d308:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d30a:	4b15      	ldr	r3, [pc, #84]	; (800d360 <USBD_LL_Init+0x90>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d310:	4b13      	ldr	r3, [pc, #76]	; (800d360 <USBD_LL_Init+0x90>)
 800d312:	2200      	movs	r2, #0
 800d314:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d316:	4b12      	ldr	r3, [pc, #72]	; (800d360 <USBD_LL_Init+0x90>)
 800d318:	2200      	movs	r2, #0
 800d31a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d31c:	4b10      	ldr	r3, [pc, #64]	; (800d360 <USBD_LL_Init+0x90>)
 800d31e:	2200      	movs	r2, #0
 800d320:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d322:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <USBD_LL_Init+0x90>)
 800d324:	2200      	movs	r2, #0
 800d326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d328:	480d      	ldr	r0, [pc, #52]	; (800d360 <USBD_LL_Init+0x90>)
 800d32a:	f7f4 fbeb 	bl	8001b04 <HAL_PCD_Init>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d334:	f7f3 fc5c 	bl	8000bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d338:	2180      	movs	r1, #128	; 0x80
 800d33a:	4809      	ldr	r0, [pc, #36]	; (800d360 <USBD_LL_Init+0x90>)
 800d33c:	f7f5 fd6d 	bl	8002e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d340:	2240      	movs	r2, #64	; 0x40
 800d342:	2100      	movs	r1, #0
 800d344:	4806      	ldr	r0, [pc, #24]	; (800d360 <USBD_LL_Init+0x90>)
 800d346:	f7f5 fd21 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d34a:	2280      	movs	r2, #128	; 0x80
 800d34c:	2101      	movs	r1, #1
 800d34e:	4804      	ldr	r0, [pc, #16]	; (800d360 <USBD_LL_Init+0x90>)
 800d350:	f7f5 fd1c 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	20001994 	.word	0x20001994

0800d364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7f4 fce6 	bl	8001d4c <HAL_PCD_Start>
 800d380:	4603      	mov	r3, r0
 800d382:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d384:	7bbb      	ldrb	r3, [r7, #14]
 800d386:	2b03      	cmp	r3, #3
 800d388:	d816      	bhi.n	800d3b8 <USBD_LL_Start+0x54>
 800d38a:	a201      	add	r2, pc, #4	; (adr r2, 800d390 <USBD_LL_Start+0x2c>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d3a1 	.word	0x0800d3a1
 800d394:	0800d3a7 	.word	0x0800d3a7
 800d398:	0800d3ad 	.word	0x0800d3ad
 800d39c:	0800d3b3 	.word	0x0800d3b3
    case HAL_OK :
      usb_status = USBD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	e00b      	b.n	800d3be <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3aa:	e008      	b.n	800d3be <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b0:	e005      	b.n	800d3be <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b6:	e002      	b.n	800d3be <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d3bc:	bf00      	nop
  }
  return usb_status;
 800d3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	4608      	mov	r0, r1
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	70fb      	strb	r3, [r7, #3]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	70bb      	strb	r3, [r7, #2]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3f0:	78bb      	ldrb	r3, [r7, #2]
 800d3f2:	883a      	ldrh	r2, [r7, #0]
 800d3f4:	78f9      	ldrb	r1, [r7, #3]
 800d3f6:	f7f5 f990 	bl	800271a <HAL_PCD_EP_Open>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3fe:	7bbb      	ldrb	r3, [r7, #14]
 800d400:	2b03      	cmp	r3, #3
 800d402:	d817      	bhi.n	800d434 <USBD_LL_OpenEP+0x6c>
 800d404:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <USBD_LL_OpenEP+0x44>)
 800d406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40a:	bf00      	nop
 800d40c:	0800d41d 	.word	0x0800d41d
 800d410:	0800d423 	.word	0x0800d423
 800d414:	0800d429 	.word	0x0800d429
 800d418:	0800d42f 	.word	0x0800d42f
    case HAL_OK :
      usb_status = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	e00b      	b.n	800d43a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d422:	2303      	movs	r3, #3
 800d424:	73fb      	strb	r3, [r7, #15]
    break;
 800d426:	e008      	b.n	800d43a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d428:	2301      	movs	r3, #1
 800d42a:	73fb      	strb	r3, [r7, #15]
    break;
 800d42c:	e005      	b.n	800d43a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d42e:	2303      	movs	r3, #3
 800d430:	73fb      	strb	r3, [r7, #15]
    break;
 800d432:	e002      	b.n	800d43a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d434:	2303      	movs	r3, #3
 800d436:	73fb      	strb	r3, [r7, #15]
    break;
 800d438:	bf00      	nop
  }
  return usb_status;
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	4611      	mov	r1, r2
 800d462:	4618      	mov	r0, r3
 800d464:	f7f5 f9c1 	bl	80027ea <HAL_PCD_EP_Close>
 800d468:	4603      	mov	r3, r0
 800d46a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d816      	bhi.n	800d4a0 <USBD_LL_CloseEP+0x5c>
 800d472:	a201      	add	r2, pc, #4	; (adr r2, 800d478 <USBD_LL_CloseEP+0x34>)
 800d474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d478:	0800d489 	.word	0x0800d489
 800d47c:	0800d48f 	.word	0x0800d48f
 800d480:	0800d495 	.word	0x0800d495
 800d484:	0800d49b 	.word	0x0800d49b
    case HAL_OK :
      usb_status = USBD_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	73fb      	strb	r3, [r7, #15]
    break;
 800d48c:	e00b      	b.n	800d4a6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d48e:	2303      	movs	r3, #3
 800d490:	73fb      	strb	r3, [r7, #15]
    break;
 800d492:	e008      	b.n	800d4a6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d494:	2301      	movs	r3, #1
 800d496:	73fb      	strb	r3, [r7, #15]
    break;
 800d498:	e005      	b.n	800d4a6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d49a:	2303      	movs	r3, #3
 800d49c:	73fb      	strb	r3, [r7, #15]
    break;
 800d49e:	e002      	b.n	800d4a6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a4:	bf00      	nop
  }
  return usb_status;
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4ca:	78fa      	ldrb	r2, [r7, #3]
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7f5 fa68 	bl	80029a4 <HAL_PCD_EP_SetStall>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d816      	bhi.n	800d50c <USBD_LL_StallEP+0x5c>
 800d4de:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <USBD_LL_StallEP+0x34>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d4f5 	.word	0x0800d4f5
 800d4e8:	0800d4fb 	.word	0x0800d4fb
 800d4ec:	0800d501 	.word	0x0800d501
 800d4f0:	0800d507 	.word	0x0800d507
    case HAL_OK :
      usb_status = USBD_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f8:	e00b      	b.n	800d512 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fe:	e008      	b.n	800d512 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d500:	2301      	movs	r3, #1
 800d502:	73fb      	strb	r3, [r7, #15]
    break;
 800d504:	e005      	b.n	800d512 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d506:	2303      	movs	r3, #3
 800d508:	73fb      	strb	r3, [r7, #15]
    break;
 800d50a:	e002      	b.n	800d512 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d50c:	2303      	movs	r3, #3
 800d50e:	73fb      	strb	r3, [r7, #15]
    break;
 800d510:	bf00      	nop
  }
  return usb_status;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d536:	78fa      	ldrb	r2, [r7, #3]
 800d538:	4611      	mov	r1, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f5 fa94 	bl	8002a68 <HAL_PCD_EP_ClrStall>
 800d540:	4603      	mov	r3, r0
 800d542:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	2b03      	cmp	r3, #3
 800d548:	d816      	bhi.n	800d578 <USBD_LL_ClearStallEP+0x5c>
 800d54a:	a201      	add	r2, pc, #4	; (adr r2, 800d550 <USBD_LL_ClearStallEP+0x34>)
 800d54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d550:	0800d561 	.word	0x0800d561
 800d554:	0800d567 	.word	0x0800d567
 800d558:	0800d56d 	.word	0x0800d56d
 800d55c:	0800d573 	.word	0x0800d573
    case HAL_OK :
      usb_status = USBD_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
    break;
 800d564:	e00b      	b.n	800d57e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d566:	2303      	movs	r3, #3
 800d568:	73fb      	strb	r3, [r7, #15]
    break;
 800d56a:	e008      	b.n	800d57e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d56c:	2301      	movs	r3, #1
 800d56e:	73fb      	strb	r3, [r7, #15]
    break;
 800d570:	e005      	b.n	800d57e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d572:	2303      	movs	r3, #3
 800d574:	73fb      	strb	r3, [r7, #15]
    break;
 800d576:	e002      	b.n	800d57e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d578:	2303      	movs	r3, #3
 800d57a:	73fb      	strb	r3, [r7, #15]
    break;
 800d57c:	bf00      	nop
  }
  return usb_status;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d59a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	da0b      	bge.n	800d5bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d5a4:	78fb      	ldrb	r3, [r7, #3]
 800d5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	4413      	add	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	440b      	add	r3, r1
 800d5b6:	333e      	adds	r3, #62	; 0x3e
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	e00b      	b.n	800d5d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5bc:	78fb      	ldrb	r3, [r7, #3]
 800d5be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5c2:	68f9      	ldr	r1, [r7, #12]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	440b      	add	r3, r1
 800d5ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d5d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3714      	adds	r7, #20
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5fa:	78fa      	ldrb	r2, [r7, #3]
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f5 f866 	bl	80026d0 <HAL_PCD_SetAddress>
 800d604:	4603      	mov	r3, r0
 800d606:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d816      	bhi.n	800d63c <USBD_LL_SetUSBAddress+0x5c>
 800d60e:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <USBD_LL_SetUSBAddress+0x34>)
 800d610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d614:	0800d625 	.word	0x0800d625
 800d618:	0800d62b 	.word	0x0800d62b
 800d61c:	0800d631 	.word	0x0800d631
 800d620:	0800d637 	.word	0x0800d637
    case HAL_OK :
      usb_status = USBD_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	e00b      	b.n	800d642 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d62a:	2303      	movs	r3, #3
 800d62c:	73fb      	strb	r3, [r7, #15]
    break;
 800d62e:	e008      	b.n	800d642 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d630:	2301      	movs	r3, #1
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	e005      	b.n	800d642 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d636:	2303      	movs	r3, #3
 800d638:	73fb      	strb	r3, [r7, #15]
    break;
 800d63a:	e002      	b.n	800d642 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	73fb      	strb	r3, [r7, #15]
    break;
 800d640:	bf00      	nop
  }
  return usb_status;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	607a      	str	r2, [r7, #4]
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	460b      	mov	r3, r1
 800d65a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d66a:	7af9      	ldrb	r1, [r7, #11]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	f7f5 f95b 	bl	800292a <HAL_PCD_EP_Transmit>
 800d674:	4603      	mov	r3, r0
 800d676:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d678:	7dbb      	ldrb	r3, [r7, #22]
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d816      	bhi.n	800d6ac <USBD_LL_Transmit+0x60>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <USBD_LL_Transmit+0x38>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d695 	.word	0x0800d695
 800d688:	0800d69b 	.word	0x0800d69b
 800d68c:	0800d6a1 	.word	0x0800d6a1
 800d690:	0800d6a7 	.word	0x0800d6a7
    case HAL_OK :
      usb_status = USBD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	75fb      	strb	r3, [r7, #23]
    break;
 800d698:	e00b      	b.n	800d6b2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d69a:	2303      	movs	r3, #3
 800d69c:	75fb      	strb	r3, [r7, #23]
    break;
 800d69e:	e008      	b.n	800d6b2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6a4:	e005      	b.n	800d6b2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6aa:	e002      	b.n	800d6b2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d6ac:	2303      	movs	r3, #3
 800d6ae:	75fb      	strb	r3, [r7, #23]
    break;
 800d6b0:	bf00      	nop
  }
  return usb_status;
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	607a      	str	r2, [r7, #4]
 800d6c6:	603b      	str	r3, [r7, #0]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d6da:	7af9      	ldrb	r1, [r7, #11]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	f7f5 f8cd 	bl	800287e <HAL_PCD_EP_Receive>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d6e8:	7dbb      	ldrb	r3, [r7, #22]
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d816      	bhi.n	800d71c <USBD_LL_PrepareReceive+0x60>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <USBD_LL_PrepareReceive+0x38>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d705 	.word	0x0800d705
 800d6f8:	0800d70b 	.word	0x0800d70b
 800d6fc:	0800d711 	.word	0x0800d711
 800d700:	0800d717 	.word	0x0800d717
    case HAL_OK :
      usb_status = USBD_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	75fb      	strb	r3, [r7, #23]
    break;
 800d708:	e00b      	b.n	800d722 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d70a:	2303      	movs	r3, #3
 800d70c:	75fb      	strb	r3, [r7, #23]
    break;
 800d70e:	e008      	b.n	800d722 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d710:	2301      	movs	r3, #1
 800d712:	75fb      	strb	r3, [r7, #23]
    break;
 800d714:	e005      	b.n	800d722 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d716:	2303      	movs	r3, #3
 800d718:	75fb      	strb	r3, [r7, #23]
    break;
 800d71a:	e002      	b.n	800d722 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d71c:	2303      	movs	r3, #3
 800d71e:	75fb      	strb	r3, [r7, #23]
    break;
 800d720:	bf00      	nop
  }
  return usb_status;
 800d722:	7dfb      	ldrb	r3, [r7, #23]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	4611      	mov	r1, r2
 800d742:	4618      	mov	r0, r3
 800d744:	f7f5 f8d9 	bl	80028fa <HAL_PCD_EP_GetRxCount>
 800d748:	4603      	mov	r3, r0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d760:	78fb      	ldrb	r3, [r7, #3]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <HAL_PCDEx_LPM_Callback+0x18>
 800d766:	2b01      	cmp	r3, #1
 800d768:	d01f      	beq.n	800d7aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d76a:	e03b      	b.n	800d7e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a1b      	ldr	r3, [r3, #32]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d007      	beq.n	800d784 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d774:	f000 f854 	bl	800d820 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d778:	4b1c      	ldr	r3, [pc, #112]	; (800d7ec <HAL_PCDEx_LPM_Callback+0x98>)
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	4a1b      	ldr	r2, [pc, #108]	; (800d7ec <HAL_PCDEx_LPM_Callback+0x98>)
 800d77e:	f023 0306 	bic.w	r3, r3, #6
 800d782:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6812      	ldr	r2, [r2, #0]
 800d792:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d796:	f023 0301 	bic.w	r3, r3, #1
 800d79a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe fa92 	bl	800bccc <USBD_LL_Resume>
    break;
 800d7a8:	e01c      	b.n	800d7e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7bc:	f043 0301 	orr.w	r3, r3, #1
 800d7c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe fa69 	bl	800bca0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d005      	beq.n	800d7e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7d6:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <HAL_PCDEx_LPM_Callback+0x98>)
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	4a04      	ldr	r2, [pc, #16]	; (800d7ec <HAL_PCDEx_LPM_Callback+0x98>)
 800d7dc:	f043 0306 	orr.w	r3, r3, #6
 800d7e0:	6113      	str	r3, [r2, #16]
    break;
 800d7e2:	bf00      	nop
}
 800d7e4:	bf00      	nop
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	e000ed00 	.word	0xe000ed00

0800d7f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7f8:	4b03      	ldr	r3, [pc, #12]	; (800d808 <USBD_static_malloc+0x18>)
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20001ea0 	.word	0x20001ea0

0800d80c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]

}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d824:	f7f2 feba 	bl	800059c <SystemClock_Config>
}
 800d828:	bf00      	nop
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <__libc_init_array>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	4d0d      	ldr	r5, [pc, #52]	; (800d864 <__libc_init_array+0x38>)
 800d830:	4c0d      	ldr	r4, [pc, #52]	; (800d868 <__libc_init_array+0x3c>)
 800d832:	1b64      	subs	r4, r4, r5
 800d834:	10a4      	asrs	r4, r4, #2
 800d836:	2600      	movs	r6, #0
 800d838:	42a6      	cmp	r6, r4
 800d83a:	d109      	bne.n	800d850 <__libc_init_array+0x24>
 800d83c:	4d0b      	ldr	r5, [pc, #44]	; (800d86c <__libc_init_array+0x40>)
 800d83e:	4c0c      	ldr	r4, [pc, #48]	; (800d870 <__libc_init_array+0x44>)
 800d840:	f000 f820 	bl	800d884 <_init>
 800d844:	1b64      	subs	r4, r4, r5
 800d846:	10a4      	asrs	r4, r4, #2
 800d848:	2600      	movs	r6, #0
 800d84a:	42a6      	cmp	r6, r4
 800d84c:	d105      	bne.n	800d85a <__libc_init_array+0x2e>
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	f855 3b04 	ldr.w	r3, [r5], #4
 800d854:	4798      	blx	r3
 800d856:	3601      	adds	r6, #1
 800d858:	e7ee      	b.n	800d838 <__libc_init_array+0xc>
 800d85a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d85e:	4798      	blx	r3
 800d860:	3601      	adds	r6, #1
 800d862:	e7f2      	b.n	800d84a <__libc_init_array+0x1e>
 800d864:	0800d98c 	.word	0x0800d98c
 800d868:	0800d98c 	.word	0x0800d98c
 800d86c:	0800d98c 	.word	0x0800d98c
 800d870:	0800d990 	.word	0x0800d990

0800d874 <memset>:
 800d874:	4402      	add	r2, r0
 800d876:	4603      	mov	r3, r0
 800d878:	4293      	cmp	r3, r2
 800d87a:	d100      	bne.n	800d87e <memset+0xa>
 800d87c:	4770      	bx	lr
 800d87e:	f803 1b01 	strb.w	r1, [r3], #1
 800d882:	e7f9      	b.n	800d878 <memset+0x4>

0800d884 <_init>:
 800d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d886:	bf00      	nop
 800d888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88a:	bc08      	pop	{r3}
 800d88c:	469e      	mov	lr, r3
 800d88e:	4770      	bx	lr

0800d890 <_fini>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	bf00      	nop
 800d894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d896:	bc08      	pop	{r3}
 800d898:	469e      	mov	lr, r3
 800d89a:	4770      	bx	lr
