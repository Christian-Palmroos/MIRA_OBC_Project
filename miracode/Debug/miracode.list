
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012028  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080121e8  080121e8  000221e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012490  08012490  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012490  08012490  00022490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012498  08012498  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012498  08012498  00022498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801249c  0801249c  0002249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080124a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  200001e4  08012684  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200026a8  08012684  000326a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c101  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b1  00000000  00000000  0005c315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002378  00000000  00000000  000619c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002130  00000000  00000000  00063d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000327d1  00000000  00000000  00065e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f536  00000000  00000000  00098641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b22b  00000000  00000000  000c7b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e2da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f3c  00000000  00000000  001e2df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001ecd30  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001ecdcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080121d0 	.word	0x080121d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	080121d0 	.word	0x080121d0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	f5ad 6d9c 	sub.w	sp, sp, #1248	; 0x4e0
 80005ba:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80005bc:	4bb0      	ldr	r3, [pc, #704]	; (8000880 <main+0x2cc>)
 80005be:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	c403      	stmia	r4!, {r0, r1}
 80005ce:	7022      	strb	r2, [r4, #0]
 80005d0:	f207 4361 	addw	r3, r7, #1121	; 0x461
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 80005e4:	4ba7      	ldr	r3, [pc, #668]	; (8000884 <main+0x2d0>)
 80005e6:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

	uint8_t USB_TxBuffer_FS;

	uint32_t USB_TxBuffer_Length = 1000;
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 ffc2 	bl	800157a <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 80005f6:	f00b faad 	bl	800bb54 <MX_FATFS_Init>
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f959 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fbad 	bl	8000d5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000602:	f000 f9bb 	bl	800097c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000606:	f000 f9f9 	bl	80009fc <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800060a:	f000 fa37 	bl	8000a7c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800060e:	f000 fa57 	bl	8000ac0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000612:	f000 fb09 	bl	8000c28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000616:	f000 fb55 	bl	8000cc4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800061a:	f00b fa9b 	bl	800bb54 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800061e:	f00f fff5 	bl	801060c <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000622:	f000 fa8b 	bl	8000b3c <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000626:	f000 f995 	bl	8000954 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 800062a:	4b97      	ldr	r3, [pc, #604]	; (8000888 <main+0x2d4>)
 800062c:	4a97      	ldr	r2, [pc, #604]	; (800088c <main+0x2d8>)
 800062e:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8000630:	4b97      	ldr	r3, [pc, #604]	; (8000890 <main+0x2dc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000638:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 800063c:	e853 3f00 	ldrex	r3, [r3]
 8000640:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
   return(result);
 8000644:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8000650:	4b8f      	ldr	r3, [pc, #572]	; (8000890 <main+0x2dc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800065a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800065e:	f8c7 24b8 	str.w	r2, [r7, #1208]	; 0x4b8
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000662:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	; 0x4b8
 8000666:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800066a:	e841 2300 	strex	r3, r2, [r1]
 800066e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
   return(result);
 8000672:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1da      	bne.n	8000630 <main+0x7c>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 800067a:	4b85      	ldr	r3, [pc, #532]	; (8000890 <main+0x2dc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000682:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8000686:	e853 3f00 	ldrex	r3, [r3]
 800068a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
   return(result);
 800068e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800069a:	4b7d      	ldr	r3, [pc, #500]	; (8000890 <main+0x2dc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80006a4:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80006a8:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006ac:	f8d7 14a4 	ldr.w	r1, [r7, #1188]	; 0x4a4
 80006b0:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80006b4:	e841 2300 	strex	r3, r2, [r1]
 80006b8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
   return(result);
 80006bc:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1da      	bne.n	800067a <main+0xc6>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <main+0x2dc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006cc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80006d0:	e853 3f00 	ldrex	r3, [r3]
 80006d4:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
   return(result);
 80006d8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80006e4:	4b6a      	ldr	r3, [pc, #424]	; (8000890 <main+0x2dc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80006ee:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80006f2:	f8c7 2490 	str.w	r2, [r7, #1168]	; 0x490
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006f6:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 80006fa:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80006fe:	e841 2300 	strex	r3, r2, [r1]
 8000702:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
   return(result);
 8000706:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1da      	bne.n	80006c4 <main+0x110>


  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800070e:	2200      	movs	r2, #0
 8000710:	4960      	ldr	r1, [pc, #384]	; (8000894 <main+0x2e0>)
 8000712:	4861      	ldr	r0, [pc, #388]	; (8000898 <main+0x2e4>)
 8000714:	f00e fd92 	bl	800f23c <f_mount>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d010      	beq.n	8000740 <main+0x18c>
      	{
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800071e:	2108      	movs	r1, #8
 8000720:	485e      	ldr	r0, [pc, #376]	; (800089c <main+0x2e8>)
 8000722:	f001 fb51 	bl	8001dc8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (300);
 8000726:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800072a:	f000 ff9b 	bl	8001664 <HAL_Delay>
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800072e:	2108      	movs	r1, #8
 8000730:	485a      	ldr	r0, [pc, #360]	; (800089c <main+0x2e8>)
 8000732:	f001 fb49 	bl	8001dc8 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f000 ff93 	bl	8001664 <HAL_Delay>
 800073e:	e072      	b.n	8000826 <main+0x272>
      	}
  // here f_mount == FR_OK -> mounting was a success
  else
      	{
	  // f_mkfs
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000740:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	9200      	str	r2, [sp, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	2107      	movs	r1, #7
 800074c:	4851      	ldr	r0, [pc, #324]	; (8000894 <main+0x2e0>)
 800074e:	f00f fad5 	bl	800fcfc <f_mkfs>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d010      	beq.n	800077a <main+0x1c6>
      	    {
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000758:	2110      	movs	r1, #16
 800075a:	4850      	ldr	r0, [pc, #320]	; (800089c <main+0x2e8>)
 800075c:	f001 fb34 	bl	8001dc8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (300);
 8000760:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000764:	f000 ff7e 	bl	8001664 <HAL_Delay>
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000768:	2110      	movs	r1, #16
 800076a:	484c      	ldr	r0, [pc, #304]	; (800089c <main+0x2e8>)
 800076c:	f001 fb2c 	bl	8001dc8 <HAL_GPIO_TogglePin>
  				  HAL_Delay (1000);
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	f000 ff76 	bl	8001664 <HAL_Delay>
 8000778:	e055      	b.n	8000826 <main+0x272>
      	    }
	  else
      		{
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800077a:	220a      	movs	r2, #10
 800077c:	4948      	ldr	r1, [pc, #288]	; (80008a0 <main+0x2ec>)
 800077e:	4849      	ldr	r0, [pc, #292]	; (80008a4 <main+0x2f0>)
 8000780:	f00e fda2 	bl	800f2c8 <f_open>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d010      	beq.n	80007ac <main+0x1f8>
				{
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800078a:	2120      	movs	r1, #32
 800078c:	4843      	ldr	r0, [pc, #268]	; (800089c <main+0x2e8>)
 800078e:	f001 fb1b 	bl	8001dc8 <HAL_GPIO_TogglePin>
				  HAL_Delay (300);
 8000792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000796:	f000 ff65 	bl	8001664 <HAL_Delay>
				  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800079a:	2120      	movs	r1, #32
 800079c:	483f      	ldr	r0, [pc, #252]	; (800089c <main+0x2e8>)
 800079e:	f001 fb13 	bl	8001dc8 <HAL_GPIO_TogglePin>
				  HAL_Delay (1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f000 ff5d 	bl	8001664 <HAL_Delay>
 80007aa:	e03c      	b.n	8000826 <main+0x272>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80007ac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd25 	bl	8000200 <strlen>
 80007b6:	4602      	mov	r2, r0
 80007b8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80007bc:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80007c0:	4838      	ldr	r0, [pc, #224]	; (80008a4 <main+0x2f0>)
 80007c2:	f00f f87e 	bl	800f8c2 <f_write>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 34c3 	strb.w	r3, [r7, #1219]	; 0x4c3
				f_read(&SDFile, &rtext, 100, &bytesread);
 80007cc:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80007d0:	f507 7179 	add.w	r1, r7, #996	; 0x3e4
 80007d4:	2264      	movs	r2, #100	; 0x64
 80007d6:	4833      	ldr	r0, [pc, #204]	; (80008a4 <main+0x2f0>)
 80007d8:	f00e ff34 	bl	800f644 <f_read>
				//f_read();

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 80007dc:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80007e0:	2164      	movs	r1, #100	; 0x64
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00f ffd0 	bl	8010788 <CDC_Transmit_FS>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 34c2 	strb.w	r3, [r7, #1218]	; 0x4c2
				if((byteswritten == 0) || (res != FR_OK))
 80007ee:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <main+0x24a>
 80007f6:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d010      	beq.n	8000820 <main+0x26c>
					{
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4826      	ldr	r0, [pc, #152]	; (800089c <main+0x2e8>)
 8000802:	f001 fae1 	bl	8001dc8 <HAL_GPIO_TogglePin>
					  HAL_Delay (300);
 8000806:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800080a:	f000 ff2b 	bl	8001664 <HAL_Delay>
					  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	4822      	ldr	r0, [pc, #136]	; (800089c <main+0x2e8>)
 8000812:	f001 fad9 	bl	8001dc8 <HAL_GPIO_TogglePin>
					  HAL_Delay (1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f000 ff23 	bl	8001664 <HAL_Delay>
 800081e:	e002      	b.n	8000826 <main+0x272>
					}
				else
					{

					f_close(&SDFile);
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <main+0x2f0>)
 8000822:	f00f fa41 	bl	800fca8 <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <main+0x2e4>)
 800082c:	f00e fd06 	bl	800f23c <f_mount>
  {

	  // tmp = data_ready;

	  // Check here if data is ready
	  if (data_ready)
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <main+0x2f4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01b      	beq.n	8000870 <main+0x2bc>
	  {

		  if (rxBuffer == rxBuffer1)
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0x2d4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <main+0x2d8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d109      	bne.n	8000856 <main+0x2a2>
		  {
			  // USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer (&hUsbDeviceFS, rxBuffer2, 120);

			  // Saving the transmit status for debugging
			  // USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2));
			  CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2));
 8000842:	481a      	ldr	r0, [pc, #104]	; (80008ac <main+0x2f8>)
 8000844:	f7ff fcdc 	bl	8000200 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29b      	uxth	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	4817      	ldr	r0, [pc, #92]	; (80008ac <main+0x2f8>)
 8000850:	f00f ff9a 	bl	8010788 <CDC_Transmit_FS>
 8000854:	e008      	b.n	8000868 <main+0x2b4>
		  }
		  else
		  {
			  // Saving the transmit status for debugging
			  // USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1));
			  CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1));
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <main+0x2d8>)
 8000858:	f7ff fcd2 	bl	8000200 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29b      	uxth	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <main+0x2d8>)
 8000864:	f00f ff90 	bl	8010788 <CDC_Transmit_FS>

		  }

		  data_ready = 0;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <main+0x2f4>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e7df      	b.n	8000830 <main+0x27c>
	  }
	  else
	  {
		  // Flash LED4
		  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <main+0x2e8>)
 8000874:	f001 faa8 	bl	8001dc8 <HAL_GPIO_TogglePin>
		  HAL_Delay (100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fef3 	bl	8001664 <HAL_Delay>
	  if (data_ready)
 800087e:	e7d7      	b.n	8000830 <main+0x27c>
 8000880:	080121fc 	.word	0x080121fc
 8000884:	080121e8 	.word	0x080121e8
 8000888:	200005e8 	.word	0x200005e8
 800088c:	200004f8 	.word	0x200004f8
 8000890:	20000468 	.word	0x20000468
 8000894:	200005fc 	.word	0x200005fc
 8000898:	20000600 	.word	0x20000600
 800089c:	48000c00 	.word	0x48000c00
 80008a0:	080121f0 	.word	0x080121f0
 80008a4:	20000830 	.word	0x20000830
 80008a8:	200005f0 	.word	0x200005f0
 80008ac:	20000570 	.word	0x20000570

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b096      	sub	sp, #88	; 0x58
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2244      	movs	r2, #68	; 0x44
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f010 fcb2 	bl	8011228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f002 fda4 	bl	8003420 <HAL_PWREx_ControlVoltageScaling>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008de:	f000 fb1b 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008e2:	2321      	movs	r3, #33	; 0x21
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	2303      	movs	r3, #3
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80008fc:	231e      	movs	r3, #30
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 8000900:	2314      	movs	r3, #20
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fe39 	bl	8003588 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800091c:	f000 fafc 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2303      	movs	r3, #3
 8000926:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2105      	movs	r1, #5
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fa3f 	bl	8003dbc <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000944:	f000 fae8 	bl	8000f18 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000948:	f003 fc36 	bl	80041b8 <HAL_RCC_EnableCSS>
}
 800094c:	bf00      	nop
 800094e:	3758      	adds	r7, #88	; 0x58
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	201a      	movs	r0, #26
 800095e:	f000 ff80 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000962:	201a      	movs	r0, #26
 8000964:	f000 ff99 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2026      	movs	r0, #38	; 0x26
 800096e:	f000 ff78 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000972:	2026      	movs	r0, #38	; 0x26
 8000974:	f000 ff91 	bl	800189a <HAL_NVIC_EnableIRQ>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <MX_I2C1_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <MX_I2C1_Init+0x7c>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009b8:	f001 fa20 	bl	8001dfc <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 faa9 	bl	8000f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009ca:	f001 faa6 	bl	8001f1a <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 faa0 	bl	8000f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009dc:	f001 fae8 	bl	8001fb0 <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 fa97 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000200 	.word	0x20000200
 80009f4:	40005400 	.word	0x40005400
 80009f8:	307075b1 	.word	0x307075b1

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C2_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C2_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a38:	f001 f9e0 	bl	8001dfc <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 fa69 	bl	8000f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a4a:	f001 fa66 	bl	8001f1a <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fa60 	bl	8000f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a5c:	f001 faa8 	bl	8001fb0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 fa57 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000254 	.word	0x20000254
 8000a74:	40005800 	.word	0x40005800
 8000a78:	307075b1 	.word	0x307075b1

08000a7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <MX_SDMMC1_SD_Init+0x40>)
 8000a84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a98:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <MX_SDMMC1_SD_Init+0x3c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200002a8 	.word	0x200002a8
 8000abc:	50062400 	.word	0x50062400

08000ac0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <MX_SPI1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000ada:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ade:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000af2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_SPI1_Init+0x74>)
 8000b20:	f006 fdc1 	bl	80076a6 <HAL_SPI_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 f9f5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000328 	.word	0x20000328
 8000b38:	40013000 	.word	0x40013000

08000b3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b092      	sub	sp, #72	; 0x48
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	222c      	movs	r2, #44	; 0x2c
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f010 fb63 	bl	8011228 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <MX_TIM17_Init+0xe8>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b78:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000b7c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b90:	4823      	ldr	r0, [pc, #140]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000b92:	f006 fe2b 	bl	80077ec <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000b9c:	f000 f9bc 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000ba2:	f006 fe7a 	bl	800789a <HAL_TIM_OC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000bac:	f000 f9b4 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000bd6:	f006 ffe1 	bl	8007b9c <HAL_TIM_OC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000be0:	f000 f99a 	bl	8000f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_TIM17_Init+0xe4>)
 8000c08:	f007 fbe4 	bl	80083d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000c12:	f000 f981 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3748      	adds	r7, #72	; 0x48
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000038c 	.word	0x2000038c
 8000c24:	40014800 	.word	0x40014800

08000c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <MX_USART1_UART_Init+0x94>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c34:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <MX_USART1_UART_Init+0x98>)
 8000c36:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c70:	f007 fc4c 	bl	800850c <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000c7a:	f000 f94d 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c82:	f008 fd7a 	bl	800977a <HAL_UARTEx_SetTxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000c8c:	f000 f944 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000c94:	f008 fdaf 	bl	80097f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000c9e:	f000 f93b 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART1_UART_Init+0x90>)
 8000ca4:	f008 fd30 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000cae:	f000 f933 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200003d8 	.word	0x200003d8
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	0001c138 	.word	0x0001c138

08000cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <MX_USART2_UART_Init+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d0e:	f007 fbfd 	bl	800850c <HAL_UART_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 f8fe 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d20:	f008 fd2b 	bl	800977a <HAL_UARTEx_SetTxFifoThreshold>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f8f5 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d32:	f008 fd60 	bl	80097f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 f8ec 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_USART2_UART_Init+0x90>)
 8000d42:	f008 fce1 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f8e4 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000468 	.word	0x20000468
 8000d58:	40004400 	.word	0x40004400

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a63      	ldr	r2, [pc, #396]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b61      	ldr	r3, [pc, #388]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	4b58      	ldr	r3, [pc, #352]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a57      	ldr	r2, [pc, #348]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b55      	ldr	r3, [pc, #340]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000e02:	2200      	movs	r2, #0
 8000e04:	f641 013c 	movw	r1, #6204	; 0x183c
 8000e08:	483f      	ldr	r0, [pc, #252]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000e0a:	f000 ffc5 	bl	8001d98 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2130      	movs	r1, #48	; 0x30
 8000e12:	483e      	ldr	r0, [pc, #248]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000e14:	f000 ffc0 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2178      	movs	r1, #120	; 0x78
 8000e1c:	483c      	ldr	r0, [pc, #240]	; (8000f10 <MX_GPIO_Init+0x1b4>)
 8000e1e:	f000 ffbb 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000e22:	f641 033c 	movw	r3, #6204	; 0x183c
 8000e26:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4833      	ldr	r0, [pc, #204]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000e3c:	f000 fe02 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	482d      	ldr	r0, [pc, #180]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000e56:	f000 fdf5 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fde8 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000e74:	2330      	movs	r3, #48	; 0x30
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000e8c:	f000 fdda 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4818      	ldr	r0, [pc, #96]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000ea6:	f000 fdcd 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f000 fdbf 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000ec6:	2378      	movs	r3, #120	; 0x78
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0x1b4>)
 8000ede:	f000 fdb1 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_GPIO_Init+0x1b8>)
 8000ef6:	f000 fda5 	bl	8001a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3730      	adds	r7, #48	; 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48001000 	.word	0x48001000
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000c00 	.word	0x48000c00
 8000f14:	48000400 	.word	0x48000400

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <Error_Handler+0x10>)
 8000f22:	f010 f989 	bl	8011238 <iprintf>
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <Error_Handler+0xe>
 8000f28:	08012230 	.word	0x08012230

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0b0      	sub	sp, #192	; 0xc0
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	2294      	movs	r2, #148	; 0x94
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f010 f947 	bl	8011228 <memset>
  if(hi2c->Instance==I2C1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a42      	ldr	r2, [pc, #264]	; (80010a8 <HAL_I2C_MspInit+0x134>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d13b      	bne.n	800101c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa4:	2340      	movs	r3, #64	; 0x40
 8000fa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 f9ed 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fbc:	f7ff ffac 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	4a39      	ldr	r2, [pc, #228]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd8:	23c0      	movs	r3, #192	; 0xc0
 8000fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482c      	ldr	r0, [pc, #176]	; (80010b0 <HAL_I2C_MspInit+0x13c>)
 8000ffe:	f000 fd21 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800101a:	e040      	b.n	800109e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_I2C_MspInit+0x140>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d13b      	bne.n	800109e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800102a:	2300      	movs	r3, #0
 800102c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f9ac 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800103e:	f7ff ff6b 	bl	8000f18 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800105a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800105e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001074:	2304      	movs	r3, #4
 8001076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <HAL_I2C_MspInit+0x13c>)
 8001082:	f000 fcdf 	bl	8001a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x138>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_I2C_MspInit+0x138>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
}
 800109e:	bf00      	nop
 80010a0:	37c0      	adds	r7, #192	; 0xc0
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	40005800 	.word	0x40005800

080010b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b0      	sub	sp, #192	; 0xc0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2294      	movs	r2, #148	; 0x94
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f010 f8a5 	bl	8011228 <memset>
  if(hsd->Instance==SDMMC1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <HAL_SD_MspInit+0xf8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d15f      	bne.n	80011a8 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f948 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001106:	f7ff ff07 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_SD_MspInit+0xfc>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001152:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116c:	230c      	movs	r3, #12
 800116e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <HAL_SD_MspInit+0x100>)
 800117a:	f000 fc63 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800117e:	2304      	movs	r3, #4
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001196:	230c      	movs	r3, #12
 8001198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_SD_MspInit+0x104>)
 80011a4:	f000 fc4e 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	37c0      	adds	r7, #192	; 0xc0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	50062400 	.word	0x50062400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_SPI_MspInit+0x7c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d128      	bne.n	8001234 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x80>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <HAL_SPI_MspInit+0x80>)
 80011e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_SPI_MspInit+0x80>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_SPI_MspInit+0x80>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_SPI_MspInit+0x80>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_SPI_MspInit+0x80>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23f0      	movs	r3, #240	; 0xf0
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001222:	2305      	movs	r3, #5
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fc08 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40013000 	.word	0x40013000
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_TIM_Base_MspInit+0x38>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6613      	str	r3, [r2, #96]	; 0x60
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40014800 	.word	0x40014800
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0b0      	sub	sp, #192	; 0xc0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	2294      	movs	r2, #148	; 0x94
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00f ffbf 	bl	8011228 <memset>
  if(huart->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <HAL_UART_MspInit+0x138>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13d      	bne.n	8001330 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b8:	2300      	movs	r3, #0
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f865 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff fe24 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d4:	4a3a      	ldr	r2, [pc, #232]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012da:	6613      	str	r3, [r2, #96]	; 0x60
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001300:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800131a:	2307      	movs	r3, #7
 800131c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 fb8b 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132e:	e040      	b.n	80013b2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_UART_MspInit+0x140>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d13b      	bne.n	80013b2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800133e:	2300      	movs	r3, #0
 8001340:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f822 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001352:	f7ff fde1 	bl	8000f18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139e:	2307      	movs	r3, #7
 80013a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f000 fb49 	bl	8001a44 <HAL_GPIO_Init>
}
 80013b2:	bf00      	nop
 80013b4:	37c0      	adds	r7, #192	; 0xc0
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40004400 	.word	0x40004400

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013cc:	f002 ff04 	bl	80041d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x8>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f904 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001426:	f006 fa99 	bl	800795c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000038c 	.word	0x2000038c

08001434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <USART2_IRQHandler+0xa0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001440:	b29b      	uxth	r3, r3
 8001442:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1) { rxBuffer[rxBufferPos++] = (uint8_t) c; }
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <USART2_IRQHandler+0xa4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b76      	cmp	r3, #118	; 0x76
 800144c:	d80b      	bhi.n	8001466 <USART2_IRQHandler+0x32>
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <USART2_IRQHandler+0xa8>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <USART2_IRQHandler+0xa4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	b2c8      	uxtb	r0, r1
 800145c:	491e      	ldr	r1, [pc, #120]	; (80014d8 <USART2_IRQHandler+0xa4>)
 800145e:	7008      	strb	r0, [r1, #0]
 8001460:	4413      	add	r3, r2
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	701a      	strb	r2, [r3, #0]

    if ((c == '\r') || (c == '\n')) {
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b0d      	cmp	r3, #13
 800146a:	d002      	beq.n	8001472 <USART2_IRQHandler+0x3e>
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d125      	bne.n	80014be <USART2_IRQHandler+0x8a>
        rxBuffer[rxBufferPos] = 0;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <USART2_IRQHandler+0xa8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <USART2_IRQHandler+0xa4>)
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4413      	add	r3, r2
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
        if (rxBufferPos > 1) {
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <USART2_IRQHandler+0xa4>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d905      	bls.n	8001498 <USART2_IRQHandler+0x64>
            data_ready |= 1;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <USART2_IRQHandler+0xac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <USART2_IRQHandler+0xac>)
 8001496:	6013      	str	r3, [r2, #0]
        }
        rxBufferPos = 0;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <USART2_IRQHandler+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
        if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <USART2_IRQHandler+0xa8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <USART2_IRQHandler+0xb0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d103      	bne.n	80014b0 <USART2_IRQHandler+0x7c>
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <USART2_IRQHandler+0xa8>)
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <USART2_IRQHandler+0xb4>)
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e002      	b.n	80014b6 <USART2_IRQHandler+0x82>
        else {rxBuffer = rxBuffer1;}
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <USART2_IRQHandler+0xa8>)
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <USART2_IRQHandler+0xb0>)
 80014b4:	601a      	str	r2, [r3, #0]
  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80014b6:	2110      	movs	r1, #16
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <USART2_IRQHandler+0xb8>)
 80014ba:	f000 fc85 	bl	8001dc8 <HAL_GPIO_TogglePin>
    }
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80014be:	2108      	movs	r1, #8
 80014c0:	480a      	ldr	r0, [pc, #40]	; (80014ec <USART2_IRQHandler+0xb8>)
 80014c2:	f000 fc81 	bl	8001dc8 <HAL_GPIO_TogglePin>
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <USART2_IRQHandler+0xa0>)
 80014c8:	f007 f870 	bl	80085ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000468 	.word	0x20000468
 80014d8:	200005ec 	.word	0x200005ec
 80014dc:	200005e8 	.word	0x200005e8
 80014e0:	200005f0 	.word	0x200005f0
 80014e4:	200004f8 	.word	0x200004f8
 80014e8:	20000570 	.word	0x20000570
 80014ec:	48000c00 	.word	0x48000c00

080014f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <OTG_FS_IRQHandler+0x10>)
 80014f6:	f000 fefa 	bl	80022ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20001f68 	.word	0x20001f68

08001504 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff ffea 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LoopForever+0xe>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <LoopForever+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f00f fe43 	bl	80111e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155a:	f7ff f82b 	bl	80005b4 <main>

0800155e <LoopForever>:

LoopForever:
    b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001560:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800156c:	080124a0 	.word	0x080124a0
  ldr r2, =_sbss
 8001570:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001574:	200026a8 	.word	0x200026a8

08001578 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_IRQHandler>

0800157a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f961 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fcc6 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_InitTick+0x70>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f96d 	bl	80018b6 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d809      	bhi.n	80015fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f000 f937 	bl	8001862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_InitTick+0x74>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e007      	b.n	800160c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e004      	b.n	800160c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e001      	b.n	800160c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	200005f4 	.word	0x200005f4

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200005f4 	.word	0x200005f4

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff3e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff31 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d008      	beq.n	80018f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e040      	b.n	800197a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020e 	bic.w	r2, r2, #14
 8001906:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001916:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f003 021c 	and.w	r2, r3, #28
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001944:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800195c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001966:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d005      	beq.n	80019aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2204      	movs	r2, #4
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e047      	b.n	8001a3a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020e 	bic.w	r2, r2, #14
 80019b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f003 021c 	and.w	r2, r3, #28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a18:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
    }
  }
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e166      	b.n	8001d22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8158 	beq.w	8001d1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80b2 	beq.w	8001d1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	4a60      	ldr	r2, [pc, #384]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd0:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d02b      	beq.n	8001c54 <HAL_GPIO_Init+0x210>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d025      	beq.n	8001c50 <HAL_GPIO_Init+0x20c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01f      	beq.n	8001c4c <HAL_GPIO_Init+0x208>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d019      	beq.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1fc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c34:	2307      	movs	r3, #7
 8001c36:	e00e      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c38:	2308      	movs	r3, #8
 8001c3a:	e00c      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c3c:	2306      	movs	r3, #6
 8001c3e:	e00a      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c40:	2305      	movs	r3, #5
 8001c42:	e008      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c66:	4937      	ldr	r1, [pc, #220]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cc8:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d16:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae91 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	48000c00 	.word	0x48000c00
 8001d54:	48001000 	.word	0x48001000
 8001d58:	48001400 	.word	0x48001400
 8001d5c:	48001800 	.word	0x48001800
 8001d60:	48001c00 	.word	0x48001c00
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43d9      	mvns	r1, r3
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	400b      	ands	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e081      	b.n	8001f12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff f8a6 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	; 0x24
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d104      	bne.n	8001e96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69d9      	ldr	r1, [r3, #28]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d138      	bne.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e032      	b.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2224      	movs	r2, #36	; 0x24
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d139      	bne.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e033      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002002:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	b08f      	sub	sp, #60	; 0x3c
 800204c:	af0a      	add	r7, sp, #40	; 0x28
 800204e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e116      	b.n	8002288 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f00e fccf 	bl	8010a18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f008 faf8 	bl	800a68e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	687e      	ldr	r6, [r7, #4]
 80020a6:	466d      	mov	r5, sp
 80020a8:	f106 0410 	add.w	r4, r6, #16
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020bc:	1d33      	adds	r3, r6, #4
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f008 fa0b 	bl	800a4dc <USB_CoreInit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d7      	b.n	8002288 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 fae6 	bl	800a6b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e04a      	b.n	8002180 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	333d      	adds	r3, #61	; 0x3d
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	333c      	adds	r3, #60	; 0x3c
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	b298      	uxth	r0, r3
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3344      	adds	r3, #68	; 0x44
 8002126:	4602      	mov	r2, r0
 8002128:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3340      	adds	r3, #64	; 0x40
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3348      	adds	r3, #72	; 0x48
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	334c      	adds	r3, #76	; 0x4c
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3354      	adds	r3, #84	; 0x54
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	3301      	adds	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d3af      	bcc.n	80020ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e044      	b.n	800221a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	3301      	adds	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3b5      	bcc.n	8002190 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	687e      	ldr	r6, [r7, #4]
 800222c:	466d      	mov	r5, sp
 800222e:	f106 0410 	add.w	r4, r6, #16
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002242:	1d33      	adds	r3, r6, #4
 8002244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002246:	6838      	ldr	r0, [r7, #0]
 8002248:	f008 fa7e 	bl	800a748 <USB_DevInit>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e014      	b.n	8002288 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f001 f882 	bl	8003380 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f009 fb06 	bl	800b892 <USB_DevDisconnect>

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002290 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_PCD_Start+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e01c      	b.n	80022e6 <HAL_PCD_Start+0x56>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 f9cd 	bl	800a66c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f009 faba 	bl	800b850 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b08d      	sub	sp, #52	; 0x34
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f009 fb78 	bl	800b9fa <USB_GetMode>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	f040 847e 	bne.w	8002c0e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f009 fadc 	bl	800b8d4 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8474 	beq.w	8002c0c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f009 fac9 	bl	800b8d4 <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d107      	bne.n	800235c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f002 0202 	and.w	r2, r2, #2
 800235a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f009 fab7 	bl	800b8d4 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b10      	cmp	r3, #16
 800236e:	d161      	bne.n	8002434 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0210 	bic.w	r2, r2, #16
 800237e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	0c5b      	lsrs	r3, r3, #17
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d124      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d035      	beq.n	8002424 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	6a38      	ldr	r0, [r7, #32]
 80023cc:	f009 f8ee 	bl	800b5ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023dc:	441a      	add	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ee:	441a      	add	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
 80023f4:	e016      	b.n	8002424 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	0c5b      	lsrs	r3, r3, #17
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d110      	bne.n	8002424 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002408:	2208      	movs	r2, #8
 800240a:	4619      	mov	r1, r3
 800240c:	6a38      	ldr	r0, [r7, #32]
 800240e:	f009 f8cd 	bl	800b5ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241e:	441a      	add	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0210 	orr.w	r2, r2, #16
 8002432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f009 fa4b 	bl	800b8d4 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002448:	f040 80a7 	bne.w	800259a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f009 fa50 	bl	800b8fa <USB_ReadDevAllOutEpInterrupt>
 800245a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800245c:	e099      	b.n	8002592 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 808e 	beq.w	8002586 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f009 fa74 	bl	800b962 <USB_ReadDevOutEPInterrupt>
 800247a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002492:	461a      	mov	r2, r3
 8002494:	2301      	movs	r3, #1
 8002496:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fe96 	bl	80031cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	461a      	mov	r2, r3
 80024b8:	2308      	movs	r3, #8
 80024ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fed2 	bl	8003268 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024da:	461a      	mov	r2, r3
 80024dc:	2310      	movs	r3, #16
 80024de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d030      	beq.n	800254c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b80      	cmp	r3, #128	; 0x80
 80024f4:	d109      	bne.n	800250a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002508:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	78db      	ldrb	r3, [r3, #3]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f00e fbb3 	bl	8010ca0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	461a      	mov	r2, r3
 8002548:	2302      	movs	r3, #2
 800254a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002562:	461a      	mov	r2, r3
 8002564:	2320      	movs	r3, #32
 8002566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002584:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f af62 	bne.w	800245e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f009 f998 	bl	800b8d4 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ae:	f040 80a4 	bne.w	80026fa <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f009 f9b9 	bl	800b92e <USB_ReadDevAllInEpInterrupt>
 80025bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025c2:	e096      	b.n	80026f2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 808b 	beq.w	80026e6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f009 f9df 	bl	800b99e <USB_ReadDevInEPInterrupt>
 80025e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	2201      	movs	r2, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	69f9      	ldr	r1, [r7, #28]
 8002608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800260c:	4013      	ands	r3, r2
 800260e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800261c:	461a      	mov	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f00e faa4 	bl	8010b76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002644:	461a      	mov	r2, r3
 8002646:	2308      	movs	r3, #8
 8002648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267c:	461a      	mov	r2, r3
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800268c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f008 f9a6 	bl	800a9e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3304      	adds	r3, #4
 80026a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	78db      	ldrb	r3, [r3, #3]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f00e fb01 	bl	8010cc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ce:	461a      	mov	r2, r3
 80026d0:	2302      	movs	r3, #2
 80026d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fcea 	bl	80030ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	3301      	adds	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af65 	bne.w	80025c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f009 f8e8 	bl	800b8d4 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800270a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800270e:	d122      	bne.n	8002756 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002736:	2100      	movs	r1, #0
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fe45 	bl	80033c8 <HAL_PCDEx_LPM_Callback>
 800273e:	e002      	b.n	8002746 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f00e fa85 	bl	8010c50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f009 f8ba 	bl	800b8d4 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276a:	d112      	bne.n	8002792 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f00e fa41 	bl	8010c04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002790:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f009 f89c 	bl	800b8d4 <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a6:	d121      	bne.n	80027ec <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80027b6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027dc:	2101      	movs	r1, #1
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fdf2 	bl	80033c8 <HAL_PCDEx_LPM_Callback>
 80027e4:	e002      	b.n	80027ec <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f00e fa0c 	bl	8010c04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f009 f86f 	bl	800b8d4 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	f040 80b5 	bne.w	800296e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2110      	movs	r1, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f008 f8de 	bl	800a9e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	e046      	b.n	80028b8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002836:	461a      	mov	r2, r3
 8002838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	440a      	add	r2, r1
 8002854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002870:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	440a      	add	r2, r1
 8002888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800288c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002890:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	3301      	adds	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3b3      	bcc.n	800282a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ee:	f043 030b 	orr.w	r3, r3, #11
 80028f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f043 030b 	orr.w	r3, r3, #11
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	e015      	b.n	8002938 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002922:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002932:	f043 030b 	orr.w	r3, r3, #11
 8002936:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002946:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800294a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f009 f87f 	bl	800ba5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800296c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f008 ffae 	bl	800b8d4 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002982:	d124      	bne.n	80029ce <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f009 f844 	bl	800ba16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f008 f8a1 	bl	800aada <USB_GetDevSpeed>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681c      	ldr	r4, [r3, #0]
 80029a4:	f001 fbd0 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 80029a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	4620      	mov	r0, r4
 80029b4:	f007 fdbe 	bl	800a534 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f00e f904 	bl	8010bc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 ff7e 	bl	800b8d4 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10a      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f00e f8e1 	bl	8010baa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f002 0208 	and.w	r2, r2, #8
 80029f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 ff69 	bl	800b8d4 <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d122      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e014      	b.n	8002a48 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb0b 	bl	8003058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d3e5      	bcc.n	8002a1e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f008 ff3c 	bl	800b8d4 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a66:	d13b      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e02b      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da12      	bge.n	8002ac0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	333f      	adds	r3, #63	; 0x3f
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 facc 	bl	8003058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3ce      	bcc.n	8002a6e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f008 fef5 	bl	800b8d4 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af4:	d155      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e045      	b.n	8002b88 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d12e      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da2b      	bge.n	8002b82 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d121      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6053      	str	r3, [r2, #4]
            break;
 8002b80:	e007      	b.n	8002b92 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3b4      	bcc.n	8002afc <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f008 fe94 	bl	800b8d4 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d10a      	bne.n	8002bce <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f00e f895 	bl	8010ce8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f008 fe7e 	bl	800b8d4 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d115      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f00e f885 	bl	8010d04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e000      	b.n	8002c0e <HAL_PCD_IRQHandler+0x920>
      return;
 8002c0c:	bf00      	nop
    }
  }
}
 8002c0e:	3734      	adds	r7, #52	; 0x34
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}

08002c14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_PCD_SetAddress+0x1a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e013      	b.n	8002c56 <HAL_PCD_SetAddress+0x42>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f008 fddc 	bl	800b804 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	4608      	mov	r0, r1
 8002c68:	4611      	mov	r1, r2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	70fb      	strb	r3, [r7, #3]
 8002c70:	460b      	mov	r3, r1
 8002c72:	803b      	strh	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da0f      	bge.n	8002ca4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
 8002ca2:	e00f      	b.n	8002cc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cd0:	883a      	ldrh	r2, [r7, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	78ba      	ldrb	r2, [r7, #2]
 8002cda:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cee:	78bb      	ldrb	r3, [r7, #2]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_Open+0xaa>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e00e      	b.n	8002d26 <HAL_PCD_EP_Open+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f007 fefe 	bl	800ab18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d24:	7afb      	ldrb	r3, [r7, #11]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da0f      	bge.n	8002d62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3338      	adds	r3, #56	; 0x38
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	705a      	strb	r2, [r3, #1]
 8002d60:	e00f      	b.n	8002d82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_EP_Close+0x6e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e00e      	b.n	8002dba <HAL_PCD_EP_Close+0x8c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f007 ff3c 	bl	800ac28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f008 f9bd 	bl	800b1a0 <USB_EP0StartXfer>
 8002e26:	e005      	b.n	8002e34 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6979      	ldr	r1, [r7, #20]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f007 ffd6 	bl	800ade0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e60:	681b      	ldr	r3, [r3, #0]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6979      	ldr	r1, [r7, #20]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f008 f968 	bl	800b1a0 <USB_EP0StartXfer>
 8002ed0:	e005      	b.n	8002ede <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6979      	ldr	r1, [r7, #20]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f007 ff81 	bl	800ade0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d901      	bls.n	8002f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e04e      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0f      	bge.n	8002f2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00d      	b.n	8002f4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_SetStall+0x82>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e01c      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xbc>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f008 fb6f 	bl	800b65c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f008 fd61 	bl	800ba5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d901      	bls.n	8002fca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da0f      	bge.n	8002ff2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	3338      	adds	r3, #56	; 0x38
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	e00f      	b.n	8003012 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_PCD_EP_ClrStall+0x86>
 800302e:	2302      	movs	r3, #2
 8003030:	e00e      	b.n	8003050 <HAL_PCD_EP_ClrStall+0xa4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68f9      	ldr	r1, [r7, #12]
 8003040:	4618      	mov	r0, r3
 8003042:	f008 fb79 	bl	800b738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003068:	2b00      	cmp	r3, #0
 800306a:	da0c      	bge.n	8003086 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e00c      	b.n	80030a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f008 f99c 	bl	800b3e4 <USB_EPStopXfer>
 80030ac:	4603      	mov	r3, r0
 80030ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b088      	sub	sp, #32
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3338      	adds	r3, #56	; 0x38
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	3304      	adds	r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1a      	ldr	r2, [r3, #32]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d901      	bls.n	80030f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3303      	adds	r3, #3
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003116:	e026      	b.n	8003166 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d902      	bls.n	8003134 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3303      	adds	r3, #3
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	b29b      	uxth	r3, r3
 8003148:	6978      	ldr	r0, [r7, #20]
 800314a:	f008 f9f5 	bl	800b538 <USB_WritePacket>

    ep->xfer_buff  += len;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	441a      	add	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	b29b      	uxth	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d809      	bhi.n	8003190 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003184:	429a      	cmp	r2, r3
 8003186:	d203      	bcs.n	8003190 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1c3      	bne.n	8003118 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	429a      	cmp	r2, r3
 800319a:	d811      	bhi.n	80031c0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031bc:	4013      	ands	r3, r2
 80031be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	333c      	adds	r3, #60	; 0x3c
 80031e4:	3304      	adds	r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <PCD_EP_OutXfrComplete_int+0x98>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d124      	bne.n	800324c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003218:	461a      	mov	r2, r3
 800321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e01a      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	2320      	movs	r3, #32
 800323c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f00d fc7b 	bl	8010b40 <HAL_PCD_DataOutStageCallback>
 800324a:	e005      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f00d fc74 	bl	8010b40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	4f54310a 	.word	0x4f54310a

08003268 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	333c      	adds	r3, #60	; 0x3c
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <PCD_EP_OutSetupPacket_int+0x64>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d90e      	bls.n	80032bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f00d fc2d 	bl	8010b1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	4f54300a 	.word	0x4f54300a

080032d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
 80032dc:	4613      	mov	r3, r2
 80032de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032ee:	883b      	ldrh	r3, [r7, #0]
 80032f0:	0419      	lsls	r1, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
 80032fc:	e028      	b.n	8003350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e00d      	b.n	800332e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3340      	adds	r3, #64	; 0x40
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	3301      	adds	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	3b01      	subs	r3, #1
 8003334:	429a      	cmp	r2, r3
 8003336:	d3ec      	bcc.n	8003312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003338:	883b      	ldrh	r3, [r7, #0]
 800333a:	0418      	lsls	r0, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	4302      	orrs	r2, r0
 8003348:	3340      	adds	r3, #64	; 0x40
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	f043 0303 	orr.w	r3, r3, #3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_PWREx_GetVoltageRange+0x3c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f0:	d102      	bne.n	80033f8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f6:	e00b      	b.n	8003410 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_PWREx_GetVoltageRange+0x3c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003406:	d102      	bne.n	800340e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340c:	e000      	b.n	8003410 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800340e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d141      	bne.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800342e:	4b4b      	ldr	r3, [pc, #300]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d131      	bne.n	80034a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800343c:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	4a46      	ldr	r2, [pc, #280]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003454:	4a41      	ldr	r2, [pc, #260]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2232      	movs	r2, #50	; 0x32
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	4a3f      	ldr	r2, [pc, #252]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	0c9b      	lsrs	r3, r3, #18
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003472:	e002      	b.n	800347a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d102      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f2      	bne.n	8003474 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d158      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e057      	b.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034b0:	e04d      	b.n	800354e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b8:	d141      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ba:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d131      	bne.n	800352c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e0:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2232      	movs	r2, #50	; 0x32
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fe:	e002      	b.n	8003506 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003512:	d102      	bne.n	800351a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f2      	bne.n	8003500 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d112      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e011      	b.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800353c:	e007      	b.n	800354e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003548:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40007000 	.word	0x40007000
 8003560:	20000000 	.word	0x20000000
 8003564:	431bde83 	.word	0x431bde83

08003568 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_PWREx_EnableVddUSB+0x1c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003576:	6053      	str	r3, [r2, #4]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000

08003588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f000 bc08 	b.w	8003dac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359c:	4b96      	ldr	r3, [pc, #600]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a6:	4b94      	ldr	r3, [pc, #592]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80e4 	beq.w	8003786 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4c>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	f040 808b 	bne.w	80036e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	f040 8087 	bne.w	80036e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d4:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x64>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e3df      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	4b81      	ldr	r3, [pc, #516]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RCC_OscConfig+0x7e>
 80035fc:	4b7e      	ldr	r3, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003604:	e005      	b.n	8003612 <HAL_RCC_OscConfig+0x8a>
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003612:	4293      	cmp	r3, r2
 8003614:	d223      	bcs.n	800365e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fdf8 	bl	8004210 <RCC_SetFlashLatencyFromMSIRange>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e3c0      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a72      	ldr	r2, [pc, #456]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	496d      	ldr	r1, [pc, #436]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4968      	ldr	r1, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
 800365c:	e025      	b.n	80036aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365e:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003664:	f043 0308 	orr.w	r3, r3, #8
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4960      	ldr	r1, [pc, #384]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367c:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	495b      	ldr	r1, [pc, #364]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fdb8 	bl	8004210 <RCC_SetFlashLatencyFromMSIRange>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e380      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036aa:	f000 fcc1 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	4950      	ldr	r1, [pc, #320]	; (80037fc <HAL_RCC_OscConfig+0x274>)
 80036bc:	5ccb      	ldrb	r3, [r1, r3]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_RCC_OscConfig+0x278>)
 80036c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036ca:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCC_OscConfig+0x27c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd ff6c 	bl	80015ac <HAL_InitTick>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d052      	beq.n	8003784 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	e364      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d032      	beq.n	8003750 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ea:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f6:	f7fd ffa9 	bl	800164c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fe:	f7fd ffa5 	bl	800164c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e34d      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4930      	ldr	r1, [pc, #192]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373a:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	492b      	ldr	r1, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
 800374e:	e01a      	b.n	8003786 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800375c:	f7fd ff76 	bl	800164c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003764:	f7fd ff72 	bl	800164c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e31a      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x1dc>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d073      	beq.n	800387a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_OscConfig+0x21c>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d10e      	bne.n	80037bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d063      	beq.n	8003878 <HAL_RCC_OscConfig+0x2f0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d15f      	bne.n	8003878 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e2f7      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x24c>
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e025      	b.n	8003820 <HAL_RCC_OscConfig+0x298>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d114      	bne.n	8003808 <HAL_RCC_OscConfig+0x280>
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a02      	ldr	r2, [pc, #8]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e013      	b.n	8003820 <HAL_RCC_OscConfig+0x298>
 80037f8:	40021000 	.word	0x40021000
 80037fc:	080122d4 	.word	0x080122d4
 8003800:	20000000 	.word	0x20000000
 8003804:	20000004 	.word	0x20000004
 8003808:	4ba0      	ldr	r3, [pc, #640]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a9f      	ldr	r2, [pc, #636]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b9d      	ldr	r3, [pc, #628]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a9c      	ldr	r2, [pc, #624]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd ff10 	bl	800164c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fd ff0c 	bl	800164c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2b4      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003842:	4b92      	ldr	r3, [pc, #584]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x2a8>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fefc 	bl	800164c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fd fef8 	bl	800164c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e2a0      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800386a:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x2d0>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d060      	beq.n	8003948 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d005      	beq.n	8003898 <HAL_RCC_OscConfig+0x310>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d119      	bne.n	80038c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d116      	bne.n	80038c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	4b7c      	ldr	r3, [pc, #496]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_OscConfig+0x328>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e27d      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	4973      	ldr	r1, [pc, #460]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c4:	e040      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d023      	beq.n	8003916 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ce:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6e      	ldr	r2, [pc, #440]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd feb7 	bl	800164c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fd feb3 	bl	800164c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e25b      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f4:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	495f      	ldr	r1, [pc, #380]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
 8003914:	e018      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fd fe93 	bl	800164c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fe8f 	bl	800164c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e237      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03c      	beq.n	80039ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fe6e 	bl	800164c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fe6a 	bl	800164c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e212      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003986:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCC_OscConfig+0x3ec>
 8003994:	e01b      	b.n	80039ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003996:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fe51 	bl	800164c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fd fe4d 	bl	800164c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1f5      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ef      	bne.n	80039ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80a6 	beq.w	8003b28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6593      	str	r3, [r2, #88]	; 0x58
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCC_OscConfig+0x508>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d118      	bne.n	8003a46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_RCC_OscConfig+0x508>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_RCC_OscConfig+0x508>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a20:	f7fd fe14 	bl	800164c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fd fe10 	bl	800164c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1b8      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x508>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4d8>
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5e:	e029      	b.n	8003ab4 <HAL_RCC_OscConfig+0x52c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d115      	bne.n	8003a94 <HAL_RCC_OscConfig+0x50c>
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <HAL_RCC_OscConfig+0x504>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x52c>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
 8003a94:	4b9d      	ldr	r3, [pc, #628]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a9c      	ldr	r2, [pc, #624]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa4:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a98      	ldr	r2, [pc, #608]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d016      	beq.n	8003aea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd fdc6 	bl	800164c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fdc2 	bl	800164c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e168      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	4b8c      	ldr	r3, [pc, #560]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ed      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x53c>
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd fdaf 	bl	800164c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fd fdab 	bl	800164c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e151      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b08:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ed      	bne.n	8003af2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b16:	7ffb      	ldrb	r3, [r7, #31]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	4a7a      	ldr	r2, [pc, #488]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d03c      	beq.n	8003bae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b3c:	4b73      	ldr	r3, [pc, #460]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	4a72      	ldr	r2, [pc, #456]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fd7e 	bl	800164c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b54:	f7fd fd7a 	bl	800164c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e122      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b66:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCC_OscConfig+0x5cc>
 8003b74:	e01b      	b.n	8003bae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b76:	4b65      	ldr	r3, [pc, #404]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7c:	4a63      	ldr	r2, [pc, #396]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fd fd61 	bl	800164c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8e:	f7fd fd5d 	bl	800164c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e105      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba0:	4b5a      	ldr	r3, [pc, #360]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ef      	bne.n	8003b8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80f9 	beq.w	8003daa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	f040 80cf 	bne.w	8003d60 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bc2:	4b52      	ldr	r3, [pc, #328]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d12c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	3b01      	subs	r3, #1
 8003be2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d123      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d11b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d113      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	3b01      	subs	r3, #1
 8003c16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d071      	beq.n	8003d14 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d068      	beq.n	8003d08 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c42:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0ac      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c52:	4b2e      	ldr	r3, [pc, #184]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c5e:	f7fd fcf5 	bl	800164c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fcf1 	bl	800164c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e099      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x788>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c94:	3a01      	subs	r2, #1
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c9e:	0212      	lsls	r2, r2, #8
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca6:	0852      	lsrs	r2, r2, #1
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0552      	lsls	r2, r2, #21
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cb2:	0852      	lsrs	r2, r2, #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	0652      	lsls	r2, r2, #25
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cbe:	06d2      	lsls	r2, r2, #27
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4912      	ldr	r1, [pc, #72]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce0:	f7fd fcb4 	bl	800164c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fcb0 	bl	800164c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e058      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_RCC_OscConfig+0x784>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d06:	e050      	b.n	8003daa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e04f      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d144      	bne.n	8003daa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d38:	f7fd fc88 	bl	800164c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fc84 	bl	800164c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e02c      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x7b8>
 8003d5e:	e024      	b.n	8003daa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d01f      	beq.n	8003da6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fd fc6b 	bl	800164c <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fd fc67 	bl	800164c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	4905      	ldr	r1, [pc, #20]	; (8003db4 <HAL_RCC_OscConfig+0x82c>)
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_OscConfig+0x830>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
 8003da4:	e001      	b.n	8003daa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	feeefffc 	.word	0xfeeefffc

08003dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e11d      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 020f 	bic.w	r2, r3, #15
 8003dea:	498b      	ldr	r1, [pc, #556]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e105      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d908      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	497b      	ldr	r1, [pc, #492]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d079      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d11e      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e46:	4b75      	ldr	r3, [pc, #468]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0dc      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e56:	f000 fa35 	bl	80042c4 <RCC_GetSysClockFreqFromPLLSource>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a70      	ldr	r2, [pc, #448]	; (8004020 <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d946      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e62:	4b6e      	ldr	r3, [pc, #440]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d140      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6e:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e76:	4a69      	ldr	r2, [pc, #420]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e035      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8c:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d115      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0b9      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0ad      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0a5      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ec4:	f000 f8b4 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d90f      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ed0:	4b52      	ldr	r3, [pc, #328]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003edc:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 0203 	bic.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4947      	ldr	r1, [pc, #284]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f02:	f7fd fba3 	bl	800164c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0a:	f7fd fb9f 	bl	800164c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e077      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 020c 	and.w	r2, r3, #12
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d1eb      	bne.n	8003f0a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f38:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a37      	ldr	r2, [pc, #220]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f42:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d208      	bcs.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	492b      	ldr	r1, [pc, #172]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d210      	bcs.n	8003fa2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 020f 	bic.w	r2, r3, #15
 8003f88:	4923      	ldr	r1, [pc, #140]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e036      	b.n	8004010 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4918      	ldr	r1, [pc, #96]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4910      	ldr	r1, [pc, #64]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fe0:	f000 f826 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	490c      	ldr	r1, [pc, #48]	; (8004024 <HAL_RCC_ClockConfig+0x268>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x26c>)
 8003ffe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fad1 	bl	80015ac <HAL_InitTick>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]

  return status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40022000 	.word	0x40022000
 800401c:	40021000 	.word	0x40021000
 8004020:	04c4b400 	.word	0x04c4b400
 8004024:	080122d4 	.word	0x080122d4
 8004028:	20000000 	.word	0x20000000
 800402c:	20000004 	.word	0x20000004

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	; 0x24
 8004034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403e:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d121      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d11e      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004064:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e005      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <HAL_RCC_GetSysClockFreq+0x10c>)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_GetSysClockFreq+0x110>)
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e004      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_RCC_GetSysClockFreq+0x114>)
 80040b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d134      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d003      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xac>
 80040d4:	e005      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d8:	617b      	str	r3, [r7, #20]
      break;
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_GetSysClockFreq+0x114>)
 80040de:	617b      	str	r3, [r7, #20]
      break;
 80040e0:	e002      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	617b      	str	r3, [r7, #20]
      break;
 80040e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3301      	adds	r3, #1
 80040f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	fb03 f202 	mul.w	r2, r3, r2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	0e5b      	lsrs	r3, r3, #25
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	3301      	adds	r3, #1
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004128:	69bb      	ldr	r3, [r7, #24]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	080122ec 	.word	0x080122ec
 8004140:	00f42400 	.word	0x00f42400
 8004144:	007a1200 	.word	0x007a1200

08004148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_RCC_GetHCLKFreq+0x14>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000000 	.word	0x20000000

08004160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004164:	f7ff fff0 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	080122e4 	.word	0x080122e4

0800418c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004190:	f7ff ffda 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4904      	ldr	r1, [pc, #16]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	080122e4 	.word	0x080122e4

080041b8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_EnableCSS+0x1c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <HAL_RCC_EnableCSS+0x1c>)
 80041c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e8:	d105      	bne.n	80041f6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80041ea:	f000 f809 	bl	8004200 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80041ee:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80041f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f4:	621a      	str	r2, [r3, #32]
  }
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000

08004200 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004228:	f7ff f8da 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 800422c:	6178      	str	r0, [r7, #20]
 800422e:	e014      	b.n	800425a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004248:	f7ff f8ca 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 800424c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d10b      	bne.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b80      	cmp	r3, #128	; 0x80
 8004266:	d913      	bls.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2ba0      	cmp	r3, #160	; 0xa0
 800426c:	d902      	bls.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800426e:	2302      	movs	r3, #2
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	e00d      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004274:	2301      	movs	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e00a      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b7f      	cmp	r3, #127	; 0x7f
 800427e:	d902      	bls.n	8004286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004280:	2302      	movs	r3, #2
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e004      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d101      	bne.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 020f 	bic.w	r2, r3, #15
 8004298:	4909      	ldr	r1, [pc, #36]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40022000 	.word	0x40022000

080042c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ca:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d00b      	beq.n	80042f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d825      	bhi.n	800432c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d008      	beq.n	80042f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d11f      	bne.n	800432c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042ee:	613b      	str	r3, [r7, #16]
    break;
 80042f0:	e01f      	b.n	8004332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80042f2:	4b25      	ldr	r3, [pc, #148]	; (8004388 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80042f4:	613b      	str	r3, [r7, #16]
    break;
 80042f6:	e01c      	b.n	8004332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e005      	b.n	8004320 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004320:	4a1a      	ldr	r2, [pc, #104]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	613b      	str	r3, [r7, #16]
    break;
 800432a:	e002      	b.n	8004332 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
    break;
 8004330:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	3301      	adds	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	fb03 f202 	mul.w	r2, r3, r2
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0e5b      	lsrs	r3, r3, #25
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004372:	683b      	ldr	r3, [r7, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40021000 	.word	0x40021000
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200
 800438c:	080122ec 	.word	0x080122ec

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004398:	2300      	movs	r3, #0
 800439a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800439c:	2300      	movs	r3, #0
 800439e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d040      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d02a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d825      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d026      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043bc:	2b60      	cmp	r3, #96	; 0x60
 80043be:	d821      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d006      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d81d      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d010      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80043d0:	e018      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043d2:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a88      	ldr	r2, [pc, #544]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043de:	e015      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fa24 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043f0:	e00c      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fb0f 	bl	8005a1c <RCCEx_PLLSAI2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	74fb      	strb	r3, [r7, #19]
      break;
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800440a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004412:	4b79      	ldr	r3, [pc, #484]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004418:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	4975      	ldr	r1, [pc, #468]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004428:	e001      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d047      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d030      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d82a      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800444a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444e:	d02a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004454:	d824      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d81e      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d010      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800446c:	e018      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a61      	ldr	r2, [pc, #388]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447a:	e015      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f9d6 	bl	8005834 <RCCEx_PLLSAI1_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800448c:	e00c      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3320      	adds	r3, #32
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fac1 	bl	8005a1c <RCCEx_PLLSAI2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	74fb      	strb	r3, [r7, #19]
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80044a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ae:	4b52      	ldr	r3, [pc, #328]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	494e      	ldr	r1, [pc, #312]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80044c4:	e001      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 809f 	beq.w	8004616 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044dc:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	4a40      	ldr	r2, [pc, #256]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3a      	ldr	r2, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451a:	f7fd f897 	bl	800164c <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004520:	e009      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fd f893 	bl	800164c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	74fb      	strb	r3, [r7, #19]
        break;
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004536:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ef      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d15b      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01f      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d019      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004592:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d016      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd f852 	bl	800164c <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	e00b      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd f84e 	bl	800164c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d902      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	74fb      	strb	r3, [r7, #19]
            break;
 80045c2:	e006      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ec      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045f0:	e008      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	74bb      	strb	r3, [r7, #18]
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004604:	7c7b      	ldrb	r3, [r7, #17]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460a:	4ba0      	ldr	r3, [pc, #640]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	4a9f      	ldr	r2, [pc, #636]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004614:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004622:	4b9a      	ldr	r3, [pc, #616]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f023 0203 	bic.w	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	4996      	ldr	r1, [pc, #600]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004644:	4b91      	ldr	r3, [pc, #580]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 020c 	bic.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	498e      	ldr	r1, [pc, #568]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004666:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	4985      	ldr	r1, [pc, #532]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004688:	4b80      	ldr	r3, [pc, #512]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	497d      	ldr	r1, [pc, #500]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046aa:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	4974      	ldr	r1, [pc, #464]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046cc:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	496c      	ldr	r1, [pc, #432]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ee:	4b67      	ldr	r3, [pc, #412]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fc:	4963      	ldr	r1, [pc, #396]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004710:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471e:	495b      	ldr	r1, [pc, #364]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004732:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	4952      	ldr	r1, [pc, #328]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004754:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	494a      	ldr	r1, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004776:	4b45      	ldr	r3, [pc, #276]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	4941      	ldr	r1, [pc, #260]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004798:	4b3c      	ldr	r3, [pc, #240]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	4939      	ldr	r1, [pc, #228]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c8:	4930      	ldr	r1, [pc, #192]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d8:	d106      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047da:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e4:	60d3      	str	r3, [r2, #12]
 80047e6:	e011      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f0:	d10c      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3304      	adds	r3, #4
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f81b 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d04d      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004820:	d108      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004822:	4b1a      	ldr	r3, [pc, #104]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800482a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800482e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004832:	e012      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	4a14      	ldr	r2, [pc, #80]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004840:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004852:	490e      	ldr	r1, [pc, #56]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004862:	d106      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e020      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487a:	d109      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a02      	ldr	r2, [pc, #8]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004886:	60d3      	str	r3, [r2, #12]
 8004888:	e014      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 ffc7 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d028      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c0:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ce:	4947      	ldr	r1, [pc, #284]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048de:	d106      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e0:	4b42      	ldr	r3, [pc, #264]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a41      	ldr	r2, [pc, #260]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ea:	60d3      	str	r3, [r2, #12]
 80048ec:	e011      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f6:	d10c      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 ff98 	bl	8005834 <RCCEx_PLLSAI1_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800492e:	492f      	ldr	r1, [pc, #188]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 ff73 	bl	8005834 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800496a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496e:	f023 0204 	bic.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	491c      	ldr	r1, [pc, #112]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004992:	f023 0218 	bic.w	r2, r3, #24
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	4913      	ldr	r1, [pc, #76]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d017      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c0:	490a      	ldr	r1, [pc, #40]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a02:	d13e      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a04:	4bb6      	ldr	r3, [pc, #728]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a16:	d028      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1e:	f200 86f4 	bhi.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a28:	d005      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d00e      	beq.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004a32:	f000 beea 	b.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a36:	4baa      	ldr	r3, [pc, #680]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f040 86e4 	bne.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4a:	61fb      	str	r3, [r7, #28]
      break;
 8004a4c:	f000 bedf 	b.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a50:	4ba3      	ldr	r3, [pc, #652]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	f040 86d9 	bne.w	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004a60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a64:	61fb      	str	r3, [r7, #28]
      break;
 8004a66:	f000 bed4 	b.w	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b9d      	ldr	r3, [pc, #628]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a76:	f040 86ce 	bne.w	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004a7a:	4b9a      	ldr	r3, [pc, #616]	; (8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a7c:	61fb      	str	r3, [r7, #28]
      break;
 8004a7e:	f000 beca 	b.w	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a82:	4b97      	ldr	r3, [pc, #604]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d036      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d840      	bhi.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004aa4:	e039      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004aa6:	4b8e      	ldr	r3, [pc, #568]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d116      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ab2:	4b8b      	ldr	r3, [pc, #556]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004abe:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004aca:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	4a84      	ldr	r2, [pc, #528]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ade:	e01f      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
      break;
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ae6:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	d102      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004af4:	4b7d      	ldr	r3, [pc, #500]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004af6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004af8:	e012      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
      break;
 8004afe:	e00f      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b00:	4b77      	ldr	r3, [pc, #476]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d102      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004b0e:	4b78      	ldr	r3, [pc, #480]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b12:	e005      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
      break;
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
      break;
 8004b1e:	bf00      	nop
    }

    switch(PeriphClk)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b26:	f000 8606 	beq.w	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b30:	f200 8673 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3a:	f000 8469 	beq.w	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b44:	f200 8669 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4e:	f000 8531 	beq.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b58:	f200 865f 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b62:	f000 8187 	beq.w	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b6c:	f200 8655 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b76:	f000 80cd 	beq.w	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b80:	f200 864b 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8a:	f000 8430 	beq.w	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	f200 8641 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9e:	f000 83e4 	beq.w	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba8:	f200 8637 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	f000 80af 	beq.w	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	f200 862d 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	f000 809d 	beq.w	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	f200 8623 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bda:	f000 808b 	beq.w	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	f200 8619 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bee:	f000 8554 	beq.w	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	f200 860f 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c02:	f000 8500 	beq.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0c:	f200 8605 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	f000 84a1 	beq.w	800555c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c20:	f200 85fb 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	f000 846c 	beq.w	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	f200 85f3 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d84c      	bhi.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 85ec 	beq.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	2b1f      	cmp	r3, #31
 8004c48:	f200 85e7 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08005069 	.word	0x08005069
 8004c58:	080050d7 	.word	0x080050d7
 8004c5c:	0800581b 	.word	0x0800581b
 8004c60:	0800516b 	.word	0x0800516b
 8004c64:	0800581b 	.word	0x0800581b
 8004c68:	0800581b 	.word	0x0800581b
 8004c6c:	0800581b 	.word	0x0800581b
 8004c70:	080051e3 	.word	0x080051e3
 8004c74:	0800581b 	.word	0x0800581b
 8004c78:	0800581b 	.word	0x0800581b
 8004c7c:	0800581b 	.word	0x0800581b
 8004c80:	0800581b 	.word	0x0800581b
 8004c84:	0800581b 	.word	0x0800581b
 8004c88:	0800581b 	.word	0x0800581b
 8004c8c:	0800581b 	.word	0x0800581b
 8004c90:	08005267 	.word	0x08005267
 8004c94:	0800581b 	.word	0x0800581b
 8004c98:	0800581b 	.word	0x0800581b
 8004c9c:	0800581b 	.word	0x0800581b
 8004ca0:	0800581b 	.word	0x0800581b
 8004ca4:	0800581b 	.word	0x0800581b
 8004ca8:	0800581b 	.word	0x0800581b
 8004cac:	0800581b 	.word	0x0800581b
 8004cb0:	0800581b 	.word	0x0800581b
 8004cb4:	0800581b 	.word	0x0800581b
 8004cb8:	0800581b 	.word	0x0800581b
 8004cbc:	0800581b 	.word	0x0800581b
 8004cc0:	0800581b 	.word	0x0800581b
 8004cc4:	0800581b 	.word	0x0800581b
 8004cc8:	0800581b 	.word	0x0800581b
 8004ccc:	0800581b 	.word	0x0800581b
 8004cd0:	080052e9 	.word	0x080052e9
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	f000 83e8 	beq.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004cdc:	f000 bd9d 	b.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0003d090 	.word	0x0003d090
 8004ce8:	080122ec 	.word	0x080122ec
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cfa:	f000 ff83 	bl	8005c04 <RCCEx_GetSAIxPeriphCLKFreq>
 8004cfe:	61f8      	str	r0, [r7, #28]
      break;
 8004d00:	f000 bd8e 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d0a:	f000 ff7b 	bl	8005c04 <RCCEx_GetSAIxPeriphCLKFreq>
 8004d0e:	61f8      	str	r0, [r7, #28]
      break;
 8004d10:	f000 bd86 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004d14:	4b9a      	ldr	r3, [pc, #616]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d26:	d015      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d2e:	f200 8092 	bhi.w	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d38:	d029      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d40:	f200 8089 	bhi.w	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d07b      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d50:	d04a      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004d52:	e080      	b.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d54:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d17d      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d60:	4b87      	ldr	r3, [pc, #540]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004d6c:	4b84      	ldr	r3, [pc, #528]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	e005      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004d78:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	4a7f      	ldr	r2, [pc, #508]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8a:	61fb      	str	r3, [r7, #28]
          break;
 8004d8c:	e066      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004d8e:	4b7c      	ldr	r3, [pc, #496]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d9a:	d162      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004d9c:	4b78      	ldr	r3, [pc, #480]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da8:	d15b      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004daa:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	fb03 f202 	mul.w	r2, r3, r2
 8004dbe:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	3301      	adds	r3, #1
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004dd0:	4b6b      	ldr	r3, [pc, #428]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0d5b      	lsrs	r3, r3, #21
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	61fb      	str	r3, [r7, #28]
          break;
 8004de6:	e03c      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004de8:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df4:	d138      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004df6:	4b62      	ldr	r3, [pc, #392]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d131      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e04:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	fb03 f202 	mul.w	r2, r3, r2
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	3301      	adds	r3, #1
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004e2a:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	0d5b      	lsrs	r3, r3, #21
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	3301      	adds	r3, #1
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
          break;
 8004e40:	e012      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004e42:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d10e      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004e52:	61fb      	str	r3, [r7, #28]
          break;
 8004e54:	e00b      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004e56:	bf00      	nop
 8004e58:	f000 bce2 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e5c:	bf00      	nop
 8004e5e:	f000 bcdf 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e62:	bf00      	nop
 8004e64:	f000 bcdc 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e68:	bf00      	nop
 8004e6a:	f000 bcd9 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e6e:	bf00      	nop
        break;
 8004e70:	f000 bcd6 	b.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e82:	d13d      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e84:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e90:	f040 84c5 	bne.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	f040 84bd 	bne.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	fb03 f202 	mul.w	r2, r3, r2
 8004eb8:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	0edb      	lsrs	r3, r3, #27
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004ee8:	2311      	movs	r3, #17
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e001      	b.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004eee:	2307      	movs	r3, #7
 8004ef0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	61fb      	str	r3, [r7, #28]
      break;
 8004efc:	f000 bc8f 	b.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f12:	d016      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f1a:	f200 809b 	bhi.w	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f24:	d032      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f2c:	f200 8092 	bhi.w	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8084 	beq.w	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f3e:	d052      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8004f40:	e088      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f040 8084 	bne.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	e005      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61fb      	str	r3, [r7, #28]
          break;
 8004f7c:	e06c      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	080122ec 	.word	0x080122ec
 8004f88:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004f8c:	4ba5      	ldr	r3, [pc, #660]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f98:	d160      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004f9a:	4ba2      	ldr	r3, [pc, #648]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa6:	d159      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fa8:	4b9e      	ldr	r3, [pc, #632]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	fb03 f202 	mul.w	r2, r3, r2
 8004fbc:	4b99      	ldr	r3, [pc, #612]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004fce:	4b95      	ldr	r3, [pc, #596]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	0d5b      	lsrs	r3, r3, #21
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	61fb      	str	r3, [r7, #28]
          break;
 8004fe4:	e03a      	b.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004fe6:	4b8f      	ldr	r3, [pc, #572]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff2:	d135      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ff4:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005000:	d12e      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005002:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	fb03 f202 	mul.w	r2, r3, r2
 8005016:	4b83      	ldr	r3, [pc, #524]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	3301      	adds	r3, #1
 8005022:	fbb2 f3f3 	udiv	r3, r2, r3
 8005026:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005028:	4b7e      	ldr	r3, [pc, #504]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	0d5b      	lsrs	r3, r3, #21
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	61fb      	str	r3, [r7, #28]
          break;
 800503e:	e00f      	b.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005040:	4b78      	ldr	r3, [pc, #480]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b02      	cmp	r3, #2
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005050:	61fb      	str	r3, [r7, #28]
          break;
 8005052:	e007      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005054:	bf00      	nop
 8005056:	e3e2      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005058:	bf00      	nop
 800505a:	e3e0      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800505c:	bf00      	nop
 800505e:	e3de      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005060:	bf00      	nop
 8005062:	e3dc      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005064:	bf00      	nop
      break;
 8005066:	e3da      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005068:	4b6e      	ldr	r3, [pc, #440]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d827      	bhi.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005091 	.word	0x08005091
 8005084:	08005099 	.word	0x08005099
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050b5 	.word	0x080050b5
          frequency = HAL_RCC_GetPCLK2Freq();
 8005090:	f7ff f87c 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005094:	61f8      	str	r0, [r7, #28]
          break;
 8005096:	e01d      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005098:	f7fe ffca 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800509c:	61f8      	str	r0, [r7, #28]
          break;
 800509e:	e019      	b.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050a0:	4b60      	ldr	r3, [pc, #384]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d10f      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80050ae:	4b5f      	ldr	r3, [pc, #380]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050b0:	61fb      	str	r3, [r7, #28]
          break;
 80050b2:	e00c      	b.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050b4:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c6:	61fb      	str	r3, [r7, #28]
          break;
 80050c8:	e003      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80050ca:	bf00      	nop
 80050cc:	e3a8      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050ce:	bf00      	nop
 80050d0:	e3a6      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050d2:	bf00      	nop
        break;
 80050d4:	e3a4      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80050d6:	4b53      	ldr	r3, [pc, #332]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d83a      	bhi.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005125 	.word	0x08005125
 80050f4:	0800515f 	.word	0x0800515f
 80050f8:	0800515f 	.word	0x0800515f
 80050fc:	0800515f 	.word	0x0800515f
 8005100:	0800512d 	.word	0x0800512d
 8005104:	0800515f 	.word	0x0800515f
 8005108:	0800515f 	.word	0x0800515f
 800510c:	0800515f 	.word	0x0800515f
 8005110:	08005135 	.word	0x08005135
 8005114:	0800515f 	.word	0x0800515f
 8005118:	0800515f 	.word	0x0800515f
 800511c:	0800515f 	.word	0x0800515f
 8005120:	08005149 	.word	0x08005149
          frequency = HAL_RCC_GetPCLK1Freq();
 8005124:	f7ff f81c 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005128:	61f8      	str	r0, [r7, #28]
          break;
 800512a:	e01d      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800512c:	f7fe ff80 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8005130:	61f8      	str	r0, [r7, #28]
          break;
 8005132:	e019      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005134:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d10f      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005142:	4b3a      	ldr	r3, [pc, #232]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005144:	61fb      	str	r3, [r7, #28]
          break;
 8005146:	e00c      	b.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d107      	bne.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	61fb      	str	r3, [r7, #28]
          break;
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800515e:	bf00      	nop
 8005160:	e35e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005162:	bf00      	nop
 8005164:	e35c      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005166:	bf00      	nop
        break;
 8005168:	e35a      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800516a:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b30      	cmp	r3, #48	; 0x30
 800517a:	d021      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b30      	cmp	r3, #48	; 0x30
 8005180:	d829      	bhi.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b20      	cmp	r3, #32
 8005186:	d011      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b20      	cmp	r3, #32
 800518c:	d823      	bhi.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b10      	cmp	r3, #16
 8005198:	d004      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800519a:	e01c      	b.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fe ffe0 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 80051a0:	61f8      	str	r0, [r7, #28]
          break;
 80051a2:	e01d      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80051a4:	f7fe ff44 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80051a8:	61f8      	str	r0, [r7, #28]
          break;
 80051aa:	e019      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d10f      	bne.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051bc:	61fb      	str	r3, [r7, #28]
          break;
 80051be:	e00c      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d107      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	61fb      	str	r3, [r7, #28]
          break;
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80051d6:	bf00      	nop
 80051d8:	e322      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051da:	bf00      	nop
 80051dc:	e320      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051de:	bf00      	nop
        break;
 80051e0:	e31e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2bc0      	cmp	r3, #192	; 0xc0
 80051f2:	d027      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2bc0      	cmp	r3, #192	; 0xc0
 80051f8:	d82f      	bhi.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d017      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d829      	bhi.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d004      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005212:	e022      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe ffa4 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005218:	61f8      	str	r0, [r7, #28]
          break;
 800521a:	e023      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800521c:	f7fe ff08 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8005220:	61f8      	str	r0, [r7, #28]
          break;
 8005222:	e01f      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005224:	40021000 	.word	0x40021000
 8005228:	02dc6c00 	.word	0x02dc6c00
 800522c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005230:	4b9b      	ldr	r3, [pc, #620]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d10f      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800523e:	4b99      	ldr	r3, [pc, #612]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005240:	61fb      	str	r3, [r7, #28]
          break;
 8005242:	e00c      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005244:	4b96      	ldr	r3, [pc, #600]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d107      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	61fb      	str	r3, [r7, #28]
          break;
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800525a:	bf00      	nop
 800525c:	e2e0      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800525e:	bf00      	nop
 8005260:	e2de      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005262:	bf00      	nop
        break;
 8005264:	e2dc      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005266:	4b8e      	ldr	r3, [pc, #568]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005278:	d025      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005280:	d82c      	bhi.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d013      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005290:	d824      	bhi.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529e:	d004      	beq.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80052a0:	e01c      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052a2:	f7fe ff5d 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 80052a6:	61f8      	str	r0, [r7, #28]
          break;
 80052a8:	e01d      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80052aa:	f7fe fec1 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80052ae:	61f8      	str	r0, [r7, #28]
          break;
 80052b0:	e019      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052b2:	4b7b      	ldr	r3, [pc, #492]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d10f      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80052c0:	4b78      	ldr	r3, [pc, #480]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80052c2:	61fb      	str	r3, [r7, #28]
          break;
 80052c4:	e00c      	b.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052c6:	4b76      	ldr	r3, [pc, #472]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d107      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80052d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d8:	61fb      	str	r3, [r7, #28]
          break;
 80052da:	e003      	b.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80052dc:	bf00      	nop
 80052de:	e29f      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052e0:	bf00      	nop
 80052e2:	e29d      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052e4:	bf00      	nop
        break;
 80052e6:	e29b      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80052e8:	4b6d      	ldr	r3, [pc, #436]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052fa:	d025      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005302:	d82c      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d013      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d824      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d004      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005322:	e01c      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe ff1c 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005328:	61f8      	str	r0, [r7, #28]
          break;
 800532a:	e01d      	b.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800532c:	f7fe fe80 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8005330:	61f8      	str	r0, [r7, #28]
          break;
 8005332:	e019      	b.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005334:	4b5a      	ldr	r3, [pc, #360]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005340:	d10f      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005342:	4b58      	ldr	r3, [pc, #352]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005344:	61fb      	str	r3, [r7, #28]
          break;
 8005346:	e00c      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005348:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d107      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	61fb      	str	r3, [r7, #28]
          break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800535e:	bf00      	nop
 8005360:	e25e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005362:	bf00      	nop
 8005364:	e25c      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005366:	bf00      	nop
        break;
 8005368:	e25a      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800536a:	4b4d      	ldr	r3, [pc, #308]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537c:	d007      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005384:	d12f      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005386:	f7fe fe53 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800538a:	61f8      	str	r0, [r7, #28]
          break;
 800538c:	e02e      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800538e:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800539a:	d126      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800539c:	4b40      	ldr	r3, [pc, #256]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	fb03 f202 	mul.w	r2, r3, r2
 80053bc:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	3301      	adds	r3, #1
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80053ce:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	0e5b      	lsrs	r3, r3, #25
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	3301      	adds	r3, #1
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	61fb      	str	r3, [r7, #28]
          break;
 80053e4:	e001      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80053e6:	bf00      	nop
 80053e8:	e21a      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053ea:	bf00      	nop
        break;
 80053ec:	e218      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80053ee:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80053f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005400:	f7fe fec4 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005404:	61f8      	str	r0, [r7, #28]
        break;
 8005406:	e20b      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005408:	f7fe fe12 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800540c:	61f8      	str	r0, [r7, #28]
        break;
 800540e:	e207      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005410:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005416:	f003 0318 	and.w	r3, r3, #24
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b10      	cmp	r3, #16
 8005420:	d010      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b10      	cmp	r3, #16
 8005426:	d834      	bhi.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d024      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005434:	e02d      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005436:	69b9      	ldr	r1, [r7, #24]
 8005438:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800543c:	f000 fbe2 	bl	8005c04 <RCCEx_GetSAIxPeriphCLKFreq>
 8005440:	61f8      	str	r0, [r7, #28]
          break;
 8005442:	e02b      	b.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d122      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	e005      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800546a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	4a0c      	ldr	r2, [pc, #48]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547a:	61fb      	str	r3, [r7, #28]
          break;
 800547c:	e00b      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800548e:	61fb      	str	r3, [r7, #28]
          break;
 8005490:	e003      	b.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005492:	bf00      	nop
 8005494:	e1c4      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005496:	bf00      	nop
 8005498:	e1c2      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800549a:	bf00      	nop
        break;
 800549c:	e1c0      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	080122ec 	.word	0x080122ec
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80054ac:	4b96      	ldr	r3, [pc, #600]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	d013      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c6:	d819      	bhi.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d4:	d004      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7fe fe42 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 80054dc:	61f8      	str	r0, [r7, #28]
          break;
 80054de:	e010      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80054e0:	f7fe fda6 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80054e4:	61f8      	str	r0, [r7, #28]
          break;
 80054e6:	e00c      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054e8:	4b87      	ldr	r3, [pc, #540]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d104      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80054f6:	4b85      	ldr	r3, [pc, #532]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80054f8:	61fb      	str	r3, [r7, #28]
          break;
 80054fa:	e001      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80054fc:	bf00      	nop
 80054fe:	e18f      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005500:	bf00      	nop
        break;
 8005502:	e18d      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005504:	4b80      	ldr	r3, [pc, #512]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d013      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d819      	bhi.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552c:	d004      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800552e:	e011      	b.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe fe16 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005534:	61f8      	str	r0, [r7, #28]
          break;
 8005536:	e010      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005538:	f7fe fd7a 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800553c:	61f8      	str	r0, [r7, #28]
          break;
 800553e:	e00c      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005540:	4b71      	ldr	r3, [pc, #452]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d104      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800554e:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005550:	61fb      	str	r3, [r7, #28]
          break;
 8005552:	e001      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005554:	bf00      	nop
 8005556:	e163      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005558:	bf00      	nop
        break;
 800555a:	e161      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800555c:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800556e:	d013      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005576:	d819      	bhi.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005586:	e011      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fdea 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 800558c:	61f8      	str	r0, [r7, #28]
          break;
 800558e:	e010      	b.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005590:	f7fe fd4e 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8005594:	61f8      	str	r0, [r7, #28]
          break;
 8005596:	e00c      	b.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005598:	4b5b      	ldr	r3, [pc, #364]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d104      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80055a6:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80055a8:	61fb      	str	r3, [r7, #28]
          break;
 80055aa:	e001      	b.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80055ac:	bf00      	nop
 80055ae:	e137      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055b0:	bf00      	nop
        break;
 80055b2:	e135      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80055b4:	4b54      	ldr	r3, [pc, #336]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80055b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d011      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d818      	bhi.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d004      	beq.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80055d8:	e011      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055da:	f7fe fdc1 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 80055de:	61f8      	str	r0, [r7, #28]
          break;
 80055e0:	e010      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fe fd25 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80055e6:	61f8      	str	r0, [r7, #28]
          break;
 80055e8:	e00c      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f6:	d104      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80055f8:	4b44      	ldr	r3, [pc, #272]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80055fa:	61fb      	str	r3, [r7, #28]
          break;
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80055fe:	bf00      	nop
 8005600:	e10e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005602:	bf00      	nop
        break;
 8005604:	e10c      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005606:	4b40      	ldr	r3, [pc, #256]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005618:	d02c      	beq.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005620:	d833      	bhi.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005628:	d01a      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005630:	d82b      	bhi.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800563e:	d004      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005640:	e023      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005642:	f7fe fd8d 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005646:	61f8      	str	r0, [r7, #28]
          break;
 8005648:	e026      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800564a:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d11a      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005658:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800565c:	61fb      	str	r3, [r7, #28]
          break;
 800565e:	e016      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005660:	4b29      	ldr	r3, [pc, #164]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d111      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800566e:	4b27      	ldr	r3, [pc, #156]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005670:	61fb      	str	r3, [r7, #28]
          break;
 8005672:	e00e      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d109      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005686:	61fb      	str	r3, [r7, #28]
          break;
 8005688:	e005      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800568a:	bf00      	nop
 800568c:	e0c8      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800568e:	bf00      	nop
 8005690:	e0c6      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005692:	bf00      	nop
 8005694:	e0c4      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005696:	bf00      	nop
        break;
 8005698:	e0c2      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056ac:	d030      	beq.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056b4:	d837      	bhi.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056bc:	d01a      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056c4:	d82f      	bhi.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d004      	beq.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80056d4:	e027      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056d6:	f7fe fd43 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 80056da:	61f8      	str	r0, [r7, #28]
          break;
 80056dc:	e02a      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d11e      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80056ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056f0:	61fb      	str	r3, [r7, #28]
          break;
 80056f2:	e01a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	d115      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005702:	4b02      	ldr	r3, [pc, #8]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005704:	61fb      	str	r3, [r7, #28]
          break;
 8005706:	e012      	b.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005708:	40021000 	.word	0x40021000
 800570c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005710:	4b46      	ldr	r3, [pc, #280]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d109      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800571e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005722:	61fb      	str	r3, [r7, #28]
          break;
 8005724:	e005      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005726:	bf00      	nop
 8005728:	e07a      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800572a:	bf00      	nop
 800572c:	e078      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800572e:	bf00      	nop
 8005730:	e076      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005732:	bf00      	nop
        break;
 8005734:	e074      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800573c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005748:	d02c      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005750:	d855      	bhi.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575e:	d004      	beq.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005760:	e04d      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fc65 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8005766:	61f8      	str	r0, [r7, #28]
          break;
 8005768:	e04e      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800576a:	4b30      	ldr	r3, [pc, #192]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d145      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005776:	4b2d      	ldr	r3, [pc, #180]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005782:	4b2a      	ldr	r3, [pc, #168]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	e005      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800578e:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	61fb      	str	r3, [r7, #28]
          break;
 80057a2:	e02e      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057a4:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057b0:	d129      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057b2:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057be:	d122      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ca:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	fb03 f202 	mul.w	r2, r3, r2
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3301      	adds	r3, #1
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	0d5b      	lsrs	r3, r3, #21
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	3301      	adds	r3, #1
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	61fb      	str	r3, [r7, #28]
          break;
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80057fe:	bf00      	nop
 8005800:	e00e      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005802:	bf00      	nop
 8005804:	e00c      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005806:	bf00      	nop
        break;
 8005808:	e00a      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800580a:	bf00      	nop
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800580e:	bf00      	nop
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005812:	bf00      	nop
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800581e:	bf00      	nop
    }
  }

  return(frequency);
 8005820:	69fb      	ldr	r3, [r7, #28]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000
 8005830:	080122ec 	.word	0x080122ec

08005834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005842:	4b72      	ldr	r3, [pc, #456]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00e      	beq.n	800586c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800584e:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0203 	and.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d103      	bne.n	8005866 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
       ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d142      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
 800586a:	e03f      	b.n	80058ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b03      	cmp	r3, #3
 8005872:	d018      	beq.n	80058a6 <RCCEx_PLLSAI1_Config+0x72>
 8005874:	2b03      	cmp	r3, #3
 8005876:	d825      	bhi.n	80058c4 <RCCEx_PLLSAI1_Config+0x90>
 8005878:	2b01      	cmp	r3, #1
 800587a:	d002      	beq.n	8005882 <RCCEx_PLLSAI1_Config+0x4e>
 800587c:	2b02      	cmp	r3, #2
 800587e:	d009      	beq.n	8005894 <RCCEx_PLLSAI1_Config+0x60>
 8005880:	e020      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005882:	4b62      	ldr	r3, [pc, #392]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d11d      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005892:	e01a      	b.n	80058ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005894:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589c:	2b00      	cmp	r3, #0
 800589e:	d116      	bne.n	80058ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a4:	e013      	b.n	80058ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058a6:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058b2:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058c2:	e006      	b.n	80058d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      break;
 80058c8:	e004      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058ca:	bf00      	nop
 80058cc:	e002      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058ce:	bf00      	nop
 80058d0:	e000      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80058d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80058da:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f023 0203 	bic.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4949      	ldr	r1, [pc, #292]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 8086 	bne.w	8005a00 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058f4:	4b45      	ldr	r3, [pc, #276]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a44      	ldr	r2, [pc, #272]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005900:	f7fb fea4 	bl	800164c <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fb fea0 	bl	800164c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
        break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800591c:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ef      	bne.n	8005908 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d168      	bne.n	8005a00 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	4b35      	ldr	r3, [pc, #212]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6892      	ldr	r2, [r2, #8]
 8005940:	0211      	lsls	r1, r2, #8
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	06d2      	lsls	r2, r2, #27
 8005948:	4311      	orrs	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6852      	ldr	r2, [r2, #4]
 800594e:	3a01      	subs	r2, #1
 8005950:	0112      	lsls	r2, r2, #4
 8005952:	430a      	orrs	r2, r1
 8005954:	492d      	ldr	r1, [pc, #180]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005956:	4313      	orrs	r3, r2
 8005958:	610b      	str	r3, [r1, #16]
 800595a:	e02d      	b.n	80059b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d115      	bne.n	800598e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005962:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6892      	ldr	r2, [r2, #8]
 800596e:	0211      	lsls	r1, r2, #8
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6912      	ldr	r2, [r2, #16]
 8005974:	0852      	lsrs	r2, r2, #1
 8005976:	3a01      	subs	r2, #1
 8005978:	0552      	lsls	r2, r2, #21
 800597a:	4311      	orrs	r1, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6852      	ldr	r2, [r2, #4]
 8005980:	3a01      	subs	r2, #1
 8005982:	0112      	lsls	r2, r2, #4
 8005984:	430a      	orrs	r2, r1
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005988:	4313      	orrs	r3, r2
 800598a:	610b      	str	r3, [r1, #16]
 800598c:	e014      	b.n	80059b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800598e:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6892      	ldr	r2, [r2, #8]
 800599a:	0211      	lsls	r1, r2, #8
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6952      	ldr	r2, [r2, #20]
 80059a0:	0852      	lsrs	r2, r2, #1
 80059a2:	3a01      	subs	r2, #1
 80059a4:	0652      	lsls	r2, r2, #25
 80059a6:	4311      	orrs	r1, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6852      	ldr	r2, [r2, #4]
 80059ac:	3a01      	subs	r2, #1
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	430a      	orrs	r2, r1
 80059b2:	4916      	ldr	r1, [pc, #88]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c4:	f7fb fe42 	bl	800164c <HAL_GetTick>
 80059c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ca:	e009      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059cc:	f7fb fe3e 	bl	800164c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d902      	bls.n	80059e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	73fb      	strb	r3, [r7, #15]
          break;
 80059de:	e005      	b.n	80059ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ef      	beq.n	80059cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	4904      	ldr	r1, [pc, #16]	; (8005a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	07ff800f 	.word	0x07ff800f
 8005a14:	ff9f800f 	.word	0xff9f800f
 8005a18:	f9ff800f 	.word	0xf9ff800f

08005a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a2a:	4b72      	ldr	r3, [pc, #456]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00e      	beq.n	8005a54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a36:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0203 	and.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d103      	bne.n	8005a4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
       ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d142      	bne.n	8005ad4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
 8005a52:	e03f      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d018      	beq.n	8005a8e <RCCEx_PLLSAI2_Config+0x72>
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d825      	bhi.n	8005aac <RCCEx_PLLSAI2_Config+0x90>
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d002      	beq.n	8005a6a <RCCEx_PLLSAI2_Config+0x4e>
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d009      	beq.n	8005a7c <RCCEx_PLLSAI2_Config+0x60>
 8005a68:	e020      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a6a:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11d      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a7a:	e01a      	b.n	8005ab2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a7c:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d116      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8c:	e013      	b.n	8005ab6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a8e:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a9a:	4b56      	ldr	r3, [pc, #344]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aaa:	e006      	b.n	8005aba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab0:	e004      	b.n	8005abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e002      	b.n	8005abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ac2:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4949      	ldr	r1, [pc, #292]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 8086 	bne.w	8005be8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005adc:	4b45      	ldr	r3, [pc, #276]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a44      	ldr	r2, [pc, #272]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae8:	f7fb fdb0 	bl	800164c <HAL_GetTick>
 8005aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aee:	e009      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005af0:	f7fb fdac 	bl	800164c <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d902      	bls.n	8005b04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	73fb      	strb	r3, [r7, #15]
        break;
 8005b02:	e005      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b04:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ef      	bne.n	8005af0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d168      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d113      	bne.n	8005b44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b1c:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	4b35      	ldr	r3, [pc, #212]	; (8005bf8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6892      	ldr	r2, [r2, #8]
 8005b28:	0211      	lsls	r1, r2, #8
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	06d2      	lsls	r2, r2, #27
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6852      	ldr	r2, [r2, #4]
 8005b36:	3a01      	subs	r2, #1
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	492d      	ldr	r1, [pc, #180]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	614b      	str	r3, [r1, #20]
 8005b42:	e02d      	b.n	8005ba0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d115      	bne.n	8005b76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6892      	ldr	r2, [r2, #8]
 8005b56:	0211      	lsls	r1, r2, #8
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6912      	ldr	r2, [r2, #16]
 8005b5c:	0852      	lsrs	r2, r2, #1
 8005b5e:	3a01      	subs	r2, #1
 8005b60:	0552      	lsls	r2, r2, #21
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6852      	ldr	r2, [r2, #4]
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	0112      	lsls	r2, r2, #4
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	4921      	ldr	r1, [pc, #132]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	614b      	str	r3, [r1, #20]
 8005b74:	e014      	b.n	8005ba0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b76:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6892      	ldr	r2, [r2, #8]
 8005b82:	0211      	lsls	r1, r2, #8
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6952      	ldr	r2, [r2, #20]
 8005b88:	0852      	lsrs	r2, r2, #1
 8005b8a:	3a01      	subs	r2, #1
 8005b8c:	0652      	lsls	r2, r2, #25
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6852      	ldr	r2, [r2, #4]
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0112      	lsls	r2, r2, #4
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bac:	f7fb fd4e 	bl	800164c <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bb2:	e009      	b.n	8005bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bb4:	f7fb fd4a 	bl	800164c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d902      	bls.n	8005bc8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005bc6:	e005      	b.n	8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ef      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	4904      	ldr	r1, [pc, #16]	; (8005bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	07ff800f 	.word	0x07ff800f
 8005bfc:	ff9f800f 	.word	0xff9f800f
 8005c00:	f9ff800f 	.word	0xf9ff800f

08005c04 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c20:	d10b      	bne.n	8005c3a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c22:	4b7e      	ldr	r3, [pc, #504]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c28:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005c2c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b60      	cmp	r3, #96	; 0x60
 8005c32:	d112      	bne.n	8005c5a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c34:	4b7a      	ldr	r3, [pc, #488]	; (8005e20 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e00f      	b.n	8005c5a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c40:	d10b      	bne.n	8005c5a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005c42:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c4c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c54:	d101      	bne.n	8005c5a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005c56:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005c58:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 80d6 	bne.w	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d003      	beq.n	8005c74 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c72:	d13b      	bne.n	8005cec <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005c74:	4b69      	ldr	r3, [pc, #420]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c80:	f040 80c4 	bne.w	8005e0c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005c84:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80bd 	beq.w	8005e0c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c92:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ca6:	4b5d      	ldr	r3, [pc, #372]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005cb2:	4b5a      	ldr	r3, [pc, #360]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	0edb      	lsrs	r3, r3, #27
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005cc4:	4b55      	ldr	r3, [pc, #340]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005cd0:	2311      	movs	r3, #17
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e001      	b.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005cd6:	2307      	movs	r3, #7
 8005cd8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	fb03 f202 	mul.w	r2, r3, r2
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005cea:	e08f      	b.n	8005e0c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d13a      	bne.n	8005d68 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005cf2:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cfe:	f040 8086 	bne.w	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005d02:	4b46      	ldr	r3, [pc, #280]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d07f      	beq.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005d0e:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	091b      	lsrs	r3, r3, #4
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	3301      	adds	r3, #1
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d22:	4b3e      	ldr	r3, [pc, #248]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	0edb      	lsrs	r3, r3, #27
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005d4c:	2311      	movs	r3, #17
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e001      	b.n	8005d56 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005d52:	2307      	movs	r3, #7
 8005d54:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	fb03 f202 	mul.w	r2, r3, r2
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e052      	b.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d003      	beq.n	8005d76 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d109      	bne.n	8005d8a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d144      	bne.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005d86:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d88:	e041      	b.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d003      	beq.n	8005d98 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d13a      	bne.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da4:	d133      	bne.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02d      	beq.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	0edb      	lsrs	r3, r3, #27
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005df0:	2311      	movs	r3, #17
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e001      	b.n	8005dfa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005df6:	2307      	movs	r3, #7
 8005df8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	fb03 f202 	mul.w	r2, r3, r2
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	e000      	b.n	8005e0e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e0c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3724      	adds	r7, #36	; 0x24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	001fff68 	.word	0x001fff68
 8005e24:	00f42400 	.word	0x00f42400

08005e28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e078      	b.n	8005f2c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fb f933 	bl	80010b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2203      	movs	r2, #3
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f86a 	bl	8005f34 <HAL_SD_InitCard>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e060      	b.n	8005f2c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005e6a:	f107 0308 	add.w	r3, r7, #8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fdcd 	bl	8006a10 <HAL_SD_GetCardStatus>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e055      	b.n	8005f2c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e86:	7e7b      	ldrb	r3, [r7, #25]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d10a      	bne.n	8005eaa <HAL_SD_Init+0x82>
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <HAL_SD_Init+0x78>
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ea8:	e00b      	b.n	8005ec2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d104      	bne.n	8005ebc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005eba:	e002      	b.n	8005ec2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fe83 	bl	8006bd4 <HAL_SD_ConfigWideBusOperation>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e029      	b.n	8005f2c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005ed8:	f7fb fbb8 	bl	800164c <HAL_GetTick>
 8005edc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ede:	e014      	b.n	8005f0a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005ee0:	f7fb fbb4 	bl	800164c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eee:	d10c      	bne.n	8005f0a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e010      	b.n	8005f2c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 ff76 	bl	8006dfc <HAL_SD_GetCardState>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d1e4      	bne.n	8005ee0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	; 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f34:	b5b0      	push	{r4, r5, r7, lr}
 8005f36:	b08e      	sub	sp, #56	; 0x38
 8005f38:	af04      	add	r7, sp, #16
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005f4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f50:	f7fe fd4e 	bl	80049f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e079      	b.n	8006064 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	4a3d      	ldr	r2, [pc, #244]	; (800606c <HAL_SD_InitCard+0x138>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0210 	orr.w	r2, r2, #16
 8005f9a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681d      	ldr	r5, [r3, #0]
 8005fa0:	466c      	mov	r4, sp
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f003 fcab 	bl	8009910 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f003 fcee 	bl	80099a0 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005fd0:	4a27      	ldr	r2, [pc, #156]	; (8006070 <HAL_SD_InitCard+0x13c>)
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fb fb42 	bl	8001664 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 ffeb 	bl	8006fbc <SD_PowerON>
 8005fe6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e02e      	b.n	8006064 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 ff18 	bl	8006e3c <SD_InitCard>
 800600c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e01b      	b.n	8006064 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006034:	4618      	mov	r0, r3
 8006036:	f003 fd49 	bl	8009acc <SDMMC_CmdBlockLength>
 800603a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <HAL_SD_InitCard+0x140>)
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3728      	adds	r7, #40	; 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bdb0      	pop	{r4, r5, r7, pc}
 800606c:	014f8b59 	.word	0x014f8b59
 8006070:	00012110 	.word	0x00012110
 8006074:	1fe00fff 	.word	0x1fe00fff

08006078 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b092      	sub	sp, #72	; 0x48
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006086:	f7fb fae1 	bl	800164c <HAL_GetTick>
 800608a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d107      	bne.n	80060aa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e170      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f040 8163 	bne.w	800637e <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	441a      	add	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d907      	bls.n	80060dc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e157      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2203      	movs	r2, #3
 80060e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2200      	movs	r2, #0
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d002      	beq.n	80060fa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	025b      	lsls	r3, r3, #9
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060fe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	025b      	lsls	r3, r3, #9
 8006104:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006106:	2390      	movs	r3, #144	; 0x90
 8006108:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800610a:	2302      	movs	r3, #2
 800610c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006112:	2300      	movs	r3, #0
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f107 0214 	add.w	r2, r7, #20
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f003 fca7 	bl	8009a74 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006134:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d90a      	bls.n	8006152 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2202      	movs	r2, #2
 8006140:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006148:	4618      	mov	r0, r3
 800614a:	f003 fd05 	bl	8009b58 <SDMMC_CmdReadMultiBlock>
 800614e:	6478      	str	r0, [r7, #68]	; 0x44
 8006150:	e009      	b.n	8006166 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800615e:	4618      	mov	r0, r3
 8006160:	f003 fcd7 	bl	8009b12 <SDMMC_CmdReadSingleBlock>
 8006164:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006168:	2b00      	cmp	r3, #0
 800616a:	d012      	beq.n	8006192 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a88      	ldr	r2, [pc, #544]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617a:	431a      	orrs	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e0fc      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006196:	e061      	b.n	800625c <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03c      	beq.n	8006220 <HAL_SD_ReadBlocks+0x1a8>
 80061a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d039      	beq.n	8006220 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40
 80061b0:	e033      	b.n	800621a <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f003 fbd4 	bl	8009964 <SDMMC_ReadFIFO>
 80061bc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	3301      	adds	r3, #1
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	3b01      	subs	r3, #1
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	3301      	adds	r3, #1
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e4:	3b01      	subs	r3, #1
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	3301      	adds	r3, #1
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	3b01      	subs	r3, #1
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	0e1b      	lsrs	r3, r3, #24
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	3301      	adds	r3, #1
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	3b01      	subs	r3, #1
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	3301      	adds	r3, #1
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621c:	2b07      	cmp	r3, #7
 800621e:	d9c8      	bls.n	80061b2 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006220:	f7fb fa14 	bl	800164c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <HAL_SD_ReadBlocks+0x1be>
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	2b00      	cmp	r3, #0
 8006234:	d112      	bne.n	800625c <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a56      	ldr	r2, [pc, #344]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e097      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006266:	2b00      	cmp	r3, #0
 8006268:	d096      	beq.n	8006198 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d022      	beq.n	80062ce <HAL_SD_ReadBlocks+0x256>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d91f      	bls.n	80062ce <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	2b03      	cmp	r3, #3
 8006294:	d01b      	beq.n	80062ce <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f003 fcc6 	bl	8009c2c <SDMMC_CmdStopTransfer>
 80062a0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80062a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d012      	beq.n	80062ce <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a39      	ldr	r2, [pc, #228]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e05e      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d012      	beq.n	8006302 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	f043 0208 	orr.w	r2, r3, #8
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e044      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d012      	beq.n	8006336 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	f043 0202 	orr.w	r2, r3, #2
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e02a      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a12      	ldr	r2, [pc, #72]	; (8006394 <HAL_SD_ReadBlocks+0x31c>)
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e010      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <HAL_SD_ReadBlocks+0x320>)
 8006370:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e006      	b.n	800638c <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
  }
}
 800638c:	4618      	mov	r0, r3
 800638e:	3748      	adds	r7, #72	; 0x48
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	1fe00fff 	.word	0x1fe00fff
 8006398:	18000f3a 	.word	0x18000f3a

0800639c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b092      	sub	sp, #72	; 0x48
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80063aa:	f7fb f94f 	bl	800164c <HAL_GetTick>
 80063ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e174      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	f040 8167 	bne.w	80066aa <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d907      	bls.n	8006400 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e15b      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2203      	movs	r2, #3
 8006404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2200      	movs	r2, #0
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d002      	beq.n	800641e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	025b      	lsls	r3, r3, #9
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800641e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006422:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	025b      	lsls	r3, r3, #9
 8006428:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800642a:	2390      	movs	r3, #144	; 0x90
 800642c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800642e:	2300      	movs	r3, #0
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006432:	2300      	movs	r3, #0
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006436:	2300      	movs	r3, #0
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f107 0218 	add.w	r2, r7, #24
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f003 fb15 	bl	8009a74 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006458:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d90a      	bls.n	8006476 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800646c:	4618      	mov	r0, r3
 800646e:	f003 fbb9 	bl	8009be4 <SDMMC_CmdWriteMultiBlock>
 8006472:	6478      	str	r0, [r7, #68]	; 0x44
 8006474:	e009      	b.n	800648a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2210      	movs	r2, #16
 800647a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006482:	4618      	mov	r0, r3
 8006484:	f003 fb8b 	bl	8009b9e <SDMMC_CmdWriteSingleBlock>
 8006488:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800648a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a8a      	ldr	r2, [pc, #552]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	431a      	orrs	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e100      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80064ba:	e065      	b.n	8006588 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d040      	beq.n	800654c <HAL_SD_WriteBlocks+0x1b0>
 80064ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d03d      	beq.n	800654c <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	643b      	str	r3, [r7, #64]	; 0x40
 80064d4:	e037      	b.n	8006546 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	3301      	adds	r3, #1
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	3b01      	subs	r3, #1
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	021a      	lsls	r2, r3, #8
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	3301      	adds	r3, #1
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	3b01      	subs	r3, #1
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	041a      	lsls	r2, r3, #16
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	3301      	adds	r3, #1
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006514:	3b01      	subs	r3, #1
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	061a      	lsls	r2, r3, #24
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006526:	3301      	adds	r3, #1
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	3b01      	subs	r3, #1
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f107 0214 	add.w	r2, r7, #20
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f003 fa1f 	bl	800997e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006542:	3301      	adds	r3, #1
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
 8006546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006548:	2b07      	cmp	r3, #7
 800654a:	d9c4      	bls.n	80064d6 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800654c:	f7fb f87e 	bl	800164c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006558:	429a      	cmp	r2, r3
 800655a:	d902      	bls.n	8006562 <HAL_SD_WriteBlocks+0x1c6>
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	2b00      	cmp	r3, #0
 8006560:	d112      	bne.n	8006588 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a56      	ldr	r2, [pc, #344]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e097      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006592:	2b00      	cmp	r3, #0
 8006594:	d092      	beq.n	80064bc <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d022      	beq.n	80065fa <HAL_SD_WriteBlocks+0x25e>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d91f      	bls.n	80065fa <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d01b      	beq.n	80065fa <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f003 fb30 	bl	8009c2c <SDMMC_CmdStopTransfer>
 80065cc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80065ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a39      	ldr	r2, [pc, #228]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	431a      	orrs	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e05e      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2c      	ldr	r2, [pc, #176]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f043 0208 	orr.w	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e044      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d012      	beq.n	8006662 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f043 0202 	orr.w	r2, r3, #2
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e02a      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d012      	beq.n	8006696 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <HAL_SD_WriteBlocks+0x324>)
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	f043 0210 	orr.w	r2, r3, #16
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e010      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <HAL_SD_WriteBlocks+0x328>)
 800669c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e006      	b.n	80066b8 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3748      	adds	r7, #72	; 0x48
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	1fe00fff 	.word	0x1fe00fff
 80066c4:	18000f3a 	.word	0x18000f3a

080066c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	0f9b      	lsrs	r3, r3, #30
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e2:	0e9b      	lsrs	r3, r3, #26
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671e:	b2da      	uxtb	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	b29a      	uxth	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006746:	0bdb      	lsrs	r3, r3, #15
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	0b9b      	lsrs	r3, r3, #14
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800676a:	0b5b      	lsrs	r3, r3, #13
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677c:	0b1b      	lsrs	r3, r3, #12
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2200      	movs	r2, #0
 800678e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d163      	bne.n	8006860 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679c:	009a      	lsls	r2, r3, #2
 800679e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067a2:	4013      	ands	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067a8:	0f92      	lsrs	r2, r2, #30
 80067aa:	431a      	orrs	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b4:	0edb      	lsrs	r3, r3, #27
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d8:	0d5b      	lsrs	r3, r3, #21
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ea:	0c9b      	lsrs	r3, r3, #18
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fc:	0bdb      	lsrs	r3, r3, #15
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	7e1b      	ldrb	r3, [r3, #24]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	3302      	adds	r3, #2
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800682a:	fb03 f202 	mul.w	r2, r3, r2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7a1b      	ldrb	r3, [r3, #8]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	2201      	movs	r2, #1
 800683e:	409a      	lsls	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800684c:	0a52      	lsrs	r2, r2, #9
 800684e:	fb03 f202 	mul.w	r2, r3, r2
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
 800685e:	e031      	b.n	80068c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11d      	bne.n	80068a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	431a      	orrs	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	029a      	lsls	r2, r3, #10
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006898:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	659a      	str	r2, [r3, #88]	; 0x58
 80068a2:	e00f      	b.n	80068c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a58      	ldr	r2, [pc, #352]	; (8006a0c <HAL_SD_GetCardCSD+0x344>)
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e09d      	b.n	8006a00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c8:	0b9b      	lsrs	r3, r3, #14
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068da:	09db      	lsrs	r3, r3, #7
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fc:	0fdb      	lsrs	r3, r3, #31
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006908:	0f5b      	lsrs	r3, r3, #29
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691a:	0e9b      	lsrs	r3, r3, #26
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692c:	0d9b      	lsrs	r3, r3, #22
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693e:	0d5b      	lsrs	r3, r3, #21
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	0bdb      	lsrs	r3, r3, #15
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006982:	0b9b      	lsrs	r3, r3, #14
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006996:	0b5b      	lsrs	r3, r3, #13
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	0b1b      	lsrs	r3, r3, #12
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069be:	0a9b      	lsrs	r3, r3, #10
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	1fe00fff 	.word	0x1fe00fff

08006a10 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b094      	sub	sp, #80	; 0x50
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbd4 	bl	80071d4 <SD_SendSDStatus>
 8006a2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d011      	beq.n	8006a58 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4f      	ldr	r2, [pc, #316]	; (8006b78 <HAL_SD_GetCardStatus+0x168>)
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a56:	e070      	b.n	8006b3a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	099b      	lsrs	r3, r3, #6
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	0e1b      	lsrs	r3, r3, #24
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	061a      	lsls	r2, r3, #24
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aa8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	0e1b      	lsrs	r3, r3, #24
 8006aae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4313      	orrs	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	0a9b      	lsrs	r3, r3, #10
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	0a1b      	lsrs	r3, r3, #8
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 0303 	and.w	r3, r3, #3
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	0e1b      	lsrs	r3, r3, #24
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b42:	4618      	mov	r0, r3
 8006b44:	f002 ffc2 	bl	8009acc <SDMMC_CmdBlockLength>
 8006b48:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <HAL_SD_GetCardStatus+0x168>)
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3750      	adds	r7, #80	; 0x50
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	1fe00fff 	.word	0x1fe00fff

08006b7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bd4:	b5b0      	push	{r4, r5, r7, lr}
 8006bd6:	b090      	sub	sp, #64	; 0x40
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d02e      	beq.n	8006c52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfa:	d106      	bne.n	8006c0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
 8006c08:	e029      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c10:	d10a      	bne.n	8006c28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fbd6 	bl	80073c4 <SD_WideBus_Enable>
 8006c18:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
 8006c26:	e01a      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fc13 	bl	800745a <SD_WideBus_Disable>
 8006c34:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
 8006c42:	e00c      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c50:	e005      	b.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a60      	ldr	r2, [pc, #384]	; (8006dec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c74:	e097      	b.n	8006da6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006c76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c7a:	f7fd feb9 	bl	80049f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c7e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8086 	beq.w	8006d94 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	4952      	ldr	r1, [pc, #328]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8006caa:	0e1b      	lsrs	r3, r3, #24
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d303      	bcc.n	8006cb8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e05a      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d103      	bne.n	8006cca <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e051      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd2:	d126      	bne.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10e      	bne.n	8006cfa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	4a45      	ldr	r2, [pc, #276]	; (8006df4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d906      	bls.n	8006cf2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	4a42      	ldr	r2, [pc, #264]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	0e5b      	lsrs	r3, r3, #25
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e03d      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e039      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	4a3b      	ldr	r2, [pc, #236]	; (8006df4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	0e5b      	lsrs	r3, r3, #25
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e029      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	e025      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	4a32      	ldr	r2, [pc, #200]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d906      	bls.n	8006d40 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	4a2e      	ldr	r2, [pc, #184]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0e1b      	lsrs	r3, r3, #24
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e016      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e012      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	4a28      	ldr	r2, [pc, #160]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d906      	bls.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	4a24      	ldr	r2, [pc, #144]	; (8006df0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e002      	b.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681d      	ldr	r5, [r3, #0]
 8006d78:	466c      	mov	r4, sp
 8006d7a:	f107 0318 	add.w	r3, r7, #24
 8006d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d86:	f107 030c 	add.w	r3, r7, #12
 8006d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f002 fdbf 	bl	8009910 <SDMMC_Init>
 8006d92:	e008      	b.n	8006da6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dae:	4618      	mov	r0, r3
 8006db0:	f002 fe8c 	bl	8009acc <SDMMC_CmdBlockLength>
 8006db4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00c      	beq.n	8006dd6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3730      	adds	r7, #48	; 0x30
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dea:	bf00      	nop
 8006dec:	1fe00fff 	.word	0x1fe00fff
 8006df0:	55e63b89 	.word	0x55e63b89
 8006df4:	02faf080 	.word	0x02faf080
 8006df8:	017d7840 	.word	0x017d7840

08006dfc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e08:	f107 030c 	add.w	r3, r7, #12
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fab0 	bl	8007374 <SD_SendStatus>
 8006e14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	0a5b      	lsrs	r3, r3, #9
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e32:	693b      	ldr	r3, [r7, #16]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e3c:	b5b0      	push	{r4, r5, r7, lr}
 8006e3e:	b090      	sub	sp, #64	; 0x40
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006e44:	2301      	movs	r3, #1
 8006e46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f002 fdb9 	bl	80099c4 <SDMMC_GetPowerState>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e5c:	e0a9      	b.n	8006fb2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d02e      	beq.n	8006ec4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 fffe 	bl	8009e6c <SDMMC_CmdSendCID>
 8006e70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <SD_InitCard+0x40>
    {
      return errorstate;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	e09a      	b.n	8006fb2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f002 fde3 	bl	8009a4e <SDMMC_GetResponse>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2104      	movs	r1, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f002 fdda 	bl	8009a4e <SDMMC_GetResponse>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2108      	movs	r1, #8
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f002 fdd1 	bl	8009a4e <SDMMC_GetResponse>
 8006eac:	4602      	mov	r2, r0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	210c      	movs	r1, #12
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 fdc8 	bl	8009a4e <SDMMC_GetResponse>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d00d      	beq.n	8006ee8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f107 020e 	add.w	r2, r7, #14
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f003 f807 	bl	8009eea <SDMMC_CmdSetRelAdd>
 8006edc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <SD_InitCard+0xac>
    {
      return errorstate;
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	e064      	b.n	8006fb2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d036      	beq.n	8006f5e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ef0:	89fb      	ldrh	r3, [r7, #14]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f002 ffd0 	bl	8009eaa <SDMMC_CmdSendCSD>
 8006f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <SD_InitCard+0xda>
    {
      return errorstate;
 8006f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f14:	e04d      	b.n	8006fb2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 fd96 	bl	8009a4e <SDMMC_GetResponse>
 8006f22:	4602      	mov	r2, r0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f002 fd8d 	bl	8009a4e <SDMMC_GetResponse>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2108      	movs	r1, #8
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 fd84 	bl	8009a4e <SDMMC_GetResponse>
 8006f46:	4602      	mov	r2, r0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	210c      	movs	r1, #12
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 fd7b 	bl	8009a4e <SDMMC_GetResponse>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2104      	movs	r1, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f002 fd72 	bl	8009a4e <SDMMC_GetResponse>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	0d1a      	lsrs	r2, r3, #20
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f72:	f107 0310 	add.w	r3, r7, #16
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fba5 	bl	80066c8 <HAL_SD_GetCardCSD>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f88:	e013      	b.n	8006fb2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	2200      	movs	r2, #0
 8006f96:	461c      	mov	r4, r3
 8006f98:	4615      	mov	r5, r2
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	f002 fe7a 	bl	8009c98 <SDMMC_CmdSelDesel>
 8006fa4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <SD_InitCard+0x174>
  {
    return errorstate;
 8006fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fae:	e000      	b.n	8006fb2 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3740      	adds	r7, #64	; 0x40
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006fbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006fd0:	f7fa fb3c 	bl	800164c <HAL_GetTick>
 8006fd4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f002 fe80 	bl	8009ce0 <SDMMC_CmdGoIdleState>
 8006fe0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_PowerON+0x30>
  {
    return errorstate;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	e0ed      	b.n	80071c8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f002 fe93 	bl	8009d1c <SDMMC_CmdOperCond>
 8006ff6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f002 fe69 	bl	8009ce0 <SDMMC_CmdGoIdleState>
 800700e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <SD_PowerON+0x64>
    {
      return errorstate;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	e0d6      	b.n	80071c8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b01      	cmp	r3, #1
 8007026:	d137      	bne.n	8007098 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f002 fe94 	bl	8009d5c <SDMMC_CmdAppCommand>
 8007034:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02d      	beq.n	8007098 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800703c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007040:	e0c2      	b.n	80071c8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f002 fe87 	bl	8009d5c <SDMMC_CmdAppCommand>
 800704e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <SD_PowerON+0x9e>
    {
      return errorstate;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	e0b6      	b.n	80071c8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	495c      	ldr	r1, [pc, #368]	; (80071d0 <SD_PowerON+0x214>)
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fe9e 	bl	8009da2 <SDMMC_CmdAppOperCommand>
 8007066:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800706e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007072:	e0a9      	b.n	80071c8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f002 fce7 	bl	8009a4e <SDMMC_GetResponse>
 8007080:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	0fdb      	lsrs	r3, r3, #31
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <SD_PowerON+0xd2>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <SD_PowerON+0xd4>
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]

    count++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800709e:	4293      	cmp	r3, r2
 80070a0:	d802      	bhi.n	80070a8 <SD_PowerON+0xec>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0cc      	beq.n	8007042 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d902      	bls.n	80070b8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070b6:	e087      	b.n	80071c8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d07e      	beq.n	80071c0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d17a      	bne.n	80071c6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d075      	beq.n	80071c6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0208 	orr.w	r2, r2, #8
 80070f0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f002 ff5e 	bl	8009fb8 <SDMMC_CmdVoltageSwitch>
 80070fc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00c      	beq.n	800711e <SD_PowerON+0x162>
        {
          return errorstate;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	e05f      	b.n	80071c8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007108:	f7fa faa0 	bl	800164c <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007116:	d102      	bne.n	800711e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800711c:	e054      	b.n	80071c8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800712c:	d1ec      	bne.n	8007108 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007136:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007146:	d002      	beq.n	800714e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800714c:	e03c      	b.n	80071c8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800714e:	2001      	movs	r0, #1
 8007150:	f000 fa9e 	bl	8007690 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0204 	orr.w	r2, r2, #4
 8007162:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007164:	e00a      	b.n	800717c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007166:	f7fa fa71 	bl	800164c <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007174:	d102      	bne.n	800717c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007176:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800717a:	e025      	b.n	80071c8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800718a:	d1ec      	bne.n	8007166 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007194:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a4:	d102      	bne.n	80071ac <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071aa:	e00d      	b.n	80071c8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2213      	movs	r2, #19
 80071b2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
 80071be:	e002      	b.n	80071c6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	c1100000 	.word	0xc1100000

080071d4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071de:	f7fa fa35 	bl	800164c <HAL_GetTick>
 80071e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f002 fc2d 	bl	8009a4e <SDMMC_GetResponse>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fe:	d102      	bne.n	8007206 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007204:	e0b0      	b.n	8007368 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2140      	movs	r1, #64	; 0x40
 800720c:	4618      	mov	r0, r3
 800720e:	f002 fc5d 	bl	8009acc <SDMMC_CmdBlockLength>
 8007212:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	e0a0      	b.n	8007368 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f002 fd92 	bl	8009d5c <SDMMC_CmdAppCommand>
 8007238:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	e08d      	b.n	8007368 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007250:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007256:	2360      	movs	r3, #96	; 0x60
 8007258:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800725a:	2302      	movs	r3, #2
 800725c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007262:	2301      	movs	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	4611      	mov	r1, r2
 8007270:	4618      	mov	r0, r3
 8007272:	f002 fbff 	bl	8009a74 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f002 fe7a 	bl	8009f74 <SDMMC_CmdStatusRegister>
 8007280:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02b      	beq.n	80072e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	e069      	b.n	8007368 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a6:	e00d      	b.n	80072c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f002 fb59 	bl	8009964 <SDMMC_ReadFIFO>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	601a      	str	r2, [r3, #0]
        pData++;
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	3304      	adds	r3, #4
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	3301      	adds	r3, #1
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	2b07      	cmp	r3, #7
 80072c8:	d9ee      	bls.n	80072a8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072ca:	f7fa f9bf 	bl	800164c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d8:	d102      	bne.n	80072e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80072da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072de:	e043      	b.n	8007368 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0d2      	beq.n	8007294 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80072fc:	2308      	movs	r3, #8
 80072fe:	e033      	b.n	8007368 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800730e:	2302      	movs	r3, #2
 8007310:	e02a      	b.n	8007368 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d017      	beq.n	8007350 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007320:	2320      	movs	r3, #32
 8007322:	e021      	b.n	8007368 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fb1b 	bl	8009964 <SDMMC_ReadFIFO>
 800732e:	4602      	mov	r2, r0
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	601a      	str	r2, [r3, #0]
    pData++;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	3304      	adds	r3, #4
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800733a:	f7fa f987 	bl	800164c <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007348:	d102      	bne.n	8007350 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800734a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800734e:	e00b      	b.n	8007368 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e2      	bne.n	8007324 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a03      	ldr	r2, [pc, #12]	; (8007370 <SD_SendSDStatus+0x19c>)
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3730      	adds	r7, #48	; 0x30
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	18000f3a 	.word	0x18000f3a

08007374 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007388:	e018      	b.n	80073bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f002 fdc9 	bl	8009f2e <SDMMC_CmdSendStatus>
 800739c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	e009      	b.n	80073bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f002 fb4d 	bl	8009a4e <SDMMC_GetResponse>
 80073b4:	4602      	mov	r2, r0
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f002 fb37 	bl	8009a4e <SDMMC_GetResponse>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ea:	d102      	bne.n	80073f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073f0:	e02f      	b.n	8007452 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f879 	bl	80074f0 <SD_FindSCR>
 80073fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	e023      	b.n	8007452 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01c      	beq.n	800744e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741c:	041b      	lsls	r3, r3, #16
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f002 fc9b 	bl	8009d5c <SDMMC_CmdAppCommand>
 8007426:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	e00f      	b.n	8007452 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2102      	movs	r1, #2
 8007438:	4618      	mov	r0, r3
 800743a:	f002 fcd2 	bl	8009de2 <SDMMC_CmdBusWidth>
 800743e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	e003      	b.n	8007452 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800744a:	2300      	movs	r3, #0
 800744c:	e001      	b.n	8007452 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800744e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	2300      	movs	r3, #0
 8007468:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f002 faec 	bl	8009a4e <SDMMC_GetResponse>
 8007476:	4603      	mov	r3, r0
 8007478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007480:	d102      	bne.n	8007488 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007486:	e02f      	b.n	80074e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f82e 	bl	80074f0 <SD_FindSCR>
 8007494:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	e023      	b.n	80074e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01c      	beq.n	80074e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f002 fc50 	bl	8009d5c <SDMMC_CmdAppCommand>
 80074bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	e00f      	b.n	80074e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f002 fc87 	bl	8009de2 <SDMMC_CmdBusWidth>
 80074d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	e003      	b.n	80074e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e001      	b.n	80074e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074fa:	f7fa f8a7 	bl	800164c <HAL_GetTick>
 80074fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007504:	2300      	movs	r3, #0
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2108      	movs	r1, #8
 8007516:	4618      	mov	r0, r3
 8007518:	f002 fad8 	bl	8009acc <SDMMC_CmdBlockLength>
 800751c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	e0ad      	b.n	8007684 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f002 fc11 	bl	8009d5c <SDMMC_CmdAppCommand>
 800753a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	e09e      	b.n	8007684 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800754a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800754c:	2308      	movs	r3, #8
 800754e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007550:	2330      	movs	r3, #48	; 0x30
 8007552:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007554:	2302      	movs	r3, #2
 8007556:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007558:	2300      	movs	r3, #0
 800755a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800755c:	2301      	movs	r3, #1
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f107 0210 	add.w	r2, r7, #16
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f002 fa82 	bl	8009a74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f002 fc57 	bl	8009e28 <SDMMC_CmdSendSCR>
 800757a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d027      	beq.n	80075d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	e07e      	b.n	8007684 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d113      	bne.n	80075bc <SD_FindSCR+0xcc>
 8007594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007596:	2b00      	cmp	r3, #0
 8007598:	d110      	bne.n	80075bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 f9e0 	bl	8009964 <SDMMC_ReadFIFO>
 80075a4:	4603      	mov	r3, r0
 80075a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 f9d9 	bl	8009964 <SDMMC_ReadFIFO>
 80075b2:	4603      	mov	r3, r0
 80075b4:	60fb      	str	r3, [r7, #12]
      index++;
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	3301      	adds	r3, #1
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075bc:	f7fa f846 	bl	800164c <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ca:	d102      	bne.n	80075d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075d0:	e058      	b.n	8007684 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d8:	f240 532a 	movw	r3, #1322	; 0x52a
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0d1      	beq.n	8007586 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2208      	movs	r2, #8
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075f8:	2308      	movs	r3, #8
 80075fa:	e043      	b.n	8007684 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2202      	movs	r2, #2
 8007610:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007612:	2302      	movs	r3, #2
 8007614:	e036      	b.n	8007684 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2220      	movs	r2, #32
 800762a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800762c:	2320      	movs	r3, #32
 800762e:	e029      	b.n	8007684 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <SD_FindSCR+0x19c>)
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	061a      	lsls	r2, r3, #24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007644:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800764e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	0e1b      	lsrs	r3, r3, #24
 8007654:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	601a      	str	r2, [r3, #0]
    scr++;
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	3304      	adds	r3, #4
 800765e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	061a      	lsls	r2, r3, #24
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800766c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007676:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	0e1b      	lsrs	r3, r3, #24
 800767c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3738      	adds	r7, #56	; 0x38
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	18000f3a 	.word	0x18000f3a

08007690 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e095      	b.n	80077e4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d108      	bne.n	80076d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076c8:	d009      	beq.n	80076de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e005      	b.n	80076de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7f9 fd61 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800771e:	d902      	bls.n	8007726 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800772a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007734:	d007      	beq.n	8007746 <HAL_SPI_Init+0xa0>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800773e:	d002      	beq.n	8007746 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007788:	ea42 0103 	orr.w	r1, r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	0c1b      	lsrs	r3, r3, #16
 80077a2:	f003 0204 	and.w	r2, r3, #4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077c2:	ea42 0103 	orr.w	r1, r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e049      	b.n	8007892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7f9 fd16 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f000 fa62 	bl	8007cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e049      	b.n	8007940 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f841 	bl	8007948 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f000 fa0b 	bl	8007cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b02      	cmp	r3, #2
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0202 	mvn.w	r2, #2
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f98a 	bl	8007cb8 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f97c 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f98d 	bl	8007ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d122      	bne.n	8007a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d11b      	bne.n	8007a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0204 	mvn.w	r2, #4
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f960 	bl	8007cb8 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e005      	b.n	8007a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f952 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f963 	bl	8007ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d122      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d11b      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0208 	mvn.w	r2, #8
 8007a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2204      	movs	r2, #4
 8007a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f936 	bl	8007cb8 <HAL_TIM_IC_CaptureCallback>
 8007a4c:	e005      	b.n	8007a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f928 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f939 	bl	8007ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d122      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0210 	mvn.w	r2, #16
 8007a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f90c 	bl	8007cb8 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f8fe 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f90f 	bl	8007ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d10e      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d107      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0201 	mvn.w	r2, #1
 8007ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8d8 	bl	8007c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d10e      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fcec 	bl	80084e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1a:	d10e      	bne.n	8007b3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d107      	bne.n	8007b3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fcdf 	bl	80084f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b40      	cmp	r3, #64	; 0x40
 8007b46:	d10e      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d107      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8bd 	bl	8007ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d10e      	bne.n	8007b92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d107      	bne.n	8007b92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f06f 0220 	mvn.w	r2, #32
 8007b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc9f 	bl	80084d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_OC_ConfigChannel+0x1e>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e066      	b.n	8007c88 <HAL_TIM_OC_ConfigChannel+0xec>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b14      	cmp	r3, #20
 8007bc6:	d857      	bhi.n	8007c78 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007c79 	.word	0x08007c79
 8007bd8:	08007c79 	.word	0x08007c79
 8007bdc:	08007c79 	.word	0x08007c79
 8007be0:	08007c33 	.word	0x08007c33
 8007be4:	08007c79 	.word	0x08007c79
 8007be8:	08007c79 	.word	0x08007c79
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007c41 	.word	0x08007c41
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c79 	.word	0x08007c79
 8007bfc:	08007c79 	.word	0x08007c79
 8007c00:	08007c4f 	.word	0x08007c4f
 8007c04:	08007c79 	.word	0x08007c79
 8007c08:	08007c79 	.word	0x08007c79
 8007c0c:	08007c79 	.word	0x08007c79
 8007c10:	08007c5d 	.word	0x08007c5d
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c79 	.word	0x08007c79
 8007c1c:	08007c79 	.word	0x08007c79
 8007c20:	08007c6b 	.word	0x08007c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f8fc 	bl	8007e28 <TIM_OC1_SetConfig>
      break;
 8007c30:	e025      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f985 	bl	8007f48 <TIM_OC2_SetConfig>
      break;
 8007c3e:	e01e      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fa08 	bl	800805c <TIM_OC3_SetConfig>
      break;
 8007c4c:	e017      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fa89 	bl	800816c <TIM_OC4_SetConfig>
      break;
 8007c5a:	e010      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 faec 	bl	8008240 <TIM_OC5_SetConfig>
      break;
 8007c68:	e009      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fb49 	bl	8008308 <TIM_OC6_SetConfig>
      break;
 8007c76:	e002      	b.n	8007c7e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a40      	ldr	r2, [pc, #256]	; (8007e08 <TIM_Base_SetConfig+0x114>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d013      	beq.n	8007d34 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d12:	d00f      	beq.n	8007d34 <TIM_Base_SetConfig+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a3d      	ldr	r2, [pc, #244]	; (8007e0c <TIM_Base_SetConfig+0x118>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a3c      	ldr	r2, [pc, #240]	; (8007e10 <TIM_Base_SetConfig+0x11c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_Base_SetConfig+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a3b      	ldr	r2, [pc, #236]	; (8007e14 <TIM_Base_SetConfig+0x120>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a3a      	ldr	r2, [pc, #232]	; (8007e18 <TIM_Base_SetConfig+0x124>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d108      	bne.n	8007d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2f      	ldr	r2, [pc, #188]	; (8007e08 <TIM_Base_SetConfig+0x114>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01f      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d54:	d01b      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a2c      	ldr	r2, [pc, #176]	; (8007e0c <TIM_Base_SetConfig+0x118>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d017      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2b      	ldr	r2, [pc, #172]	; (8007e10 <TIM_Base_SetConfig+0x11c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <TIM_Base_SetConfig+0x120>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00f      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a29      	ldr	r2, [pc, #164]	; (8007e18 <TIM_Base_SetConfig+0x124>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00b      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a28      	ldr	r2, [pc, #160]	; (8007e1c <TIM_Base_SetConfig+0x128>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d007      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <TIM_Base_SetConfig+0x12c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d003      	beq.n	8007d8e <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a26      	ldr	r2, [pc, #152]	; (8007e24 <TIM_Base_SetConfig+0x130>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d108      	bne.n	8007da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <TIM_Base_SetConfig+0x114>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00f      	beq.n	8007dec <TIM_Base_SetConfig+0xf8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <TIM_Base_SetConfig+0x124>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00b      	beq.n	8007dec <TIM_Base_SetConfig+0xf8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a11      	ldr	r2, [pc, #68]	; (8007e1c <TIM_Base_SetConfig+0x128>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d007      	beq.n	8007dec <TIM_Base_SetConfig+0xf8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a10      	ldr	r2, [pc, #64]	; (8007e20 <TIM_Base_SetConfig+0x12c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_Base_SetConfig+0xf8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a0f      	ldr	r2, [pc, #60]	; (8007e24 <TIM_Base_SetConfig+0x130>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d103      	bne.n	8007df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	615a      	str	r2, [r3, #20]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40013400 	.word	0x40013400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0201 	bic.w	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 0302 	bic.w	r3, r3, #2
 8007e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a2c      	ldr	r2, [pc, #176]	; (8007f34 <TIM_OC1_SetConfig+0x10c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00f      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x80>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a2b      	ldr	r2, [pc, #172]	; (8007f38 <TIM_OC1_SetConfig+0x110>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00b      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x80>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a2a      	ldr	r2, [pc, #168]	; (8007f3c <TIM_OC1_SetConfig+0x114>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d007      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a29      	ldr	r2, [pc, #164]	; (8007f40 <TIM_OC1_SetConfig+0x118>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d003      	beq.n	8007ea8 <TIM_OC1_SetConfig+0x80>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a28      	ldr	r2, [pc, #160]	; (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d10c      	bne.n	8007ec2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f023 0308 	bic.w	r3, r3, #8
 8007eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f023 0304 	bic.w	r3, r3, #4
 8007ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <TIM_OC1_SetConfig+0x10c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00f      	beq.n	8007eea <TIM_OC1_SetConfig+0xc2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1a      	ldr	r2, [pc, #104]	; (8007f38 <TIM_OC1_SetConfig+0x110>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00b      	beq.n	8007eea <TIM_OC1_SetConfig+0xc2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <TIM_OC1_SetConfig+0x114>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d007      	beq.n	8007eea <TIM_OC1_SetConfig+0xc2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <TIM_OC1_SetConfig+0x118>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC1_SetConfig+0xc2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d111      	bne.n	8007f0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	621a      	str	r2, [r3, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40013400 	.word	0x40013400
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800

08007f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f023 0210 	bic.w	r2, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0320 	bic.w	r3, r3, #32
 8007f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a28      	ldr	r2, [pc, #160]	; (8008048 <TIM_OC2_SetConfig+0x100>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <TIM_OC2_SetConfig+0x6c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a27      	ldr	r2, [pc, #156]	; (800804c <TIM_OC2_SetConfig+0x104>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d10d      	bne.n	8007fd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <TIM_OC2_SetConfig+0x100>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00f      	beq.n	8007ff8 <TIM_OC2_SetConfig+0xb0>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a1c      	ldr	r2, [pc, #112]	; (800804c <TIM_OC2_SetConfig+0x104>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00b      	beq.n	8007ff8 <TIM_OC2_SetConfig+0xb0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <TIM_OC2_SetConfig+0x108>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d007      	beq.n	8007ff8 <TIM_OC2_SetConfig+0xb0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <TIM_OC2_SetConfig+0x10c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_OC2_SetConfig+0xb0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a19      	ldr	r2, [pc, #100]	; (8008058 <TIM_OC2_SetConfig+0x110>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d113      	bne.n	8008020 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40013400 	.word	0x40013400
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400
 8008058:	40014800 	.word	0x40014800

0800805c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a27      	ldr	r2, [pc, #156]	; (8008158 <TIM_OC3_SetConfig+0xfc>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d003      	beq.n	80080c6 <TIM_OC3_SetConfig+0x6a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a26      	ldr	r2, [pc, #152]	; (800815c <TIM_OC3_SetConfig+0x100>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d10d      	bne.n	80080e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <TIM_OC3_SetConfig+0xfc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00f      	beq.n	800810a <TIM_OC3_SetConfig+0xae>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1b      	ldr	r2, [pc, #108]	; (800815c <TIM_OC3_SetConfig+0x100>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00b      	beq.n	800810a <TIM_OC3_SetConfig+0xae>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1a      	ldr	r2, [pc, #104]	; (8008160 <TIM_OC3_SetConfig+0x104>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d007      	beq.n	800810a <TIM_OC3_SetConfig+0xae>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a19      	ldr	r2, [pc, #100]	; (8008164 <TIM_OC3_SetConfig+0x108>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_OC3_SetConfig+0xae>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a18      	ldr	r2, [pc, #96]	; (8008168 <TIM_OC3_SetConfig+0x10c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d113      	bne.n	8008132 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40013400 	.word	0x40013400
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400
 8008168:	40014800 	.word	0x40014800

0800816c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	031b      	lsls	r3, r3, #12
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a18      	ldr	r2, [pc, #96]	; (800822c <TIM_OC4_SetConfig+0xc0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00f      	beq.n	80081f0 <TIM_OC4_SetConfig+0x84>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a17      	ldr	r2, [pc, #92]	; (8008230 <TIM_OC4_SetConfig+0xc4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00b      	beq.n	80081f0 <TIM_OC4_SetConfig+0x84>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a16      	ldr	r2, [pc, #88]	; (8008234 <TIM_OC4_SetConfig+0xc8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d007      	beq.n	80081f0 <TIM_OC4_SetConfig+0x84>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <TIM_OC4_SetConfig+0xcc>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_OC4_SetConfig+0x84>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a14      	ldr	r2, [pc, #80]	; (800823c <TIM_OC4_SetConfig+0xd0>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d109      	bne.n	8008204 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	019b      	lsls	r3, r3, #6
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40012c00 	.word	0x40012c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40014000 	.word	0x40014000
 8008238:	40014400 	.word	0x40014400
 800823c:	40014800 	.word	0x40014800

08008240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800826e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	041b      	lsls	r3, r3, #16
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <TIM_OC5_SetConfig+0xb4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_OC5_SetConfig+0x7a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <TIM_OC5_SetConfig+0xb8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_OC5_SetConfig+0x7a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a15      	ldr	r2, [pc, #84]	; (80082fc <TIM_OC5_SetConfig+0xbc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_OC5_SetConfig+0x7a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a14      	ldr	r2, [pc, #80]	; (8008300 <TIM_OC5_SetConfig+0xc0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC5_SetConfig+0x7a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a13      	ldr	r2, [pc, #76]	; (8008304 <TIM_OC5_SetConfig+0xc4>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d109      	bne.n	80082ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	621a      	str	r2, [r3, #32]
}
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40013400 	.word	0x40013400
 80082fc:	40014000 	.word	0x40014000
 8008300:	40014400 	.word	0x40014400
 8008304:	40014800 	.word	0x40014800

08008308 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800834e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	051b      	lsls	r3, r3, #20
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a18      	ldr	r2, [pc, #96]	; (80083c0 <TIM_OC6_SetConfig+0xb8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_OC6_SetConfig+0x7c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a17      	ldr	r2, [pc, #92]	; (80083c4 <TIM_OC6_SetConfig+0xbc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_OC6_SetConfig+0x7c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a16      	ldr	r2, [pc, #88]	; (80083c8 <TIM_OC6_SetConfig+0xc0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_OC6_SetConfig+0x7c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a15      	ldr	r2, [pc, #84]	; (80083cc <TIM_OC6_SetConfig+0xc4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC6_SetConfig+0x7c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <TIM_OC6_SetConfig+0xc8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d109      	bne.n	8008398 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800838a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	029b      	lsls	r3, r3, #10
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40012c00 	.word	0x40012c00
 80083c4:	40013400 	.word	0x40013400
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40014400 	.word	0x40014400
 80083d0:	40014800 	.word	0x40014800

080083d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e065      	b.n	80084bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4313      	orrs	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	041b      	lsls	r3, r3, #16
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a14      	ldr	r2, [pc, #80]	; (80084cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d115      	bne.n	80084aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	051b      	lsls	r3, r3, #20
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40013400 	.word	0x40013400

080084d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e042      	b.n	80085a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7f8 fea7 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2224      	movs	r2, #36	; 0x24
 800853a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb64 	bl	8008c1c <UART_SetConfig>
 8008554:	4603      	mov	r3, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e022      	b.n	80085a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fe54 	bl	8009214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800857a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800858a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0201 	orr.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fedb 	bl	8009358 <UART_CheckIdleState>
 80085a2:	4603      	mov	r3, r0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b0ba      	sub	sp, #232	; 0xe8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80085da:	4013      	ands	r3, r2
 80085dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11b      	bne.n	8008620 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d015      	beq.n	8008620 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 82d6 	beq.w	8008bc2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
      }
      return;
 800861e:	e2d0      	b.n	8008bc2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 811f 	beq.w	8008868 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800862a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800862e:	4b8b      	ldr	r3, [pc, #556]	; (800885c <HAL_UART_IRQHandler+0x2b0>)
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008636:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800863a:	4b89      	ldr	r3, [pc, #548]	; (8008860 <HAL_UART_IRQHandler+0x2b4>)
 800863c:	4013      	ands	r3, r2
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8112 	beq.w	8008868 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d011      	beq.n	8008674 <HAL_UART_IRQHandler+0xc8>
 8008650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800866a:	f043 0201 	orr.w	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d011      	beq.n	80086a4 <HAL_UART_IRQHandler+0xf8>
 8008680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2202      	movs	r2, #2
 8008692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800869a:	f043 0204 	orr.w	r2, r3, #4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d011      	beq.n	80086d4 <HAL_UART_IRQHandler+0x128>
 80086b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2204      	movs	r2, #4
 80086c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ca:	f043 0202 	orr.w	r2, r3, #2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d017      	beq.n	8008710 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80086f0:	4b5a      	ldr	r3, [pc, #360]	; (800885c <HAL_UART_IRQHandler+0x2b0>)
 80086f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2208      	movs	r2, #8
 80086fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	f043 0208 	orr.w	r2, r3, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008718:	2b00      	cmp	r3, #0
 800871a:	d012      	beq.n	8008742 <HAL_UART_IRQHandler+0x196>
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008738:	f043 0220 	orr.w	r2, r3, #32
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 823c 	beq.w	8008bc6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d013      	beq.n	8008782 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800875a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d105      	bne.n	8008772 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800876a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b40      	cmp	r3, #64	; 0x40
 8008798:	d005      	beq.n	80087a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800879a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800879e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d04f      	beq.n	8008846 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fee9 	bl	800957e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d141      	bne.n	800883e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3308      	adds	r3, #8
 80087e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1d9      	bne.n	80087ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008812:	4a14      	ldr	r2, [pc, #80]	; (8008864 <HAL_UART_IRQHandler+0x2b8>)
 8008814:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800881a:	4618      	mov	r0, r3
 800881c:	f7f9 f8b3 	bl	8001986 <HAL_DMA_Abort_IT>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d017      	beq.n	8008856 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e00f      	b.n	8008856 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f9da 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	e00b      	b.n	8008856 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f9d6 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e007      	b.n	8008856 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f9d2 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008854:	e1b7      	b.n	8008bc6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008856:	bf00      	nop
    return;
 8008858:	e1b5      	b.n	8008bc6 <HAL_UART_IRQHandler+0x61a>
 800885a:	bf00      	nop
 800885c:	10000001 	.word	0x10000001
 8008860:	04000120 	.word	0x04000120
 8008864:	0800964b 	.word	0x0800964b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 814a 	bne.w	8008b06 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 8143 	beq.w	8008b06 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 813c 	beq.w	8008b06 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2210      	movs	r2, #16
 8008894:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	f040 80b5 	bne.w	8008a10 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8187 	beq.w	8008bca <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088c6:	429a      	cmp	r2, r3
 80088c8:	f080 817f 	bcs.w	8008bca <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 8086 	bne.w	80089f4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008916:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800891e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800892a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1da      	bne.n	80088e8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3308      	adds	r3, #8
 8008938:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008944:	f023 0301 	bic.w	r3, r3, #1
 8008948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008956:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800895a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800895e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e1      	bne.n	8008932 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800897e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008992:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008994:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e3      	bne.n	800896e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e4      	bne.n	80089b4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f8 ff6d 	bl	80018ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f8fb 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a0e:	e0dc      	b.n	8008bca <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80ce 	beq.w	8008bce <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80c9 	beq.w	8008bce <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e4      	bne.n	8008a3c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	623b      	str	r3, [r7, #32]
   return(result);
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e1      	bne.n	8008a72 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	617b      	str	r3, [r7, #20]
   return(result);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f880 	bl	8008c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b04:	e063      	b.n	8008bce <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00e      	beq.n	8008b30 <HAL_UART_IRQHandler+0x584>
 8008b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fdcf 	bl	80096cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b2e:	e051      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d014      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d105      	bne.n	8008b54 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d008      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d03a      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	4798      	blx	r3
    }
    return;
 8008b64:	e035      	b.n	8008bd2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <HAL_UART_IRQHandler+0x5da>
 8008b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fd79 	bl	8009676 <UART_EndTransmit_IT>
    return;
 8008b84:	e026      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x5fa>
 8008b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fda8 	bl	80096f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ba4:	e016      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d010      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x628>
 8008bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da0c      	bge.n	8008bd4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fd90 	bl	80096e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bc0:	e008      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
      return;
 8008bc2:	bf00      	nop
 8008bc4:	e006      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
    return;
 8008bc6:	bf00      	nop
 8008bc8:	e004      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
      return;
 8008bca:	bf00      	nop
 8008bcc:	e002      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
      return;
 8008bce:	bf00      	nop
 8008bd0:	e000      	b.n	8008bd4 <HAL_UART_IRQHandler+0x628>
    return;
 8008bd2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008bd4:	37e8      	adds	r7, #232	; 0xe8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop

08008bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c20:	b08c      	sub	sp, #48	; 0x30
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4baa      	ldr	r3, [pc, #680]	; (8008ef4 <UART_SetConfig+0x2d8>)
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c54:	430b      	orrs	r3, r1
 8008c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a9f      	ldr	r2, [pc, #636]	; (8008ef8 <UART_SetConfig+0x2dc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c84:	4313      	orrs	r3, r2
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	f023 010f 	bic.w	r1, r3, #15
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a90      	ldr	r2, [pc, #576]	; (8008efc <UART_SetConfig+0x2e0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d125      	bne.n	8008d0c <UART_SetConfig+0xf0>
 8008cc0:	4b8f      	ldr	r3, [pc, #572]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d81a      	bhi.n	8008d04 <UART_SetConfig+0xe8>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0xb8>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cea:	e116      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008cec:	2302      	movs	r3, #2
 8008cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf2:	e112      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfa:	e10e      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d02:	e10a      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0a:	e106      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a7c      	ldr	r2, [pc, #496]	; (8008f04 <UART_SetConfig+0x2e8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d138      	bne.n	8008d88 <UART_SetConfig+0x16c>
 8008d16:	4b7a      	ldr	r3, [pc, #488]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1c:	f003 030c 	and.w	r3, r3, #12
 8008d20:	2b0c      	cmp	r3, #12
 8008d22:	d82d      	bhi.n	8008d80 <UART_SetConfig+0x164>
 8008d24:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <UART_SetConfig+0x110>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d61 	.word	0x08008d61
 8008d30:	08008d81 	.word	0x08008d81
 8008d34:	08008d81 	.word	0x08008d81
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008d71 	.word	0x08008d71
 8008d40:	08008d81 	.word	0x08008d81
 8008d44:	08008d81 	.word	0x08008d81
 8008d48:	08008d81 	.word	0x08008d81
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d81 	.word	0x08008d81
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d66:	e0d8      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6e:	e0d4      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d76:	e0d0      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d7e:	e0cc      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d86:	e0c8      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a5e      	ldr	r2, [pc, #376]	; (8008f08 <UART_SetConfig+0x2ec>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d125      	bne.n	8008dde <UART_SetConfig+0x1c2>
 8008d92:	4b5b      	ldr	r3, [pc, #364]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d016      	beq.n	8008dce <UART_SetConfig+0x1b2>
 8008da0:	2b30      	cmp	r3, #48	; 0x30
 8008da2:	d818      	bhi.n	8008dd6 <UART_SetConfig+0x1ba>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d00a      	beq.n	8008dbe <UART_SetConfig+0x1a2>
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d814      	bhi.n	8008dd6 <UART_SetConfig+0x1ba>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <UART_SetConfig+0x19a>
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d008      	beq.n	8008dc6 <UART_SetConfig+0x1aa>
 8008db4:	e00f      	b.n	8008dd6 <UART_SetConfig+0x1ba>
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dbc:	e0ad      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc4:	e0a9      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dcc:	e0a5      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008dce:	2308      	movs	r3, #8
 8008dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd4:	e0a1      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ddc:	e09d      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a4a      	ldr	r2, [pc, #296]	; (8008f0c <UART_SetConfig+0x2f0>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d125      	bne.n	8008e34 <UART_SetConfig+0x218>
 8008de8:	4b45      	ldr	r3, [pc, #276]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008df2:	2bc0      	cmp	r3, #192	; 0xc0
 8008df4:	d016      	beq.n	8008e24 <UART_SetConfig+0x208>
 8008df6:	2bc0      	cmp	r3, #192	; 0xc0
 8008df8:	d818      	bhi.n	8008e2c <UART_SetConfig+0x210>
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d00a      	beq.n	8008e14 <UART_SetConfig+0x1f8>
 8008dfe:	2b80      	cmp	r3, #128	; 0x80
 8008e00:	d814      	bhi.n	8008e2c <UART_SetConfig+0x210>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <UART_SetConfig+0x1f0>
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d008      	beq.n	8008e1c <UART_SetConfig+0x200>
 8008e0a:	e00f      	b.n	8008e2c <UART_SetConfig+0x210>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e082      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e14:	2302      	movs	r3, #2
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1a:	e07e      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e07a      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e2a:	e076      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e32:	e072      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a35      	ldr	r2, [pc, #212]	; (8008f10 <UART_SetConfig+0x2f4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d12a      	bne.n	8008e94 <UART_SetConfig+0x278>
 8008e3e:	4b30      	ldr	r3, [pc, #192]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4c:	d01a      	beq.n	8008e84 <UART_SetConfig+0x268>
 8008e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e52:	d81b      	bhi.n	8008e8c <UART_SetConfig+0x270>
 8008e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e58:	d00c      	beq.n	8008e74 <UART_SetConfig+0x258>
 8008e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5e:	d815      	bhi.n	8008e8c <UART_SetConfig+0x270>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <UART_SetConfig+0x250>
 8008e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e68:	d008      	beq.n	8008e7c <UART_SetConfig+0x260>
 8008e6a:	e00f      	b.n	8008e8c <UART_SetConfig+0x270>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e72:	e052      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e74:	2302      	movs	r3, #2
 8008e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7a:	e04e      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e82:	e04a      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8a:	e046      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e92:	e042      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <UART_SetConfig+0x2dc>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d13a      	bne.n	8008f14 <UART_SetConfig+0x2f8>
 8008e9e:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <UART_SetConfig+0x2e4>)
 8008ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008eac:	d01a      	beq.n	8008ee4 <UART_SetConfig+0x2c8>
 8008eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008eb2:	d81b      	bhi.n	8008eec <UART_SetConfig+0x2d0>
 8008eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb8:	d00c      	beq.n	8008ed4 <UART_SetConfig+0x2b8>
 8008eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ebe:	d815      	bhi.n	8008eec <UART_SetConfig+0x2d0>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <UART_SetConfig+0x2b0>
 8008ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ec8:	d008      	beq.n	8008edc <UART_SetConfig+0x2c0>
 8008eca:	e00f      	b.n	8008eec <UART_SetConfig+0x2d0>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed2:	e022      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eda:	e01e      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ee2:	e01a      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eea:	e016      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ef2:	e012      	b.n	8008f1a <UART_SetConfig+0x2fe>
 8008ef4:	cfff69f3 	.word	0xcfff69f3
 8008ef8:	40008000 	.word	0x40008000
 8008efc:	40013800 	.word	0x40013800
 8008f00:	40021000 	.word	0x40021000
 8008f04:	40004400 	.word	0x40004400
 8008f08:	40004800 	.word	0x40004800
 8008f0c:	40004c00 	.word	0x40004c00
 8008f10:	40005000 	.word	0x40005000
 8008f14:	2310      	movs	r3, #16
 8008f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4aae      	ldr	r2, [pc, #696]	; (80091d8 <UART_SetConfig+0x5bc>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	f040 8097 	bne.w	8009054 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	d823      	bhi.n	8008f76 <UART_SetConfig+0x35a>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <UART_SetConfig+0x318>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f77 	.word	0x08008f77
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f77 	.word	0x08008f77
 8008f44:	08008f67 	.word	0x08008f67
 8008f48:	08008f77 	.word	0x08008f77
 8008f4c:	08008f77 	.word	0x08008f77
 8008f50:	08008f77 	.word	0x08008f77
 8008f54:	08008f6f 	.word	0x08008f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f58:	f7fb f902 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8008f5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f5e:	e010      	b.n	8008f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f60:	4b9e      	ldr	r3, [pc, #632]	; (80091dc <UART_SetConfig+0x5c0>)
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f64:	e00d      	b.n	8008f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f66:	f7fb f863 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8008f6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f6c:	e009      	b.n	8008f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f74:	e005      	b.n	8008f82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8130 	beq.w	80091ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	4a94      	ldr	r2, [pc, #592]	; (80091e0 <UART_SetConfig+0x5c4>)
 8008f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	4413      	add	r3, r2
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d305      	bcc.n	8008fba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d903      	bls.n	8008fc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fc0:	e113      	b.n	80091ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	60bb      	str	r3, [r7, #8]
 8008fc8:	60fa      	str	r2, [r7, #12]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	4a84      	ldr	r2, [pc, #528]	; (80091e0 <UART_SetConfig+0x5c4>)
 8008fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fe4:	f7f7 f964 	bl	80002b0 <__aeabi_uldivmod>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4610      	mov	r0, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	020b      	lsls	r3, r1, #8
 8008ffa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ffe:	0202      	lsls	r2, r0, #8
 8009000:	6979      	ldr	r1, [r7, #20]
 8009002:	6849      	ldr	r1, [r1, #4]
 8009004:	0849      	lsrs	r1, r1, #1
 8009006:	2000      	movs	r0, #0
 8009008:	460c      	mov	r4, r1
 800900a:	4605      	mov	r5, r0
 800900c:	eb12 0804 	adds.w	r8, r2, r4
 8009010:	eb43 0905 	adc.w	r9, r3, r5
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	469a      	mov	sl, r3
 800901c:	4693      	mov	fp, r2
 800901e:	4652      	mov	r2, sl
 8009020:	465b      	mov	r3, fp
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 f943 	bl	80002b0 <__aeabi_uldivmod>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4613      	mov	r3, r2
 8009030:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009038:	d308      	bcc.n	800904c <UART_SetConfig+0x430>
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009040:	d204      	bcs.n	800904c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e0ce      	b.n	80091ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009052:	e0ca      	b.n	80091ea <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800905c:	d166      	bne.n	800912c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800905e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009062:	2b08      	cmp	r3, #8
 8009064:	d827      	bhi.n	80090b6 <UART_SetConfig+0x49a>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x450>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	08009091 	.word	0x08009091
 8009070:	08009099 	.word	0x08009099
 8009074:	080090a1 	.word	0x080090a1
 8009078:	080090b7 	.word	0x080090b7
 800907c:	080090a7 	.word	0x080090a7
 8009080:	080090b7 	.word	0x080090b7
 8009084:	080090b7 	.word	0x080090b7
 8009088:	080090b7 	.word	0x080090b7
 800908c:	080090af 	.word	0x080090af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009090:	f7fb f866 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009096:	e014      	b.n	80090c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009098:	f7fb f878 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800909e:	e010      	b.n	80090c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090a0:	4b4e      	ldr	r3, [pc, #312]	; (80091dc <UART_SetConfig+0x5c0>)
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090a4:	e00d      	b.n	80090c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090a6:	f7fa ffc3 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80090aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090ac:	e009      	b.n	80090c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090b4:	e005      	b.n	80090c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8090 	beq.w	80091ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	4a44      	ldr	r2, [pc, #272]	; (80091e0 <UART_SetConfig+0x5c4>)
 80090d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090dc:	005a      	lsls	r2, r3, #1
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	085b      	lsrs	r3, r3, #1
 80090e4:	441a      	add	r2, r3
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2b0f      	cmp	r3, #15
 80090f4:	d916      	bls.n	8009124 <UART_SetConfig+0x508>
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fc:	d212      	bcs.n	8009124 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	b29b      	uxth	r3, r3
 8009102:	f023 030f 	bic.w	r3, r3, #15
 8009106:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	085b      	lsrs	r3, r3, #1
 800910c:	b29b      	uxth	r3, r3
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	b29a      	uxth	r2, r3
 8009114:	8bfb      	ldrh	r3, [r7, #30]
 8009116:	4313      	orrs	r3, r2
 8009118:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	8bfa      	ldrh	r2, [r7, #30]
 8009120:	60da      	str	r2, [r3, #12]
 8009122:	e062      	b.n	80091ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800912a:	e05e      	b.n	80091ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800912c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009130:	2b08      	cmp	r3, #8
 8009132:	d828      	bhi.n	8009186 <UART_SetConfig+0x56a>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <UART_SetConfig+0x520>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009161 	.word	0x08009161
 8009140:	08009169 	.word	0x08009169
 8009144:	08009171 	.word	0x08009171
 8009148:	08009187 	.word	0x08009187
 800914c:	08009177 	.word	0x08009177
 8009150:	08009187 	.word	0x08009187
 8009154:	08009187 	.word	0x08009187
 8009158:	08009187 	.word	0x08009187
 800915c:	0800917f 	.word	0x0800917f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009160:	f7fa fffe 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8009164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009166:	e014      	b.n	8009192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009168:	f7fb f810 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 800916c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800916e:	e010      	b.n	8009192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009170:	4b1a      	ldr	r3, [pc, #104]	; (80091dc <UART_SetConfig+0x5c0>)
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009174:	e00d      	b.n	8009192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009176:	f7fa ff5b 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800917a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800917c:	e009      	b.n	8009192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800917e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009184:	e005      	b.n	8009192 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009190:	bf00      	nop
    }

    if (pclk != 0U)
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	2b00      	cmp	r3, #0
 8009196:	d028      	beq.n	80091ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	4a10      	ldr	r2, [pc, #64]	; (80091e0 <UART_SetConfig+0x5c4>)
 800919e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	441a      	add	r2, r3
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	2b0f      	cmp	r3, #15
 80091c0:	d910      	bls.n	80091e4 <UART_SetConfig+0x5c8>
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c8:	d20c      	bcs.n	80091e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60da      	str	r2, [r3, #12]
 80091d4:	e009      	b.n	80091ea <UART_SetConfig+0x5ce>
 80091d6:	bf00      	nop
 80091d8:	40008000 	.word	0x40008000
 80091dc:	00f42400 	.word	0x00f42400
 80091e0:	0801231c 	.word	0x0801231c
      }
      else
      {
        ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2200      	movs	r2, #0
 80091fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2200      	movs	r2, #0
 8009204:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009206:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800920a:	4618      	mov	r0, r3
 800920c:	3730      	adds	r7, #48	; 0x30
 800920e:	46bd      	mov	sp, r7
 8009210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	f003 0302 	and.w	r3, r3, #2
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01a      	beq.n	800932a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009312:	d10a      	bne.n	800932a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	605a      	str	r2, [r3, #4]
  }
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af02      	add	r7, sp, #8
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009368:	f7f8 f970 	bl	800164c <HAL_GetTick>
 800936c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b08      	cmp	r3, #8
 800937a:	d10e      	bne.n	800939a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800937c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f82f 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e025      	b.n	80093e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d10e      	bne.n	80093c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f819 	bl	80093ee <UART_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e00f      	b.n	80093e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b09c      	sub	sp, #112	; 0x70
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fe:	e0a9      	b.n	8009554 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009406:	f000 80a5 	beq.w	8009554 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800940a:	f7f8 f91f 	bl	800164c <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009416:	429a      	cmp	r2, r3
 8009418:	d302      	bcc.n	8009420 <UART_WaitOnFlagUntilTimeout+0x32>
 800941a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800941c:	2b00      	cmp	r3, #0
 800941e:	d140      	bne.n	80094a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800942e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009434:	667b      	str	r3, [r7, #100]	; 0x64
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800943e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009440:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800944c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e6      	bne.n	8009420 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	663b      	str	r3, [r7, #96]	; 0x60
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009472:	64ba      	str	r2, [r7, #72]	; 0x48
 8009474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2220      	movs	r2, #32
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e069      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d051      	beq.n	8009554 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094be:	d149      	bne.n	8009554 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	613b      	str	r3, [r7, #16]
   return(result);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	66bb      	str	r3, [r7, #104]	; 0x68
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800951c:	623a      	str	r2, [r7, #32]
 800951e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69f9      	ldr	r1, [r7, #28]
 8009522:	6a3a      	ldr	r2, [r7, #32]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	61bb      	str	r3, [r7, #24]
   return(result);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e5      	bne.n	80094fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e010      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4013      	ands	r3, r2
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	bf0c      	ite	eq
 8009564:	2301      	moveq	r3, #1
 8009566:	2300      	movne	r3, #0
 8009568:	b2db      	uxtb	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	429a      	cmp	r2, r3
 8009570:	f43f af46 	beq.w	8009400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3770      	adds	r7, #112	; 0x70
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800957e:	b480      	push	{r7}
 8009580:	b095      	sub	sp, #84	; 0x54
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800959a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	643b      	str	r3, [r7, #64]	; 0x40
 80095a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3308      	adds	r3, #8
 80095da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e3      	bne.n	80095b8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d118      	bne.n	800962a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	60bb      	str	r3, [r7, #8]
   return(result);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f023 0310 	bic.w	r3, r3, #16
 800960c:	647b      	str	r3, [r7, #68]	; 0x44
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800963e:	bf00      	nop
 8009640:	3754      	adds	r7, #84	; 0x54
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fac1 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	60bb      	str	r3, [r7, #8]
   return(result);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	461a      	mov	r2, r3
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	61bb      	str	r3, [r7, #24]
 800969e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6979      	ldr	r1, [r7, #20]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	613b      	str	r3, [r7, #16]
   return(result);
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e6      	bne.n	800967e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fa8c 	bl	8008bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c4:	bf00      	nop
 80096c6:	3720      	adds	r7, #32
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_UARTEx_DisableFifoMode+0x16>
 800971a:	2302      	movs	r3, #2
 800971c:	e027      	b.n	800976e <HAL_UARTEx_DisableFifoMode+0x66>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	; 0x24
 800972a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800974c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800978e:	2302      	movs	r3, #2
 8009790:	e02d      	b.n	80097ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2224      	movs	r2, #36	; 0x24
 800979e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0201 	bic.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f850 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800980a:	2302      	movs	r3, #2
 800980c:	e02d      	b.n	800986a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2224      	movs	r2, #36	; 0x24
 800981a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f812 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009880:	2b00      	cmp	r3, #0
 8009882:	d108      	bne.n	8009896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009894:	e031      	b.n	80098fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009896:	2308      	movs	r3, #8
 8009898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800989a:	2308      	movs	r3, #8
 800989c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	0e5b      	lsrs	r3, r3, #25
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	0f5b      	lsrs	r3, r3, #29
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	7b3a      	ldrb	r2, [r7, #12]
 80098c2:	4911      	ldr	r1, [pc, #68]	; (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098c4:	5c8a      	ldrb	r2, [r1, r2]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098ca:	7b3a      	ldrb	r2, [r7, #12]
 80098cc:	490f      	ldr	r1, [pc, #60]	; (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	7b7a      	ldrb	r2, [r7, #13]
 80098e0:	4909      	ldr	r1, [pc, #36]	; (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098e2:	5c8a      	ldrb	r2, [r1, r2]
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098e8:	7b7a      	ldrb	r2, [r7, #13]
 80098ea:	4908      	ldr	r1, [pc, #32]	; (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	08012334 	.word	0x08012334
 800990c:	0801233c 	.word	0x0801233c

08009910 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009910:	b084      	sub	sp, #16
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	f107 001c 	add.w	r0, r7, #28
 800991e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009926:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009928:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800992a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800992e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009932:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009936:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <SDMMC_Init+0x50>)
 8009944:	4013      	ands	r3, r2
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	431a      	orrs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	b004      	add	sp, #16
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	ffc02c00 	.word	0xffc02c00

08009964 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f043 0203 	orr.w	r2, r3, #3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80099b4:	2002      	movs	r0, #2
 80099b6:	f7f7 fe55 	bl	8001664 <HAL_Delay>

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0303 	and.w	r3, r3, #3
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a04:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <SDMMC_SendCommand+0x50>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	fffee0c0 	.word	0xfffee0c0

08009a34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	b2db      	uxtb	r3, r3
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3314      	adds	r3, #20
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	4413      	add	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a9a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009aa0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009aa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0

}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ada:	2310      	movs	r3, #16
 8009adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aee:	f107 0308 	add.w	r3, r7, #8
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff ff73 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afe:	2110      	movs	r1, #16
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa7b 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b08:	69fb      	ldr	r3, [r7, #28]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b20:	2311      	movs	r3, #17
 8009b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b34:	f107 0308 	add.w	r3, r7, #8
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff ff50 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b44:	2111      	movs	r1, #17
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa58 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b66:	2312      	movs	r3, #18
 8009b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff2d 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b8a:	2112      	movs	r1, #18
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fa35 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b94:	69fb      	ldr	r3, [r7, #28]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b088      	sub	sp, #32
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009bac:	2318      	movs	r3, #24
 8009bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bc0:	f107 0308 	add.w	r3, r7, #8
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ff0a 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd0:	2118      	movs	r1, #24
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa12 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009bf2:	2319      	movs	r3, #25
 8009bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fee7 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c16:	2119      	movs	r1, #25
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9ef 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c20:	69fb      	ldr	r3, [r7, #28]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c38:	230c      	movs	r3, #12
 8009c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c4a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c64:	f107 0308 	add.w	r3, r7, #8
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff feb8 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <SDMMC_CmdStopTransfer+0x68>)
 8009c72:	210c      	movs	r1, #12
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9c1 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009c7a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009c88:	69fb      	ldr	r3, [r7, #28]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	05f5e100 	.word	0x05f5e100

08009c98 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	; 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009ca8:	2307      	movs	r3, #7
 8009caa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cba:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cbc:	f107 0310 	add.w	r3, r7, #16
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff fe8c 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ccc:	2107      	movs	r1, #7
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 f994 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009cd4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3728      	adds	r7, #40	; 0x28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cfe:	f107 0308 	add.w	r3, r7, #8
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fe6b 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fbb8 	bl	800a480 <SDMMC_GetCmdError>
 8009d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d12:	69fb      	ldr	r3, [r7, #28]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d24:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fe4b 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fb4a 	bl	800a3e4 <SDMMC_GetCmdResp7>
 8009d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d52:	69fb      	ldr	r3, [r7, #28]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d6a:	2337      	movs	r3, #55	; 0x37
 8009d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fe2b 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8e:	2137      	movs	r1, #55	; 0x37
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f933 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009d96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d98:	69fb      	ldr	r3, [r7, #28]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3720      	adds	r7, #32
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b088      	sub	sp, #32
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009db0:	2329      	movs	r3, #41	; 0x29
 8009db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009db8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff fe08 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa4f 	bl	800a274 <SDMMC_GetCmdResp3>
 8009dd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b088      	sub	sp, #32
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009df0:	2306      	movs	r3, #6
 8009df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fde8 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	2106      	movs	r1, #6
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f8f0 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e1e:	69fb      	ldr	r3, [r7, #28]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3720      	adds	r7, #32
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e34:	2333      	movs	r3, #51	; 0x33
 8009e36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e48:	f107 0308 	add.w	r3, r7, #8
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fdc6 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e58:	2133      	movs	r1, #51	; 0x33
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f8ce 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e62:	69fb      	ldr	r3, [r7, #28]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3720      	adds	r7, #32
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e78:	2302      	movs	r3, #2
 8009e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e82:	2300      	movs	r3, #0
 8009e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e8c:	f107 0308 	add.w	r3, r7, #8
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7ff fda4 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9a1 	bl	800a1e0 <SDMMC_GetCmdResp2>
 8009e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b088      	sub	sp, #32
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009eb8:	2309      	movs	r3, #9
 8009eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff fd84 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f981 	bl	800a1e0 <SDMMC_GetCmdResp2>
 8009ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b088      	sub	sp, #32
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f0c:	f107 0308 	add.w	r3, r7, #8
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff fd64 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	2103      	movs	r1, #3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9e9 	bl	800a2f4 <SDMMC_GetCmdResp6>
 8009f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f24:	69fb      	ldr	r3, [r7, #28]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b088      	sub	sp, #32
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f3c:	230d      	movs	r3, #13
 8009f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff fd42 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f60:	210d      	movs	r1, #13
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f84a 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009f80:	230d      	movs	r3, #13
 8009f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f94:	f107 0308 	add.w	r3, r7, #8
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fd20 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa4:	210d      	movs	r1, #13
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f828 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fae:	69fb      	ldr	r3, [r7, #28]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009fc4:	230b      	movs	r3, #11
 8009fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fd8:	f107 0308 	add.w	r3, r7, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fcfe 	bl	80099e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	210b      	movs	r1, #11
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f806 	bl	8009ffc <SDMMC_GetCmdResp1>
 8009ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3720      	adds	r7, #32
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	460b      	mov	r3, r1
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a00a:	4b70      	ldr	r3, [pc, #448]	; (800a1cc <SDMMC_GetCmdResp1+0x1d0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a70      	ldr	r2, [pc, #448]	; (800a1d0 <SDMMC_GetCmdResp1+0x1d4>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	0a5a      	lsrs	r2, r3, #9
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	fb02 f303 	mul.w	r3, r2, r3
 800a01c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	61fa      	str	r2, [r7, #28]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a02c:	e0c9      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a032:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a034:	69ba      	ldr	r2, [r7, #24]
 800a036:	4b67      	ldr	r3, [pc, #412]	; (800a1d4 <SDMMC_GetCmdResp1+0x1d8>)
 800a038:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0ef      	beq.n	800a01e <SDMMC_GetCmdResp1+0x22>
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1ea      	bne.n	800a01e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2204      	movs	r2, #4
 800a058:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a05a:	2304      	movs	r3, #4
 800a05c:	e0b1      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d004      	beq.n	800a074 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a070:	2301      	movs	r3, #1
 800a072:	e0a6      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4a58      	ldr	r2, [pc, #352]	; (800a1d8 <SDMMC_GetCmdResp1+0x1dc>)
 800a078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fcda 	bl	8009a34 <SDMMC_GetCommandResponse>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	4293      	cmp	r3, r2
 800a088:	d001      	beq.n	800a08e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e099      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a08e:	2100      	movs	r1, #0
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fcdc 	bl	8009a4e <SDMMC_GetResponse>
 800a096:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4b50      	ldr	r3, [pc, #320]	; (800a1dc <SDMMC_GetCmdResp1+0x1e0>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e08d      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	da02      	bge.n	800a0b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0b0:	e087      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	e080      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0ca:	2380      	movs	r3, #128	; 0x80
 800a0cc:	e079      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0dc:	e071      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0ec:	e069      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0fc:	e061      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a10c:	e059      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a11c:	e051      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a12c:	e049      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a13c:	e041      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14c:	e039      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a15c:	e031      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a16c:	e029      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a178:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a17c:	e021      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a18c:	e019      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a19c:	e011      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a1a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1ac:	e009      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1bc:	e001      	b.n	800a1c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000000 	.word	0x20000000
 800a1d0:	10624dd3 	.word	0x10624dd3
 800a1d4:	00200045 	.word	0x00200045
 800a1d8:	002000c5 	.word	0x002000c5
 800a1dc:	fdffe008 	.word	0xfdffe008

0800a1e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1e8:	4b1f      	ldr	r3, [pc, #124]	; (800a268 <SDMMC_GetCmdResp2+0x88>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a1f      	ldr	r2, [pc, #124]	; (800a26c <SDMMC_GetCmdResp2+0x8c>)
 800a1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f2:	0a5b      	lsrs	r3, r3, #9
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
 800a1fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1e5a      	subs	r2, r3, #1
 800a202:	60fa      	str	r2, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a20c:	e026      	b.n	800a25c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0ef      	beq.n	800a1fe <SDMMC_GetCmdResp2+0x1e>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1ea      	bne.n	800a1fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2204      	movs	r2, #4
 800a238:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a23a:	2304      	movs	r3, #4
 800a23c:	e00e      	b.n	800a25c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a250:	2301      	movs	r3, #1
 800a252:	e003      	b.n	800a25c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a06      	ldr	r2, [pc, #24]	; (800a270 <SDMMC_GetCmdResp2+0x90>)
 800a258:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	20000000 	.word	0x20000000
 800a26c:	10624dd3 	.word	0x10624dd3
 800a270:	002000c5 	.word	0x002000c5

0800a274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a27c:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <SDMMC_GetCmdResp3+0x74>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1a      	ldr	r2, [pc, #104]	; (800a2ec <SDMMC_GetCmdResp3+0x78>)
 800a282:	fba2 2303 	umull	r2, r3, r2, r3
 800a286:	0a5b      	lsrs	r3, r3, #9
 800a288:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
 800a290:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	60fa      	str	r2, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a29c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2a0:	e01b      	b.n	800a2da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0ef      	beq.n	800a292 <SDMMC_GetCmdResp3+0x1e>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ea      	bne.n	800a292 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ce:	2304      	movs	r3, #4
 800a2d0:	e003      	b.n	800a2da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a06      	ldr	r2, [pc, #24]	; (800a2f0 <SDMMC_GetCmdResp3+0x7c>)
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	20000000 	.word	0x20000000
 800a2ec:	10624dd3 	.word	0x10624dd3
 800a2f0:	002000c5 	.word	0x002000c5

0800a2f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a302:	4b35      	ldr	r3, [pc, #212]	; (800a3d8 <SDMMC_GetCmdResp6+0xe4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a35      	ldr	r2, [pc, #212]	; (800a3dc <SDMMC_GetCmdResp6+0xe8>)
 800a308:	fba2 2303 	umull	r2, r3, r2, r3
 800a30c:	0a5b      	lsrs	r3, r3, #9
 800a30e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a312:	fb02 f303 	mul.w	r3, r2, r3
 800a316:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	1e5a      	subs	r2, r3, #1
 800a31c:	61fa      	str	r2, [r7, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d102      	bne.n	800a328 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a326:	e052      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0ef      	beq.n	800a318 <SDMMC_GetCmdResp6+0x24>
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1ea      	bne.n	800a318 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a346:	f003 0304 	and.w	r3, r3, #4
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2204      	movs	r2, #4
 800a352:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a354:	2304      	movs	r3, #4
 800a356:	e03a      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e02f      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff fb60 	bl	8009a34 <SDMMC_GetCommandResponse>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d001      	beq.n	800a382 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a37e:	2301      	movs	r3, #1
 800a380:	e025      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <SDMMC_GetCmdResp6+0xec>)
 800a386:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a388:	2100      	movs	r1, #0
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fb5f 	bl	8009a4e <SDMMC_GetResponse>
 800a390:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d106      	bne.n	800a3aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e011      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3b8:	e009      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3c8:	e001      	b.n	800a3ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3720      	adds	r7, #32
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000000 	.word	0x20000000
 800a3dc:	10624dd3 	.word	0x10624dd3
 800a3e0:	002000c5 	.word	0x002000c5

0800a3e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3ec:	4b22      	ldr	r3, [pc, #136]	; (800a478 <SDMMC_GetCmdResp7+0x94>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a22      	ldr	r2, [pc, #136]	; (800a47c <SDMMC_GetCmdResp7+0x98>)
 800a3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f6:	0a5b      	lsrs	r3, r3, #9
 800a3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3fc:	fb02 f303 	mul.w	r3, r2, r3
 800a400:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1e5a      	subs	r2, r3, #1
 800a406:	60fa      	str	r2, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a40c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a410:	e02c      	b.n	800a46c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a416:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0ef      	beq.n	800a402 <SDMMC_GetCmdResp7+0x1e>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1ea      	bne.n	800a402 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2204      	movs	r2, #4
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a43e:	2304      	movs	r3, #4
 800a440:	e014      	b.n	800a46c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a454:	2301      	movs	r3, #1
 800a456:	e009      	b.n	800a46c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2240      	movs	r2, #64	; 0x40
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0

}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20000000 	.word	0x20000000
 800a47c:	10624dd3 	.word	0x10624dd3

0800a480 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a488:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <SDMMC_GetCmdError+0x50>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a11      	ldr	r2, [pc, #68]	; (800a4d4 <SDMMC_GetCmdError+0x54>)
 800a48e:	fba2 2303 	umull	r2, r3, r2, r3
 800a492:	0a5b      	lsrs	r3, r3, #9
 800a494:	f241 3288 	movw	r2, #5000	; 0x1388
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	60fa      	str	r2, [r7, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4ac:	e009      	b.n	800a4c2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0f1      	beq.n	800a49e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a06      	ldr	r2, [pc, #24]	; (800a4d8 <SDMMC_GetCmdError+0x58>)
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20000000 	.word	0x20000000
 800a4d4:	10624dd3 	.word	0x10624dd3
 800a4d8:	002000c5 	.word	0x002000c5

0800a4dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4dc:	b084      	sub	sp, #16
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	f107 001c 	add.w	r0, r7, #28
 800a4ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 faf6 	bl	800baec <USB_CoreReset>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
 800a516:	e005      	b.n	800a524 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a530:	b004      	add	sp, #16
 800a532:	4770      	bx	lr

0800a534 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	2b02      	cmp	r3, #2
 800a546:	d165      	bne.n	800a614 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4a3e      	ldr	r2, [pc, #248]	; (800a644 <USB_SetTurnaroundTime+0x110>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d906      	bls.n	800a55e <USB_SetTurnaroundTime+0x2a>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	4a3d      	ldr	r2, [pc, #244]	; (800a648 <USB_SetTurnaroundTime+0x114>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d202      	bcs.n	800a55e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a558:	230f      	movs	r3, #15
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e05c      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4a39      	ldr	r2, [pc, #228]	; (800a648 <USB_SetTurnaroundTime+0x114>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d306      	bcc.n	800a574 <USB_SetTurnaroundTime+0x40>
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	4a38      	ldr	r2, [pc, #224]	; (800a64c <USB_SetTurnaroundTime+0x118>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d202      	bcs.n	800a574 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a56e:	230e      	movs	r3, #14
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	e051      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4a35      	ldr	r2, [pc, #212]	; (800a64c <USB_SetTurnaroundTime+0x118>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d306      	bcc.n	800a58a <USB_SetTurnaroundTime+0x56>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4a34      	ldr	r2, [pc, #208]	; (800a650 <USB_SetTurnaroundTime+0x11c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d202      	bcs.n	800a58a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a584:	230d      	movs	r3, #13
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e046      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	4a30      	ldr	r2, [pc, #192]	; (800a650 <USB_SetTurnaroundTime+0x11c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d306      	bcc.n	800a5a0 <USB_SetTurnaroundTime+0x6c>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a2f      	ldr	r2, [pc, #188]	; (800a654 <USB_SetTurnaroundTime+0x120>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d802      	bhi.n	800a5a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a59a:	230c      	movs	r3, #12
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e03b      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4a2c      	ldr	r2, [pc, #176]	; (800a654 <USB_SetTurnaroundTime+0x120>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d906      	bls.n	800a5b6 <USB_SetTurnaroundTime+0x82>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4a2b      	ldr	r2, [pc, #172]	; (800a658 <USB_SetTurnaroundTime+0x124>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d802      	bhi.n	800a5b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5b0:	230b      	movs	r3, #11
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	e030      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	4a27      	ldr	r2, [pc, #156]	; (800a658 <USB_SetTurnaroundTime+0x124>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d906      	bls.n	800a5cc <USB_SetTurnaroundTime+0x98>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4a26      	ldr	r2, [pc, #152]	; (800a65c <USB_SetTurnaroundTime+0x128>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d802      	bhi.n	800a5cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5c6:	230a      	movs	r3, #10
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e025      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4a23      	ldr	r2, [pc, #140]	; (800a65c <USB_SetTurnaroundTime+0x128>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d906      	bls.n	800a5e2 <USB_SetTurnaroundTime+0xae>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4a22      	ldr	r2, [pc, #136]	; (800a660 <USB_SetTurnaroundTime+0x12c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d202      	bcs.n	800a5e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a5dc:	2309      	movs	r3, #9
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e01a      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a1e      	ldr	r2, [pc, #120]	; (800a660 <USB_SetTurnaroundTime+0x12c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d306      	bcc.n	800a5f8 <USB_SetTurnaroundTime+0xc4>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <USB_SetTurnaroundTime+0x130>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d802      	bhi.n	800a5f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a5f2:	2308      	movs	r3, #8
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e00f      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4a1a      	ldr	r2, [pc, #104]	; (800a664 <USB_SetTurnaroundTime+0x130>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d906      	bls.n	800a60e <USB_SetTurnaroundTime+0xda>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4a19      	ldr	r2, [pc, #100]	; (800a668 <USB_SetTurnaroundTime+0x134>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d202      	bcs.n	800a60e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a608:	2307      	movs	r3, #7
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e004      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a60e:	2306      	movs	r3, #6
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	e001      	b.n	800a618 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a614:	2309      	movs	r3, #9
 800a616:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	029b      	lsls	r3, r3, #10
 800a62c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a630:	431a      	orrs	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	371c      	adds	r7, #28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	00d8acbf 	.word	0x00d8acbf
 800a648:	00e4e1c0 	.word	0x00e4e1c0
 800a64c:	00f42400 	.word	0x00f42400
 800a650:	01067380 	.word	0x01067380
 800a654:	011a499f 	.word	0x011a499f
 800a658:	01312cff 	.word	0x01312cff
 800a65c:	014ca43f 	.word	0x014ca43f
 800a660:	016e3600 	.word	0x016e3600
 800a664:	01a6ab1f 	.word	0x01a6ab1f
 800a668:	01e84800 	.word	0x01e84800

0800a66c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f043 0201 	orr.w	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f023 0201 	bic.w	r2, r3, #1
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d115      	bne.n	800a6fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6de:	2001      	movs	r0, #1
 800a6e0:	f7f6 ffc0 	bl	8001664 <HAL_Delay>
      ms++;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f001 f985 	bl	800b9fa <USB_GetMode>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d01e      	beq.n	800a734 <USB_SetCurrentMode+0x84>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b31      	cmp	r3, #49	; 0x31
 800a6fa:	d9f0      	bls.n	800a6de <USB_SetCurrentMode+0x2e>
 800a6fc:	e01a      	b.n	800a734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d115      	bne.n	800a730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a710:	2001      	movs	r0, #1
 800a712:	f7f6 ffa7 	bl	8001664 <HAL_Delay>
      ms++;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 f96c 	bl	800b9fa <USB_GetMode>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <USB_SetCurrentMode+0x84>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b31      	cmp	r3, #49	; 0x31
 800a72c:	d9f0      	bls.n	800a710 <USB_SetCurrentMode+0x60>
 800a72e:	e001      	b.n	800a734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e005      	b.n	800a740 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b32      	cmp	r3, #50	; 0x32
 800a738:	d101      	bne.n	800a73e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a748:	b084      	sub	sp, #16
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b086      	sub	sp, #24
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a762:	2300      	movs	r3, #0
 800a764:	613b      	str	r3, [r7, #16]
 800a766:	e009      	b.n	800a77c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3340      	adds	r3, #64	; 0x40
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	2200      	movs	r2, #0
 800a774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	3301      	adds	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2b0e      	cmp	r3, #14
 800a780:	d9f2      	bls.n	800a768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d11c      	bne.n	800a7c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a796:	f043 0302 	orr.w	r3, r3, #2
 800a79a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	e005      	b.n	800a7ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	680b      	ldr	r3, [r1, #0]
 800a7ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a7ee:	2103      	movs	r1, #3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f959 	bl	800aaa8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a7f6:	2110      	movs	r1, #16
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f8f1 	bl	800a9e0 <USB_FlushTxFifo>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f91d 	bl	800aa48 <USB_FlushRxFifo>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a81e:	461a      	mov	r2, r3
 800a820:	2300      	movs	r3, #0
 800a822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82a:	461a      	mov	r2, r3
 800a82c:	2300      	movs	r3, #0
 800a82e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a836:	461a      	mov	r2, r3
 800a838:	2300      	movs	r3, #0
 800a83a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a83c:	2300      	movs	r3, #0
 800a83e:	613b      	str	r3, [r7, #16]
 800a840:	e043      	b.n	800a8ca <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a858:	d118      	bne.n	800a88c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86c:	461a      	mov	r2, r3
 800a86e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	e013      	b.n	800a89e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a882:	461a      	mov	r2, r3
 800a884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	e008      	b.n	800a89e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a898:	461a      	mov	r2, r3
 800a89a:	2300      	movs	r3, #0
 800a89c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8bc:	461a      	mov	r2, r3
 800a8be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	613b      	str	r3, [r7, #16]
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3b7      	bcc.n	800a842 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	e043      	b.n	800a960 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ee:	d118      	bne.n	800a922 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a902:	461a      	mov	r2, r3
 800a904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	e013      	b.n	800a934 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	461a      	mov	r2, r3
 800a91a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	e008      	b.n	800a934 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92e:	461a      	mov	r2, r3
 800a930:	2300      	movs	r3, #0
 800a932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	461a      	mov	r2, r3
 800a942:	2300      	movs	r3, #0
 800a944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a952:	461a      	mov	r2, r3
 800a954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	3301      	adds	r3, #1
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	429a      	cmp	r2, r3
 800a966:	d3b7      	bcc.n	800a8d8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a97a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	f043 0210 	orr.w	r2, r3, #16
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	4b10      	ldr	r3, [pc, #64]	; (800a9dc <USB_DevInit+0x294>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	f043 0208 	orr.w	r2, r3, #8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d107      	bne.n	800a9ca <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9c2:	f043 0304 	orr.w	r3, r3, #4
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9d6:	b004      	add	sp, #16
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	803c3800 	.word	0x803c3800

0800a9e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <USB_FlushTxFifo+0x64>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d901      	bls.n	800aa00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e01b      	b.n	800aa38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	daf2      	bge.n	800a9ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	019b      	lsls	r3, r3, #6
 800aa10:	f043 0220 	orr.w	r2, r3, #32
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <USB_FlushTxFifo+0x64>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d901      	bls.n	800aa2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e006      	b.n	800aa38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	d0f0      	beq.n	800aa18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	00030d40 	.word	0x00030d40

0800aa48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3301      	adds	r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4a11      	ldr	r2, [pc, #68]	; (800aaa4 <USB_FlushRxFifo+0x5c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d901      	bls.n	800aa66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e018      	b.n	800aa98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	daf2      	bge.n	800aa54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2210      	movs	r2, #16
 800aa76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <USB_FlushRxFifo+0x5c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d901      	bls.n	800aa8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e006      	b.n	800aa98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0310 	and.w	r3, r3, #16
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	d0f0      	beq.n	800aa78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	00030d40 	.word	0x00030d40

0800aaa8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	68f9      	ldr	r1, [r7, #12]
 800aac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aac8:	4313      	orrs	r3, r2
 800aaca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aada:	b480      	push	{r7}
 800aadc:	b087      	sub	sp, #28
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0306 	and.w	r3, r3, #6
 800aaf2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d002      	beq.n	800ab00 <USB_GetDevSpeed+0x26>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2b06      	cmp	r3, #6
 800aafe:	d102      	bne.n	800ab06 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab00:	2302      	movs	r3, #2
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	e001      	b.n	800ab0a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ab06:	230f      	movs	r3, #15
 800ab08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	785b      	ldrb	r3, [r3, #1]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d13a      	bne.n	800abaa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3a:	69da      	ldr	r2, [r3, #28]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f003 030f 	and.w	r3, r3, #15
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	68f9      	ldr	r1, [r7, #12]
 800ab4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab52:	4313      	orrs	r3, r2
 800ab54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d155      	bne.n	800ac18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	059b      	lsls	r3, r3, #22
 800ab8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab90:	4313      	orrs	r3, r2
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	e036      	b.n	800ac18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	2101      	movs	r1, #1
 800abbc:	fa01 f303 	lsl.w	r3, r1, r3
 800abc0:	041b      	lsls	r3, r3, #16
 800abc2:	68f9      	ldr	r1, [r7, #12]
 800abc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc8:	4313      	orrs	r3, r2
 800abca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d11a      	bne.n	800ac18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	015a      	lsls	r2, r3, #5
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	791b      	ldrb	r3, [r3, #4]
 800abfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abfe:	430b      	orrs	r3, r1
 800ac00:	4313      	orrs	r3, r2
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d161      	bne.n	800ad08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac5a:	d11f      	bne.n	800ac9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	0151      	lsls	r1, r2, #5
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	440a      	add	r2, r1
 800ac72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	0151      	lsls	r1, r2, #5
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	440a      	add	r2, r1
 800ac92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f003 030f 	and.w	r3, r3, #15
 800acac:	2101      	movs	r1, #1
 800acae:	fa01 f303 	lsl.w	r3, r1, r3
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	43db      	mvns	r3, r3
 800acb6:	68f9      	ldr	r1, [r7, #12]
 800acb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acbc:	4013      	ands	r3, r2
 800acbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 030f 	and.w	r3, r3, #15
 800acd0:	2101      	movs	r1, #1
 800acd2:	fa01 f303 	lsl.w	r3, r1, r3
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	43db      	mvns	r3, r3
 800acda:	68f9      	ldr	r1, [r7, #12]
 800acdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ace0:	4013      	ands	r3, r2
 800ace2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	0159      	lsls	r1, r3, #5
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	440b      	add	r3, r1
 800acfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfe:	4619      	mov	r1, r3
 800ad00:	4b35      	ldr	r3, [pc, #212]	; (800add8 <USB_DeactivateEndpoint+0x1b0>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	600b      	str	r3, [r1, #0]
 800ad06:	e060      	b.n	800adca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad1e:	d11f      	bne.n	800ad60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	0151      	lsls	r1, r2, #5
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	440a      	add	r2, r1
 800ad56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f003 030f 	and.w	r3, r3, #15
 800ad70:	2101      	movs	r1, #1
 800ad72:	fa01 f303 	lsl.w	r3, r1, r3
 800ad76:	041b      	lsls	r3, r3, #16
 800ad78:	43db      	mvns	r3, r3
 800ad7a:	68f9      	ldr	r1, [r7, #12]
 800ad7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad80:	4013      	ands	r3, r2
 800ad82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8a:	69da      	ldr	r2, [r3, #28]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 030f 	and.w	r3, r3, #15
 800ad94:	2101      	movs	r1, #1
 800ad96:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9a:	041b      	lsls	r3, r3, #16
 800ad9c:	43db      	mvns	r3, r3
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada4:	4013      	ands	r3, r2
 800ada6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	0159      	lsls	r1, r3, #5
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	440b      	add	r3, r1
 800adbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc2:	4619      	mov	r1, r3
 800adc4:	4b05      	ldr	r3, [pc, #20]	; (800addc <USB_DeactivateEndpoint+0x1b4>)
 800adc6:	4013      	ands	r3, r2
 800adc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	ec337800 	.word	0xec337800
 800addc:	eff37800 	.word	0xeff37800

0800ade0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	f040 810a 	bne.w	800b012 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d132      	bne.n	800ae6c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	0151      	lsls	r1, r2, #5
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	440a      	add	r2, r1
 800ae40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae64:	0cdb      	lsrs	r3, r3, #19
 800ae66:	04db      	lsls	r3, r3, #19
 800ae68:	6113      	str	r3, [r2, #16]
 800ae6a:	e074      	b.n	800af56 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	0151      	lsls	r1, r2, #5
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	440a      	add	r2, r1
 800ae82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae86:	0cdb      	lsrs	r3, r3, #19
 800ae88:	04db      	lsls	r3, r3, #19
 800ae8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aeaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aeae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aebc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	6999      	ldr	r1, [r3, #24]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	440b      	add	r3, r1
 800aec8:	1e59      	subs	r1, r3, #1
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	fbb1 f3f3 	udiv	r3, r1, r3
 800aed2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aed4:	4b9e      	ldr	r3, [pc, #632]	; (800b150 <USB_EPStartXfer+0x370>)
 800aed6:	400b      	ands	r3, r1
 800aed8:	6939      	ldr	r1, [r7, #16]
 800aeda:	0148      	lsls	r0, r1, #5
 800aedc:	6979      	ldr	r1, [r7, #20]
 800aede:	4401      	add	r1, r0
 800aee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aee4:	4313      	orrs	r3, r2
 800aee6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef4:	691a      	ldr	r2, [r3, #16]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aefe:	6939      	ldr	r1, [r7, #16]
 800af00:	0148      	lsls	r0, r1, #5
 800af02:	6979      	ldr	r1, [r7, #20]
 800af04:	4401      	add	r1, r0
 800af06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af0a:	4313      	orrs	r3, r2
 800af0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	791b      	ldrb	r3, [r3, #4]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d11f      	bne.n	800af56 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800af34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	0151      	lsls	r1, r2, #5
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	440a      	add	r2, r1
 800af4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af54:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af74:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	791b      	ldrb	r3, [r3, #4]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d015      	beq.n	800afaa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 8106 	beq.w	800b194 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	2101      	movs	r1, #1
 800af9a:	fa01 f303 	lsl.w	r3, r1, r3
 800af9e:	6979      	ldr	r1, [r7, #20]
 800afa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afa4:	4313      	orrs	r3, r2
 800afa6:	634b      	str	r3, [r1, #52]	; 0x34
 800afa8:	e0f4      	b.n	800b194 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d110      	bne.n	800afdc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	0151      	lsls	r1, r2, #5
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	440a      	add	r2, r1
 800afd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	e00f      	b.n	800affc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	0151      	lsls	r1, r2, #5
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	440a      	add	r2, r1
 800aff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800affa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	6919      	ldr	r1, [r3, #16]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa94 	bl	800b538 <USB_WritePacket>
 800b010:	e0c0      	b.n	800b194 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02c:	0cdb      	lsrs	r3, r3, #19
 800b02e:	04db      	lsls	r3, r3, #19
 800b030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	0151      	lsls	r1, r2, #5
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	440a      	add	r2, r1
 800b048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b054:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d123      	bne.n	800b0a6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	4413      	add	r3, r2
 800b066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06a:	691a      	ldr	r2, [r3, #16]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	0148      	lsls	r0, r1, #5
 800b078:	6979      	ldr	r1, [r7, #20]
 800b07a:	4401      	add	r1, r0
 800b07c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b080:	4313      	orrs	r3, r2
 800b082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	0151      	lsls	r1, r2, #5
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	440a      	add	r2, r1
 800b09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b09e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0a2:	6113      	str	r3, [r2, #16]
 800b0a4:	e037      	b.n	800b116 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	699a      	ldr	r2, [r3, #24]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	1e5a      	subs	r2, r3, #1
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ba:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	89fa      	ldrh	r2, [r7, #14]
 800b0c2:	fb03 f202 	mul.w	r2, r3, r2
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d6:	691a      	ldr	r2, [r3, #16]
 800b0d8:	89fb      	ldrh	r3, [r7, #14]
 800b0da:	04d9      	lsls	r1, r3, #19
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <USB_EPStartXfer+0x370>)
 800b0de:	400b      	ands	r3, r1
 800b0e0:	6939      	ldr	r1, [r7, #16]
 800b0e2:	0148      	lsls	r0, r1, #5
 800b0e4:	6979      	ldr	r1, [r7, #20]
 800b0e6:	4401      	add	r1, r0
 800b0e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0fc:	691a      	ldr	r2, [r3, #16]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b106:	6939      	ldr	r1, [r7, #16]
 800b108:	0148      	lsls	r0, r1, #5
 800b10a:	6979      	ldr	r1, [r7, #20]
 800b10c:	4401      	add	r1, r0
 800b10e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b112:	4313      	orrs	r3, r2
 800b114:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	791b      	ldrb	r3, [r3, #4]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d12a      	bne.n	800b174 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d112      	bne.n	800b154 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	4413      	add	r3, r2
 800b136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	0151      	lsls	r1, r2, #5
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	440a      	add	r2, r1
 800b144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	e011      	b.n	800b174 <USB_EPStartXfer+0x394>
 800b150:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	0151      	lsls	r1, r2, #5
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	440a      	add	r2, r1
 800b16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b172:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	0151      	lsls	r1, r2, #5
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	440a      	add	r2, r1
 800b18a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b18e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop

0800b1a0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	785b      	ldrb	r3, [r3, #1]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	f040 80ab 	bne.w	800b314 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d132      	bne.n	800b22c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	0151      	lsls	r1, r2, #5
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	440a      	add	r2, r1
 800b1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	0151      	lsls	r1, r2, #5
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	440a      	add	r2, r1
 800b200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	0151      	lsls	r1, r2, #5
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	440a      	add	r2, r1
 800b220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b224:	0cdb      	lsrs	r3, r3, #19
 800b226:	04db      	lsls	r3, r3, #19
 800b228:	6113      	str	r3, [r2, #16]
 800b22a:	e04e      	b.n	800b2ca <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	440a      	add	r2, r1
 800b242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b246:	0cdb      	lsrs	r3, r3, #19
 800b248:	04db      	lsls	r3, r3, #19
 800b24a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b266:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b26a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b26e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d903      	bls.n	800b284 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	68da      	ldr	r2, [r3, #12]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	0151      	lsls	r1, r2, #5
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	440a      	add	r2, r1
 800b29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b29e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b0:	691a      	ldr	r2, [r3, #16]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	0148      	lsls	r0, r1, #5
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	4401      	add	r1, r0
 800b2c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2e8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d071      	beq.n	800b3d6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	2101      	movs	r1, #1
 800b304:	fa01 f303 	lsl.w	r3, r1, r3
 800b308:	68f9      	ldr	r1, [r7, #12]
 800b30a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b30e:	4313      	orrs	r3, r2
 800b310:	634b      	str	r3, [r1, #52]	; 0x34
 800b312:	e060      	b.n	800b3d6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b32e:	0cdb      	lsrs	r3, r3, #19
 800b330:	04db      	lsls	r3, r3, #19
 800b332:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b34e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b356:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	0151      	lsls	r1, r2, #5
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	440a      	add	r2, r1
 800b386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b38a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b38e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	691a      	ldr	r2, [r3, #16]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	0148      	lsls	r0, r1, #5
 800b3aa:	68f9      	ldr	r1, [r7, #12]
 800b3ac:	4401      	add	r1, r0
 800b3ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	785b      	ldrb	r3, [r3, #1]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d14a      	bne.n	800b498 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b41a:	f040 8086 	bne.w	800b52a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	7812      	ldrb	r2, [r2, #0]
 800b432:	0151      	lsls	r1, r2, #5
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	440a      	add	r2, r1
 800b438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b440:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	7812      	ldrb	r2, [r2, #0]
 800b456:	0151      	lsls	r1, r2, #5
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	440a      	add	r2, r1
 800b45c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b464:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b472:	4293      	cmp	r3, r2
 800b474:	d902      	bls.n	800b47c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	75fb      	strb	r3, [r7, #23]
          break;
 800b47a:	e056      	b.n	800b52a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b494:	d0e7      	beq.n	800b466 <USB_EPStopXfer+0x82>
 800b496:	e048      	b.n	800b52a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4b0:	d13b      	bne.n	800b52a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	7812      	ldrb	r2, [r2, #0]
 800b4c6:	0151      	lsls	r1, r2, #5
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	440a      	add	r2, r1
 800b4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	7812      	ldrb	r2, [r2, #0]
 800b4ea:	0151      	lsls	r1, r2, #5
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f242 7210 	movw	r2, #10000	; 0x2710
 800b506:	4293      	cmp	r3, r2
 800b508:	d902      	bls.n	800b510 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	75fb      	strb	r3, [r7, #23]
          break;
 800b50e:	e00c      	b.n	800b52a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	015a      	lsls	r2, r3, #5
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	4413      	add	r3, r2
 800b51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b528:	d0e7      	beq.n	800b4fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b538:	b480      	push	{r7}
 800b53a:	b089      	sub	sp, #36	; 0x24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4611      	mov	r1, r2
 800b544:	461a      	mov	r2, r3
 800b546:	460b      	mov	r3, r1
 800b548:	71fb      	strb	r3, [r7, #7]
 800b54a:	4613      	mov	r3, r2
 800b54c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b556:	88bb      	ldrh	r3, [r7, #4]
 800b558:	3303      	adds	r3, #3
 800b55a:	089b      	lsrs	r3, r3, #2
 800b55c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b55e:	2300      	movs	r3, #0
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e018      	b.n	800b596 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b564:	79fb      	ldrb	r3, [r7, #7]
 800b566:	031a      	lsls	r2, r3, #12
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	4413      	add	r3, r2
 800b56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b570:	461a      	mov	r2, r3
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	3301      	adds	r3, #1
 800b57c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	3301      	adds	r3, #1
 800b582:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	3301      	adds	r3, #1
 800b588:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	3301      	adds	r3, #1
 800b58e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	3301      	adds	r3, #1
 800b594:	61bb      	str	r3, [r7, #24]
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d3e2      	bcc.n	800b564 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3724      	adds	r7, #36	; 0x24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b08b      	sub	sp, #44	; 0x2c
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	089b      	lsrs	r3, r3, #2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	623b      	str	r3, [r7, #32]
 800b5d6:	e014      	b.n	800b602 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	3301      	adds	r3, #1
 800b600:	623b      	str	r3, [r7, #32]
 800b602:	6a3a      	ldr	r2, [r7, #32]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	429a      	cmp	r2, r3
 800b608:	d3e6      	bcc.n	800b5d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b60a:	8bfb      	ldrh	r3, [r7, #30]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01e      	beq.n	800b64e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61a:	461a      	mov	r2, r3
 800b61c:	f107 0310 	add.w	r3, r7, #16
 800b620:	6812      	ldr	r2, [r2, #0]
 800b622:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	fa22 f303 	lsr.w	r3, r2, r3
 800b630:	b2da      	uxtb	r2, r3
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	701a      	strb	r2, [r3, #0]
      i++;
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	3301      	adds	r3, #1
 800b63a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	3301      	adds	r3, #1
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b642:	8bfb      	ldrh	r3, [r7, #30]
 800b644:	3b01      	subs	r3, #1
 800b646:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b648:	8bfb      	ldrh	r3, [r7, #30]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1ea      	bne.n	800b624 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b650:	4618      	mov	r0, r3
 800b652:	372c      	adds	r7, #44	; 0x2c
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	785b      	ldrb	r3, [r3, #1]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d12c      	bne.n	800b6d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	db12      	blt.n	800b6b0 <USB_EPSetStall+0x54>
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00f      	beq.n	800b6b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	0151      	lsls	r1, r2, #5
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	440a      	add	r2, r1
 800b6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	0151      	lsls	r1, r2, #5
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	440a      	add	r2, r1
 800b6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	e02b      	b.n	800b72a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	db12      	blt.n	800b70a <USB_EPSetStall+0xae>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b708:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	015a      	lsls	r2, r3, #5
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4413      	add	r3, r2
 800b712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	0151      	lsls	r1, r2, #5
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	440a      	add	r2, r1
 800b720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	785b      	ldrb	r3, [r3, #1]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d128      	bne.n	800b7a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b772:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	791b      	ldrb	r3, [r3, #4]
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d003      	beq.n	800b784 <USB_EPClearStall+0x4c>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	791b      	ldrb	r3, [r3, #4]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d138      	bne.n	800b7f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	0151      	lsls	r1, r2, #5
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	440a      	add	r2, r1
 800b79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	e027      	b.n	800b7f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d003      	beq.n	800b7d6 <USB_EPClearStall+0x9e>
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d10f      	bne.n	800b7f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	0151      	lsls	r1, r2, #5
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	440a      	add	r2, r1
 800b7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b822:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b826:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	011b      	lsls	r3, r3, #4
 800b834:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b83e:	4313      	orrs	r3, r2
 800b840:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b87e:	f023 0302 	bic.w	r3, r3, #2
 800b882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8c0:	f043 0302 	orr.w	r3, r3, #2
 800b8c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4013      	ands	r3, r2
 800b91c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	0c1b      	lsrs	r3, r3, #16
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	4013      	ands	r3, r2
 800b950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	b29b      	uxth	r3, r3
}
 800b956:	4618      	mov	r0, r3
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	4013      	ands	r3, r2
 800b98e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b990:	68bb      	ldr	r3, [r7, #8]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9c2:	78fb      	ldrb	r3, [r7, #3]
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ce:	01db      	lsls	r3, r3, #7
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	015a      	lsls	r2, r3, #5
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	4413      	add	r3, r2
 800b9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	f003 0301 	and.w	r3, r3, #1
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba34:	f023 0307 	bic.w	r3, r3, #7
 800ba38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	333c      	adds	r3, #60	; 0x3c
 800ba6e:	3304      	adds	r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4a1c      	ldr	r2, [pc, #112]	; (800bae8 <USB_EP0_OutStart+0x8c>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d90a      	bls.n	800ba92 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba8c:	d101      	bne.n	800ba92 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e024      	b.n	800badc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba98:	461a      	mov	r2, r3
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac0:	f043 0318 	orr.w	r3, r3, #24
 800bac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bad8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	4f54300a 	.word	0x4f54300a

0800baec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3301      	adds	r3, #1
 800bafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <USB_CoreReset+0x64>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d901      	bls.n	800bb0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e01b      	b.n	800bb42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	daf2      	bge.n	800baf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	f043 0201 	orr.w	r2, r3, #1
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	3301      	adds	r3, #1
 800bb26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a09      	ldr	r2, [pc, #36]	; (800bb50 <USB_CoreReset+0x64>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d901      	bls.n	800bb34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e006      	b.n	800bb42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d0f0      	beq.n	800bb22 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	00030d40 	.word	0x00030d40

0800bb54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bb58:	4904      	ldr	r1, [pc, #16]	; (800bb6c <MX_FATFS_Init+0x18>)
 800bb5a:	4805      	ldr	r0, [pc, #20]	; (800bb70 <MX_FATFS_Init+0x1c>)
 800bb5c:	f004 fd46 	bl	80105ec <FATFS_LinkDriver>
 800bb60:	4603      	mov	r3, r0
 800bb62:	461a      	mov	r2, r3
 800bb64:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <MX_FATFS_Init+0x20>)
 800bb66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb68:	bf00      	nop
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	200005fc 	.word	0x200005fc
 800bb70:	08012344 	.word	0x08012344
 800bb74:	200005f8 	.word	0x200005f8

0800bb78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bb7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bb92:	f000 f879 	bl	800bc88 <BSP_SD_IsDetected>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d001      	beq.n	800bba0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e012      	b.n	800bbc6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bba0:	480b      	ldr	r0, [pc, #44]	; (800bbd0 <BSP_SD_Init+0x48>)
 800bba2:	f7fa f941 	bl	8005e28 <HAL_SD_Init>
 800bba6:	4603      	mov	r3, r0
 800bba8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bbaa:	79fb      	ldrb	r3, [r7, #7]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d109      	bne.n	800bbc4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bbb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bbb4:	4806      	ldr	r0, [pc, #24]	; (800bbd0 <BSP_SD_Init+0x48>)
 800bbb6:	f7fb f80d 	bl	8006bd4 <HAL_SD_ConfigWideBusOperation>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	200002a8 	.word	0x200002a8

0800bbd4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	68f9      	ldr	r1, [r7, #12]
 800bbf0:	4806      	ldr	r0, [pc, #24]	; (800bc0c <BSP_SD_ReadBlocks+0x38>)
 800bbf2:	f7fa fa41 	bl	8006078 <HAL_SD_ReadBlocks>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200002a8 	.word	0x200002a8

0800bc10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	68f9      	ldr	r1, [r7, #12]
 800bc2c:	4806      	ldr	r0, [pc, #24]	; (800bc48 <BSP_SD_WriteBlocks+0x38>)
 800bc2e:	f7fa fbb5 	bl	800639c <HAL_SD_WriteBlocks>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	200002a8 	.word	0x200002a8

0800bc4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bc50:	4805      	ldr	r0, [pc, #20]	; (800bc68 <BSP_SD_GetCardState+0x1c>)
 800bc52:	f7fb f8d3 	bl	8006dfc <HAL_SD_GetCardState>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	bf14      	ite	ne
 800bc5c:	2301      	movne	r3, #1
 800bc5e:	2300      	moveq	r3, #0
 800bc60:	b2db      	uxtb	r3, r3
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	200002a8 	.word	0x200002a8

0800bc6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	4803      	ldr	r0, [pc, #12]	; (800bc84 <BSP_SD_GetCardInfo+0x18>)
 800bc78:	f7fa ff80 	bl	8006b7c <HAL_SD_GetCardInfo>
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	200002a8 	.word	0x200002a8

0800bc88 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bc92:	f000 f80b 	bl	800bcac <BSP_PlatformIsDetected>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	b2db      	uxtb	r3, r3
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bcb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bcbe:	f7f6 f853 	bl	8001d68 <HAL_GPIO_ReadPin>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bccc:	79fb      	ldrb	r3, [r7, #7]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bce2:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <SD_CheckStatus+0x38>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bce8:	f7ff ffb0 	bl	800bc4c <BSP_SD_GetCardState>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d107      	bne.n	800bd02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <SD_CheckStatus+0x38>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f023 0301 	bic.w	r3, r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <SD_CheckStatus+0x38>)
 800bd00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd02:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <SD_CheckStatus+0x38>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	b2db      	uxtb	r3, r3
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000009 	.word	0x20000009

0800bd14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <SD_initialize+0x38>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd24:	f7ff ff30 	bl	800bb88 <BSP_SD_Init>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d107      	bne.n	800bd3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bd2e:	79fb      	ldrb	r3, [r7, #7]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff ffd1 	bl	800bcd8 <SD_CheckStatus>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <SD_initialize+0x38>)
 800bd3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bd3e:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <SD_initialize+0x38>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	20000009 	.word	0x20000009

0800bd50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff ffbb 	bl	800bcd8 <SD_CheckStatus>
 800bd62:	4603      	mov	r3, r0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	68b8      	ldr	r0, [r7, #8]
 800bd8a:	f7ff ff23 	bl	800bbd4 <BSP_SD_ReadBlocks>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d107      	bne.n	800bda4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bd94:	bf00      	nop
 800bd96:	f7ff ff59 	bl	800bc4c <BSP_SD_GetCardState>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1fa      	bne.n	800bd96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b086      	sub	sp, #24
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	68b8      	ldr	r0, [r7, #8]
 800bdcc:	f7ff ff20 	bl	800bc10 <BSP_SD_WriteBlocks>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d107      	bne.n	800bde6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bdd6:	bf00      	nop
 800bdd8:	f7ff ff38 	bl	800bc4c <BSP_SD_GetCardState>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1fa      	bne.n	800bdd8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08c      	sub	sp, #48	; 0x30
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	603a      	str	r2, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be06:	4b25      	ldr	r3, [pc, #148]	; (800be9c <SD_ioctl+0xac>)
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <SD_ioctl+0x28>
 800be14:	2303      	movs	r3, #3
 800be16:	e03c      	b.n	800be92 <SD_ioctl+0xa2>

  switch (cmd)
 800be18:	79bb      	ldrb	r3, [r7, #6]
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d834      	bhi.n	800be88 <SD_ioctl+0x98>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <SD_ioctl+0x34>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800be35 	.word	0x0800be35
 800be28:	0800be3d 	.word	0x0800be3d
 800be2c:	0800be55 	.word	0x0800be55
 800be30:	0800be6f 	.word	0x0800be6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be3a:	e028      	b.n	800be8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be3c:	f107 0308 	add.w	r3, r7, #8
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff ff13 	bl	800bc6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be46:	6a3a      	ldr	r2, [r7, #32]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be52:	e01c      	b.n	800be8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be54:	f107 0308 	add.w	r3, r7, #8
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff ff07 	bl	800bc6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	b29a      	uxth	r2, r3
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be6c:	e00f      	b.n	800be8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be6e:	f107 0308 	add.w	r3, r7, #8
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fefa 	bl	800bc6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	0a5a      	lsrs	r2, r3, #9
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be86:	e002      	b.n	800be8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be88:	2304      	movs	r3, #4
 800be8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be92:	4618      	mov	r0, r3
 800be94:	3730      	adds	r7, #48	; 0x30
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000009 	.word	0x20000009

0800bea0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800beac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800beb0:	f005 f978 	bl	80111a4 <USBD_static_malloc>
 800beb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d105      	bne.n	800bec8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bec4:	2302      	movs	r3, #2
 800bec6:	e066      	b.n	800bf96 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7c1b      	ldrb	r3, [r3, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d119      	bne.n	800bf0c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bedc:	2202      	movs	r2, #2
 800bede:	2181      	movs	r1, #129	; 0x81
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f004 ff99 	bl	8010e18 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2201      	movs	r2, #1
 800beea:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800beec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bef0:	2202      	movs	r2, #2
 800bef2:	2101      	movs	r1, #1
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f004 ff8f 	bl	8010e18 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2210      	movs	r2, #16
 800bf06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bf0a:	e016      	b.n	800bf3a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	2202      	movs	r2, #2
 800bf10:	2181      	movs	r1, #129	; 0x81
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f004 ff80 	bl	8010e18 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf1e:	2340      	movs	r3, #64	; 0x40
 800bf20:	2202      	movs	r2, #2
 800bf22:	2101      	movs	r1, #1
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f004 ff77 	bl	8010e18 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2210      	movs	r2, #16
 800bf36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	2203      	movs	r2, #3
 800bf3e:	2182      	movs	r1, #130	; 0x82
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f004 ff69 	bl	8010e18 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7c1b      	ldrb	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d109      	bne.n	800bf84 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f005 f8c5 	bl	801110c <USBD_LL_PrepareReceive>
 800bf82:	e007      	b.n	800bf94 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf8a:	2340      	movs	r3, #64	; 0x40
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f005 f8bc 	bl	801110c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bfaa:	2181      	movs	r1, #129	; 0x81
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f004 ff71 	bl	8010e94 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bfb8:	2101      	movs	r1, #1
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f004 ff6a 	bl	8010e94 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bfc8:	2182      	movs	r1, #130	; 0x82
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f004 ff62 	bl	8010e94 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00e      	beq.n	800c008 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bffa:	4618      	mov	r0, r3
 800bffc:	f005 f8e0 	bl	80111c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c024:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c038:	2303      	movs	r3, #3
 800c03a:	e0af      	b.n	800c19c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c044:	2b00      	cmp	r3, #0
 800c046:	d03f      	beq.n	800c0c8 <USBD_CDC_Setup+0xb4>
 800c048:	2b20      	cmp	r3, #32
 800c04a:	f040 809f 	bne.w	800c18c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	88db      	ldrh	r3, [r3, #6]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d02e      	beq.n	800c0b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	b25b      	sxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	da16      	bge.n	800c08e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c06c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	88d2      	ldrh	r2, [r2, #6]
 800c072:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	88db      	ldrh	r3, [r3, #6]
 800c078:	2b07      	cmp	r3, #7
 800c07a:	bf28      	it	cs
 800c07c:	2307      	movcs	r3, #7
 800c07e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	89fa      	ldrh	r2, [r7, #14]
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 fb19 	bl	800d6be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c08c:	e085      	b.n	800c19a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	785a      	ldrb	r2, [r3, #1]
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c0a4:	6939      	ldr	r1, [r7, #16]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	88db      	ldrh	r3, [r3, #6]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 fb32 	bl	800d716 <USBD_CtlPrepareRx>
      break;
 800c0b2:	e072      	b.n	800c19a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	7850      	ldrb	r0, [r2, #1]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	4798      	blx	r3
      break;
 800c0c6:	e068      	b.n	800c19a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	785b      	ldrb	r3, [r3, #1]
 800c0cc:	2b0b      	cmp	r3, #11
 800c0ce:	d852      	bhi.n	800c176 <USBD_CDC_Setup+0x162>
 800c0d0:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <USBD_CDC_Setup+0xc4>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c109 	.word	0x0800c109
 800c0dc:	0800c185 	.word	0x0800c185
 800c0e0:	0800c177 	.word	0x0800c177
 800c0e4:	0800c177 	.word	0x0800c177
 800c0e8:	0800c177 	.word	0x0800c177
 800c0ec:	0800c177 	.word	0x0800c177
 800c0f0:	0800c177 	.word	0x0800c177
 800c0f4:	0800c177 	.word	0x0800c177
 800c0f8:	0800c177 	.word	0x0800c177
 800c0fc:	0800c177 	.word	0x0800c177
 800c100:	0800c133 	.word	0x0800c133
 800c104:	0800c15d 	.word	0x0800c15d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d107      	bne.n	800c124 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c114:	f107 030a 	add.w	r3, r7, #10
 800c118:	2202      	movs	r2, #2
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 face 	bl	800d6be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c122:	e032      	b.n	800c18a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f001 fa58 	bl	800d5dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c12c:	2303      	movs	r3, #3
 800c12e:	75fb      	strb	r3, [r7, #23]
          break;
 800c130:	e02b      	b.n	800c18a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d107      	bne.n	800c14e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c13e:	f107 030d 	add.w	r3, r7, #13
 800c142:	2201      	movs	r2, #1
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 fab9 	bl	800d6be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c14c:	e01d      	b.n	800c18a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 fa43 	bl	800d5dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c156:	2303      	movs	r3, #3
 800c158:	75fb      	strb	r3, [r7, #23]
          break;
 800c15a:	e016      	b.n	800c18a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b03      	cmp	r3, #3
 800c166:	d00f      	beq.n	800c188 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 fa36 	bl	800d5dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c174:	e008      	b.n	800c188 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f001 fa2f 	bl	800d5dc <USBD_CtlError>
          ret = USBD_FAIL;
 800c17e:	2303      	movs	r3, #3
 800c180:	75fb      	strb	r3, [r7, #23]
          break;
 800c182:	e002      	b.n	800c18a <USBD_CDC_Setup+0x176>
          break;
 800c184:	bf00      	nop
 800c186:	e008      	b.n	800c19a <USBD_CDC_Setup+0x186>
          break;
 800c188:	bf00      	nop
      }
      break;
 800c18a:	e006      	b.n	800c19a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fa24 	bl	800d5dc <USBD_CtlError>
      ret = USBD_FAIL;
 800c194:	2303      	movs	r3, #3
 800c196:	75fb      	strb	r3, [r7, #23]
      break;
 800c198:	bf00      	nop
  }

  return (uint8_t)ret;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e04f      	b.n	800c266 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	440b      	add	r3, r1
 800c1dc:	3318      	adds	r3, #24
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d029      	beq.n	800c238 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c1e4:	78fa      	ldrb	r2, [r7, #3]
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	3318      	adds	r3, #24
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	78f9      	ldrb	r1, [r7, #3]
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	440b      	add	r3, r1
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4403      	add	r3, r0
 800c204:	3348      	adds	r3, #72	; 0x48
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	fbb2 f1f3 	udiv	r1, r2, r3
 800c20c:	fb01 f303 	mul.w	r3, r1, r3
 800c210:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c212:	2b00      	cmp	r3, #0
 800c214:	d110      	bne.n	800c238 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c216:	78fa      	ldrb	r2, [r7, #3]
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	440b      	add	r3, r1
 800c224:	3318      	adds	r3, #24
 800c226:	2200      	movs	r2, #0
 800c228:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c22a:	78f9      	ldrb	r1, [r7, #3]
 800c22c:	2300      	movs	r3, #0
 800c22e:	2200      	movs	r2, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f004 ff33 	bl	801109c <USBD_LL_Transmit>
 800c236:	e015      	b.n	800c264 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d101      	bne.n	800c290 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e015      	b.n	800c2bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f004 ff71 	bl	801117c <USBD_LL_GetRxDataSize>
 800c29a:	4602      	mov	r2, r0
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e01b      	b.n	800c316 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d015      	beq.n	800c314 <USBD_CDC_EP0_RxReady+0x50>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2ee:	2bff      	cmp	r3, #255	; 0xff
 800c2f0:	d010      	beq.n	800c314 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c300:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c308:	b292      	uxth	r2, r2
 800c30a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	22ff      	movs	r2, #255	; 0xff
 800c310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2243      	movs	r2, #67	; 0x43
 800c32c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c32e:	4b03      	ldr	r3, [pc, #12]	; (800c33c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	20000094 	.word	0x20000094

0800c340 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2243      	movs	r2, #67	; 0x43
 800c34c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c34e:	4b03      	ldr	r3, [pc, #12]	; (800c35c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c350:	4618      	mov	r0, r3
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20000050 	.word	0x20000050

0800c360 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2243      	movs	r2, #67	; 0x43
 800c36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c36e:	4b03      	ldr	r3, [pc, #12]	; (800c37c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c370:	4618      	mov	r0, r3
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	200000d8 	.word	0x200000d8

0800c380 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	220a      	movs	r2, #10
 800c38c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c38e:	4b03      	ldr	r3, [pc, #12]	; (800c39c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c390:	4618      	mov	r0, r3
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	2000000c 	.word	0x2000000c

0800c3a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e004      	b.n	800c3be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e008      	b.n	800c3fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c406:	b480      	push	{r7}
 800c408:	b085      	sub	sp, #20
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c416:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c41e:	2303      	movs	r3, #3
 800c420:	e004      	b.n	800c42c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c446:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c448:	2301      	movs	r3, #1
 800c44a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c456:	2303      	movs	r3, #3
 800c458:	e01a      	b.n	800c490 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c460:	2b00      	cmp	r3, #0
 800c462:	d114      	bne.n	800c48e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2201      	movs	r2, #1
 800c468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c482:	2181      	movs	r1, #129	; 0x81
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f004 fe09 	bl	801109c <USBD_LL_Transmit>

    ret = USBD_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e016      	b.n	800c4e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7c1b      	ldrb	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f004 fe1e 	bl	801110c <USBD_LL_PrepareReceive>
 800c4d0:	e007      	b.n	800c4e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4d8:	2340      	movs	r3, #64	; 0x40
 800c4da:	2101      	movs	r1, #1
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f004 fe15 	bl	801110c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	e01f      	b.n	800c544 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	79fa      	ldrb	r2, [r7, #7]
 800c536:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f004 fbf1 	bl	8010d20 <USBD_LL_Init>
 800c53e:	4603      	mov	r3, r0
 800c540:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c542:	7dfb      	ldrb	r3, [r7, #23]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c556:	2300      	movs	r3, #0
 800c558:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	e016      	b.n	800c592 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00b      	beq.n	800c590 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	f107 020e 	add.w	r2, r7, #14
 800c584:	4610      	mov	r0, r2
 800c586:	4798      	blx	r3
 800c588:	4602      	mov	r2, r0
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f004 fc06 	bl	8010db4 <USBD_LL_Start>
 800c5a8:	4603      	mov	r3, r0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d009      	beq.n	800c5f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	78fa      	ldrb	r2, [r7, #3]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	460b      	mov	r3, r1
 800c60a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	4611      	mov	r1, r2
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	4798      	blx	r3
  }

  return USBD_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 ff90 	bl	800d568 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c664:	f003 031f 	and.w	r3, r3, #31
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d01a      	beq.n	800c6a2 <USBD_LL_SetupStage+0x72>
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d822      	bhi.n	800c6b6 <USBD_LL_SetupStage+0x86>
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <USBD_LL_SetupStage+0x4a>
 800c674:	2b01      	cmp	r3, #1
 800c676:	d00a      	beq.n	800c68e <USBD_LL_SetupStage+0x5e>
 800c678:	e01d      	b.n	800c6b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fa62 	bl	800cb4c <USBD_StdDevReq>
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]
      break;
 800c68c:	e020      	b.n	800c6d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fac6 	bl	800cc28 <USBD_StdItfReq>
 800c69c:	4603      	mov	r3, r0
 800c69e:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a0:	e016      	b.n	800c6d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fb05 	bl	800ccba <USBD_StdEPReq>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b4:	e00c      	b.n	800c6d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f004 fc1b 	bl	8010f00 <USBD_LL_StallEP>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ce:	bf00      	nop
  }

  return ret;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	607a      	str	r2, [r7, #4]
 800c6e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d138      	bne.n	800c760 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c6f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d14a      	bne.n	800c796 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d913      	bls.n	800c734 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	1ad2      	subs	r2, r2, r3
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	68da      	ldr	r2, [r3, #12]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	4293      	cmp	r3, r2
 800c724:	bf28      	it	cs
 800c726:	4613      	movcs	r3, r2
 800c728:	461a      	mov	r2, r3
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f001 f80f 	bl	800d750 <USBD_CtlContinueRx>
 800c732:	e030      	b.n	800c796 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d10b      	bne.n	800c758 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d005      	beq.n	800c758 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f001 f80a 	bl	800d772 <USBD_CtlSendStatus>
 800c75e:	e01a      	b.n	800c796 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d114      	bne.n	800c796 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00e      	beq.n	800c796 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	7afa      	ldrb	r2, [r7, #11]
 800c782:	4611      	mov	r1, r2
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	4798      	blx	r3
 800c788:	4603      	mov	r3, r0
 800c78a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	e000      	b.n	800c798 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	607a      	str	r2, [r7, #4]
 800c7ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d16b      	bne.n	800c88c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3314      	adds	r3, #20
 800c7b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d156      	bne.n	800c872 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	689a      	ldr	r2, [r3, #8]
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d914      	bls.n	800c7fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	689a      	ldr	r2, [r3, #8]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	1ad2      	subs	r2, r2, r3
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6879      	ldr	r1, [r7, #4]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 ff84 	bl	800d6f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f004 fc8a 	bl	801110c <USBD_LL_PrepareReceive>
 800c7f8:	e03b      	b.n	800c872 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	429a      	cmp	r2, r3
 800c804:	d11c      	bne.n	800c840 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c80e:	429a      	cmp	r2, r3
 800c810:	d316      	bcc.n	800c840 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d20f      	bcs.n	800c840 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c820:	2200      	movs	r2, #0
 800c822:	2100      	movs	r1, #0
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 ff65 	bl	800d6f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c832:	2300      	movs	r3, #0
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f004 fc67 	bl	801110c <USBD_LL_PrepareReceive>
 800c83e:	e018      	b.n	800c872 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d10b      	bne.n	800c864 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d005      	beq.n	800c864 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c864:	2180      	movs	r1, #128	; 0x80
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f004 fb4a 	bl	8010f00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 ff93 	bl	800d798 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d122      	bne.n	800c8c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f7ff fe98 	bl	800c5b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c88a:	e01a      	b.n	800c8c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b03      	cmp	r3, #3
 800c896:	d114      	bne.n	800c8c2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00e      	beq.n	800c8c2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	7afa      	ldrb	r2, [r7, #11]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	4798      	blx	r3
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	e000      	b.n	800c8c4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e02f      	b.n	800c960 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00f      	beq.n	800c92a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d009      	beq.n	800c92a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	6852      	ldr	r2, [r2, #4]
 800c922:	b2d2      	uxtb	r2, r2
 800c924:	4611      	mov	r1, r2
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c92a:	2340      	movs	r3, #64	; 0x40
 800c92c:	2200      	movs	r2, #0
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f004 fa71 	bl	8010e18 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2240      	movs	r2, #64	; 0x40
 800c942:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	2200      	movs	r2, #0
 800c94a:	2180      	movs	r1, #128	; 0x80
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f004 fa63 	bl	8010e18 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2240      	movs	r2, #64	; 0x40
 800c95c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	78fa      	ldrb	r2, [r7, #3]
 800c978:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c996:	b2da      	uxtb	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2204      	movs	r2, #4
 800c9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b04      	cmp	r3, #4
 800c9c6:	d106      	bne.n	800c9d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e012      	b.n	800ca20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d10b      	bne.n	800ca1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d005      	beq.n	800ca1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca18:	69db      	ldr	r3, [r3, #28]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e014      	b.n	800ca6c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d10d      	bne.n	800ca6a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d007      	beq.n	800ca6a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	78fa      	ldrb	r2, [r7, #3]
 800ca64:	4611      	mov	r1, r2
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e014      	b.n	800cab8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d10d      	bne.n	800cab6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d007      	beq.n	800cab6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	4611      	mov	r1, r2
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b082      	sub	sp, #8
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caec:	2b00      	cmp	r3, #0
 800caee:	d009      	beq.n	800cb04 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6852      	ldr	r2, [r2, #4]
 800cafc:	b2d2      	uxtb	r2, r2
 800cafe:	4611      	mov	r1, r2
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	4798      	blx	r3
  }

  return USBD_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b087      	sub	sp, #28
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	3301      	adds	r3, #1
 800cb24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb2c:	8a3b      	ldrh	r3, [r7, #16]
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	b21a      	sxth	r2, r3
 800cb32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	b21b      	sxth	r3, r3
 800cb3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb3c:	89fb      	ldrh	r3, [r7, #14]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
	...

0800cb4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb56:	2300      	movs	r3, #0
 800cb58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb62:	2b40      	cmp	r3, #64	; 0x40
 800cb64:	d005      	beq.n	800cb72 <USBD_StdDevReq+0x26>
 800cb66:	2b40      	cmp	r3, #64	; 0x40
 800cb68:	d853      	bhi.n	800cc12 <USBD_StdDevReq+0xc6>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00b      	beq.n	800cb86 <USBD_StdDevReq+0x3a>
 800cb6e:	2b20      	cmp	r3, #32
 800cb70:	d14f      	bne.n	800cc12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	4798      	blx	r3
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]
      break;
 800cb84:	e04a      	b.n	800cc1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	785b      	ldrb	r3, [r3, #1]
 800cb8a:	2b09      	cmp	r3, #9
 800cb8c:	d83b      	bhi.n	800cc06 <USBD_StdDevReq+0xba>
 800cb8e:	a201      	add	r2, pc, #4	; (adr r2, 800cb94 <USBD_StdDevReq+0x48>)
 800cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb94:	0800cbe9 	.word	0x0800cbe9
 800cb98:	0800cbfd 	.word	0x0800cbfd
 800cb9c:	0800cc07 	.word	0x0800cc07
 800cba0:	0800cbf3 	.word	0x0800cbf3
 800cba4:	0800cc07 	.word	0x0800cc07
 800cba8:	0800cbc7 	.word	0x0800cbc7
 800cbac:	0800cbbd 	.word	0x0800cbbd
 800cbb0:	0800cc07 	.word	0x0800cc07
 800cbb4:	0800cbdf 	.word	0x0800cbdf
 800cbb8:	0800cbd1 	.word	0x0800cbd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f9de 	bl	800cf80 <USBD_GetDescriptor>
          break;
 800cbc4:	e024      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fb43 	bl	800d254 <USBD_SetAddress>
          break;
 800cbce:	e01f      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fb82 	bl	800d2dc <USBD_SetConfig>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]
          break;
 800cbdc:	e018      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cbde:	6839      	ldr	r1, [r7, #0]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fc21 	bl	800d428 <USBD_GetConfig>
          break;
 800cbe6:	e013      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fc52 	bl	800d494 <USBD_GetStatus>
          break;
 800cbf0:	e00e      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fc81 	bl	800d4fc <USBD_SetFeature>
          break;
 800cbfa:	e009      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fc90 	bl	800d524 <USBD_ClrFeature>
          break;
 800cc04:	e004      	b.n	800cc10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fce7 	bl	800d5dc <USBD_CtlError>
          break;
 800cc0e:	bf00      	nop
      }
      break;
 800cc10:	e004      	b.n	800cc1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fce1 	bl	800d5dc <USBD_CtlError>
      break;
 800cc1a:	bf00      	nop
  }

  return ret;
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop

0800cc28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc3e:	2b40      	cmp	r3, #64	; 0x40
 800cc40:	d005      	beq.n	800cc4e <USBD_StdItfReq+0x26>
 800cc42:	2b40      	cmp	r3, #64	; 0x40
 800cc44:	d82f      	bhi.n	800cca6 <USBD_StdItfReq+0x7e>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <USBD_StdItfReq+0x26>
 800cc4a:	2b20      	cmp	r3, #32
 800cc4c:	d12b      	bne.n	800cca6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	3b01      	subs	r3, #1
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d81d      	bhi.n	800cc98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	889b      	ldrh	r3, [r3, #4]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d813      	bhi.n	800cc8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	4798      	blx	r3
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	88db      	ldrh	r3, [r3, #6]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d110      	bne.n	800cca2 <USBD_StdItfReq+0x7a>
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10d      	bne.n	800cca2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fd73 	bl	800d772 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc8c:	e009      	b.n	800cca2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fca3 	bl	800d5dc <USBD_CtlError>
          break;
 800cc96:	e004      	b.n	800cca2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fc9e 	bl	800d5dc <USBD_CtlError>
          break;
 800cca0:	e000      	b.n	800cca4 <USBD_StdItfReq+0x7c>
          break;
 800cca2:	bf00      	nop
      }
      break;
 800cca4:	e004      	b.n	800ccb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fc97 	bl	800d5dc <USBD_CtlError>
      break;
 800ccae:	bf00      	nop
  }

  return ret;
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	889b      	ldrh	r3, [r3, #4]
 800cccc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccd6:	2b40      	cmp	r3, #64	; 0x40
 800ccd8:	d007      	beq.n	800ccea <USBD_StdEPReq+0x30>
 800ccda:	2b40      	cmp	r3, #64	; 0x40
 800ccdc:	f200 8145 	bhi.w	800cf6a <USBD_StdEPReq+0x2b0>
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00c      	beq.n	800ccfe <USBD_StdEPReq+0x44>
 800cce4:	2b20      	cmp	r3, #32
 800cce6:	f040 8140 	bne.w	800cf6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	4798      	blx	r3
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
      break;
 800ccfc:	e13a      	b.n	800cf74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	785b      	ldrb	r3, [r3, #1]
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d007      	beq.n	800cd16 <USBD_StdEPReq+0x5c>
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	f300 8129 	bgt.w	800cf5e <USBD_StdEPReq+0x2a4>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d07f      	beq.n	800ce10 <USBD_StdEPReq+0x156>
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d03c      	beq.n	800cd8e <USBD_StdEPReq+0xd4>
 800cd14:	e123      	b.n	800cf5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d002      	beq.n	800cd28 <USBD_StdEPReq+0x6e>
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d016      	beq.n	800cd54 <USBD_StdEPReq+0x9a>
 800cd26:	e02c      	b.n	800cd82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00d      	beq.n	800cd4a <USBD_StdEPReq+0x90>
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	2b80      	cmp	r3, #128	; 0x80
 800cd32:	d00a      	beq.n	800cd4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f004 f8e1 	bl	8010f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd3e:	2180      	movs	r1, #128	; 0x80
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f004 f8dd 	bl	8010f00 <USBD_LL_StallEP>
 800cd46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd48:	e020      	b.n	800cd8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fc45 	bl	800d5dc <USBD_CtlError>
              break;
 800cd52:	e01b      	b.n	800cd8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	885b      	ldrh	r3, [r3, #2]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10e      	bne.n	800cd7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00b      	beq.n	800cd7a <USBD_StdEPReq+0xc0>
 800cd62:	7bbb      	ldrb	r3, [r7, #14]
 800cd64:	2b80      	cmp	r3, #128	; 0x80
 800cd66:	d008      	beq.n	800cd7a <USBD_StdEPReq+0xc0>
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	88db      	ldrh	r3, [r3, #6]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f004 f8c3 	bl	8010f00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fcf9 	bl	800d772 <USBD_CtlSendStatus>

              break;
 800cd80:	e004      	b.n	800cd8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cd82:	6839      	ldr	r1, [r7, #0]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fc29 	bl	800d5dc <USBD_CtlError>
              break;
 800cd8a:	bf00      	nop
          }
          break;
 800cd8c:	e0ec      	b.n	800cf68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d002      	beq.n	800cda0 <USBD_StdEPReq+0xe6>
 800cd9a:	2b03      	cmp	r3, #3
 800cd9c:	d016      	beq.n	800cdcc <USBD_StdEPReq+0x112>
 800cd9e:	e030      	b.n	800ce02 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00d      	beq.n	800cdc2 <USBD_StdEPReq+0x108>
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
 800cda8:	2b80      	cmp	r3, #128	; 0x80
 800cdaa:	d00a      	beq.n	800cdc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdac:	7bbb      	ldrb	r3, [r7, #14]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f004 f8a5 	bl	8010f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdb6:	2180      	movs	r1, #128	; 0x80
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f004 f8a1 	bl	8010f00 <USBD_LL_StallEP>
 800cdbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdc0:	e025      	b.n	800ce0e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fc09 	bl	800d5dc <USBD_CtlError>
              break;
 800cdca:	e020      	b.n	800ce0e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	885b      	ldrh	r3, [r3, #2]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d11b      	bne.n	800ce0c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f004 f8c2 	bl	8010f6c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fcc2 	bl	800d772 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	4798      	blx	r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ce00:	e004      	b.n	800ce0c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fbe9 	bl	800d5dc <USBD_CtlError>
              break;
 800ce0a:	e000      	b.n	800ce0e <USBD_StdEPReq+0x154>
              break;
 800ce0c:	bf00      	nop
          }
          break;
 800ce0e:	e0ab      	b.n	800cf68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d002      	beq.n	800ce22 <USBD_StdEPReq+0x168>
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d032      	beq.n	800ce86 <USBD_StdEPReq+0x1cc>
 800ce20:	e097      	b.n	800cf52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d007      	beq.n	800ce38 <USBD_StdEPReq+0x17e>
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b80      	cmp	r3, #128	; 0x80
 800ce2c:	d004      	beq.n	800ce38 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fbd3 	bl	800d5dc <USBD_CtlError>
                break;
 800ce36:	e091      	b.n	800cf5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	da0b      	bge.n	800ce58 <USBD_StdEPReq+0x19e>
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce46:	4613      	mov	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	3310      	adds	r3, #16
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	4413      	add	r3, r2
 800ce54:	3304      	adds	r3, #4
 800ce56:	e00b      	b.n	800ce70 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	3304      	adds	r3, #4
 800ce70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fc1d 	bl	800d6be <USBD_CtlSendData>
              break;
 800ce84:	e06a      	b.n	800cf5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	da11      	bge.n	800ceb2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	f003 020f 	and.w	r2, r3, #15
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	3324      	adds	r3, #36	; 0x24
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d117      	bne.n	800ced8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fb96 	bl	800d5dc <USBD_CtlError>
                  break;
 800ceb0:	e054      	b.n	800cf5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	f003 020f 	and.w	r2, r3, #15
 800ceb8:	6879      	ldr	r1, [r7, #4]
 800ceba:	4613      	mov	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4413      	add	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	440b      	add	r3, r1
 800cec4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d104      	bne.n	800ced8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fb83 	bl	800d5dc <USBD_CtlError>
                  break;
 800ced6:	e041      	b.n	800cf5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ced8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	da0b      	bge.n	800cef8 <USBD_StdEPReq+0x23e>
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	3310      	adds	r3, #16
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	4413      	add	r3, r2
 800cef4:	3304      	adds	r3, #4
 800cef6:	e00b      	b.n	800cf10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cef8:	7bbb      	ldrb	r3, [r7, #14]
 800cefa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	3304      	adds	r3, #4
 800cf10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf12:	7bbb      	ldrb	r3, [r7, #14]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <USBD_StdEPReq+0x264>
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b80      	cmp	r3, #128	; 0x80
 800cf1c:	d103      	bne.n	800cf26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	e00e      	b.n	800cf44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf26:	7bbb      	ldrb	r3, [r7, #14]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f004 f854 	bl	8010fd8 <USBD_LL_IsStallEP>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	e002      	b.n	800cf44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2202      	movs	r2, #2
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fbb7 	bl	800d6be <USBD_CtlSendData>
              break;
 800cf50:	e004      	b.n	800cf5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fb41 	bl	800d5dc <USBD_CtlError>
              break;
 800cf5a:	bf00      	nop
          }
          break;
 800cf5c:	e004      	b.n	800cf68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cf5e:	6839      	ldr	r1, [r7, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fb3b 	bl	800d5dc <USBD_CtlError>
          break;
 800cf66:	bf00      	nop
      }
      break;
 800cf68:	e004      	b.n	800cf74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fb35 	bl	800d5dc <USBD_CtlError>
      break;
 800cf72:	bf00      	nop
  }

  return ret;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf92:	2300      	movs	r3, #0
 800cf94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	885b      	ldrh	r3, [r3, #2]
 800cf9a:	0a1b      	lsrs	r3, r3, #8
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	2b06      	cmp	r3, #6
 800cfa2:	f200 8128 	bhi.w	800d1f6 <USBD_GetDescriptor+0x276>
 800cfa6:	a201      	add	r2, pc, #4	; (adr r2, 800cfac <USBD_GetDescriptor+0x2c>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800cfc9 	.word	0x0800cfc9
 800cfb0:	0800cfe1 	.word	0x0800cfe1
 800cfb4:	0800d021 	.word	0x0800d021
 800cfb8:	0800d1f7 	.word	0x0800d1f7
 800cfbc:	0800d1f7 	.word	0x0800d1f7
 800cfc0:	0800d197 	.word	0x0800d197
 800cfc4:	0800d1c3 	.word	0x0800d1c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	7c12      	ldrb	r2, [r2, #16]
 800cfd4:	f107 0108 	add.w	r1, r7, #8
 800cfd8:	4610      	mov	r0, r2
 800cfda:	4798      	blx	r3
 800cfdc:	60f8      	str	r0, [r7, #12]
      break;
 800cfde:	e112      	b.n	800d206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	7c1b      	ldrb	r3, [r3, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10d      	bne.n	800d004 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	f107 0208 	add.w	r2, r7, #8
 800cff4:	4610      	mov	r0, r2
 800cff6:	4798      	blx	r3
 800cff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3301      	adds	r3, #1
 800cffe:	2202      	movs	r2, #2
 800d000:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d002:	e100      	b.n	800d206 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00c:	f107 0208 	add.w	r2, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	3301      	adds	r3, #1
 800d01a:	2202      	movs	r2, #2
 800d01c:	701a      	strb	r2, [r3, #0]
      break;
 800d01e:	e0f2      	b.n	800d206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	885b      	ldrh	r3, [r3, #2]
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b05      	cmp	r3, #5
 800d028:	f200 80ac 	bhi.w	800d184 <USBD_GetDescriptor+0x204>
 800d02c:	a201      	add	r2, pc, #4	; (adr r2, 800d034 <USBD_GetDescriptor+0xb4>)
 800d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d032:	bf00      	nop
 800d034:	0800d04d 	.word	0x0800d04d
 800d038:	0800d081 	.word	0x0800d081
 800d03c:	0800d0b5 	.word	0x0800d0b5
 800d040:	0800d0e9 	.word	0x0800d0e9
 800d044:	0800d11d 	.word	0x0800d11d
 800d048:	0800d151 	.word	0x0800d151
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00b      	beq.n	800d070 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	7c12      	ldrb	r2, [r2, #16]
 800d064:	f107 0108 	add.w	r1, r7, #8
 800d068:	4610      	mov	r0, r2
 800d06a:	4798      	blx	r3
 800d06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d06e:	e091      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fab2 	bl	800d5dc <USBD_CtlError>
            err++;
 800d078:	7afb      	ldrb	r3, [r7, #11]
 800d07a:	3301      	adds	r3, #1
 800d07c:	72fb      	strb	r3, [r7, #11]
          break;
 800d07e:	e089      	b.n	800d194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00b      	beq.n	800d0a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	7c12      	ldrb	r2, [r2, #16]
 800d098:	f107 0108 	add.w	r1, r7, #8
 800d09c:	4610      	mov	r0, r2
 800d09e:	4798      	blx	r3
 800d0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0a2:	e077      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fa98 	bl	800d5dc <USBD_CtlError>
            err++;
 800d0ac:	7afb      	ldrb	r3, [r7, #11]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0b2:	e06f      	b.n	800d194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	7c12      	ldrb	r2, [r2, #16]
 800d0cc:	f107 0108 	add.w	r1, r7, #8
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	4798      	blx	r3
 800d0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0d6:	e05d      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fa7e 	bl	800d5dc <USBD_CtlError>
            err++;
 800d0e0:	7afb      	ldrb	r3, [r7, #11]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d0e6:	e055      	b.n	800d194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00b      	beq.n	800d10c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	7c12      	ldrb	r2, [r2, #16]
 800d100:	f107 0108 	add.w	r1, r7, #8
 800d104:	4610      	mov	r0, r2
 800d106:	4798      	blx	r3
 800d108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d10a:	e043      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fa64 	bl	800d5dc <USBD_CtlError>
            err++;
 800d114:	7afb      	ldrb	r3, [r7, #11]
 800d116:	3301      	adds	r3, #1
 800d118:	72fb      	strb	r3, [r7, #11]
          break;
 800d11a:	e03b      	b.n	800d194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00b      	beq.n	800d140 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	7c12      	ldrb	r2, [r2, #16]
 800d134:	f107 0108 	add.w	r1, r7, #8
 800d138:	4610      	mov	r0, r2
 800d13a:	4798      	blx	r3
 800d13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d13e:	e029      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fa4a 	bl	800d5dc <USBD_CtlError>
            err++;
 800d148:	7afb      	ldrb	r3, [r7, #11]
 800d14a:	3301      	adds	r3, #1
 800d14c:	72fb      	strb	r3, [r7, #11]
          break;
 800d14e:	e021      	b.n	800d194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	7c12      	ldrb	r2, [r2, #16]
 800d168:	f107 0108 	add.w	r1, r7, #8
 800d16c:	4610      	mov	r0, r2
 800d16e:	4798      	blx	r3
 800d170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d172:	e00f      	b.n	800d194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fa30 	bl	800d5dc <USBD_CtlError>
            err++;
 800d17c:	7afb      	ldrb	r3, [r7, #11]
 800d17e:	3301      	adds	r3, #1
 800d180:	72fb      	strb	r3, [r7, #11]
          break;
 800d182:	e007      	b.n	800d194 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fa28 	bl	800d5dc <USBD_CtlError>
          err++;
 800d18c:	7afb      	ldrb	r3, [r7, #11]
 800d18e:	3301      	adds	r3, #1
 800d190:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d192:	bf00      	nop
      }
      break;
 800d194:	e037      	b.n	800d206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7c1b      	ldrb	r3, [r3, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d109      	bne.n	800d1b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a6:	f107 0208 	add.w	r2, r7, #8
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	4798      	blx	r3
 800d1ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1b0:	e029      	b.n	800d206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fa11 	bl	800d5dc <USBD_CtlError>
        err++;
 800d1ba:	7afb      	ldrb	r3, [r7, #11]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	72fb      	strb	r3, [r7, #11]
      break;
 800d1c0:	e021      	b.n	800d206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	7c1b      	ldrb	r3, [r3, #16]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10d      	bne.n	800d1e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d2:	f107 0208 	add.w	r2, r7, #8
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4798      	blx	r3
 800d1da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1e4:	e00f      	b.n	800d206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f9f7 	bl	800d5dc <USBD_CtlError>
        err++;
 800d1ee:	7afb      	ldrb	r3, [r7, #11]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d1f4:	e007      	b.n	800d206 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f9ef 	bl	800d5dc <USBD_CtlError>
      err++;
 800d1fe:	7afb      	ldrb	r3, [r7, #11]
 800d200:	3301      	adds	r3, #1
 800d202:	72fb      	strb	r3, [r7, #11]
      break;
 800d204:	bf00      	nop
  }

  if (err != 0U)
 800d206:	7afb      	ldrb	r3, [r7, #11]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d11e      	bne.n	800d24a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	88db      	ldrh	r3, [r3, #6]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d016      	beq.n	800d242 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d214:	893b      	ldrh	r3, [r7, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00e      	beq.n	800d238 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	88da      	ldrh	r2, [r3, #6]
 800d21e:	893b      	ldrh	r3, [r7, #8]
 800d220:	4293      	cmp	r3, r2
 800d222:	bf28      	it	cs
 800d224:	4613      	movcs	r3, r2
 800d226:	b29b      	uxth	r3, r3
 800d228:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d22a:	893b      	ldrh	r3, [r7, #8]
 800d22c:	461a      	mov	r2, r3
 800d22e:	68f9      	ldr	r1, [r7, #12]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fa44 	bl	800d6be <USBD_CtlSendData>
 800d236:	e009      	b.n	800d24c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f9ce 	bl	800d5dc <USBD_CtlError>
 800d240:	e004      	b.n	800d24c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fa95 	bl	800d772 <USBD_CtlSendStatus>
 800d248:	e000      	b.n	800d24c <USBD_GetDescriptor+0x2cc>
    return;
 800d24a:	bf00      	nop
  }
}
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop

0800d254 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	889b      	ldrh	r3, [r3, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d131      	bne.n	800d2ca <USBD_SetAddress+0x76>
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	88db      	ldrh	r3, [r3, #6]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d12d      	bne.n	800d2ca <USBD_SetAddress+0x76>
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	885b      	ldrh	r3, [r3, #2]
 800d272:	2b7f      	cmp	r3, #127	; 0x7f
 800d274:	d829      	bhi.n	800d2ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	885b      	ldrh	r3, [r3, #2]
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d280:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d104      	bne.n	800d298 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f9a3 	bl	800d5dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d296:	e01d      	b.n	800d2d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7bfa      	ldrb	r2, [r7, #15]
 800d29c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f003 fec3 	bl	8011030 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fa61 	bl	800d772 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d004      	beq.n	800d2c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2202      	movs	r2, #2
 800d2ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2be:	e009      	b.n	800d2d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c8:	e004      	b.n	800d2d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f985 	bl	800d5dc <USBD_CtlError>
  }
}
 800d2d2:	bf00      	nop
 800d2d4:	bf00      	nop
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	885b      	ldrh	r3, [r3, #2]
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	4b4c      	ldr	r3, [pc, #304]	; (800d424 <USBD_SetConfig+0x148>)
 800d2f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2f4:	4b4b      	ldr	r3, [pc, #300]	; (800d424 <USBD_SetConfig+0x148>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d905      	bls.n	800d308 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f96c 	bl	800d5dc <USBD_CtlError>
    return USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e088      	b.n	800d41a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b02      	cmp	r3, #2
 800d312:	d002      	beq.n	800d31a <USBD_SetConfig+0x3e>
 800d314:	2b03      	cmp	r3, #3
 800d316:	d025      	beq.n	800d364 <USBD_SetConfig+0x88>
 800d318:	e071      	b.n	800d3fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d31a:	4b42      	ldr	r3, [pc, #264]	; (800d424 <USBD_SetConfig+0x148>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d01c      	beq.n	800d35c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d322:	4b40      	ldr	r3, [pc, #256]	; (800d424 <USBD_SetConfig+0x148>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	461a      	mov	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d32c:	4b3d      	ldr	r3, [pc, #244]	; (800d424 <USBD_SetConfig+0x148>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff f948 	bl	800c5c8 <USBD_SetClassConfig>
 800d338:	4603      	mov	r3, r0
 800d33a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d004      	beq.n	800d34c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 f949 	bl	800d5dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d34a:	e065      	b.n	800d418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa10 	bl	800d772 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2203      	movs	r2, #3
 800d356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d35a:	e05d      	b.n	800d418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fa08 	bl	800d772 <USBD_CtlSendStatus>
      break;
 800d362:	e059      	b.n	800d418 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d364:	4b2f      	ldr	r3, [pc, #188]	; (800d424 <USBD_SetConfig+0x148>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d112      	bne.n	800d392 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2202      	movs	r2, #2
 800d370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d374:	4b2b      	ldr	r3, [pc, #172]	; (800d424 <USBD_SetConfig+0x148>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	461a      	mov	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d37e:	4b29      	ldr	r3, [pc, #164]	; (800d424 <USBD_SetConfig+0x148>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff f93b 	bl	800c600 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f9f1 	bl	800d772 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d390:	e042      	b.n	800d418 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d392:	4b24      	ldr	r3, [pc, #144]	; (800d424 <USBD_SetConfig+0x148>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	461a      	mov	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d02a      	beq.n	800d3f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff f929 	bl	800c600 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d3ae:	4b1d      	ldr	r3, [pc, #116]	; (800d424 <USBD_SetConfig+0x148>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3b8:	4b1a      	ldr	r3, [pc, #104]	; (800d424 <USBD_SetConfig+0x148>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff f902 	bl	800c5c8 <USBD_SetClassConfig>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00f      	beq.n	800d3ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f903 	bl	800d5dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	4619      	mov	r1, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff f90e 	bl	800c600 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3ec:	e014      	b.n	800d418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f9bf 	bl	800d772 <USBD_CtlSendStatus>
      break;
 800d3f4:	e010      	b.n	800d418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f9bb 	bl	800d772 <USBD_CtlSendStatus>
      break;
 800d3fc:	e00c      	b.n	800d418 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f8eb 	bl	800d5dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d406:	4b07      	ldr	r3, [pc, #28]	; (800d424 <USBD_SetConfig+0x148>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff f8f7 	bl	800c600 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d412:	2303      	movs	r3, #3
 800d414:	73fb      	strb	r3, [r7, #15]
      break;
 800d416:	bf00      	nop
  }

  return ret;
 800d418:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	20000a60 	.word	0x20000a60

0800d428 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	88db      	ldrh	r3, [r3, #6]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d004      	beq.n	800d444 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f8cd 	bl	800d5dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d442:	e023      	b.n	800d48c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	dc02      	bgt.n	800d456 <USBD_GetConfig+0x2e>
 800d450:	2b00      	cmp	r3, #0
 800d452:	dc03      	bgt.n	800d45c <USBD_GetConfig+0x34>
 800d454:	e015      	b.n	800d482 <USBD_GetConfig+0x5a>
 800d456:	2b03      	cmp	r3, #3
 800d458:	d00b      	beq.n	800d472 <USBD_GetConfig+0x4a>
 800d45a:	e012      	b.n	800d482 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3308      	adds	r3, #8
 800d466:	2201      	movs	r2, #1
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f927 	bl	800d6be <USBD_CtlSendData>
        break;
 800d470:	e00c      	b.n	800d48c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	3304      	adds	r3, #4
 800d476:	2201      	movs	r2, #1
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f91f 	bl	800d6be <USBD_CtlSendData>
        break;
 800d480:	e004      	b.n	800d48c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f8a9 	bl	800d5dc <USBD_CtlError>
        break;
 800d48a:	bf00      	nop
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d81e      	bhi.n	800d4ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	88db      	ldrh	r3, [r3, #6]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d004      	beq.n	800d4be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f890 	bl	800d5dc <USBD_CtlError>
        break;
 800d4bc:	e01a      	b.n	800d4f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f043 0202 	orr.w	r2, r3, #2
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	330c      	adds	r3, #12
 800d4de:	2202      	movs	r2, #2
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f8eb 	bl	800d6be <USBD_CtlSendData>
      break;
 800d4e8:	e004      	b.n	800d4f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f875 	bl	800d5dc <USBD_CtlError>
      break;
 800d4f2:	bf00      	nop
  }
}
 800d4f4:	bf00      	nop
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	885b      	ldrh	r3, [r3, #2]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d106      	bne.n	800d51c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2201      	movs	r2, #1
 800d512:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f92b 	bl	800d772 <USBD_CtlSendStatus>
  }
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d534:	b2db      	uxtb	r3, r3
 800d536:	3b01      	subs	r3, #1
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d80b      	bhi.n	800d554 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	885b      	ldrh	r3, [r3, #2]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d10c      	bne.n	800d55e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f910 	bl	800d772 <USBD_CtlSendStatus>
      }
      break;
 800d552:	e004      	b.n	800d55e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f840 	bl	800d5dc <USBD_CtlError>
      break;
 800d55c:	e000      	b.n	800d560 <USBD_ClrFeature+0x3c>
      break;
 800d55e:	bf00      	nop
  }
}
 800d560:	bf00      	nop
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	781a      	ldrb	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3301      	adds	r3, #1
 800d582:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	781a      	ldrb	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	3301      	adds	r3, #1
 800d590:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7ff fabb 	bl	800cb0e <SWAPBYTE>
 800d598:	4603      	mov	r3, r0
 800d59a:	461a      	mov	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff faae 	bl	800cb0e <SWAPBYTE>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff faa1 	bl	800cb0e <SWAPBYTE>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	80da      	strh	r2, [r3, #6]
}
 800d5d4:	bf00      	nop
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5e6:	2180      	movs	r1, #128	; 0x80
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f003 fc89 	bl	8010f00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f003 fc85 	bl	8010f00 <USBD_LL_StallEP>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b086      	sub	sp, #24
 800d602:	af00      	add	r7, sp, #0
 800d604:	60f8      	str	r0, [r7, #12]
 800d606:	60b9      	str	r1, [r7, #8]
 800d608:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d036      	beq.n	800d682 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d618:	6938      	ldr	r0, [r7, #16]
 800d61a:	f000 f836 	bl	800d68a <USBD_GetLen>
 800d61e:	4603      	mov	r3, r0
 800d620:	3301      	adds	r3, #1
 800d622:	b29b      	uxth	r3, r3
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	b29a      	uxth	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	4413      	add	r3, r2
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	7812      	ldrb	r2, [r2, #0]
 800d636:	701a      	strb	r2, [r3, #0]
  idx++;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	3301      	adds	r3, #1
 800d63c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	4413      	add	r3, r2
 800d644:	2203      	movs	r2, #3
 800d646:	701a      	strb	r2, [r3, #0]
  idx++;
 800d648:	7dfb      	ldrb	r3, [r7, #23]
 800d64a:	3301      	adds	r3, #1
 800d64c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d64e:	e013      	b.n	800d678 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	4413      	add	r3, r2
 800d656:	693a      	ldr	r2, [r7, #16]
 800d658:	7812      	ldrb	r2, [r2, #0]
 800d65a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	3301      	adds	r3, #1
 800d660:	613b      	str	r3, [r7, #16]
    idx++;
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	3301      	adds	r3, #1
 800d666:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	4413      	add	r3, r2
 800d66e:	2200      	movs	r2, #0
 800d670:	701a      	strb	r2, [r3, #0]
    idx++;
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	3301      	adds	r3, #1
 800d676:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e7      	bne.n	800d650 <USBD_GetString+0x52>
 800d680:	e000      	b.n	800d684 <USBD_GetString+0x86>
    return;
 800d682:	bf00      	nop
  }
}
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b085      	sub	sp, #20
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d69a:	e005      	b.n	800d6a8 <USBD_GetLen+0x1e>
  {
    len++;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1f5      	bne.n	800d69c <USBD_GetLen+0x12>
  }

  return len;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr

0800d6be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f003 fcd9 	bl	801109c <USBD_LL_Transmit>

  return USBD_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	2100      	movs	r1, #0
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f003 fcc8 	bl	801109c <USBD_LL_Transmit>

  return USBD_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	60f8      	str	r0, [r7, #12]
 800d71e:	60b9      	str	r1, [r7, #8]
 800d720:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2203      	movs	r2, #3
 800d726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	2100      	movs	r1, #0
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f003 fce3 	bl	801110c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	2100      	movs	r1, #0
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f003 fcd2 	bl	801110c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2204      	movs	r2, #4
 800d77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d782:	2300      	movs	r3, #0
 800d784:	2200      	movs	r2, #0
 800d786:	2100      	movs	r1, #0
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f003 fc87 	bl	801109c <USBD_LL_Transmit>

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2205      	movs	r2, #5
 800d7a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f003 fcac 	bl	801110c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
	...

0800d7c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	4a08      	ldr	r2, [pc, #32]	; (800d7f0 <disk_status+0x30>)
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	79fa      	ldrb	r2, [r7, #7]
 800d7d8:	4905      	ldr	r1, [pc, #20]	; (800d7f0 <disk_status+0x30>)
 800d7da:	440a      	add	r2, r1
 800d7dc:	7a12      	ldrb	r2, [r2, #8]
 800d7de:	4610      	mov	r0, r2
 800d7e0:	4798      	blx	r3
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	20000a8c 	.word	0x20000a8c

0800d7f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	4a0d      	ldr	r2, [pc, #52]	; (800d83c <disk_initialize+0x48>)
 800d806:	5cd3      	ldrb	r3, [r2, r3]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d111      	bne.n	800d830 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	4a0b      	ldr	r2, [pc, #44]	; (800d83c <disk_initialize+0x48>)
 800d810:	2101      	movs	r1, #1
 800d812:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d814:	79fb      	ldrb	r3, [r7, #7]
 800d816:	4a09      	ldr	r2, [pc, #36]	; (800d83c <disk_initialize+0x48>)
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	79fa      	ldrb	r2, [r7, #7]
 800d822:	4906      	ldr	r1, [pc, #24]	; (800d83c <disk_initialize+0x48>)
 800d824:	440a      	add	r2, r1
 800d826:	7a12      	ldrb	r2, [r2, #8]
 800d828:	4610      	mov	r0, r2
 800d82a:	4798      	blx	r3
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d830:	7bfb      	ldrb	r3, [r7, #15]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20000a8c 	.word	0x20000a8c

0800d840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b087      	sub	sp, #28
 800d844:	af00      	add	r7, sp, #0
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	4a0a      	ldr	r2, [pc, #40]	; (800d87c <disk_read+0x3c>)
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	689c      	ldr	r4, [r3, #8]
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	4a07      	ldr	r2, [pc, #28]	; (800d87c <disk_read+0x3c>)
 800d860:	4413      	add	r3, r2
 800d862:	7a18      	ldrb	r0, [r3, #8]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	47a0      	blx	r4
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d870:	7dfb      	ldrb	r3, [r7, #23]
}
 800d872:	4618      	mov	r0, r3
 800d874:	371c      	adds	r7, #28
 800d876:	46bd      	mov	sp, r7
 800d878:	bd90      	pop	{r4, r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20000a8c 	.word	0x20000a8c

0800d880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	4a0a      	ldr	r2, [pc, #40]	; (800d8bc <disk_write+0x3c>)
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68dc      	ldr	r4, [r3, #12]
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	4a07      	ldr	r2, [pc, #28]	; (800d8bc <disk_write+0x3c>)
 800d8a0:	4413      	add	r3, r2
 800d8a2:	7a18      	ldrb	r0, [r3, #8]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	68b9      	ldr	r1, [r7, #8]
 800d8aa:	47a0      	blx	r4
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	371c      	adds	r7, #28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd90      	pop	{r4, r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000a8c 	.word	0x20000a8c

0800d8c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	603a      	str	r2, [r7, #0]
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	4a09      	ldr	r2, [pc, #36]	; (800d8f8 <disk_ioctl+0x38>)
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	4906      	ldr	r1, [pc, #24]	; (800d8f8 <disk_ioctl+0x38>)
 800d8e0:	440a      	add	r2, r1
 800d8e2:	7a10      	ldrb	r0, [r2, #8]
 800d8e4:	79b9      	ldrb	r1, [r7, #6]
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	4798      	blx	r3
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20000a8c 	.word	0x20000a8c

0800d8fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3301      	adds	r3, #1
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d90c:	89fb      	ldrh	r3, [r7, #14]
 800d90e:	021b      	lsls	r3, r3, #8
 800d910:	b21a      	sxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b21b      	sxth	r3, r3
 800d918:	4313      	orrs	r3, r2
 800d91a:	b21b      	sxth	r3, r3
 800d91c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d91e:	89fb      	ldrh	r3, [r7, #14]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3303      	adds	r3, #3
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	021b      	lsls	r3, r3, #8
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	3202      	adds	r2, #2
 800d944:	7812      	ldrb	r2, [r2, #0]
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	3201      	adds	r2, #1
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	4313      	orrs	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	4313      	orrs	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
	return rv;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	887a      	ldrh	r2, [r7, #2]
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	887b      	ldrh	r3, [r7, #2]
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	607a      	str	r2, [r7, #4]
 800d996:	887a      	ldrh	r2, [r7, #2]
 800d998:	b2d2      	uxtb	r2, r2
 800d99a:	701a      	strb	r2, [r3, #0]
}
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	1c5a      	adds	r2, r3, #1
 800d9b6:	607a      	str	r2, [r7, #4]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	b2d2      	uxtb	r2, r2
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	0a1b      	lsrs	r3, r3, #8
 800d9c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	607a      	str	r2, [r7, #4]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	b2d2      	uxtb	r2, r2
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	b2d2      	uxtb	r2, r2
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	0a1b      	lsrs	r3, r3, #8
 800d9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	b2d2      	uxtb	r2, r2
 800d9f2:	701a      	strb	r2, [r3, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00d      	beq.n	800da36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	1c53      	adds	r3, r2, #1
 800da1e:	613b      	str	r3, [r7, #16]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	1c59      	adds	r1, r3, #1
 800da24:	6179      	str	r1, [r7, #20]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	607b      	str	r3, [r7, #4]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1f1      	bne.n	800da1a <mem_cpy+0x1a>
	}
}
 800da36:	bf00      	nop
 800da38:	371c      	adds	r7, #28
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800da42:	b480      	push	{r7}
 800da44:	b087      	sub	sp, #28
 800da46:	af00      	add	r7, sp, #0
 800da48:	60f8      	str	r0, [r7, #12]
 800da4a:	60b9      	str	r1, [r7, #8]
 800da4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	617a      	str	r2, [r7, #20]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	b2d2      	uxtb	r2, r2
 800da5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	3b01      	subs	r3, #1
 800da62:	607b      	str	r3, [r7, #4]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f3      	bne.n	800da52 <mem_set+0x10>
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	371c      	adds	r7, #28
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800da78:	b480      	push	{r7}
 800da7a:	b089      	sub	sp, #36	; 0x24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	61fb      	str	r3, [r7, #28]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	61fa      	str	r2, [r7, #28]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	4619      	mov	r1, r3
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	61ba      	str	r2, [r7, #24]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	1acb      	subs	r3, r1, r3
 800daa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <mem_cmp+0x40>
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0eb      	beq.n	800da90 <mem_cmp+0x18>

	return r;
 800dab8:	697b      	ldr	r3, [r7, #20]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3724      	adds	r7, #36	; 0x24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dad0:	e002      	b.n	800dad8 <chk_chr+0x12>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3301      	adds	r3, #1
 800dad6:	607b      	str	r3, [r7, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <chk_chr+0x26>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	461a      	mov	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d1f2      	bne.n	800dad2 <chk_chr+0xc>
	return *str;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	781b      	ldrb	r3, [r3, #0]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db06:	2300      	movs	r3, #0
 800db08:	60bb      	str	r3, [r7, #8]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	e029      	b.n	800db64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800db10:	4a27      	ldr	r2, [pc, #156]	; (800dbb0 <chk_lock+0xb4>)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	011b      	lsls	r3, r3, #4
 800db16:	4413      	add	r3, r2
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d01d      	beq.n	800db5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db1e:	4a24      	ldr	r2, [pc, #144]	; (800dbb0 <chk_lock+0xb4>)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	4413      	add	r3, r2
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d116      	bne.n	800db5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800db30:	4a1f      	ldr	r2, [pc, #124]	; (800dbb0 <chk_lock+0xb4>)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	011b      	lsls	r3, r3, #4
 800db36:	4413      	add	r3, r2
 800db38:	3304      	adds	r3, #4
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db40:	429a      	cmp	r2, r3
 800db42:	d10c      	bne.n	800db5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800db44:	4a1a      	ldr	r2, [pc, #104]	; (800dbb0 <chk_lock+0xb4>)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	011b      	lsls	r3, r3, #4
 800db4a:	4413      	add	r3, r2
 800db4c:	3308      	adds	r3, #8
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800db54:	429a      	cmp	r2, r3
 800db56:	d102      	bne.n	800db5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800db58:	e007      	b.n	800db6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800db5a:	2301      	movs	r3, #1
 800db5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3301      	adds	r3, #1
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d9d2      	bls.n	800db10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d109      	bne.n	800db84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d102      	bne.n	800db7c <chk_lock+0x80>
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d101      	bne.n	800db80 <chk_lock+0x84>
 800db7c:	2300      	movs	r3, #0
 800db7e:	e010      	b.n	800dba2 <chk_lock+0xa6>
 800db80:	2312      	movs	r3, #18
 800db82:	e00e      	b.n	800dba2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d108      	bne.n	800db9c <chk_lock+0xa0>
 800db8a:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <chk_lock+0xb4>)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	011b      	lsls	r3, r3, #4
 800db90:	4413      	add	r3, r2
 800db92:	330c      	adds	r3, #12
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db9a:	d101      	bne.n	800dba0 <chk_lock+0xa4>
 800db9c:	2310      	movs	r3, #16
 800db9e:	e000      	b.n	800dba2 <chk_lock+0xa6>
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	20000a6c 	.word	0x20000a6c

0800dbb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	607b      	str	r3, [r7, #4]
 800dbbe:	e002      	b.n	800dbc6 <enq_lock+0x12>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	607b      	str	r3, [r7, #4]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d806      	bhi.n	800dbda <enq_lock+0x26>
 800dbcc:	4a09      	ldr	r2, [pc, #36]	; (800dbf4 <enq_lock+0x40>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	4413      	add	r3, r2
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1f2      	bne.n	800dbc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	bf14      	ite	ne
 800dbe0:	2301      	movne	r3, #1
 800dbe2:	2300      	moveq	r3, #0
 800dbe4:	b2db      	uxtb	r3, r3
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	20000a6c 	.word	0x20000a6c

0800dbf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc02:	2300      	movs	r3, #0
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e01f      	b.n	800dc48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dc08:	4a41      	ldr	r2, [pc, #260]	; (800dd10 <inc_lock+0x118>)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	4413      	add	r3, r2
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d113      	bne.n	800dc42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dc1a:	4a3d      	ldr	r2, [pc, #244]	; (800dd10 <inc_lock+0x118>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	4413      	add	r3, r2
 800dc22:	3304      	adds	r3, #4
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d109      	bne.n	800dc42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dc2e:	4a38      	ldr	r2, [pc, #224]	; (800dd10 <inc_lock+0x118>)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	011b      	lsls	r3, r3, #4
 800dc34:	4413      	add	r3, r2
 800dc36:	3308      	adds	r3, #8
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d006      	beq.n	800dc50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3301      	adds	r3, #1
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d9dc      	bls.n	800dc08 <inc_lock+0x10>
 800dc4e:	e000      	b.n	800dc52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dc50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d132      	bne.n	800dcbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	e002      	b.n	800dc64 <inc_lock+0x6c>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3301      	adds	r3, #1
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d806      	bhi.n	800dc78 <inc_lock+0x80>
 800dc6a:	4a29      	ldr	r2, [pc, #164]	; (800dd10 <inc_lock+0x118>)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	011b      	lsls	r3, r3, #4
 800dc70:	4413      	add	r3, r2
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1f2      	bne.n	800dc5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d101      	bne.n	800dc82 <inc_lock+0x8a>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e040      	b.n	800dd04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4922      	ldr	r1, [pc, #136]	; (800dd10 <inc_lock+0x118>)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	440b      	add	r3, r1
 800dc8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689a      	ldr	r2, [r3, #8]
 800dc94:	491e      	ldr	r1, [pc, #120]	; (800dd10 <inc_lock+0x118>)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	011b      	lsls	r3, r3, #4
 800dc9a:	440b      	add	r3, r1
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	491a      	ldr	r1, [pc, #104]	; (800dd10 <inc_lock+0x118>)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	011b      	lsls	r3, r3, #4
 800dcaa:	440b      	add	r3, r1
 800dcac:	3308      	adds	r3, #8
 800dcae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dcb0:	4a17      	ldr	r2, [pc, #92]	; (800dd10 <inc_lock+0x118>)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	011b      	lsls	r3, r3, #4
 800dcb6:	4413      	add	r3, r2
 800dcb8:	330c      	adds	r3, #12
 800dcba:	2200      	movs	r2, #0
 800dcbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d009      	beq.n	800dcd8 <inc_lock+0xe0>
 800dcc4:	4a12      	ldr	r2, [pc, #72]	; (800dd10 <inc_lock+0x118>)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	011b      	lsls	r3, r3, #4
 800dcca:	4413      	add	r3, r2
 800dccc:	330c      	adds	r3, #12
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <inc_lock+0xe0>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	e015      	b.n	800dd04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <inc_lock+0xf8>
 800dcde:	4a0c      	ldr	r2, [pc, #48]	; (800dd10 <inc_lock+0x118>)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	4413      	add	r3, r2
 800dce6:	330c      	adds	r3, #12
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	e001      	b.n	800dcf4 <inc_lock+0xfc>
 800dcf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcf4:	4906      	ldr	r1, [pc, #24]	; (800dd10 <inc_lock+0x118>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	011b      	lsls	r3, r3, #4
 800dcfa:	440b      	add	r3, r1
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	3301      	adds	r3, #1
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20000a6c 	.word	0x20000a6c

0800dd14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	607b      	str	r3, [r7, #4]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d825      	bhi.n	800dd74 <dec_lock+0x60>
		n = Files[i].ctr;
 800dd28:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <dec_lock+0x74>)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	4413      	add	r3, r2
 800dd30:	330c      	adds	r3, #12
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dd36:	89fb      	ldrh	r3, [r7, #14]
 800dd38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd3c:	d101      	bne.n	800dd42 <dec_lock+0x2e>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dd42:	89fb      	ldrh	r3, [r7, #14]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <dec_lock+0x3a>
 800dd48:	89fb      	ldrh	r3, [r7, #14]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dd4e:	4a0e      	ldr	r2, [pc, #56]	; (800dd88 <dec_lock+0x74>)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	011b      	lsls	r3, r3, #4
 800dd54:	4413      	add	r3, r2
 800dd56:	330c      	adds	r3, #12
 800dd58:	89fa      	ldrh	r2, [r7, #14]
 800dd5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dd5c:	89fb      	ldrh	r3, [r7, #14]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <dec_lock+0x5a>
 800dd62:	4a09      	ldr	r2, [pc, #36]	; (800dd88 <dec_lock+0x74>)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	4413      	add	r3, r2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	737b      	strb	r3, [r7, #13]
 800dd72:	e001      	b.n	800dd78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dd74:	2302      	movs	r3, #2
 800dd76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dd78:	7b7b      	ldrb	r3, [r7, #13]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	20000a6c 	.word	0x20000a6c

0800dd8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e010      	b.n	800ddbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd9a:	4a0d      	ldr	r2, [pc, #52]	; (800ddd0 <clear_lock+0x44>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	011b      	lsls	r3, r3, #4
 800dda0:	4413      	add	r3, r2
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d105      	bne.n	800ddb6 <clear_lock+0x2a>
 800ddaa:	4a09      	ldr	r2, [pc, #36]	; (800ddd0 <clear_lock+0x44>)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	4413      	add	r3, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d9eb      	bls.n	800dd9a <clear_lock+0xe>
	}
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	20000a6c 	.word	0x20000a6c

0800ddd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d034      	beq.n	800de52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7858      	ldrb	r0, [r3, #1]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	f7ff fd40 	bl	800d880 <disk_write>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800de06:	2301      	movs	r3, #1
 800de08:	73fb      	strb	r3, [r7, #15]
 800de0a:	e022      	b.n	800de52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	1ad2      	subs	r2, r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d217      	bcs.n	800de52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	789b      	ldrb	r3, [r3, #2]
 800de26:	613b      	str	r3, [r7, #16]
 800de28:	e010      	b.n	800de4c <sync_window+0x78>
					wsect += fs->fsize;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	4413      	add	r3, r2
 800de32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7858      	ldrb	r0, [r3, #1]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de3e:	2301      	movs	r3, #1
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	f7ff fd1d 	bl	800d880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	3b01      	subs	r3, #1
 800de4a:	613b      	str	r3, [r7, #16]
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d8eb      	bhi.n	800de2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	429a      	cmp	r2, r3
 800de72:	d01b      	beq.n	800deac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff ffad 	bl	800ddd4 <sync_window>
 800de7a:	4603      	mov	r3, r0
 800de7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d113      	bne.n	800deac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7858      	ldrb	r0, [r3, #1]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de8e:	2301      	movs	r3, #1
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	f7ff fcd5 	bl	800d840 <disk_read>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d004      	beq.n	800dea6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dea0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800deac:	7bfb      	ldrb	r3, [r7, #15]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff ff87 	bl	800ddd4 <sync_window>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d158      	bne.n	800df82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d148      	bne.n	800df6a <sync_fs+0xb2>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	791b      	ldrb	r3, [r3, #4]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d144      	bne.n	800df6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3330      	adds	r3, #48	; 0x30
 800dee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff fda9 	bl	800da42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3330      	adds	r3, #48	; 0x30
 800def4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800def8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff fd38 	bl	800d972 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	3330      	adds	r3, #48	; 0x30
 800df06:	4921      	ldr	r1, [pc, #132]	; (800df8c <sync_fs+0xd4>)
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff fd4d 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3330      	adds	r3, #48	; 0x30
 800df12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df16:	491e      	ldr	r1, [pc, #120]	; (800df90 <sync_fs+0xd8>)
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fd45 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3330      	adds	r3, #48	; 0x30
 800df22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4610      	mov	r0, r2
 800df2e:	f7ff fd3b 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3330      	adds	r3, #48	; 0x30
 800df36:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	4619      	mov	r1, r3
 800df40:	4610      	mov	r0, r2
 800df42:	f7ff fd31 	bl	800d9a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7858      	ldrb	r0, [r3, #1]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5e:	2301      	movs	r3, #1
 800df60:	f7ff fc8e 	bl	800d880 <disk_write>
			fs->fsi_flag = 0;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	2200      	movs	r2, #0
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fca4 	bl	800d8c0 <disk_ioctl>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <sync_fs+0xca>
 800df7e:	2301      	movs	r3, #1
 800df80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800df82:	7bfb      	ldrb	r3, [r7, #15]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	41615252 	.word	0x41615252
 800df90:	61417272 	.word	0x61417272

0800df94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	3b02      	subs	r3, #2
 800dfa2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	695b      	ldr	r3, [r3, #20]
 800dfa8:	3b02      	subs	r3, #2
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d301      	bcc.n	800dfb4 <clust2sect+0x20>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e008      	b.n	800dfc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	895b      	ldrh	r3, [r3, #10]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	fb03 f202 	mul.w	r2, r3, r2
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	4413      	add	r3, r2
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b086      	sub	sp, #24
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d904      	bls.n	800dff2 <get_fat+0x20>
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d302      	bcc.n	800dff8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dff2:	2301      	movs	r3, #1
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	e08f      	b.n	800e118 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dffc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d062      	beq.n	800e0cc <get_fat+0xfa>
 800e006:	2b03      	cmp	r3, #3
 800e008:	dc7c      	bgt.n	800e104 <get_fat+0x132>
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d002      	beq.n	800e014 <get_fat+0x42>
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d042      	beq.n	800e098 <get_fat+0xc6>
 800e012:	e077      	b.n	800e104 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	085b      	lsrs	r3, r3, #1
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4413      	add	r3, r2
 800e020:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	6a1a      	ldr	r2, [r3, #32]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	0a5b      	lsrs	r3, r3, #9
 800e02a:	4413      	add	r3, r2
 800e02c:	4619      	mov	r1, r3
 800e02e:	6938      	ldr	r0, [r7, #16]
 800e030:	f7ff ff14 	bl	800de5c <move_window>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d167      	bne.n	800e10a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	60fa      	str	r2, [r7, #12]
 800e040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	4413      	add	r3, r2
 800e048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e04c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6a1a      	ldr	r2, [r3, #32]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	0a5b      	lsrs	r3, r3, #9
 800e056:	4413      	add	r3, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	6938      	ldr	r0, [r7, #16]
 800e05c:	f7ff fefe 	bl	800de5c <move_window>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d153      	bne.n	800e10e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4413      	add	r3, r2
 800e070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e074:	021b      	lsls	r3, r3, #8
 800e076:	461a      	mov	r2, r3
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <get_fat+0xbc>
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	091b      	lsrs	r3, r3, #4
 800e08c:	e002      	b.n	800e094 <get_fat+0xc2>
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e094:	617b      	str	r3, [r7, #20]
			break;
 800e096:	e03f      	b.n	800e118 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	6a1a      	ldr	r2, [r3, #32]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	0a1b      	lsrs	r3, r3, #8
 800e0a0:	4413      	add	r3, r2
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6938      	ldr	r0, [r7, #16]
 800e0a6:	f7ff fed9 	bl	800de5c <move_window>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d130      	bne.n	800e112 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e0be:	4413      	add	r3, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff fc1b 	bl	800d8fc <ld_word>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	617b      	str	r3, [r7, #20]
			break;
 800e0ca:	e025      	b.n	800e118 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	6a1a      	ldr	r2, [r3, #32]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	09db      	lsrs	r3, r3, #7
 800e0d4:	4413      	add	r3, r2
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6938      	ldr	r0, [r7, #16]
 800e0da:	f7ff febf 	bl	800de5c <move_window>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d118      	bne.n	800e116 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e0f2:	4413      	add	r3, r2
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7ff fc19 	bl	800d92c <ld_dword>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e100:	617b      	str	r3, [r7, #20]
			break;
 800e102:	e009      	b.n	800e118 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e104:	2301      	movs	r3, #1
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	e006      	b.n	800e118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e10a:	bf00      	nop
 800e10c:	e004      	b.n	800e118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e10e:	bf00      	nop
 800e110:	e002      	b.n	800e118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e112:	bf00      	nop
 800e114:	e000      	b.n	800e118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e116:	bf00      	nop
		}
	}

	return val;
 800e118:	697b      	ldr	r3, [r7, #20]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3718      	adds	r7, #24
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e122:	b590      	push	{r4, r7, lr}
 800e124:	b089      	sub	sp, #36	; 0x24
 800e126:	af00      	add	r7, sp, #0
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e12e:	2302      	movs	r3, #2
 800e130:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b01      	cmp	r3, #1
 800e136:	f240 80d2 	bls.w	800e2de <put_fat+0x1bc>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	429a      	cmp	r2, r3
 800e142:	f080 80cc 	bcs.w	800e2de <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b03      	cmp	r3, #3
 800e14c:	f000 8096 	beq.w	800e27c <put_fat+0x15a>
 800e150:	2b03      	cmp	r3, #3
 800e152:	f300 80cd 	bgt.w	800e2f0 <put_fat+0x1ce>
 800e156:	2b01      	cmp	r3, #1
 800e158:	d002      	beq.n	800e160 <put_fat+0x3e>
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d06e      	beq.n	800e23c <put_fat+0x11a>
 800e15e:	e0c7      	b.n	800e2f0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	61bb      	str	r3, [r7, #24]
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	085b      	lsrs	r3, r3, #1
 800e168:	69ba      	ldr	r2, [r7, #24]
 800e16a:	4413      	add	r3, r2
 800e16c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6a1a      	ldr	r2, [r3, #32]
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	0a5b      	lsrs	r3, r3, #9
 800e176:	4413      	add	r3, r2
 800e178:	4619      	mov	r1, r3
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f7ff fe6e 	bl	800de5c <move_window>
 800e180:	4603      	mov	r3, r0
 800e182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e184:	7ffb      	ldrb	r3, [r7, #31]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 80ab 	bne.w	800e2e2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	1c59      	adds	r1, r3, #1
 800e196:	61b9      	str	r1, [r7, #24]
 800e198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19c:	4413      	add	r3, r2
 800e19e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00d      	beq.n	800e1c6 <put_fat+0xa4>
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	b25b      	sxtb	r3, r3
 800e1b0:	f003 030f 	and.w	r3, r3, #15
 800e1b4:	b25a      	sxtb	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	011b      	lsls	r3, r3, #4
 800e1bc:	b25b      	sxtb	r3, r3
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	b25b      	sxtb	r3, r3
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	e001      	b.n	800e1ca <put_fat+0xa8>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a1a      	ldr	r2, [r3, #32]
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	0a5b      	lsrs	r3, r3, #9
 800e1dc:	4413      	add	r3, r2
 800e1de:	4619      	mov	r1, r3
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f7ff fe3b 	bl	800de5c <move_window>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1ea:	7ffb      	ldrb	r3, [r7, #31]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d17a      	bne.n	800e2e6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1fc:	4413      	add	r3, r2
 800e1fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d003      	beq.n	800e212 <put_fat+0xf0>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	091b      	lsrs	r3, r3, #4
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	e00e      	b.n	800e230 <put_fat+0x10e>
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	b25b      	sxtb	r3, r3
 800e218:	f023 030f 	bic.w	r3, r3, #15
 800e21c:	b25a      	sxtb	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	0a1b      	lsrs	r3, r3, #8
 800e222:	b25b      	sxtb	r3, r3
 800e224:	f003 030f 	and.w	r3, r3, #15
 800e228:	b25b      	sxtb	r3, r3
 800e22a:	4313      	orrs	r3, r2
 800e22c:	b25b      	sxtb	r3, r3
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2201      	movs	r2, #1
 800e238:	70da      	strb	r2, [r3, #3]
			break;
 800e23a:	e059      	b.n	800e2f0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a1a      	ldr	r2, [r3, #32]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	0a1b      	lsrs	r3, r3, #8
 800e244:	4413      	add	r3, r2
 800e246:	4619      	mov	r1, r3
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7ff fe07 	bl	800de5c <move_window>
 800e24e:	4603      	mov	r3, r0
 800e250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e252:	7ffb      	ldrb	r3, [r7, #31]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d148      	bne.n	800e2ea <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e266:	4413      	add	r3, r2
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	b292      	uxth	r2, r2
 800e26c:	4611      	mov	r1, r2
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fb7f 	bl	800d972 <st_word>
			fs->wflag = 1;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2201      	movs	r2, #1
 800e278:	70da      	strb	r2, [r3, #3]
			break;
 800e27a:	e039      	b.n	800e2f0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6a1a      	ldr	r2, [r3, #32]
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	09db      	lsrs	r3, r3, #7
 800e284:	4413      	add	r3, r2
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7ff fde7 	bl	800de5c <move_window>
 800e28e:	4603      	mov	r3, r0
 800e290:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e292:	7ffb      	ldrb	r3, [r7, #31]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d12a      	bne.n	800e2ee <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e2ac:	4413      	add	r3, r2
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff fb3c 	bl	800d92c <ld_dword>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e2ba:	4323      	orrs	r3, r4
 800e2bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e2cc:	4413      	add	r3, r2
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff fb69 	bl	800d9a8 <st_dword>
			fs->wflag = 1;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	70da      	strb	r2, [r3, #3]
			break;
 800e2dc:	e008      	b.n	800e2f0 <put_fat+0x1ce>
		}
	}
 800e2de:	bf00      	nop
 800e2e0:	e006      	b.n	800e2f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e2e2:	bf00      	nop
 800e2e4:	e004      	b.n	800e2f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e2e6:	bf00      	nop
 800e2e8:	e002      	b.n	800e2f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e2ea:	bf00      	nop
 800e2ec:	e000      	b.n	800e2f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e2ee:	bf00      	nop
	return res;
 800e2f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3724      	adds	r7, #36	; 0x24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd90      	pop	{r4, r7, pc}

0800e2fa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b088      	sub	sp, #32
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	60b9      	str	r1, [r7, #8]
 800e304:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e306:	2300      	movs	r3, #0
 800e308:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d904      	bls.n	800e320 <remove_chain+0x26>
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d301      	bcc.n	800e324 <remove_chain+0x2a>
 800e320:	2302      	movs	r3, #2
 800e322:	e04b      	b.n	800e3bc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00c      	beq.n	800e344 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	69b8      	ldr	r0, [r7, #24]
 800e332:	f7ff fef6 	bl	800e122 <put_fat>
 800e336:	4603      	mov	r3, r0
 800e338:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e33a:	7ffb      	ldrb	r3, [r7, #31]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <remove_chain+0x4a>
 800e340:	7ffb      	ldrb	r3, [r7, #31]
 800e342:	e03b      	b.n	800e3bc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e344:	68b9      	ldr	r1, [r7, #8]
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f7ff fe43 	bl	800dfd2 <get_fat>
 800e34c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d031      	beq.n	800e3b8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d101      	bne.n	800e35e <remove_chain+0x64>
 800e35a:	2302      	movs	r3, #2
 800e35c:	e02e      	b.n	800e3bc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e364:	d101      	bne.n	800e36a <remove_chain+0x70>
 800e366:	2301      	movs	r3, #1
 800e368:	e028      	b.n	800e3bc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e36a:	2200      	movs	r2, #0
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	69b8      	ldr	r0, [r7, #24]
 800e370:	f7ff fed7 	bl	800e122 <put_fat>
 800e374:	4603      	mov	r3, r0
 800e376:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e378:	7ffb      	ldrb	r3, [r7, #31]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <remove_chain+0x88>
 800e37e:	7ffb      	ldrb	r3, [r7, #31]
 800e380:	e01c      	b.n	800e3bc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	691a      	ldr	r2, [r3, #16]
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	3b02      	subs	r3, #2
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d20b      	bcs.n	800e3a8 <remove_chain+0xae>
			fs->free_clst++;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	791b      	ldrb	r3, [r3, #4]
 800e39e:	f043 0301 	orr.w	r3, r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d3c6      	bcc.n	800e344 <remove_chain+0x4a>
 800e3b6:	e000      	b.n	800e3ba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e3b8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10d      	bne.n	800e3f6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d004      	beq.n	800e3f0 <create_chain+0x2c>
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	69ba      	ldr	r2, [r7, #24]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d31b      	bcc.n	800e428 <create_chain+0x64>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	61bb      	str	r3, [r7, #24]
 800e3f4:	e018      	b.n	800e428 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e3f6:	6839      	ldr	r1, [r7, #0]
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7ff fdea 	bl	800dfd2 <get_fat>
 800e3fe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d801      	bhi.n	800e40a <create_chain+0x46>
 800e406:	2301      	movs	r3, #1
 800e408:	e070      	b.n	800e4ec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e410:	d101      	bne.n	800e416 <create_chain+0x52>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	e06a      	b.n	800e4ec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d201      	bcs.n	800e424 <create_chain+0x60>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	e063      	b.n	800e4ec <create_chain+0x128>
		scl = clst;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	3301      	adds	r3, #1
 800e430:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	69fa      	ldr	r2, [r7, #28]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d307      	bcc.n	800e44c <create_chain+0x88>
				ncl = 2;
 800e43c:	2302      	movs	r3, #2
 800e43e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e440:	69fa      	ldr	r2, [r7, #28]
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	429a      	cmp	r2, r3
 800e446:	d901      	bls.n	800e44c <create_chain+0x88>
 800e448:	2300      	movs	r3, #0
 800e44a:	e04f      	b.n	800e4ec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e44c:	69f9      	ldr	r1, [r7, #28]
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff fdbf 	bl	800dfd2 <get_fat>
 800e454:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00e      	beq.n	800e47a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d003      	beq.n	800e46a <create_chain+0xa6>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e468:	d101      	bne.n	800e46e <create_chain+0xaa>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	e03e      	b.n	800e4ec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e46e:	69fa      	ldr	r2, [r7, #28]
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	429a      	cmp	r2, r3
 800e474:	d1da      	bne.n	800e42c <create_chain+0x68>
 800e476:	2300      	movs	r3, #0
 800e478:	e038      	b.n	800e4ec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e47a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e47c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e480:	69f9      	ldr	r1, [r7, #28]
 800e482:	6938      	ldr	r0, [r7, #16]
 800e484:	f7ff fe4d 	bl	800e122 <put_fat>
 800e488:	4603      	mov	r3, r0
 800e48a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e48c:	7dfb      	ldrb	r3, [r7, #23]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d109      	bne.n	800e4a6 <create_chain+0xe2>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d006      	beq.n	800e4a6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	6839      	ldr	r1, [r7, #0]
 800e49c:	6938      	ldr	r0, [r7, #16]
 800e49e:	f7ff fe40 	bl	800e122 <put_fat>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e4a6:	7dfb      	ldrb	r3, [r7, #23]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d116      	bne.n	800e4da <create_chain+0x116>
		fs->last_clst = ncl;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	69fa      	ldr	r2, [r7, #28]
 800e4b0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	691a      	ldr	r2, [r3, #16]
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	695b      	ldr	r3, [r3, #20]
 800e4ba:	3b02      	subs	r3, #2
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d804      	bhi.n	800e4ca <create_chain+0x106>
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	1e5a      	subs	r2, r3, #1
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	791b      	ldrb	r3, [r3, #4]
 800e4ce:	f043 0301 	orr.w	r3, r3, #1
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	711a      	strb	r2, [r3, #4]
 800e4d8:	e007      	b.n	800e4ea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d102      	bne.n	800e4e6 <create_chain+0x122>
 800e4e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4e4:	e000      	b.n	800e4e8 <create_chain+0x124>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e4ea:	69fb      	ldr	r3, [r7, #28]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3720      	adds	r7, #32
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e508:	3304      	adds	r3, #4
 800e50a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	0a5b      	lsrs	r3, r3, #9
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	8952      	ldrh	r2, [r2, #10]
 800e514:	fbb3 f3f2 	udiv	r3, r3, r2
 800e518:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	1d1a      	adds	r2, r3, #4
 800e51e:	613a      	str	r2, [r7, #16]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <clmt_clust+0x3a>
 800e52a:	2300      	movs	r3, #0
 800e52c:	e010      	b.n	800e550 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	429a      	cmp	r2, r3
 800e534:	d307      	bcc.n	800e546 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	3304      	adds	r3, #4
 800e542:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e544:	e7e9      	b.n	800e51a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e546:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	4413      	add	r3, r2
}
 800e550:	4618      	mov	r0, r3
 800e552:	371c      	adds	r7, #28
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e572:	d204      	bcs.n	800e57e <dir_sdi+0x22>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f003 031f 	and.w	r3, r3, #31
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e57e:	2302      	movs	r3, #2
 800e580:	e063      	b.n	800e64a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d106      	bne.n	800e5a2 <dir_sdi+0x46>
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d902      	bls.n	800e5a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10c      	bne.n	800e5c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	095b      	lsrs	r3, r3, #5
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	8912      	ldrh	r2, [r2, #8]
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d301      	bcc.n	800e5b8 <dir_sdi+0x5c>
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	e048      	b.n	800e64a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	61da      	str	r2, [r3, #28]
 800e5c0:	e029      	b.n	800e616 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	895b      	ldrh	r3, [r3, #10]
 800e5c6:	025b      	lsls	r3, r3, #9
 800e5c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e5ca:	e019      	b.n	800e600 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6979      	ldr	r1, [r7, #20]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff fcfe 	bl	800dfd2 <get_fat>
 800e5d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5de:	d101      	bne.n	800e5e4 <dir_sdi+0x88>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e032      	b.n	800e64a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d904      	bls.n	800e5f4 <dir_sdi+0x98>
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d301      	bcc.n	800e5f8 <dir_sdi+0x9c>
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	e028      	b.n	800e64a <dir_sdi+0xee>
			ofs -= csz;
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	429a      	cmp	r2, r3
 800e606:	d2e1      	bcs.n	800e5cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e608:	6979      	ldr	r1, [r7, #20]
 800e60a:	6938      	ldr	r0, [r7, #16]
 800e60c:	f7ff fcc2 	bl	800df94 <clust2sect>
 800e610:	4602      	mov	r2, r0
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <dir_sdi+0xcc>
 800e624:	2302      	movs	r3, #2
 800e626:	e010      	b.n	800e64a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	69da      	ldr	r2, [r3, #28]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	0a5b      	lsrs	r3, r3, #9
 800e630:	441a      	add	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e642:	441a      	add	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3718      	adds	r7, #24
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b086      	sub	sp, #24
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	695b      	ldr	r3, [r3, #20]
 800e666:	3320      	adds	r3, #32
 800e668:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d003      	beq.n	800e67a <dir_next+0x28>
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e678:	d301      	bcc.n	800e67e <dir_next+0x2c>
 800e67a:	2304      	movs	r3, #4
 800e67c:	e0aa      	b.n	800e7d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e684:	2b00      	cmp	r3, #0
 800e686:	f040 8098 	bne.w	800e7ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	69db      	ldr	r3, [r3, #28]
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10b      	bne.n	800e6b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	095b      	lsrs	r3, r3, #5
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	8912      	ldrh	r2, [r2, #8]
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	f0c0 8088 	bcc.w	800e7ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	61da      	str	r2, [r3, #28]
 800e6b0:	2304      	movs	r3, #4
 800e6b2:	e08f      	b.n	800e7d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	0a5b      	lsrs	r3, r3, #9
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	8952      	ldrh	r2, [r2, #10]
 800e6bc:	3a01      	subs	r2, #1
 800e6be:	4013      	ands	r3, r2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d17a      	bne.n	800e7ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	f7ff fc80 	bl	800dfd2 <get_fat>
 800e6d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d801      	bhi.n	800e6de <dir_next+0x8c>
 800e6da:	2302      	movs	r3, #2
 800e6dc:	e07a      	b.n	800e7d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e4:	d101      	bne.n	800e6ea <dir_next+0x98>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e074      	b.n	800e7d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d358      	bcc.n	800e7a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d104      	bne.n	800e704 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	61da      	str	r2, [r3, #28]
 800e700:	2304      	movs	r3, #4
 800e702:	e067      	b.n	800e7d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	4619      	mov	r1, r3
 800e70c:	4610      	mov	r0, r2
 800e70e:	f7ff fe59 	bl	800e3c4 <create_chain>
 800e712:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <dir_next+0xcc>
 800e71a:	2307      	movs	r3, #7
 800e71c:	e05a      	b.n	800e7d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	2b01      	cmp	r3, #1
 800e722:	d101      	bne.n	800e728 <dir_next+0xd6>
 800e724:	2302      	movs	r3, #2
 800e726:	e055      	b.n	800e7d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e72e:	d101      	bne.n	800e734 <dir_next+0xe2>
 800e730:	2301      	movs	r3, #1
 800e732:	e04f      	b.n	800e7d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f7ff fb4d 	bl	800ddd4 <sync_window>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <dir_next+0xf2>
 800e740:	2301      	movs	r3, #1
 800e742:	e047      	b.n	800e7d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	3330      	adds	r3, #48	; 0x30
 800e748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e74c:	2100      	movs	r1, #0
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff f977 	bl	800da42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e754:	2300      	movs	r3, #0
 800e756:	613b      	str	r3, [r7, #16]
 800e758:	6979      	ldr	r1, [r7, #20]
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f7ff fc1a 	bl	800df94 <clust2sect>
 800e760:	4602      	mov	r2, r0
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	62da      	str	r2, [r3, #44]	; 0x2c
 800e766:	e012      	b.n	800e78e <dir_next+0x13c>
						fs->wflag = 1;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2201      	movs	r2, #1
 800e76c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f7ff fb30 	bl	800ddd4 <sync_window>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d001      	beq.n	800e77e <dir_next+0x12c>
 800e77a:	2301      	movs	r3, #1
 800e77c:	e02a      	b.n	800e7d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	3301      	adds	r3, #1
 800e782:	613b      	str	r3, [r7, #16]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	62da      	str	r2, [r3, #44]	; 0x2c
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	895b      	ldrh	r3, [r3, #10]
 800e792:	461a      	mov	r2, r3
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	4293      	cmp	r3, r2
 800e798:	d3e6      	bcc.n	800e768 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	1ad2      	subs	r2, r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e7ac:	6979      	ldr	r1, [r7, #20]
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff fbf0 	bl	800df94 <clust2sect>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7cc:	441a      	add	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff feb4 	bl	800e55c <dir_sdi>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d12b      	bne.n	800e856 <dir_alloc+0x7a>
		n = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	69db      	ldr	r3, [r3, #28]
 800e806:	4619      	mov	r1, r3
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fb27 	bl	800de5c <move_window>
 800e80e:	4603      	mov	r3, r0
 800e810:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11d      	bne.n	800e854 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2be5      	cmp	r3, #229	; 0xe5
 800e820:	d004      	beq.n	800e82c <dir_alloc+0x50>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d107      	bne.n	800e83c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	3301      	adds	r3, #1
 800e830:	613b      	str	r3, [r7, #16]
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	429a      	cmp	r2, r3
 800e838:	d102      	bne.n	800e840 <dir_alloc+0x64>
 800e83a:	e00c      	b.n	800e856 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e83c:	2300      	movs	r3, #0
 800e83e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e840:	2101      	movs	r1, #1
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff ff05 	bl	800e652 <dir_next>
 800e848:	4603      	mov	r3, r0
 800e84a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d0d7      	beq.n	800e802 <dir_alloc+0x26>
 800e852:	e000      	b.n	800e856 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e854:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e856:	7dfb      	ldrb	r3, [r7, #23]
 800e858:	2b04      	cmp	r3, #4
 800e85a:	d101      	bne.n	800e860 <dir_alloc+0x84>
 800e85c:	2307      	movs	r3, #7
 800e85e:	75fb      	strb	r3, [r7, #23]
	return res;
 800e860:	7dfb      	ldrb	r3, [r7, #23]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3718      	adds	r7, #24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b084      	sub	sp, #16
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	331a      	adds	r3, #26
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff f83f 	bl	800d8fc <ld_word>
 800e87e:	4603      	mov	r3, r0
 800e880:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b03      	cmp	r3, #3
 800e888:	d109      	bne.n	800e89e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	3314      	adds	r3, #20
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff f834 	bl	800d8fc <ld_word>
 800e894:	4603      	mov	r3, r0
 800e896:	041b      	lsls	r3, r3, #16
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e89e:	68fb      	ldr	r3, [r7, #12]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	331a      	adds	r3, #26
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	b292      	uxth	r2, r2
 800e8bc:	4611      	mov	r1, r2
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff f857 	bl	800d972 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d109      	bne.n	800e8e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f103 0214 	add.w	r2, r3, #20
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	0c1b      	lsrs	r3, r3, #16
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7ff f849 	bl	800d972 <st_word>
	}
}
 800e8e0:	bf00      	nop
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7ff fe2f 	bl	800e55c <dir_sdi>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e902:	7dfb      	ldrb	r3, [r7, #23]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <dir_find+0x24>
 800e908:	7dfb      	ldrb	r3, [r7, #23]
 800e90a:	e03e      	b.n	800e98a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	4619      	mov	r1, r3
 800e912:	6938      	ldr	r0, [r7, #16]
 800e914:	f7ff faa2 	bl	800de5c <move_window>
 800e918:	4603      	mov	r3, r0
 800e91a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e91c:	7dfb      	ldrb	r3, [r7, #23]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d12f      	bne.n	800e982 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e92a:	7bfb      	ldrb	r3, [r7, #15]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d102      	bne.n	800e936 <dir_find+0x4e>
 800e930:	2304      	movs	r3, #4
 800e932:	75fb      	strb	r3, [r7, #23]
 800e934:	e028      	b.n	800e988 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	330b      	adds	r3, #11
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e942:	b2da      	uxtb	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a1b      	ldr	r3, [r3, #32]
 800e94c:	330b      	adds	r3, #11
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	f003 0308 	and.w	r3, r3, #8
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10a      	bne.n	800e96e <dir_find+0x86>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a18      	ldr	r0, [r3, #32]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3324      	adds	r3, #36	; 0x24
 800e960:	220b      	movs	r2, #11
 800e962:	4619      	mov	r1, r3
 800e964:	f7ff f888 	bl	800da78 <mem_cmp>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00b      	beq.n	800e986 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e96e:	2100      	movs	r1, #0
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff fe6e 	bl	800e652 <dir_next>
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d0c5      	beq.n	800e90c <dir_find+0x24>
 800e980:	e002      	b.n	800e988 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e982:	bf00      	nop
 800e984:	e000      	b.n	800e988 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e986:	bf00      	nop

	return res;
 800e988:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b084      	sub	sp, #16
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff ff1a 	bl	800e7dc <dir_alloc>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d11c      	bne.n	800e9ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	69db      	ldr	r3, [r3, #28]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	68b8      	ldr	r0, [r7, #8]
 800e9ba:	f7ff fa4f 	bl	800de5c <move_window>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d111      	bne.n	800e9ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a1b      	ldr	r3, [r3, #32]
 800e9cc:	2220      	movs	r2, #32
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff f836 	bl	800da42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a18      	ldr	r0, [r3, #32]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3324      	adds	r3, #36	; 0x24
 800e9de:	220b      	movs	r2, #11
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	f7ff f80d 	bl	800da00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3324      	adds	r3, #36	; 0x24
 800ea0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ea0e:	220b      	movs	r2, #11
 800ea10:	2120      	movs	r1, #32
 800ea12:	68b8      	ldr	r0, [r7, #8]
 800ea14:	f7ff f815 	bl	800da42 <mem_set>
	si = i = 0; ni = 8;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	613b      	str	r3, [r7, #16]
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	61fb      	str	r3, [r7, #28]
 800ea20:	2308      	movs	r3, #8
 800ea22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	61fa      	str	r2, [r7, #28]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ea32:	7efb      	ldrb	r3, [r7, #27]
 800ea34:	2b20      	cmp	r3, #32
 800ea36:	d94e      	bls.n	800ead6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ea38:	7efb      	ldrb	r3, [r7, #27]
 800ea3a:	2b2f      	cmp	r3, #47	; 0x2f
 800ea3c:	d006      	beq.n	800ea4c <create_name+0x54>
 800ea3e:	7efb      	ldrb	r3, [r7, #27]
 800ea40:	2b5c      	cmp	r3, #92	; 0x5c
 800ea42:	d110      	bne.n	800ea66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ea44:	e002      	b.n	800ea4c <create_name+0x54>
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	61fb      	str	r3, [r7, #28]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	4413      	add	r3, r2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b2f      	cmp	r3, #47	; 0x2f
 800ea56:	d0f6      	beq.n	800ea46 <create_name+0x4e>
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b5c      	cmp	r3, #92	; 0x5c
 800ea62:	d0f0      	beq.n	800ea46 <create_name+0x4e>
			break;
 800ea64:	e038      	b.n	800ead8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ea66:	7efb      	ldrb	r3, [r7, #27]
 800ea68:	2b2e      	cmp	r3, #46	; 0x2e
 800ea6a:	d003      	beq.n	800ea74 <create_name+0x7c>
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d30c      	bcc.n	800ea8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b0b      	cmp	r3, #11
 800ea78:	d002      	beq.n	800ea80 <create_name+0x88>
 800ea7a:	7efb      	ldrb	r3, [r7, #27]
 800ea7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea7e:	d001      	beq.n	800ea84 <create_name+0x8c>
 800ea80:	2306      	movs	r3, #6
 800ea82:	e044      	b.n	800eb0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ea84:	2308      	movs	r3, #8
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	230b      	movs	r3, #11
 800ea8a:	617b      	str	r3, [r7, #20]
			continue;
 800ea8c:	e022      	b.n	800ead4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ea8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	da04      	bge.n	800eaa0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ea96:	7efb      	ldrb	r3, [r7, #27]
 800ea98:	3b80      	subs	r3, #128	; 0x80
 800ea9a:	4a1f      	ldr	r2, [pc, #124]	; (800eb18 <create_name+0x120>)
 800ea9c:	5cd3      	ldrb	r3, [r2, r3]
 800ea9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800eaa0:	7efb      	ldrb	r3, [r7, #27]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	481d      	ldr	r0, [pc, #116]	; (800eb1c <create_name+0x124>)
 800eaa6:	f7ff f80e 	bl	800dac6 <chk_chr>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <create_name+0xbc>
 800eab0:	2306      	movs	r3, #6
 800eab2:	e02c      	b.n	800eb0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800eab4:	7efb      	ldrb	r3, [r7, #27]
 800eab6:	2b60      	cmp	r3, #96	; 0x60
 800eab8:	d905      	bls.n	800eac6 <create_name+0xce>
 800eaba:	7efb      	ldrb	r3, [r7, #27]
 800eabc:	2b7a      	cmp	r3, #122	; 0x7a
 800eabe:	d802      	bhi.n	800eac6 <create_name+0xce>
 800eac0:	7efb      	ldrb	r3, [r7, #27]
 800eac2:	3b20      	subs	r3, #32
 800eac4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	613a      	str	r2, [r7, #16]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	4413      	add	r3, r2
 800ead0:	7efa      	ldrb	r2, [r7, #27]
 800ead2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ead4:	e7a6      	b.n	800ea24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ead6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	441a      	add	r2, r3
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d101      	bne.n	800eaec <create_name+0xf4>
 800eae8:	2306      	movs	r3, #6
 800eaea:	e010      	b.n	800eb0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2be5      	cmp	r3, #229	; 0xe5
 800eaf2:	d102      	bne.n	800eafa <create_name+0x102>
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eafa:	7efb      	ldrb	r3, [r7, #27]
 800eafc:	2b20      	cmp	r3, #32
 800eafe:	d801      	bhi.n	800eb04 <create_name+0x10c>
 800eb00:	2204      	movs	r2, #4
 800eb02:	e000      	b.n	800eb06 <create_name+0x10e>
 800eb04:	2200      	movs	r2, #0
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	330b      	adds	r3, #11
 800eb0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800eb0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3720      	adds	r7, #32
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	08012358 	.word	0x08012358
 800eb1c:	08012248 	.word	0x08012248

0800eb20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eb34:	e002      	b.n	800eb3c <follow_path+0x1c>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	603b      	str	r3, [r7, #0]
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b2f      	cmp	r3, #47	; 0x2f
 800eb42:	d0f8      	beq.n	800eb36 <follow_path+0x16>
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	2b5c      	cmp	r3, #92	; 0x5c
 800eb4a:	d0f4      	beq.n	800eb36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	2b1f      	cmp	r3, #31
 800eb58:	d80a      	bhi.n	800eb70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2280      	movs	r2, #128	; 0x80
 800eb5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eb62:	2100      	movs	r1, #0
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7ff fcf9 	bl	800e55c <dir_sdi>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	75fb      	strb	r3, [r7, #23]
 800eb6e:	e043      	b.n	800ebf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb70:	463b      	mov	r3, r7
 800eb72:	4619      	mov	r1, r3
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7ff ff3f 	bl	800e9f8 <create_name>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d134      	bne.n	800ebee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff feaf 	bl	800e8e8 <dir_find>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00a      	beq.n	800ebb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	d127      	bne.n	800ebf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eba2:	7afb      	ldrb	r3, [r7, #11]
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d122      	bne.n	800ebf2 <follow_path+0xd2>
 800ebac:	2305      	movs	r3, #5
 800ebae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ebb0:	e01f      	b.n	800ebf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ebb2:	7afb      	ldrb	r3, [r7, #11]
 800ebb4:	f003 0304 	and.w	r3, r3, #4
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d11c      	bne.n	800ebf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	799b      	ldrb	r3, [r3, #6]
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ebc8:	2305      	movs	r3, #5
 800ebca:	75fb      	strb	r3, [r7, #23]
 800ebcc:	e014      	b.n	800ebf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	695b      	ldr	r3, [r3, #20]
 800ebd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebdc:	4413      	add	r3, r2
 800ebde:	4619      	mov	r1, r3
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff fe42 	bl	800e86a <ld_clust>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebec:	e7c0      	b.n	800eb70 <follow_path+0x50>
			if (res != FR_OK) break;
 800ebee:	bf00      	nop
 800ebf0:	e002      	b.n	800ebf8 <follow_path+0xd8>
				break;
 800ebf2:	bf00      	nop
 800ebf4:	e000      	b.n	800ebf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ebf6:	bf00      	nop
			}
		}
	}

	return res;
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b087      	sub	sp, #28
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ec0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d031      	beq.n	800ec7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	e002      	b.n	800ec26 <get_ldnumber+0x24>
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	3301      	adds	r3, #1
 800ec24:	617b      	str	r3, [r7, #20]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2b20      	cmp	r3, #32
 800ec2c:	d903      	bls.n	800ec36 <get_ldnumber+0x34>
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	2b3a      	cmp	r3, #58	; 0x3a
 800ec34:	d1f4      	bne.n	800ec20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	2b3a      	cmp	r3, #58	; 0x3a
 800ec3c:	d11c      	bne.n	800ec78 <get_ldnumber+0x76>
			tp = *path;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	1c5a      	adds	r2, r3, #1
 800ec48:	60fa      	str	r2, [r7, #12]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	3b30      	subs	r3, #48	; 0x30
 800ec4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b09      	cmp	r3, #9
 800ec54:	d80e      	bhi.n	800ec74 <get_ldnumber+0x72>
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d10a      	bne.n	800ec74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d107      	bne.n	800ec74 <get_ldnumber+0x72>
					vol = (int)i;
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	617b      	str	r3, [r7, #20]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	697a      	ldr	r2, [r7, #20]
 800ec72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	e002      	b.n	800ec7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec78:	2300      	movs	r3, #0
 800ec7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec7c:	693b      	ldr	r3, [r7, #16]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	371c      	adds	r7, #28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
	...

0800ec8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	70da      	strb	r2, [r3, #3]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eca2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eca4:	6839      	ldr	r1, [r7, #0]
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff f8d8 	bl	800de5c <move_window>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <check_fs+0x2a>
 800ecb2:	2304      	movs	r3, #4
 800ecb4:	e038      	b.n	800ed28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	3330      	adds	r3, #48	; 0x30
 800ecba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fe1c 	bl	800d8fc <ld_word>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d001      	beq.n	800ecd4 <check_fs+0x48>
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e029      	b.n	800ed28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecda:	2be9      	cmp	r3, #233	; 0xe9
 800ecdc:	d009      	beq.n	800ecf2 <check_fs+0x66>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ece4:	2beb      	cmp	r3, #235	; 0xeb
 800ece6:	d11e      	bne.n	800ed26 <check_fs+0x9a>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ecee:	2b90      	cmp	r3, #144	; 0x90
 800ecf0:	d119      	bne.n	800ed26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	3330      	adds	r3, #48	; 0x30
 800ecf6:	3336      	adds	r3, #54	; 0x36
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fe fe17 	bl	800d92c <ld_dword>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ed04:	4a0a      	ldr	r2, [pc, #40]	; (800ed30 <check_fs+0xa4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d101      	bne.n	800ed0e <check_fs+0x82>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e00c      	b.n	800ed28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3330      	adds	r3, #48	; 0x30
 800ed12:	3352      	adds	r3, #82	; 0x52
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fe fe09 	bl	800d92c <ld_dword>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	4a05      	ldr	r2, [pc, #20]	; (800ed34 <check_fs+0xa8>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d101      	bne.n	800ed26 <check_fs+0x9a>
 800ed22:	2300      	movs	r3, #0
 800ed24:	e000      	b.n	800ed28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ed26:	2302      	movs	r3, #2
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	00544146 	.word	0x00544146
 800ed34:	33544146 	.word	0x33544146

0800ed38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b096      	sub	sp, #88	; 0x58
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	4613      	mov	r3, r2
 800ed44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff ff58 	bl	800ec02 <get_ldnumber>
 800ed52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	da01      	bge.n	800ed5e <find_volume+0x26>
 800ed5a:	230b      	movs	r3, #11
 800ed5c:	e22d      	b.n	800f1ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed5e:	4aa1      	ldr	r2, [pc, #644]	; (800efe4 <find_volume+0x2ac>)
 800ed60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <find_volume+0x3a>
 800ed6e:	230c      	movs	r3, #12
 800ed70:	e223      	b.n	800f1ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	f023 0301 	bic.w	r3, r3, #1
 800ed7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01a      	beq.n	800edbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ed88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8a:	785b      	ldrb	r3, [r3, #1]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fe fd17 	bl	800d7c0 <disk_status>
 800ed92:	4603      	mov	r3, r0
 800ed94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10c      	bne.n	800edbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d007      	beq.n	800edba <find_volume+0x82>
 800edaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edae:	f003 0304 	and.w	r3, r3, #4
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800edb6:	230a      	movs	r3, #10
 800edb8:	e1ff      	b.n	800f1ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800edba:	2300      	movs	r3, #0
 800edbc:	e1fd      	b.n	800f1ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800edbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800edc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	785b      	ldrb	r3, [r3, #1]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fe fd0f 	bl	800d7f4 <disk_initialize>
 800edd6:	4603      	mov	r3, r0
 800edd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ede0:	f003 0301 	and.w	r3, r3, #1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ede8:	2303      	movs	r3, #3
 800edea:	e1e6      	b.n	800f1ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d007      	beq.n	800ee02 <find_volume+0xca>
 800edf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edf6:	f003 0304 	and.w	r3, r3, #4
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800edfe:	230a      	movs	r3, #10
 800ee00:	e1db      	b.n	800f1ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee0a:	f7ff ff3f 	bl	800ec8c <check_fs>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ee14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d149      	bne.n	800eeb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ee20:	e01e      	b.n	800ee60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2a:	011b      	lsls	r3, r3, #4
 800ee2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ee30:	4413      	add	r3, r2
 800ee32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	3304      	adds	r3, #4
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d006      	beq.n	800ee4c <find_volume+0x114>
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	3308      	adds	r3, #8
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fe fd72 	bl	800d92c <ld_dword>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	e000      	b.n	800ee4e <find_volume+0x116>
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	3358      	adds	r3, #88	; 0x58
 800ee54:	443b      	add	r3, r7
 800ee56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ee60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d9dd      	bls.n	800ee22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee66:	2300      	movs	r3, #0
 800ee68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ee6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d002      	beq.n	800ee76 <find_volume+0x13e>
 800ee70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee72:	3b01      	subs	r3, #1
 800ee74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ee76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	3358      	adds	r3, #88	; 0x58
 800ee7c:	443b      	add	r3, r7
 800ee7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d005      	beq.n	800ee96 <find_volume+0x15e>
 800ee8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee8e:	f7ff fefd 	bl	800ec8c <check_fs>
 800ee92:	4603      	mov	r3, r0
 800ee94:	e000      	b.n	800ee98 <find_volume+0x160>
 800ee96:	2303      	movs	r3, #3
 800ee98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d905      	bls.n	800eeb0 <find_volume+0x178>
 800eea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea6:	3301      	adds	r3, #1
 800eea8:	643b      	str	r3, [r7, #64]	; 0x40
 800eeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	d9e2      	bls.n	800ee76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eeb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eeb4:	2b04      	cmp	r3, #4
 800eeb6:	d101      	bne.n	800eebc <find_volume+0x184>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e17e      	b.n	800f1ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d901      	bls.n	800eec8 <find_volume+0x190>
 800eec4:	230d      	movs	r3, #13
 800eec6:	e178      	b.n	800f1ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	3330      	adds	r3, #48	; 0x30
 800eecc:	330b      	adds	r3, #11
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fe fd14 	bl	800d8fc <ld_word>
 800eed4:	4603      	mov	r3, r0
 800eed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eeda:	d001      	beq.n	800eee0 <find_volume+0x1a8>
 800eedc:	230d      	movs	r3, #13
 800eede:	e16c      	b.n	800f1ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	3330      	adds	r3, #48	; 0x30
 800eee4:	3316      	adds	r3, #22
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fe fd08 	bl	800d8fc <ld_word>
 800eeec:	4603      	mov	r3, r0
 800eeee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d106      	bne.n	800ef04 <find_volume+0x1cc>
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	3330      	adds	r3, #48	; 0x30
 800eefa:	3324      	adds	r3, #36	; 0x24
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fd15 	bl	800d92c <ld_dword>
 800ef02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef08:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ef14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef16:	789b      	ldrb	r3, [r3, #2]
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d005      	beq.n	800ef28 <find_volume+0x1f0>
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	789b      	ldrb	r3, [r3, #2]
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d001      	beq.n	800ef28 <find_volume+0x1f0>
 800ef24:	230d      	movs	r3, #13
 800ef26:	e148      	b.n	800f1ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	789b      	ldrb	r3, [r3, #2]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef30:	fb02 f303 	mul.w	r3, r2, r3
 800ef34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ef36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ef42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef44:	895b      	ldrh	r3, [r3, #10]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d008      	beq.n	800ef5c <find_volume+0x224>
 800ef4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4c:	895b      	ldrh	r3, [r3, #10]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	895b      	ldrh	r3, [r3, #10]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	4013      	ands	r3, r2
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <find_volume+0x228>
 800ef5c:	230d      	movs	r3, #13
 800ef5e:	e12c      	b.n	800f1ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	3330      	adds	r3, #48	; 0x30
 800ef64:	3311      	adds	r3, #17
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fcc8 	bl	800d8fc <ld_word>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	461a      	mov	r2, r3
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	891b      	ldrh	r3, [r3, #8]
 800ef78:	f003 030f 	and.w	r3, r3, #15
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <find_volume+0x24e>
 800ef82:	230d      	movs	r3, #13
 800ef84:	e119      	b.n	800f1ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ef86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef88:	3330      	adds	r3, #48	; 0x30
 800ef8a:	3313      	adds	r3, #19
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe fcb5 	bl	800d8fc <ld_word>
 800ef92:	4603      	mov	r3, r0
 800ef94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ef96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <find_volume+0x272>
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	3330      	adds	r3, #48	; 0x30
 800efa0:	3320      	adds	r3, #32
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe fcc2 	bl	800d92c <ld_dword>
 800efa8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800efaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efac:	3330      	adds	r3, #48	; 0x30
 800efae:	330e      	adds	r3, #14
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fe fca3 	bl	800d8fc <ld_word>
 800efb6:	4603      	mov	r3, r0
 800efb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800efba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d101      	bne.n	800efc4 <find_volume+0x28c>
 800efc0:	230d      	movs	r3, #13
 800efc2:	e0fa      	b.n	800f1ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800efc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800efc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efc8:	4413      	add	r3, r2
 800efca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efcc:	8912      	ldrh	r2, [r2, #8]
 800efce:	0912      	lsrs	r2, r2, #4
 800efd0:	b292      	uxth	r2, r2
 800efd2:	4413      	add	r3, r2
 800efd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800efd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	429a      	cmp	r2, r3
 800efdc:	d204      	bcs.n	800efe8 <find_volume+0x2b0>
 800efde:	230d      	movs	r3, #13
 800efe0:	e0eb      	b.n	800f1ba <find_volume+0x482>
 800efe2:	bf00      	nop
 800efe4:	20000a64 	.word	0x20000a64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800efe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff0:	8952      	ldrh	r2, [r2, #10]
 800eff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eff6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <find_volume+0x2ca>
 800effe:	230d      	movs	r3, #13
 800f000:	e0db      	b.n	800f1ba <find_volume+0x482>
		fmt = FS_FAT32;
 800f002:	2303      	movs	r3, #3
 800f004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f00e:	4293      	cmp	r3, r2
 800f010:	d802      	bhi.n	800f018 <find_volume+0x2e0>
 800f012:	2302      	movs	r3, #2
 800f014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f01e:	4293      	cmp	r3, r2
 800f020:	d802      	bhi.n	800f028 <find_volume+0x2f0>
 800f022:	2301      	movs	r3, #1
 800f024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	1c9a      	adds	r2, r3, #2
 800f02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f034:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f036:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f03a:	441a      	add	r2, r3
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f044:	441a      	add	r2, r3
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800f04a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d11e      	bne.n	800f090 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	3330      	adds	r3, #48	; 0x30
 800f056:	332a      	adds	r3, #42	; 0x2a
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fc4f 	bl	800d8fc <ld_word>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <find_volume+0x330>
 800f064:	230d      	movs	r3, #13
 800f066:	e0a8      	b.n	800f1ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	891b      	ldrh	r3, [r3, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d001      	beq.n	800f074 <find_volume+0x33c>
 800f070:	230d      	movs	r3, #13
 800f072:	e0a2      	b.n	800f1ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f076:	3330      	adds	r3, #48	; 0x30
 800f078:	332c      	adds	r3, #44	; 0x2c
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fe fc56 	bl	800d92c <ld_dword>
 800f080:	4602      	mov	r2, r0
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	695b      	ldr	r3, [r3, #20]
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	647b      	str	r3, [r7, #68]	; 0x44
 800f08e:	e01f      	b.n	800f0d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	891b      	ldrh	r3, [r3, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d101      	bne.n	800f09c <find_volume+0x364>
 800f098:	230d      	movs	r3, #13
 800f09a:	e08e      	b.n	800f1ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	6a1a      	ldr	r2, [r3, #32]
 800f0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0a2:	441a      	add	r2, r3
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d103      	bne.n	800f0b8 <find_volume+0x380>
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	695b      	ldr	r3, [r3, #20]
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	e00a      	b.n	800f0ce <find_volume+0x396>
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ba:	695a      	ldr	r2, [r3, #20]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	4413      	add	r3, r2
 800f0c2:	085a      	lsrs	r2, r3, #1
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	695b      	ldr	r3, [r3, #20]
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f0ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	699a      	ldr	r2, [r3, #24]
 800f0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f0da:	0a5b      	lsrs	r3, r3, #9
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d201      	bcs.n	800f0e4 <find_volume+0x3ac>
 800f0e0:	230d      	movs	r3, #13
 800f0e2:	e06a      	b.n	800f1ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ea:	611a      	str	r2, [r3, #16]
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ee:	691a      	ldr	r2, [r3, #16]
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	2280      	movs	r2, #128	; 0x80
 800f0f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f0fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	d149      	bne.n	800f196 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f104:	3330      	adds	r3, #48	; 0x30
 800f106:	3330      	adds	r3, #48	; 0x30
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe fbf7 	bl	800d8fc <ld_word>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b01      	cmp	r3, #1
 800f112:	d140      	bne.n	800f196 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f116:	3301      	adds	r3, #1
 800f118:	4619      	mov	r1, r3
 800f11a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f11c:	f7fe fe9e 	bl	800de5c <move_window>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d137      	bne.n	800f196 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	2200      	movs	r2, #0
 800f12a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12e:	3330      	adds	r3, #48	; 0x30
 800f130:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f134:	4618      	mov	r0, r3
 800f136:	f7fe fbe1 	bl	800d8fc <ld_word>
 800f13a:	4603      	mov	r3, r0
 800f13c:	461a      	mov	r2, r3
 800f13e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f142:	429a      	cmp	r2, r3
 800f144:	d127      	bne.n	800f196 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f148:	3330      	adds	r3, #48	; 0x30
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fe fbee 	bl	800d92c <ld_dword>
 800f150:	4603      	mov	r3, r0
 800f152:	4a1c      	ldr	r2, [pc, #112]	; (800f1c4 <find_volume+0x48c>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d11e      	bne.n	800f196 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	3330      	adds	r3, #48	; 0x30
 800f15c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe fbe3 	bl	800d92c <ld_dword>
 800f166:	4603      	mov	r3, r0
 800f168:	4a17      	ldr	r2, [pc, #92]	; (800f1c8 <find_volume+0x490>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d113      	bne.n	800f196 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	3330      	adds	r3, #48	; 0x30
 800f172:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f176:	4618      	mov	r0, r3
 800f178:	f7fe fbd8 	bl	800d92c <ld_dword>
 800f17c:	4602      	mov	r2, r0
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f184:	3330      	adds	r3, #48	; 0x30
 800f186:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fe fbce 	bl	800d92c <ld_dword>
 800f190:	4602      	mov	r2, r0
 800f192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f194:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f198:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f19c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f19e:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <find_volume+0x494>)
 800f1a0:	881b      	ldrh	r3, [r3, #0]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	4b09      	ldr	r3, [pc, #36]	; (800f1cc <find_volume+0x494>)
 800f1a8:	801a      	strh	r2, [r3, #0]
 800f1aa:	4b08      	ldr	r3, [pc, #32]	; (800f1cc <find_volume+0x494>)
 800f1ac:	881a      	ldrh	r2, [r3, #0]
 800f1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f1b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1b4:	f7fe fdea 	bl	800dd8c <clear_lock>
#endif
	return FR_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3758      	adds	r7, #88	; 0x58
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	41615252 	.word	0x41615252
 800f1c8:	61417272 	.word	0x61417272
 800f1cc:	20000a68 	.word	0x20000a68

0800f1d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f1da:	2309      	movs	r3, #9
 800f1dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d01c      	beq.n	800f21e <validate+0x4e>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d018      	beq.n	800f21e <validate+0x4e>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d013      	beq.n	800f21e <validate+0x4e>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	889a      	ldrh	r2, [r3, #4]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	88db      	ldrh	r3, [r3, #6]
 800f200:	429a      	cmp	r2, r3
 800f202:	d10c      	bne.n	800f21e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	785b      	ldrb	r3, [r3, #1]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fe fad8 	bl	800d7c0 <disk_status>
 800f210:	4603      	mov	r3, r0
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <validate+0x4e>
			res = FR_OK;
 800f21a:	2300      	movs	r3, #0
 800f21c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d102      	bne.n	800f22a <validate+0x5a>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	e000      	b.n	800f22c <validate+0x5c>
 800f22a:	2300      	movs	r3, #0
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	6013      	str	r3, [r2, #0]
	return res;
 800f230:	7bfb      	ldrb	r3, [r7, #15]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
	...

0800f23c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b088      	sub	sp, #32
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	4613      	mov	r3, r2
 800f248:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fcd5 	bl	800ec02 <get_ldnumber>
 800f258:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	da01      	bge.n	800f264 <f_mount+0x28>
 800f260:	230b      	movs	r3, #11
 800f262:	e02b      	b.n	800f2bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f264:	4a17      	ldr	r2, [pc, #92]	; (800f2c4 <f_mount+0x88>)
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f26c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f274:	69b8      	ldr	r0, [r7, #24]
 800f276:	f7fe fd89 	bl	800dd8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	2200      	movs	r2, #0
 800f27e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	490d      	ldr	r1, [pc, #52]	; (800f2c4 <f_mount+0x88>)
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <f_mount+0x66>
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d001      	beq.n	800f2a6 <f_mount+0x6a>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e00a      	b.n	800f2bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f2a6:	f107 010c 	add.w	r1, r7, #12
 800f2aa:	f107 0308 	add.w	r3, r7, #8
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff fd41 	bl	800ed38 <find_volume>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3720      	adds	r7, #32
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	20000a64 	.word	0x20000a64

0800f2c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b09a      	sub	sp, #104	; 0x68
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d101      	bne.n	800f2e0 <f_open+0x18>
 800f2dc:	2309      	movs	r3, #9
 800f2de:	e1ad      	b.n	800f63c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f2e8:	79fa      	ldrb	r2, [r7, #7]
 800f2ea:	f107 0114 	add.w	r1, r7, #20
 800f2ee:	f107 0308 	add.w	r3, r7, #8
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff fd20 	bl	800ed38 <find_volume>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f2fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f302:	2b00      	cmp	r3, #0
 800f304:	f040 8191 	bne.w	800f62a <f_open+0x362>
		dj.obj.fs = fs;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	f107 0318 	add.w	r3, r7, #24
 800f312:	4611      	mov	r1, r2
 800f314:	4618      	mov	r0, r3
 800f316:	f7ff fc03 	bl	800eb20 <follow_path>
 800f31a:	4603      	mov	r3, r0
 800f31c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f324:	2b00      	cmp	r3, #0
 800f326:	d11a      	bne.n	800f35e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f328:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f32c:	b25b      	sxtb	r3, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	da03      	bge.n	800f33a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f332:	2306      	movs	r3, #6
 800f334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f338:	e011      	b.n	800f35e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	f023 0301 	bic.w	r3, r3, #1
 800f340:	2b00      	cmp	r3, #0
 800f342:	bf14      	ite	ne
 800f344:	2301      	movne	r3, #1
 800f346:	2300      	moveq	r3, #0
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	461a      	mov	r2, r3
 800f34c:	f107 0318 	add.w	r3, r7, #24
 800f350:	4611      	mov	r1, r2
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe fbd2 	bl	800dafc <chk_lock>
 800f358:	4603      	mov	r3, r0
 800f35a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	f003 031c 	and.w	r3, r3, #28
 800f364:	2b00      	cmp	r3, #0
 800f366:	d07f      	beq.n	800f468 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f368:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d017      	beq.n	800f3a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f374:	2b04      	cmp	r3, #4
 800f376:	d10e      	bne.n	800f396 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f378:	f7fe fc1c 	bl	800dbb4 <enq_lock>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d006      	beq.n	800f390 <f_open+0xc8>
 800f382:	f107 0318 	add.w	r3, r7, #24
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fb03 	bl	800e992 <dir_register>
 800f38c:	4603      	mov	r3, r0
 800f38e:	e000      	b.n	800f392 <f_open+0xca>
 800f390:	2312      	movs	r3, #18
 800f392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	f043 0308 	orr.w	r3, r3, #8
 800f39c:	71fb      	strb	r3, [r7, #7]
 800f39e:	e010      	b.n	800f3c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f3a0:	7fbb      	ldrb	r3, [r7, #30]
 800f3a2:	f003 0311 	and.w	r3, r3, #17
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d003      	beq.n	800f3b2 <f_open+0xea>
					res = FR_DENIED;
 800f3aa:	2307      	movs	r3, #7
 800f3ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3b0:	e007      	b.n	800f3c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f3b2:	79fb      	ldrb	r3, [r7, #7]
 800f3b4:	f003 0304 	and.w	r3, r3, #4
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d002      	beq.n	800f3c2 <f_open+0xfa>
 800f3bc:	2308      	movs	r3, #8
 800f3be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f3c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d168      	bne.n	800f49c <f_open+0x1d4>
 800f3ca:	79fb      	ldrb	r3, [r7, #7]
 800f3cc:	f003 0308 	and.w	r3, r3, #8
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d063      	beq.n	800f49c <f_open+0x1d4>
				dw = GET_FATTIME();
 800f3d4:	f7fc fbd0 	bl	800bb78 <get_fattime>
 800f3d8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3dc:	330e      	adds	r3, #14
 800f3de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fe fae1 	bl	800d9a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e8:	3316      	adds	r3, #22
 800f3ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fadb 	bl	800d9a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	330b      	adds	r3, #11
 800f3f6:	2220      	movs	r2, #32
 800f3f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3fe:	4611      	mov	r1, r2
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff fa32 	bl	800e86a <ld_clust>
 800f406:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f40c:	2200      	movs	r2, #0
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fa4a 	bl	800e8a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f416:	331c      	adds	r3, #28
 800f418:	2100      	movs	r1, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fe fac4 	bl	800d9a8 <st_dword>
					fs->wflag = 1;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	2201      	movs	r2, #1
 800f424:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d037      	beq.n	800f49c <f_open+0x1d4>
						dw = fs->winsect;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f430:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f432:	f107 0318 	add.w	r3, r7, #24
 800f436:	2200      	movs	r2, #0
 800f438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fe ff5d 	bl	800e2fa <remove_chain>
 800f440:	4603      	mov	r3, r0
 800f442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f446:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d126      	bne.n	800f49c <f_open+0x1d4>
							res = move_window(fs, dw);
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fd02 	bl	800de5c <move_window>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f462:	3a01      	subs	r2, #1
 800f464:	60da      	str	r2, [r3, #12]
 800f466:	e019      	b.n	800f49c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d115      	bne.n	800f49c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f470:	7fbb      	ldrb	r3, [r7, #30]
 800f472:	f003 0310 	and.w	r3, r3, #16
 800f476:	2b00      	cmp	r3, #0
 800f478:	d003      	beq.n	800f482 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f47a:	2304      	movs	r3, #4
 800f47c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f480:	e00c      	b.n	800f49c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f482:	79fb      	ldrb	r3, [r7, #7]
 800f484:	f003 0302 	and.w	r3, r3, #2
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d007      	beq.n	800f49c <f_open+0x1d4>
 800f48c:	7fbb      	ldrb	r3, [r7, #30]
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <f_open+0x1d4>
						res = FR_DENIED;
 800f496:	2307      	movs	r3, #7
 800f498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f49c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d128      	bne.n	800f4f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	f003 0308 	and.w	r3, r3, #8
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	f023 0301 	bic.w	r3, r3, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	bf14      	ite	ne
 800f4ce:	2301      	movne	r3, #1
 800f4d0:	2300      	moveq	r3, #0
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f107 0318 	add.w	r3, r7, #24
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fe fb8b 	bl	800dbf8 <inc_lock>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <f_open+0x22e>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	f040 8095 	bne.w	800f62a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f504:	4611      	mov	r1, r2
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff f9af 	bl	800e86a <ld_clust>
 800f50c:	4602      	mov	r2, r0
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f514:	331c      	adds	r3, #28
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe fa08 	bl	800d92c <ld_dword>
 800f51c:	4602      	mov	r2, r0
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	88da      	ldrh	r2, [r3, #6]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	79fa      	ldrb	r2, [r7, #7]
 800f53a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3330      	adds	r3, #48	; 0x30
 800f552:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f556:	2100      	movs	r1, #0
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fe fa72 	bl	800da42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d060      	beq.n	800f62a <f_open+0x362>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d05c      	beq.n	800f62a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	68da      	ldr	r2, [r3, #12]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	895b      	ldrh	r3, [r3, #10]
 800f57c:	025b      	lsls	r3, r3, #9
 800f57e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f58c:	e016      	b.n	800f5bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe fd1d 	bl	800dfd2 <get_fat>
 800f598:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f59a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d802      	bhi.n	800f5a6 <f_open+0x2de>
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5ac:	d102      	bne.n	800f5b4 <f_open+0x2ec>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b8:	1ad3      	subs	r3, r2, r3
 800f5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d103      	bne.n	800f5cc <f_open+0x304>
 800f5c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d8e0      	bhi.n	800f58e <f_open+0x2c6>
				}
				fp->clust = clst;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f5d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d127      	bne.n	800f62a <f_open+0x362>
 800f5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d022      	beq.n	800f62a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe fcd3 	bl	800df94 <clust2sect>
 800f5ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d103      	bne.n	800f5fe <f_open+0x336>
						res = FR_INT_ERR;
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f5fc:	e015      	b.n	800f62a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f5fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f600:	0a5a      	lsrs	r2, r3, #9
 800f602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f604:	441a      	add	r2, r3
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	7858      	ldrb	r0, [r3, #1]
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6a1a      	ldr	r2, [r3, #32]
 800f618:	2301      	movs	r3, #1
 800f61a:	f7fe f911 	bl	800d840 <disk_read>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <f_open+0x362>
 800f624:	2301      	movs	r3, #1
 800f626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f62a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d002      	beq.n	800f638 <f_open+0x370>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3768      	adds	r7, #104	; 0x68
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b08e      	sub	sp, #56	; 0x38
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	2200      	movs	r2, #0
 800f65a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f107 0214 	add.w	r2, r7, #20
 800f662:	4611      	mov	r1, r2
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fdb3 	bl	800f1d0 <validate>
 800f66a:	4603      	mov	r3, r0
 800f66c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f674:	2b00      	cmp	r3, #0
 800f676:	d107      	bne.n	800f688 <f_read+0x44>
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	7d5b      	ldrb	r3, [r3, #21]
 800f67c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <f_read+0x4a>
 800f688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f68c:	e115      	b.n	800f8ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	f003 0301 	and.w	r3, r3, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <f_read+0x5a>
 800f69a:	2307      	movs	r3, #7
 800f69c:	e10d      	b.n	800f8ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	68da      	ldr	r2, [r3, #12]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	6a3b      	ldr	r3, [r7, #32]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	f240 80fe 	bls.w	800f8b0 <f_read+0x26c>
 800f6b4:	6a3b      	ldr	r3, [r7, #32]
 800f6b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f6b8:	e0fa      	b.n	800f8b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	699b      	ldr	r3, [r3, #24]
 800f6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f040 80c6 	bne.w	800f854 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	0a5b      	lsrs	r3, r3, #9
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	8952      	ldrh	r2, [r2, #10]
 800f6d2:	3a01      	subs	r2, #1
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d12f      	bne.n	800f73e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	699b      	ldr	r3, [r3, #24]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d103      	bne.n	800f6ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	633b      	str	r3, [r7, #48]	; 0x30
 800f6ec:	e013      	b.n	800f716 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d007      	beq.n	800f706 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f7fe fef9 	bl	800e4f4 <clmt_clust>
 800f702:	6338      	str	r0, [r7, #48]	; 0x30
 800f704:	e007      	b.n	800f716 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	4619      	mov	r1, r3
 800f70e:	4610      	mov	r0, r2
 800f710:	f7fe fc5f 	bl	800dfd2 <get_fat>
 800f714:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d804      	bhi.n	800f726 <f_read+0xe2>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2202      	movs	r2, #2
 800f720:	755a      	strb	r2, [r3, #21]
 800f722:	2302      	movs	r3, #2
 800f724:	e0c9      	b.n	800f8ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f72c:	d104      	bne.n	800f738 <f_read+0xf4>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2201      	movs	r2, #1
 800f732:	755a      	strb	r2, [r3, #21]
 800f734:	2301      	movs	r3, #1
 800f736:	e0c0      	b.n	800f8ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	69db      	ldr	r3, [r3, #28]
 800f744:	4619      	mov	r1, r3
 800f746:	4610      	mov	r0, r2
 800f748:	f7fe fc24 	bl	800df94 <clust2sect>
 800f74c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d104      	bne.n	800f75e <f_read+0x11a>
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2202      	movs	r2, #2
 800f758:	755a      	strb	r2, [r3, #21]
 800f75a:	2302      	movs	r3, #2
 800f75c:	e0ad      	b.n	800f8ba <f_read+0x276>
			sect += csect;
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	4413      	add	r3, r2
 800f764:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	0a5b      	lsrs	r3, r3, #9
 800f76a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d039      	beq.n	800f7e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f772:	69fa      	ldr	r2, [r7, #28]
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	4413      	add	r3, r2
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	8952      	ldrh	r2, [r2, #10]
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d905      	bls.n	800f78c <f_read+0x148>
					cc = fs->csize - csect;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	895b      	ldrh	r3, [r3, #10]
 800f784:	461a      	mov	r2, r3
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	7858      	ldrb	r0, [r3, #1]
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f796:	f7fe f853 	bl	800d840 <disk_read>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d004      	beq.n	800f7aa <f_read+0x166>
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	755a      	strb	r2, [r3, #21]
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e087      	b.n	800f8ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	b25b      	sxtb	r3, r3
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	da14      	bge.n	800f7de <f_read+0x19a>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6a1a      	ldr	r2, [r3, #32]
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d90d      	bls.n	800f7de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6a1a      	ldr	r2, [r3, #32]
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	025b      	lsls	r3, r3, #9
 800f7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7ce:	18d0      	adds	r0, r2, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3330      	adds	r3, #48	; 0x30
 800f7d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7d8:	4619      	mov	r1, r3
 800f7da:	f7fe f911 	bl	800da00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	025b      	lsls	r3, r3, #9
 800f7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f7e4:	e050      	b.n	800f888 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6a1b      	ldr	r3, [r3, #32]
 800f7ea:	69ba      	ldr	r2, [r7, #24]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d02e      	beq.n	800f84e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	7d1b      	ldrb	r3, [r3, #20]
 800f7f4:	b25b      	sxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da18      	bge.n	800f82c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	7858      	ldrb	r0, [r3, #1]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6a1a      	ldr	r2, [r3, #32]
 800f808:	2301      	movs	r3, #1
 800f80a:	f7fe f839 	bl	800d880 <disk_write>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d004      	beq.n	800f81e <f_read+0x1da>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2201      	movs	r2, #1
 800f818:	755a      	strb	r2, [r3, #21]
 800f81a:	2301      	movs	r3, #1
 800f81c:	e04d      	b.n	800f8ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	7d1b      	ldrb	r3, [r3, #20]
 800f822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f826:	b2da      	uxtb	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	7858      	ldrb	r0, [r3, #1]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f836:	2301      	movs	r3, #1
 800f838:	69ba      	ldr	r2, [r7, #24]
 800f83a:	f7fe f801 	bl	800d840 <disk_read>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <f_read+0x20a>
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2201      	movs	r2, #1
 800f848:	755a      	strb	r2, [r3, #21]
 800f84a:	2301      	movs	r3, #1
 800f84c:	e035      	b.n	800f8ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	69ba      	ldr	r2, [r7, #24]
 800f852:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f85c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f860:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	429a      	cmp	r2, r3
 800f868:	d901      	bls.n	800f86e <f_read+0x22a>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f87c:	4413      	add	r3, r2
 800f87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f880:	4619      	mov	r1, r3
 800f882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f884:	f7fe f8bc 	bl	800da00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	4413      	add	r3, r2
 800f88e:	627b      	str	r3, [r7, #36]	; 0x24
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	699a      	ldr	r2, [r3, #24]
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	441a      	add	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	619a      	str	r2, [r3, #24]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	441a      	add	r2, r3
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	601a      	str	r2, [r3, #0]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f47f af01 	bne.w	800f6ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3738      	adds	r7, #56	; 0x38
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f8c2:	b580      	push	{r7, lr}
 800f8c4:	b08c      	sub	sp, #48	; 0x30
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	60f8      	str	r0, [r7, #12]
 800f8ca:	60b9      	str	r1, [r7, #8]
 800f8cc:	607a      	str	r2, [r7, #4]
 800f8ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f107 0210 	add.w	r2, r7, #16
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7ff fc74 	bl	800f1d0 <validate>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d107      	bne.n	800f906 <f_write+0x44>
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	7d5b      	ldrb	r3, [r3, #21]
 800f8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <f_write+0x4a>
 800f906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f90a:	e14b      	b.n	800fba4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	7d1b      	ldrb	r3, [r3, #20]
 800f910:	f003 0302 	and.w	r3, r3, #2
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <f_write+0x5a>
 800f918:	2307      	movs	r3, #7
 800f91a:	e143      	b.n	800fba4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	699a      	ldr	r2, [r3, #24]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	441a      	add	r2, r3
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	699b      	ldr	r3, [r3, #24]
 800f928:	429a      	cmp	r2, r3
 800f92a:	f080 812d 	bcs.w	800fb88 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	699b      	ldr	r3, [r3, #24]
 800f932:	43db      	mvns	r3, r3
 800f934:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f936:	e127      	b.n	800fb88 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	699b      	ldr	r3, [r3, #24]
 800f93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f940:	2b00      	cmp	r3, #0
 800f942:	f040 80e3 	bne.w	800fb0c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	0a5b      	lsrs	r3, r3, #9
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	8952      	ldrh	r2, [r2, #10]
 800f950:	3a01      	subs	r2, #1
 800f952:	4013      	ands	r3, r2
 800f954:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d143      	bne.n	800f9e4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d10c      	bne.n	800f97e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d11a      	bne.n	800f9a6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe fd25 	bl	800e3c4 <create_chain>
 800f97a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f97c:	e013      	b.n	800f9a6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f982:	2b00      	cmp	r3, #0
 800f984:	d007      	beq.n	800f996 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	4619      	mov	r1, r3
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7fe fdb1 	bl	800e4f4 <clmt_clust>
 800f992:	62b8      	str	r0, [r7, #40]	; 0x28
 800f994:	e007      	b.n	800f9a6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	69db      	ldr	r3, [r3, #28]
 800f99c:	4619      	mov	r1, r3
 800f99e:	4610      	mov	r0, r2
 800f9a0:	f7fe fd10 	bl	800e3c4 <create_chain>
 800f9a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 80f2 	beq.w	800fb92 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d104      	bne.n	800f9be <f_write+0xfc>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	755a      	strb	r2, [r3, #21]
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	e0f2      	b.n	800fba4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9c4:	d104      	bne.n	800f9d0 <f_write+0x10e>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	755a      	strb	r2, [r3, #21]
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e0e9      	b.n	800fba4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <f_write+0x122>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	b25b      	sxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	da18      	bge.n	800fa20 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	7858      	ldrb	r0, [r3, #1]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6a1a      	ldr	r2, [r3, #32]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f7fd ff3f 	bl	800d880 <disk_write>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d004      	beq.n	800fa12 <f_write+0x150>
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	755a      	strb	r2, [r3, #21]
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e0c8      	b.n	800fba4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	69db      	ldr	r3, [r3, #28]
 800fa26:	4619      	mov	r1, r3
 800fa28:	4610      	mov	r0, r2
 800fa2a:	f7fe fab3 	bl	800df94 <clust2sect>
 800fa2e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d104      	bne.n	800fa40 <f_write+0x17e>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2202      	movs	r2, #2
 800fa3a:	755a      	strb	r2, [r3, #21]
 800fa3c:	2302      	movs	r3, #2
 800fa3e:	e0b1      	b.n	800fba4 <f_write+0x2e2>
			sect += csect;
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	4413      	add	r3, r2
 800fa46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	0a5b      	lsrs	r3, r3, #9
 800fa4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d03c      	beq.n	800face <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fa54:	69ba      	ldr	r2, [r7, #24]
 800fa56:	6a3b      	ldr	r3, [r7, #32]
 800fa58:	4413      	add	r3, r2
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	8952      	ldrh	r2, [r2, #10]
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d905      	bls.n	800fa6e <f_write+0x1ac>
					cc = fs->csize - csect;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	895b      	ldrh	r3, [r3, #10]
 800fa66:	461a      	mov	r2, r3
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	7858      	ldrb	r0, [r3, #1]
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	69f9      	ldr	r1, [r7, #28]
 800fa78:	f7fd ff02 	bl	800d880 <disk_write>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d004      	beq.n	800fa8c <f_write+0x1ca>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2201      	movs	r2, #1
 800fa86:	755a      	strb	r2, [r3, #21]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e08b      	b.n	800fba4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6a1a      	ldr	r2, [r3, #32]
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	6a3a      	ldr	r2, [r7, #32]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d915      	bls.n	800fac6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6a1a      	ldr	r2, [r3, #32]
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	025b      	lsls	r3, r3, #9
 800faaa:	69fa      	ldr	r2, [r7, #28]
 800faac:	4413      	add	r3, r2
 800faae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fab2:	4619      	mov	r1, r3
 800fab4:	f7fd ffa4 	bl	800da00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	7d1b      	ldrb	r3, [r3, #20]
 800fabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fac6:	6a3b      	ldr	r3, [r7, #32]
 800fac8:	025b      	lsls	r3, r3, #9
 800faca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800facc:	e03f      	b.n	800fb4e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d016      	beq.n	800fb06 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	699a      	ldr	r2, [r3, #24]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d210      	bcs.n	800fb06 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	7858      	ldrb	r0, [r3, #1]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800faee:	2301      	movs	r3, #1
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	f7fd fea5 	bl	800d840 <disk_read>
 800faf6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d004      	beq.n	800fb06 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2201      	movs	r2, #1
 800fb00:	755a      	strb	r2, [r3, #21]
 800fb02:	2301      	movs	r3, #1
 800fb04:	e04e      	b.n	800fba4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	697a      	ldr	r2, [r7, #20]
 800fb0a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fb1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d901      	bls.n	800fb26 <f_write+0x264>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb34:	4413      	add	r3, r2
 800fb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb38:	69f9      	ldr	r1, [r7, #28]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fd ff60 	bl	800da00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	7d1b      	ldrb	r3, [r3, #20]
 800fb44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fb4e:	69fa      	ldr	r2, [r7, #28]
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	4413      	add	r3, r2
 800fb54:	61fb      	str	r3, [r7, #28]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	699a      	ldr	r2, [r3, #24]
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5c:	441a      	add	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	619a      	str	r2, [r3, #24]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	68da      	ldr	r2, [r3, #12]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	bf38      	it	cc
 800fb6e:	461a      	movcc	r2, r3
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	60da      	str	r2, [r3, #12]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	441a      	add	r2, r3
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	601a      	str	r2, [r3, #0]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb84:	1ad3      	subs	r3, r2, r3
 800fb86:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f47f aed4 	bne.w	800f938 <f_write+0x76>
 800fb90:	e000      	b.n	800fb94 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	7d1b      	ldrb	r3, [r3, #20]
 800fb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb9c:	b2da      	uxtb	r2, r3
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3730      	adds	r7, #48	; 0x30
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f107 0208 	add.w	r2, r7, #8
 800fbba:	4611      	mov	r1, r2
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff fb07 	bl	800f1d0 <validate>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d168      	bne.n	800fc9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
 800fbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d062      	beq.n	800fc9e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	7d1b      	ldrb	r3, [r3, #20]
 800fbdc:	b25b      	sxtb	r3, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	da15      	bge.n	800fc0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	7858      	ldrb	r0, [r3, #1]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a1a      	ldr	r2, [r3, #32]
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	f7fd fe45 	bl	800d880 <disk_write>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d001      	beq.n	800fc00 <f_sync+0x54>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e04f      	b.n	800fca0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	7d1b      	ldrb	r3, [r3, #20]
 800fc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fc0e:	f7fb ffb3 	bl	800bb78 <get_fattime>
 800fc12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	f7fe f91d 	bl	800de5c <move_window>
 800fc22:	4603      	mov	r3, r0
 800fc24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d138      	bne.n	800fc9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	330b      	adds	r3, #11
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	330b      	adds	r3, #11
 800fc3c:	f042 0220 	orr.w	r2, r2, #32
 800fc40:	b2d2      	uxtb	r2, r2
 800fc42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6818      	ldr	r0, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	f7fe fe2a 	bl	800e8a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f103 021c 	add.w	r2, r3, #28
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	4610      	mov	r0, r2
 800fc62:	f7fd fea1 	bl	800d9a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3316      	adds	r3, #22
 800fc6a:	6939      	ldr	r1, [r7, #16]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fd fe9b 	bl	800d9a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3312      	adds	r3, #18
 800fc76:	2100      	movs	r1, #0
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fd fe7a 	bl	800d972 <st_word>
					fs->wflag = 1;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2201      	movs	r2, #1
 800fc82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe f916 	bl	800deb8 <sync_fs>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	7d1b      	ldrb	r3, [r3, #20]
 800fc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3718      	adds	r7, #24
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff ff7b 	bl	800fbac <f_sync>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d118      	bne.n	800fcf2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f107 0208 	add.w	r2, r7, #8
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7ff fa81 	bl	800f1d0 <validate>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10c      	bne.n	800fcf2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fe f819 	bl	800dd14 <dec_lock>
 800fce2:	4603      	mov	r3, r0
 800fce4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fce6:	7bfb      	ldrb	r3, [r7, #15]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800fcfc:	b590      	push	{r4, r7, lr}
 800fcfe:	b09d      	sub	sp, #116	; 0x74
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	607a      	str	r2, [r7, #4]
 800fd06:	603b      	str	r3, [r7, #0]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800fd10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd14:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800fd16:	f107 030c 	add.w	r3, r7, #12
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe ff71 	bl	800ec02 <get_ldnumber>
 800fd20:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	da02      	bge.n	800fd2e <f_mkfs+0x32>
 800fd28:	230b      	movs	r3, #11
 800fd2a:	f000 bc0d 	b.w	8010548 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800fd2e:	4a94      	ldr	r2, [pc, #592]	; (800ff80 <f_mkfs+0x284>)
 800fd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d005      	beq.n	800fd46 <f_mkfs+0x4a>
 800fd3a:	4a91      	ldr	r2, [pc, #580]	; (800ff80 <f_mkfs+0x284>)
 800fd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd42:	2200      	movs	r2, #0
 800fd44:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800fd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800fd52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fd fd4c 	bl	800d7f4 <disk_initialize>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800fd62:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fd66:	f003 0301 	and.w	r3, r3, #1
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <f_mkfs+0x76>
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e3ea      	b.n	8010548 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800fd72:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fd76:	f003 0304 	and.w	r3, r3, #4
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <f_mkfs+0x86>
 800fd7e:	230a      	movs	r3, #10
 800fd80:	e3e2      	b.n	8010548 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800fd82:	f107 0214 	add.w	r2, r7, #20
 800fd86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd8a:	2103      	movs	r1, #3
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fd fd97 	bl	800d8c0 <disk_ioctl>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10c      	bne.n	800fdb2 <f_mkfs+0xb6>
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d009      	beq.n	800fdb2 <f_mkfs+0xb6>
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fda4:	d805      	bhi.n	800fdb2 <f_mkfs+0xb6>
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	1e5a      	subs	r2, r3, #1
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	4013      	ands	r3, r2
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <f_mkfs+0xba>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800fdb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <f_mkfs+0xce>
 800fdc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d309      	bcc.n	800fdde <f_mkfs+0xe2>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fdd0:	d805      	bhi.n	800fdde <f_mkfs+0xe2>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	1e5a      	subs	r2, r3, #1
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4013      	ands	r3, r2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <f_mkfs+0xe6>
 800fdde:	2313      	movs	r3, #19
 800fde0:	e3b2      	b.n	8010548 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800fde2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdea:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800fdf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fdf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800fdfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe00:	fb02 f303 	mul.w	r3, r2, r3
 800fe04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800fe06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d101      	bne.n	800fe10 <f_mkfs+0x114>
 800fe0c:	230e      	movs	r3, #14
 800fe0e:	e39b      	b.n	8010548 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800fe10:	f107 0210 	add.w	r2, r7, #16
 800fe14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe18:	2101      	movs	r1, #1
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fd fd50 	bl	800d8c0 <disk_ioctl>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <f_mkfs+0x12e>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e38e      	b.n	8010548 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800fe2a:	7afb      	ldrb	r3, [r7, #11]
 800fe2c:	f003 0308 	and.w	r3, r3, #8
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <f_mkfs+0x13c>
 800fe34:	2300      	movs	r3, #0
 800fe36:	e000      	b.n	800fe3a <f_mkfs+0x13e>
 800fe38:	233f      	movs	r3, #63	; 0x3f
 800fe3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d901      	bls.n	800fe48 <f_mkfs+0x14c>
 800fe44:	230e      	movs	r3, #14
 800fe46:	e37f      	b.n	8010548 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	1ad3      	subs	r3, r2, r3
 800fe4e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b7f      	cmp	r3, #127	; 0x7f
 800fe54:	d801      	bhi.n	800fe5a <f_mkfs+0x15e>
 800fe56:	230e      	movs	r3, #14
 800fe58:	e376      	b.n	8010548 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b80      	cmp	r3, #128	; 0x80
 800fe5e:	d901      	bls.n	800fe64 <f_mkfs+0x168>
 800fe60:	2313      	movs	r3, #19
 800fe62:	e371      	b.n	8010548 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fe64:	7afb      	ldrb	r3, [r7, #11]
 800fe66:	f003 0302 	and.w	r3, r3, #2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00d      	beq.n	800fe8a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fe6e:	7afb      	ldrb	r3, [r7, #11]
 800fe70:	f003 0307 	and.w	r3, r3, #7
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d004      	beq.n	800fe82 <f_mkfs+0x186>
 800fe78:	7afb      	ldrb	r3, [r7, #11]
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d103      	bne.n	800fe8a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fe82:	2303      	movs	r3, #3
 800fe84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fe88:	e009      	b.n	800fe9e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fe8a:	7afb      	ldrb	r3, [r7, #11]
 800fe8c:	f003 0301 	and.w	r3, r3, #1
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <f_mkfs+0x19c>
 800fe94:	2313      	movs	r3, #19
 800fe96:	e357      	b.n	8010548 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fea2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d13c      	bne.n	800ff24 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800feaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feac:	2b00      	cmp	r3, #0
 800feae:	d11b      	bne.n	800fee8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	0c5b      	lsrs	r3, r3, #17
 800feb4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800feb6:	2300      	movs	r3, #0
 800feb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800feba:	2301      	movs	r3, #1
 800febc:	653b      	str	r3, [r7, #80]	; 0x50
 800febe:	e005      	b.n	800fecc <f_mkfs+0x1d0>
 800fec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec2:	3301      	adds	r3, #1
 800fec4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	653b      	str	r3, [r7, #80]	; 0x50
 800fecc:	4a2d      	ldr	r2, [pc, #180]	; (800ff84 <f_mkfs+0x288>)
 800fece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d007      	beq.n	800fee8 <f_mkfs+0x1ec>
 800fed8:	4a2a      	ldr	r2, [pc, #168]	; (800ff84 <f_mkfs+0x288>)
 800feda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fedc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fee0:	461a      	mov	r2, r3
 800fee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d2eb      	bcs.n	800fec0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fee8:	693a      	ldr	r2, [r7, #16]
 800feea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feec:	fbb2 f3f3 	udiv	r3, r2, r3
 800fef0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fef2:	6a3b      	ldr	r3, [r7, #32]
 800fef4:	3302      	adds	r3, #2
 800fef6:	009a      	lsls	r2, r3, #2
 800fef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fefa:	4413      	add	r3, r2
 800fefc:	1e5a      	subs	r2, r3, #1
 800fefe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff04:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800ff06:	2320      	movs	r3, #32
 800ff08:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ff0e:	6a3b      	ldr	r3, [r7, #32]
 800ff10:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d903      	bls.n	800ff20 <f_mkfs+0x224>
 800ff18:	6a3b      	ldr	r3, [r7, #32]
 800ff1a:	4a1b      	ldr	r2, [pc, #108]	; (800ff88 <f_mkfs+0x28c>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d952      	bls.n	800ffc6 <f_mkfs+0x2ca>
 800ff20:	230e      	movs	r3, #14
 800ff22:	e311      	b.n	8010548 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ff24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d11b      	bne.n	800ff62 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	0b1b      	lsrs	r3, r3, #12
 800ff2e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ff30:	2300      	movs	r3, #0
 800ff32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff34:	2301      	movs	r3, #1
 800ff36:	653b      	str	r3, [r7, #80]	; 0x50
 800ff38:	e005      	b.n	800ff46 <f_mkfs+0x24a>
 800ff3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	653b      	str	r3, [r7, #80]	; 0x50
 800ff46:	4a11      	ldr	r2, [pc, #68]	; (800ff8c <f_mkfs+0x290>)
 800ff48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d007      	beq.n	800ff62 <f_mkfs+0x266>
 800ff52:	4a0e      	ldr	r2, [pc, #56]	; (800ff8c <f_mkfs+0x290>)
 800ff54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d2eb      	bcs.n	800ff3a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ff62:	693a      	ldr	r2, [r7, #16]
 800ff64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff6a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d90c      	bls.n	800ff90 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	3302      	adds	r3, #2
 800ff7a:	005b      	lsls	r3, r3, #1
 800ff7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff7e:	e012      	b.n	800ffa6 <f_mkfs+0x2aa>
 800ff80:	20000a64 	.word	0x20000a64
 800ff84:	080123d8 	.word	0x080123d8
 800ff88:	0ffffff5 	.word	0x0ffffff5
 800ff8c:	080123e8 	.word	0x080123e8
				} else {
					fmt = FS_FAT12;
 800ff90:	2301      	movs	r3, #1
 800ff92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ff96:	6a3a      	ldr	r2, [r7, #32]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	4413      	add	r3, r2
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	085b      	lsrs	r3, r3, #1
 800ffa2:	3303      	adds	r3, #3
 800ffa4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ffa6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ffa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffaa:	4413      	add	r3, r2
 800ffac:	1e5a      	subs	r2, r3, #1
 800ffae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffb4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ffba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffbc:	015a      	lsls	r2, r3, #5
 800ffbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffc4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ffc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffca:	4413      	add	r3, r2
 800ffcc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ffce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffd2:	fb03 f202 	mul.w	r2, r3, r2
 800ffd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffd8:	4413      	add	r3, r2
 800ffda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ffdc:	4413      	add	r3, r2
 800ffde:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	1e5a      	subs	r2, r3, #1
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	425b      	negs	r3, r3
 800ffec:	401a      	ands	r2, r3
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fff4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fff8:	2b03      	cmp	r3, #3
 800fffa:	d108      	bne.n	801000e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010000:	4413      	add	r3, r2
 8010002:	657b      	str	r3, [r7, #84]	; 0x54
 8010004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010008:	4413      	add	r3, r2
 801000a:	65bb      	str	r3, [r7, #88]	; 0x58
 801000c:	e006      	b.n	801001c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801000e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010012:	fbb2 f3f3 	udiv	r3, r2, r3
 8010016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010018:	4413      	add	r3, r2
 801001a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801001c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801001e:	011a      	lsls	r2, r3, #4
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	441a      	add	r2, r3
 8010024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010026:	1ad2      	subs	r2, r2, r3
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	429a      	cmp	r2, r3
 801002c:	d901      	bls.n	8010032 <f_mkfs+0x336>
 801002e:	230e      	movs	r3, #14
 8010030:	e28a      	b.n	8010548 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8010032:	693a      	ldr	r2, [r7, #16]
 8010034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010036:	1ad2      	subs	r2, r2, r3
 8010038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801003a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801003c:	fb01 f303 	mul.w	r3, r1, r3
 8010040:	1ad2      	subs	r2, r2, r3
 8010042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010044:	1ad2      	subs	r2, r2, r3
 8010046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010048:	fbb2 f3f3 	udiv	r3, r2, r3
 801004c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801004e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010052:	2b03      	cmp	r3, #3
 8010054:	d10f      	bne.n	8010076 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801005c:	4293      	cmp	r3, r2
 801005e:	d80a      	bhi.n	8010076 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d105      	bne.n	8010072 <f_mkfs+0x376>
 8010066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010068:	085b      	lsrs	r3, r3, #1
 801006a:	607b      	str	r3, [r7, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d144      	bne.n	80100fc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8010072:	230e      	movs	r3, #14
 8010074:	e268      	b.n	8010548 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010076:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801007a:	2b02      	cmp	r3, #2
 801007c:	d133      	bne.n	80100e6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010084:	4293      	cmp	r3, r2
 8010086:	d91e      	bls.n	80100c6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d107      	bne.n	801009e <f_mkfs+0x3a2>
 801008e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010090:	005b      	lsls	r3, r3, #1
 8010092:	2b40      	cmp	r3, #64	; 0x40
 8010094:	d803      	bhi.n	801009e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8010096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	607b      	str	r3, [r7, #4]
 801009c:	e033      	b.n	8010106 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801009e:	7afb      	ldrb	r3, [r7, #11]
 80100a0:	f003 0302 	and.w	r3, r3, #2
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d003      	beq.n	80100b0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80100a8:	2303      	movs	r3, #3
 80100aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80100ae:	e02a      	b.n	8010106 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d105      	bne.n	80100c2 <f_mkfs+0x3c6>
 80100b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	607b      	str	r3, [r7, #4]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b80      	cmp	r3, #128	; 0x80
 80100c0:	d91e      	bls.n	8010100 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80100c2:	230e      	movs	r3, #14
 80100c4:	e240      	b.n	8010548 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80100c6:	6a3b      	ldr	r3, [r7, #32]
 80100c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d80a      	bhi.n	80100e6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d105      	bne.n	80100e2 <f_mkfs+0x3e6>
 80100d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d8:	005b      	lsls	r3, r3, #1
 80100da:	607b      	str	r3, [r7, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b80      	cmp	r3, #128	; 0x80
 80100e0:	d910      	bls.n	8010104 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80100e2:	230e      	movs	r3, #14
 80100e4:	e230      	b.n	8010548 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80100e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d10c      	bne.n	8010108 <f_mkfs+0x40c>
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d907      	bls.n	8010108 <f_mkfs+0x40c>
 80100f8:	230e      	movs	r3, #14
 80100fa:	e225      	b.n	8010548 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80100fc:	bf00      	nop
 80100fe:	e6ce      	b.n	800fe9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010100:	bf00      	nop
 8010102:	e6cc      	b.n	800fe9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010104:	bf00      	nop
			pau = au;
 8010106:	e6ca      	b.n	800fe9e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8010108:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801010a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801010c:	461a      	mov	r2, r3
 801010e:	2100      	movs	r1, #0
 8010110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010112:	f7fd fc96 	bl	800da42 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8010116:	220b      	movs	r2, #11
 8010118:	49b2      	ldr	r1, [pc, #712]	; (80103e4 <f_mkfs+0x6e8>)
 801011a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801011c:	f7fd fc70 	bl	800da00 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	330b      	adds	r3, #11
 8010124:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010126:	4611      	mov	r1, r2
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fc22 	bl	800d972 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	330d      	adds	r3, #13
 8010132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010134:	b2d2      	uxtb	r2, r2
 8010136:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	330e      	adds	r3, #14
 801013c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801013e:	b292      	uxth	r2, r2
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f7fd fc15 	bl	800d972 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	3310      	adds	r3, #16
 801014c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801014e:	b2d2      	uxtb	r2, r2
 8010150:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	f103 0211 	add.w	r2, r3, #17
 8010158:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801015c:	2b03      	cmp	r3, #3
 801015e:	d002      	beq.n	8010166 <f_mkfs+0x46a>
 8010160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010162:	b29b      	uxth	r3, r3
 8010164:	e000      	b.n	8010168 <f_mkfs+0x46c>
 8010166:	2300      	movs	r3, #0
 8010168:	4619      	mov	r1, r3
 801016a:	4610      	mov	r0, r2
 801016c:	f7fd fc01 	bl	800d972 <st_word>
		if (sz_vol < 0x10000) {
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010176:	d208      	bcs.n	801018a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017a:	3313      	adds	r3, #19
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	b292      	uxth	r2, r2
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7fd fbf5 	bl	800d972 <st_word>
 8010188:	e006      	b.n	8010198 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018c:	3320      	adds	r3, #32
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f7fd fc08 	bl	800d9a8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019a:	3315      	adds	r3, #21
 801019c:	22f8      	movs	r2, #248	; 0xf8
 801019e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80101a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a2:	3318      	adds	r3, #24
 80101a4:	213f      	movs	r1, #63	; 0x3f
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fd fbe3 	bl	800d972 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	331a      	adds	r3, #26
 80101b0:	21ff      	movs	r1, #255	; 0xff
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fd fbdd 	bl	800d972 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80101b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ba:	331c      	adds	r3, #28
 80101bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fd fbf2 	bl	800d9a8 <st_dword>
		if (fmt == FS_FAT32) {
 80101c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80101c8:	2b03      	cmp	r3, #3
 80101ca:	d131      	bne.n	8010230 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80101cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ce:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80101d2:	f7fb fcd1 	bl	800bb78 <get_fattime>
 80101d6:	4603      	mov	r3, r0
 80101d8:	4619      	mov	r1, r3
 80101da:	4620      	mov	r0, r4
 80101dc:	f7fd fbe4 	bl	800d9a8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	3324      	adds	r3, #36	; 0x24
 80101e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fd fbde 	bl	800d9a8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80101ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ee:	332c      	adds	r3, #44	; 0x2c
 80101f0:	2102      	movs	r1, #2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fd fbd8 	bl	800d9a8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80101f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fa:	3330      	adds	r3, #48	; 0x30
 80101fc:	2101      	movs	r1, #1
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fd fbb7 	bl	800d972 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	3332      	adds	r3, #50	; 0x32
 8010208:	2106      	movs	r1, #6
 801020a:	4618      	mov	r0, r3
 801020c:	f7fd fbb1 	bl	800d972 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010212:	3340      	adds	r3, #64	; 0x40
 8010214:	2280      	movs	r2, #128	; 0x80
 8010216:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8010218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021a:	3342      	adds	r3, #66	; 0x42
 801021c:	2229      	movs	r2, #41	; 0x29
 801021e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010222:	3347      	adds	r3, #71	; 0x47
 8010224:	2213      	movs	r2, #19
 8010226:	4970      	ldr	r1, [pc, #448]	; (80103e8 <f_mkfs+0x6ec>)
 8010228:	4618      	mov	r0, r3
 801022a:	f7fd fbe9 	bl	800da00 <mem_cpy>
 801022e:	e020      	b.n	8010272 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010232:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8010236:	f7fb fc9f 	bl	800bb78 <get_fattime>
 801023a:	4603      	mov	r3, r0
 801023c:	4619      	mov	r1, r3
 801023e:	4620      	mov	r0, r4
 8010240:	f7fd fbb2 	bl	800d9a8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8010244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010246:	3316      	adds	r3, #22
 8010248:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801024a:	b292      	uxth	r2, r2
 801024c:	4611      	mov	r1, r2
 801024e:	4618      	mov	r0, r3
 8010250:	f7fd fb8f 	bl	800d972 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010256:	3324      	adds	r3, #36	; 0x24
 8010258:	2280      	movs	r2, #128	; 0x80
 801025a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025e:	3326      	adds	r3, #38	; 0x26
 8010260:	2229      	movs	r2, #41	; 0x29
 8010262:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	332b      	adds	r3, #43	; 0x2b
 8010268:	2213      	movs	r2, #19
 801026a:	4960      	ldr	r1, [pc, #384]	; (80103ec <f_mkfs+0x6f0>)
 801026c:	4618      	mov	r0, r3
 801026e:	f7fd fbc7 	bl	800da00 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010278:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801027c:	4618      	mov	r0, r3
 801027e:	f7fd fb78 	bl	800d972 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010282:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010286:	2301      	movs	r3, #1
 8010288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801028a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801028c:	f7fd faf8 	bl	800d880 <disk_write>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d001      	beq.n	801029a <f_mkfs+0x59e>
 8010296:	2301      	movs	r3, #1
 8010298:	e156      	b.n	8010548 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801029a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801029e:	2b03      	cmp	r3, #3
 80102a0:	d140      	bne.n	8010324 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80102a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a4:	1d9a      	adds	r2, r3, #6
 80102a6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80102aa:	2301      	movs	r3, #1
 80102ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102ae:	f7fd fae7 	bl	800d880 <disk_write>
			mem_set(buf, 0, ss);
 80102b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80102b4:	461a      	mov	r2, r3
 80102b6:	2100      	movs	r1, #0
 80102b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ba:	f7fd fbc2 	bl	800da42 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80102be:	494c      	ldr	r1, [pc, #304]	; (80103f0 <f_mkfs+0x6f4>)
 80102c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102c2:	f7fd fb71 	bl	800d9a8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80102c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80102cc:	4949      	ldr	r1, [pc, #292]	; (80103f4 <f_mkfs+0x6f8>)
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fd fb6a 	bl	800d9a8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80102d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80102da:	6a3b      	ldr	r3, [r7, #32]
 80102dc:	3b01      	subs	r3, #1
 80102de:	4619      	mov	r1, r3
 80102e0:	4610      	mov	r0, r2
 80102e2:	f7fd fb61 	bl	800d9a8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80102e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102ec:	2102      	movs	r1, #2
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fd fb5a 	bl	800d9a8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fd fb37 	bl	800d972 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010306:	1dda      	adds	r2, r3, #7
 8010308:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801030c:	2301      	movs	r3, #1
 801030e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010310:	f7fd fab6 	bl	800d880 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801031c:	2301      	movs	r3, #1
 801031e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010320:	f7fd faae 	bl	800d880 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010326:	2100      	movs	r1, #0
 8010328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801032a:	f7fd fb8a 	bl	800da42 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801032e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010330:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010332:	2300      	movs	r3, #0
 8010334:	64bb      	str	r3, [r7, #72]	; 0x48
 8010336:	e04b      	b.n	80103d0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010338:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801033c:	2b03      	cmp	r3, #3
 801033e:	d113      	bne.n	8010368 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010340:	f06f 0107 	mvn.w	r1, #7
 8010344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010346:	f7fd fb2f 	bl	800d9a8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	3304      	adds	r3, #4
 801034e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010352:	4618      	mov	r0, r3
 8010354:	f7fd fb28 	bl	800d9a8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035a:	3308      	adds	r3, #8
 801035c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010360:	4618      	mov	r0, r3
 8010362:	f7fd fb21 	bl	800d9a8 <st_dword>
 8010366:	e00b      	b.n	8010380 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010368:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801036c:	2b01      	cmp	r3, #1
 801036e:	d101      	bne.n	8010374 <f_mkfs+0x678>
 8010370:	4b21      	ldr	r3, [pc, #132]	; (80103f8 <f_mkfs+0x6fc>)
 8010372:	e001      	b.n	8010378 <f_mkfs+0x67c>
 8010374:	f06f 0307 	mvn.w	r3, #7
 8010378:	4619      	mov	r1, r3
 801037a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801037c:	f7fd fb14 	bl	800d9a8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010382:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	4293      	cmp	r3, r2
 801038a:	bf28      	it	cs
 801038c:	4613      	movcs	r3, r2
 801038e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010390:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010396:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801039a:	f7fd fa71 	bl	800d880 <disk_write>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d001      	beq.n	80103a8 <f_mkfs+0x6ac>
 80103a4:	2301      	movs	r3, #1
 80103a6:	e0cf      	b.n	8010548 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80103a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103aa:	461a      	mov	r2, r3
 80103ac:	2100      	movs	r1, #0
 80103ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103b0:	f7fd fb47 	bl	800da42 <mem_set>
				sect += n; nsect -= n;
 80103b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b8:	4413      	add	r3, r2
 80103ba:	667b      	str	r3, [r7, #100]	; 0x64
 80103bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80103c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1dc      	bne.n	8010384 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80103ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103cc:	3301      	adds	r3, #1
 80103ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80103d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d3af      	bcc.n	8010338 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80103d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103dc:	2b03      	cmp	r3, #3
 80103de:	d10d      	bne.n	80103fc <f_mkfs+0x700>
 80103e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103e2:	e00c      	b.n	80103fe <f_mkfs+0x702>
 80103e4:	08012258 	.word	0x08012258
 80103e8:	08012264 	.word	0x08012264
 80103ec:	08012278 	.word	0x08012278
 80103f0:	41615252 	.word	0x41615252
 80103f4:	61417272 	.word	0x61417272
 80103f8:	00fffff8 	.word	0x00fffff8
 80103fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103fe:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	4293      	cmp	r3, r2
 8010406:	bf28      	it	cs
 8010408:	4613      	movcs	r3, r2
 801040a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801040c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010412:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010416:	f7fd fa33 	bl	800d880 <disk_write>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <f_mkfs+0x728>
 8010420:	2301      	movs	r3, #1
 8010422:	e091      	b.n	8010548 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010428:	4413      	add	r3, r2
 801042a:	667b      	str	r3, [r7, #100]	; 0x64
 801042c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801042e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1e2      	bne.n	8010400 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801043a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801043e:	2b03      	cmp	r3, #3
 8010440:	d103      	bne.n	801044a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010442:	230c      	movs	r3, #12
 8010444:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010448:	e010      	b.n	801046c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010450:	d303      	bcc.n	801045a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010452:	2306      	movs	r3, #6
 8010454:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010458:	e008      	b.n	801046c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801045a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801045e:	2b02      	cmp	r3, #2
 8010460:	d101      	bne.n	8010466 <f_mkfs+0x76a>
 8010462:	2304      	movs	r3, #4
 8010464:	e000      	b.n	8010468 <f_mkfs+0x76c>
 8010466:	2301      	movs	r3, #1
 8010468:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801046c:	7afb      	ldrb	r3, [r7, #11]
 801046e:	f003 0308 	and.w	r3, r3, #8
 8010472:	2b00      	cmp	r3, #0
 8010474:	d15b      	bne.n	801052e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010478:	461a      	mov	r2, r3
 801047a:	2100      	movs	r1, #0
 801047c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801047e:	f7fd fae0 	bl	800da42 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010488:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801048c:	4618      	mov	r0, r3
 801048e:	f7fd fa70 	bl	800d972 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010494:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010498:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	2200      	movs	r2, #0
 801049e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	3301      	adds	r3, #1
 80104a4:	2201      	movs	r2, #1
 80104a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	3302      	adds	r3, #2
 80104ac:	2201      	movs	r2, #1
 80104ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	3303      	adds	r3, #3
 80104b4:	2200      	movs	r2, #0
 80104b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	3304      	adds	r3, #4
 80104bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80104c0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80104c2:	693a      	ldr	r2, [r7, #16]
 80104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c6:	441a      	add	r2, r3
 80104c8:	4b21      	ldr	r3, [pc, #132]	; (8010550 <f_mkfs+0x854>)
 80104ca:	fba3 1302 	umull	r1, r3, r3, r2
 80104ce:	1ad2      	subs	r2, r2, r3
 80104d0:	0852      	lsrs	r2, r2, #1
 80104d2:	4413      	add	r3, r2
 80104d4:	0b5b      	lsrs	r3, r3, #13
 80104d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	3305      	adds	r3, #5
 80104dc:	22fe      	movs	r2, #254	; 0xfe
 80104de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80104e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104e2:	089b      	lsrs	r3, r3, #2
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	3306      	adds	r3, #6
 80104ea:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80104ee:	b2d2      	uxtb	r2, r2
 80104f0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	3307      	adds	r3, #7
 80104f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104f8:	b2d2      	uxtb	r2, r2
 80104fa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	3308      	adds	r3, #8
 8010500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010502:	4618      	mov	r0, r3
 8010504:	f7fd fa50 	bl	800d9a8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	330c      	adds	r3, #12
 801050c:	693a      	ldr	r2, [r7, #16]
 801050e:	4611      	mov	r1, r2
 8010510:	4618      	mov	r0, r3
 8010512:	f7fd fa49 	bl	800d9a8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010516:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801051a:	2301      	movs	r3, #1
 801051c:	2200      	movs	r2, #0
 801051e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010520:	f7fd f9ae 	bl	800d880 <disk_write>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <f_mkfs+0x832>
 801052a:	2301      	movs	r3, #1
 801052c:	e00c      	b.n	8010548 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801052e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010532:	2200      	movs	r2, #0
 8010534:	2100      	movs	r1, #0
 8010536:	4618      	mov	r0, r3
 8010538:	f7fd f9c2 	bl	800d8c0 <disk_ioctl>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <f_mkfs+0x84a>
 8010542:	2301      	movs	r3, #1
 8010544:	e000      	b.n	8010548 <f_mkfs+0x84c>

	return FR_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3774      	adds	r7, #116	; 0x74
 801054c:	46bd      	mov	sp, r7
 801054e:	bd90      	pop	{r4, r7, pc}
 8010550:	0515565b 	.word	0x0515565b

08010554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010554:	b480      	push	{r7}
 8010556:	b087      	sub	sp, #28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	4613      	mov	r3, r2
 8010560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010562:	2301      	movs	r3, #1
 8010564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801056a:	4b1f      	ldr	r3, [pc, #124]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 801056c:	7a5b      	ldrb	r3, [r3, #9]
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	d131      	bne.n	80105d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010574:	4b1c      	ldr	r3, [pc, #112]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 8010576:	7a5b      	ldrb	r3, [r3, #9]
 8010578:	b2db      	uxtb	r3, r3
 801057a:	461a      	mov	r2, r3
 801057c:	4b1a      	ldr	r3, [pc, #104]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 801057e:	2100      	movs	r1, #0
 8010580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010582:	4b19      	ldr	r3, [pc, #100]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 8010584:	7a5b      	ldrb	r3, [r3, #9]
 8010586:	b2db      	uxtb	r3, r3
 8010588:	4a17      	ldr	r2, [pc, #92]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010592:	4b15      	ldr	r3, [pc, #84]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 8010594:	7a5b      	ldrb	r3, [r3, #9]
 8010596:	b2db      	uxtb	r3, r3
 8010598:	461a      	mov	r2, r3
 801059a:	4b13      	ldr	r3, [pc, #76]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 801059c:	4413      	add	r3, r2
 801059e:	79fa      	ldrb	r2, [r7, #7]
 80105a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80105a2:	4b11      	ldr	r3, [pc, #68]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 80105a4:	7a5b      	ldrb	r3, [r3, #9]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	b2d1      	uxtb	r1, r2
 80105ac:	4a0e      	ldr	r2, [pc, #56]	; (80105e8 <FATFS_LinkDriverEx+0x94>)
 80105ae:	7251      	strb	r1, [r2, #9]
 80105b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80105b2:	7dbb      	ldrb	r3, [r7, #22]
 80105b4:	3330      	adds	r3, #48	; 0x30
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	3301      	adds	r3, #1
 80105c0:	223a      	movs	r2, #58	; 0x3a
 80105c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	3302      	adds	r3, #2
 80105c8:	222f      	movs	r2, #47	; 0x2f
 80105ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	3303      	adds	r3, #3
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	371c      	adds	r7, #28
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	20000a8c 	.word	0x20000a8c

080105ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105f6:	2200      	movs	r2, #0
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff ffaa 	bl	8010554 <FATFS_LinkDriverEx>
 8010600:	4603      	mov	r3, r0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
	...

0801060c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010610:	2200      	movs	r2, #0
 8010612:	4912      	ldr	r1, [pc, #72]	; (801065c <MX_USB_DEVICE_Init+0x50>)
 8010614:	4812      	ldr	r0, [pc, #72]	; (8010660 <MX_USB_DEVICE_Init+0x54>)
 8010616:	f7fb ff69 	bl	800c4ec <USBD_Init>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d001      	beq.n	8010624 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010620:	f7f0 fc7a 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010624:	490f      	ldr	r1, [pc, #60]	; (8010664 <MX_USB_DEVICE_Init+0x58>)
 8010626:	480e      	ldr	r0, [pc, #56]	; (8010660 <MX_USB_DEVICE_Init+0x54>)
 8010628:	f7fb ff90 	bl	800c54c <USBD_RegisterClass>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010632:	f7f0 fc71 	bl	8000f18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010636:	490c      	ldr	r1, [pc, #48]	; (8010668 <MX_USB_DEVICE_Init+0x5c>)
 8010638:	4809      	ldr	r0, [pc, #36]	; (8010660 <MX_USB_DEVICE_Init+0x54>)
 801063a:	f7fb feb1 	bl	800c3a0 <USBD_CDC_RegisterInterface>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010644:	f7f0 fc68 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010648:	4805      	ldr	r0, [pc, #20]	; (8010660 <MX_USB_DEVICE_Init+0x54>)
 801064a:	f7fb ffa6 	bl	800c59a <USBD_Start>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010654:	f7f0 fc60 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010658:	bf00      	nop
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20000130 	.word	0x20000130
 8010660:	20000a98 	.word	0x20000a98
 8010664:	20000018 	.word	0x20000018
 8010668:	2000011c 	.word	0x2000011c

0801066c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010670:	2200      	movs	r2, #0
 8010672:	4905      	ldr	r1, [pc, #20]	; (8010688 <CDC_Init_FS+0x1c>)
 8010674:	4805      	ldr	r0, [pc, #20]	; (801068c <CDC_Init_FS+0x20>)
 8010676:	f7fb fea8 	bl	800c3ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801067a:	4905      	ldr	r1, [pc, #20]	; (8010690 <CDC_Init_FS+0x24>)
 801067c:	4803      	ldr	r0, [pc, #12]	; (801068c <CDC_Init_FS+0x20>)
 801067e:	f7fb fec2 	bl	800c406 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010682:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010684:	4618      	mov	r0, r3
 8010686:	bd80      	pop	{r7, pc}
 8010688:	20001568 	.word	0x20001568
 801068c:	20000a98 	.word	0x20000a98
 8010690:	20000d68 	.word	0x20000d68

08010694 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010694:	b480      	push	{r7}
 8010696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010698:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801069a:	4618      	mov	r0, r3
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	4603      	mov	r3, r0
 80106ac:	6039      	str	r1, [r7, #0]
 80106ae:	71fb      	strb	r3, [r7, #7]
 80106b0:	4613      	mov	r3, r2
 80106b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80106b4:	79fb      	ldrb	r3, [r7, #7]
 80106b6:	2b23      	cmp	r3, #35	; 0x23
 80106b8:	d84a      	bhi.n	8010750 <CDC_Control_FS+0xac>
 80106ba:	a201      	add	r2, pc, #4	; (adr r2, 80106c0 <CDC_Control_FS+0x1c>)
 80106bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c0:	08010751 	.word	0x08010751
 80106c4:	08010751 	.word	0x08010751
 80106c8:	08010751 	.word	0x08010751
 80106cc:	08010751 	.word	0x08010751
 80106d0:	08010751 	.word	0x08010751
 80106d4:	08010751 	.word	0x08010751
 80106d8:	08010751 	.word	0x08010751
 80106dc:	08010751 	.word	0x08010751
 80106e0:	08010751 	.word	0x08010751
 80106e4:	08010751 	.word	0x08010751
 80106e8:	08010751 	.word	0x08010751
 80106ec:	08010751 	.word	0x08010751
 80106f0:	08010751 	.word	0x08010751
 80106f4:	08010751 	.word	0x08010751
 80106f8:	08010751 	.word	0x08010751
 80106fc:	08010751 	.word	0x08010751
 8010700:	08010751 	.word	0x08010751
 8010704:	08010751 	.word	0x08010751
 8010708:	08010751 	.word	0x08010751
 801070c:	08010751 	.word	0x08010751
 8010710:	08010751 	.word	0x08010751
 8010714:	08010751 	.word	0x08010751
 8010718:	08010751 	.word	0x08010751
 801071c:	08010751 	.word	0x08010751
 8010720:	08010751 	.word	0x08010751
 8010724:	08010751 	.word	0x08010751
 8010728:	08010751 	.word	0x08010751
 801072c:	08010751 	.word	0x08010751
 8010730:	08010751 	.word	0x08010751
 8010734:	08010751 	.word	0x08010751
 8010738:	08010751 	.word	0x08010751
 801073c:	08010751 	.word	0x08010751
 8010740:	08010751 	.word	0x08010751
 8010744:	08010751 	.word	0x08010751
 8010748:	08010751 	.word	0x08010751
 801074c:	08010751 	.word	0x08010751
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010750:	bf00      	nop
  }

  return (USBD_OK);
 8010752:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010754:	4618      	mov	r0, r3
 8010756:	370c      	adds	r7, #12
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801076a:	6879      	ldr	r1, [r7, #4]
 801076c:	4805      	ldr	r0, [pc, #20]	; (8010784 <CDC_Receive_FS+0x24>)
 801076e:	f7fb fe4a 	bl	800c406 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010772:	4804      	ldr	r0, [pc, #16]	; (8010784 <CDC_Receive_FS+0x24>)
 8010774:	f7fb fe90 	bl	800c498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010778:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801077a:	4618      	mov	r0, r3
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	20000a98 	.word	0x20000a98

08010788 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010794:	2300      	movs	r3, #0
 8010796:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010798:	4b0d      	ldr	r3, [pc, #52]	; (80107d0 <CDC_Transmit_FS+0x48>)
 801079a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801079e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80107aa:	2301      	movs	r3, #1
 80107ac:	e00b      	b.n	80107c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80107ae:	887b      	ldrh	r3, [r7, #2]
 80107b0:	461a      	mov	r2, r3
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	4806      	ldr	r0, [pc, #24]	; (80107d0 <CDC_Transmit_FS+0x48>)
 80107b6:	f7fb fe08 	bl	800c3ca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80107ba:	4805      	ldr	r0, [pc, #20]	; (80107d0 <CDC_Transmit_FS+0x48>)
 80107bc:	f7fb fe3c 	bl	800c438 <USBD_CDC_TransmitPacket>
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	20000a98 	.word	0x20000a98

080107d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b087      	sub	sp, #28
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80107e2:	2300      	movs	r3, #0
 80107e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80107e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
	...

080107f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	4603      	mov	r3, r0
 8010800:	6039      	str	r1, [r7, #0]
 8010802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	2212      	movs	r2, #18
 8010808:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801080a:	4b03      	ldr	r3, [pc, #12]	; (8010818 <USBD_FS_DeviceDescriptor+0x20>)
}
 801080c:	4618      	mov	r0, r3
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr
 8010818:	2000014c 	.word	0x2000014c

0801081c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	6039      	str	r1, [r7, #0]
 8010826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	2204      	movs	r2, #4
 801082c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801082e:	4b03      	ldr	r3, [pc, #12]	; (801083c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010830:	4618      	mov	r0, r3
 8010832:	370c      	adds	r7, #12
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr
 801083c:	20000160 	.word	0x20000160

08010840 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	6039      	str	r1, [r7, #0]
 801084a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801084c:	79fb      	ldrb	r3, [r7, #7]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d105      	bne.n	801085e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	4907      	ldr	r1, [pc, #28]	; (8010874 <USBD_FS_ProductStrDescriptor+0x34>)
 8010856:	4808      	ldr	r0, [pc, #32]	; (8010878 <USBD_FS_ProductStrDescriptor+0x38>)
 8010858:	f7fc fed1 	bl	800d5fe <USBD_GetString>
 801085c:	e004      	b.n	8010868 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	4904      	ldr	r1, [pc, #16]	; (8010874 <USBD_FS_ProductStrDescriptor+0x34>)
 8010862:	4805      	ldr	r0, [pc, #20]	; (8010878 <USBD_FS_ProductStrDescriptor+0x38>)
 8010864:	f7fc fecb 	bl	800d5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8010868:	4b02      	ldr	r3, [pc, #8]	; (8010874 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	20001d68 	.word	0x20001d68
 8010878:	0801228c 	.word	0x0801228c

0801087c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	4603      	mov	r3, r0
 8010884:	6039      	str	r1, [r7, #0]
 8010886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	4904      	ldr	r1, [pc, #16]	; (801089c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801088c:	4804      	ldr	r0, [pc, #16]	; (80108a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801088e:	f7fc feb6 	bl	800d5fe <USBD_GetString>
  return USBD_StrDesc;
 8010892:	4b02      	ldr	r3, [pc, #8]	; (801089c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010894:	4618      	mov	r0, r3
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	20001d68 	.word	0x20001d68
 80108a0:	080122a4 	.word	0x080122a4

080108a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	221a      	movs	r2, #26
 80108b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80108b6:	f000 f843 	bl	8010940 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80108ba:	4b02      	ldr	r3, [pc, #8]	; (80108c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	20000164 	.word	0x20000164

080108c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	6039      	str	r1, [r7, #0]
 80108d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80108d4:	79fb      	ldrb	r3, [r7, #7]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d105      	bne.n	80108e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108da:	683a      	ldr	r2, [r7, #0]
 80108dc:	4907      	ldr	r1, [pc, #28]	; (80108fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80108de:	4808      	ldr	r0, [pc, #32]	; (8010900 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108e0:	f7fc fe8d 	bl	800d5fe <USBD_GetString>
 80108e4:	e004      	b.n	80108f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	4904      	ldr	r1, [pc, #16]	; (80108fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80108ea:	4805      	ldr	r0, [pc, #20]	; (8010900 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108ec:	f7fc fe87 	bl	800d5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80108f0:	4b02      	ldr	r3, [pc, #8]	; (80108fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20001d68 	.word	0x20001d68
 8010900:	080122b8 	.word	0x080122b8

08010904 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	4603      	mov	r3, r0
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010910:	79fb      	ldrb	r3, [r7, #7]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d105      	bne.n	8010922 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	4907      	ldr	r1, [pc, #28]	; (8010938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801091a:	4808      	ldr	r0, [pc, #32]	; (801093c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801091c:	f7fc fe6f 	bl	800d5fe <USBD_GetString>
 8010920:	e004      	b.n	801092c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010922:	683a      	ldr	r2, [r7, #0]
 8010924:	4904      	ldr	r1, [pc, #16]	; (8010938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010926:	4805      	ldr	r0, [pc, #20]	; (801093c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010928:	f7fc fe69 	bl	800d5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 801092c:	4b02      	ldr	r3, [pc, #8]	; (8010938 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801092e:	4618      	mov	r0, r3
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20001d68 	.word	0x20001d68
 801093c:	080122c4 	.word	0x080122c4

08010940 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010946:	4b0f      	ldr	r3, [pc, #60]	; (8010984 <Get_SerialNum+0x44>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801094c:	4b0e      	ldr	r3, [pc, #56]	; (8010988 <Get_SerialNum+0x48>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010952:	4b0e      	ldr	r3, [pc, #56]	; (801098c <Get_SerialNum+0x4c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4413      	add	r3, r2
 801095e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d009      	beq.n	801097a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010966:	2208      	movs	r2, #8
 8010968:	4909      	ldr	r1, [pc, #36]	; (8010990 <Get_SerialNum+0x50>)
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f000 f814 	bl	8010998 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010970:	2204      	movs	r2, #4
 8010972:	4908      	ldr	r1, [pc, #32]	; (8010994 <Get_SerialNum+0x54>)
 8010974:	68b8      	ldr	r0, [r7, #8]
 8010976:	f000 f80f 	bl	8010998 <IntToUnicode>
  }
}
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	1fff7590 	.word	0x1fff7590
 8010988:	1fff7594 	.word	0x1fff7594
 801098c:	1fff7598 	.word	0x1fff7598
 8010990:	20000166 	.word	0x20000166
 8010994:	20000176 	.word	0x20000176

08010998 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010998:	b480      	push	{r7}
 801099a:	b087      	sub	sp, #28
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	4613      	mov	r3, r2
 80109a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80109a6:	2300      	movs	r3, #0
 80109a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80109aa:	2300      	movs	r3, #0
 80109ac:	75fb      	strb	r3, [r7, #23]
 80109ae:	e027      	b.n	8010a00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	0f1b      	lsrs	r3, r3, #28
 80109b4:	2b09      	cmp	r3, #9
 80109b6:	d80b      	bhi.n	80109d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	0f1b      	lsrs	r3, r3, #28
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	7dfb      	ldrb	r3, [r7, #23]
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	4619      	mov	r1, r3
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	440b      	add	r3, r1
 80109c8:	3230      	adds	r2, #48	; 0x30
 80109ca:	b2d2      	uxtb	r2, r2
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	e00a      	b.n	80109e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	0f1b      	lsrs	r3, r3, #28
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	4619      	mov	r1, r3
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	440b      	add	r3, r1
 80109e0:	3237      	adds	r2, #55	; 0x37
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80109ec:	7dfb      	ldrb	r3, [r7, #23]
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	3301      	adds	r3, #1
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	4413      	add	r3, r2
 80109f6:	2200      	movs	r2, #0
 80109f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	3301      	adds	r3, #1
 80109fe:	75fb      	strb	r3, [r7, #23]
 8010a00:	7dfa      	ldrb	r2, [r7, #23]
 8010a02:	79fb      	ldrb	r3, [r7, #7]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d3d3      	bcc.n	80109b0 <IntToUnicode+0x18>
  }
}
 8010a08:	bf00      	nop
 8010a0a:	bf00      	nop
 8010a0c:	371c      	adds	r7, #28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
	...

08010a18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b0b0      	sub	sp, #192	; 0xc0
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	605a      	str	r2, [r3, #4]
 8010a2a:	609a      	str	r2, [r3, #8]
 8010a2c:	60da      	str	r2, [r3, #12]
 8010a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010a30:	f107 0318 	add.w	r3, r7, #24
 8010a34:	2294      	movs	r2, #148	; 0x94
 8010a36:	2100      	movs	r1, #0
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 fbf5 	bl	8011228 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a46:	d163      	bne.n	8010b10 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010a4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010a54:	f107 0318 	add.w	r3, r7, #24
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f3 fc99 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d001      	beq.n	8010a68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010a64:	f7f0 fa58 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a68:	4b2b      	ldr	r3, [pc, #172]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a6c:	4a2a      	ldr	r2, [pc, #168]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010a6e:	f043 0301 	orr.w	r3, r3, #1
 8010a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010a74:	4b28      	ldr	r3, [pc, #160]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	617b      	str	r3, [r7, #20]
 8010a7e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a88:	2302      	movs	r3, #2
 8010a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a94:	2303      	movs	r3, #3
 8010a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010a9a:	230a      	movs	r3, #10
 8010a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010aa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010aaa:	f7f0 ffcb 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010aae:	4b1a      	ldr	r3, [pc, #104]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ab2:	4a19      	ldr	r2, [pc, #100]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010aba:	4b17      	ldr	r3, [pc, #92]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ac2:	613b      	str	r3, [r7, #16]
 8010ac4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010ac6:	4b14      	ldr	r3, [pc, #80]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d114      	bne.n	8010afc <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010ad2:	4b11      	ldr	r3, [pc, #68]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ad6:	4a10      	ldr	r2, [pc, #64]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010adc:	6593      	str	r3, [r2, #88]	; 0x58
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ae6:	60fb      	str	r3, [r7, #12]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8010aea:	f7f2 fd3d 	bl	8003568 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010aee:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010af2:	4a09      	ldr	r2, [pc, #36]	; (8010b18 <HAL_PCD_MspInit+0x100>)
 8010af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010af8:	6593      	str	r3, [r2, #88]	; 0x58
 8010afa:	e001      	b.n	8010b00 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010afc:	f7f2 fd34 	bl	8003568 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010b00:	2200      	movs	r2, #0
 8010b02:	2100      	movs	r1, #0
 8010b04:	2043      	movs	r0, #67	; 0x43
 8010b06:	f7f0 feac 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b0a:	2043      	movs	r0, #67	; 0x43
 8010b0c:	f7f0 fec5 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b10:	bf00      	nop
 8010b12:	37c0      	adds	r7, #192	; 0xc0
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	40021000 	.word	0x40021000

08010b1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b30:	4619      	mov	r1, r3
 8010b32:	4610      	mov	r0, r2
 8010b34:	f7fb fd7c 	bl	800c630 <USBD_LL_SetupStage>
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b52:	78fa      	ldrb	r2, [r7, #3]
 8010b54:	6879      	ldr	r1, [r7, #4]
 8010b56:	4613      	mov	r3, r2
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	4413      	add	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	440b      	add	r3, r1
 8010b60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	f7fb fdb6 	bl	800c6da <USBD_LL_DataOutStage>
}
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b082      	sub	sp, #8
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	460b      	mov	r3, r1
 8010b80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b88:	78fa      	ldrb	r2, [r7, #3]
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	4413      	add	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	440b      	add	r3, r1
 8010b96:	334c      	adds	r3, #76	; 0x4c
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	78fb      	ldrb	r3, [r7, #3]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	f7fb fdff 	bl	800c7a0 <USBD_LL_DataInStage>
}
 8010ba2:	bf00      	nop
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fb ff13 	bl	800c9e4 <USBD_LL_SOF>
}
 8010bbe:	bf00      	nop
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b084      	sub	sp, #16
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	2b02      	cmp	r3, #2
 8010bd8:	d001      	beq.n	8010bde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010bda:	f7f0 f99d 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010be4:	7bfa      	ldrb	r2, [r7, #15]
 8010be6:	4611      	mov	r1, r2
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fb febd 	bl	800c968 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fb fe69 	bl	800c8cc <USBD_LL_Reset>
}
 8010bfa:	bf00      	nop
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
	...

08010c04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	6812      	ldr	r2, [r2, #0]
 8010c1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c1e:	f043 0301 	orr.w	r3, r3, #1
 8010c22:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fb feac 	bl	800c988 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d005      	beq.n	8010c44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c38:	4b04      	ldr	r3, [pc, #16]	; (8010c4c <HAL_PCD_SuspendCallback+0x48>)
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	4a03      	ldr	r2, [pc, #12]	; (8010c4c <HAL_PCD_SuspendCallback+0x48>)
 8010c3e:	f043 0306 	orr.w	r3, r3, #6
 8010c42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	e000ed00 	.word	0xe000ed00

08010c50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	6812      	ldr	r2, [r2, #0]
 8010c66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c6a:	f023 0301 	bic.w	r3, r3, #1
 8010c6e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a1b      	ldr	r3, [r3, #32]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d007      	beq.n	8010c88 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c78:	4b08      	ldr	r3, [pc, #32]	; (8010c9c <HAL_PCD_ResumeCallback+0x4c>)
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	4a07      	ldr	r2, [pc, #28]	; (8010c9c <HAL_PCD_ResumeCallback+0x4c>)
 8010c7e:	f023 0306 	bic.w	r3, r3, #6
 8010c82:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010c84:	f000 faa6 	bl	80111d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fb fe90 	bl	800c9b4 <USBD_LL_Resume>
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	e000ed00 	.word	0xe000ed00

08010ca0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cb2:	78fa      	ldrb	r2, [r7, #3]
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fb fedc 	bl	800ca74 <USBD_LL_IsoOUTIncomplete>
}
 8010cbc:	bf00      	nop
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cd6:	78fa      	ldrb	r2, [r7, #3]
 8010cd8:	4611      	mov	r1, r2
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb fea4 	bl	800ca28 <USBD_LL_IsoINIncomplete>
}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fb fee2 	bl	800cac0 <USBD_LL_DevConnected>
}
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fb fedf 	bl	800cad6 <USBD_LL_DevDisconnected>
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d139      	bne.n	8010da4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d30:	4a1f      	ldr	r2, [pc, #124]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4a1d      	ldr	r2, [pc, #116]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d40:	4b1b      	ldr	r3, [pc, #108]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010d48:	4b19      	ldr	r3, [pc, #100]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d4a:	2206      	movs	r2, #6
 8010d4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d4e:	4b18      	ldr	r3, [pc, #96]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d50:	2202      	movs	r2, #2
 8010d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d54:	4b16      	ldr	r3, [pc, #88]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d5a:	4b15      	ldr	r3, [pc, #84]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d60:	4b13      	ldr	r3, [pc, #76]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010d66:	4b12      	ldr	r3, [pc, #72]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d6c:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d72:	4b0f      	ldr	r3, [pc, #60]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d78:	480d      	ldr	r0, [pc, #52]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d7a:	f7f1 f965 	bl	8002048 <HAL_PCD_Init>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010d84:	f7f0 f8c8 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010d88:	2180      	movs	r1, #128	; 0x80
 8010d8a:	4809      	ldr	r0, [pc, #36]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d8c:	f7f2 fae7 	bl	800335e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010d90:	2240      	movs	r2, #64	; 0x40
 8010d92:	2100      	movs	r1, #0
 8010d94:	4806      	ldr	r0, [pc, #24]	; (8010db0 <USBD_LL_Init+0x90>)
 8010d96:	f7f2 fa9b 	bl	80032d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010d9a:	2280      	movs	r2, #128	; 0x80
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	4804      	ldr	r0, [pc, #16]	; (8010db0 <USBD_LL_Init+0x90>)
 8010da0:	f7f2 fa96 	bl	80032d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010da4:	2300      	movs	r3, #0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20001f68 	.word	0x20001f68

08010db4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7f1 fa60 	bl	8002290 <HAL_PCD_Start>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010dd4:	7bbb      	ldrb	r3, [r7, #14]
 8010dd6:	2b03      	cmp	r3, #3
 8010dd8:	d816      	bhi.n	8010e08 <USBD_LL_Start+0x54>
 8010dda:	a201      	add	r2, pc, #4	; (adr r2, 8010de0 <USBD_LL_Start+0x2c>)
 8010ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de0:	08010df1 	.word	0x08010df1
 8010de4:	08010df7 	.word	0x08010df7
 8010de8:	08010dfd 	.word	0x08010dfd
 8010dec:	08010e03 	.word	0x08010e03
    case HAL_OK :
      usb_status = USBD_OK;
 8010df0:	2300      	movs	r3, #0
 8010df2:	73fb      	strb	r3, [r7, #15]
    break;
 8010df4:	e00b      	b.n	8010e0e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010df6:	2303      	movs	r3, #3
 8010df8:	73fb      	strb	r3, [r7, #15]
    break;
 8010dfa:	e008      	b.n	8010e0e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8010e00:	e005      	b.n	8010e0e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e02:	2303      	movs	r3, #3
 8010e04:	73fb      	strb	r3, [r7, #15]
    break;
 8010e06:	e002      	b.n	8010e0e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010e08:	2303      	movs	r3, #3
 8010e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e0c:	bf00      	nop
  }
  return usb_status;
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3710      	adds	r7, #16
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	4608      	mov	r0, r1
 8010e22:	4611      	mov	r1, r2
 8010e24:	461a      	mov	r2, r3
 8010e26:	4603      	mov	r3, r0
 8010e28:	70fb      	strb	r3, [r7, #3]
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	70bb      	strb	r3, [r7, #2]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e40:	78bb      	ldrb	r3, [r7, #2]
 8010e42:	883a      	ldrh	r2, [r7, #0]
 8010e44:	78f9      	ldrb	r1, [r7, #3]
 8010e46:	f7f1 ff0a 	bl	8002c5e <HAL_PCD_EP_Open>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010e4e:	7bbb      	ldrb	r3, [r7, #14]
 8010e50:	2b03      	cmp	r3, #3
 8010e52:	d817      	bhi.n	8010e84 <USBD_LL_OpenEP+0x6c>
 8010e54:	a201      	add	r2, pc, #4	; (adr r2, 8010e5c <USBD_LL_OpenEP+0x44>)
 8010e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5a:	bf00      	nop
 8010e5c:	08010e6d 	.word	0x08010e6d
 8010e60:	08010e73 	.word	0x08010e73
 8010e64:	08010e79 	.word	0x08010e79
 8010e68:	08010e7f 	.word	0x08010e7f
    case HAL_OK :
      usb_status = USBD_OK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e70:	e00b      	b.n	8010e8a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e72:	2303      	movs	r3, #3
 8010e74:	73fb      	strb	r3, [r7, #15]
    break;
 8010e76:	e008      	b.n	8010e8a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e7c:	e005      	b.n	8010e8a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	73fb      	strb	r3, [r7, #15]
    break;
 8010e82:	e002      	b.n	8010e8a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010e84:	2303      	movs	r3, #3
 8010e86:	73fb      	strb	r3, [r7, #15]
    break;
 8010e88:	bf00      	nop
  }
  return usb_status;
 8010e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010eae:	78fa      	ldrb	r2, [r7, #3]
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7f1 ff3b 	bl	8002d2e <HAL_PCD_EP_Close>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ebc:	7bbb      	ldrb	r3, [r7, #14]
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d816      	bhi.n	8010ef0 <USBD_LL_CloseEP+0x5c>
 8010ec2:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <USBD_LL_CloseEP+0x34>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010ed9 	.word	0x08010ed9
 8010ecc:	08010edf 	.word	0x08010edf
 8010ed0:	08010ee5 	.word	0x08010ee5
 8010ed4:	08010eeb 	.word	0x08010eeb
    case HAL_OK :
      usb_status = USBD_OK;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	73fb      	strb	r3, [r7, #15]
    break;
 8010edc:	e00b      	b.n	8010ef6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ede:	2303      	movs	r3, #3
 8010ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ee2:	e008      	b.n	8010ef6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ee8:	e005      	b.n	8010ef6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010eea:	2303      	movs	r3, #3
 8010eec:	73fb      	strb	r3, [r7, #15]
    break;
 8010eee:	e002      	b.n	8010ef6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010ef0:	2303      	movs	r3, #3
 8010ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ef4:	bf00      	nop
  }
  return usb_status;
 8010ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f1a:	78fa      	ldrb	r2, [r7, #3]
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f1 ffe2 	bl	8002ee8 <HAL_PCD_EP_SetStall>
 8010f24:	4603      	mov	r3, r0
 8010f26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010f28:	7bbb      	ldrb	r3, [r7, #14]
 8010f2a:	2b03      	cmp	r3, #3
 8010f2c:	d816      	bhi.n	8010f5c <USBD_LL_StallEP+0x5c>
 8010f2e:	a201      	add	r2, pc, #4	; (adr r2, 8010f34 <USBD_LL_StallEP+0x34>)
 8010f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f34:	08010f45 	.word	0x08010f45
 8010f38:	08010f4b 	.word	0x08010f4b
 8010f3c:	08010f51 	.word	0x08010f51
 8010f40:	08010f57 	.word	0x08010f57
    case HAL_OK :
      usb_status = USBD_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	73fb      	strb	r3, [r7, #15]
    break;
 8010f48:	e00b      	b.n	8010f62 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8010f4e:	e008      	b.n	8010f62 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010f50:	2301      	movs	r3, #1
 8010f52:	73fb      	strb	r3, [r7, #15]
    break;
 8010f54:	e005      	b.n	8010f62 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010f56:	2303      	movs	r3, #3
 8010f58:	73fb      	strb	r3, [r7, #15]
    break;
 8010f5a:	e002      	b.n	8010f62 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010f5c:	2303      	movs	r3, #3
 8010f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f60:	bf00      	nop
  }
  return usb_status;
 8010f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3710      	adds	r7, #16
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	460b      	mov	r3, r1
 8010f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f86:	78fa      	ldrb	r2, [r7, #3]
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7f2 f80e 	bl	8002fac <HAL_PCD_EP_ClrStall>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	d816      	bhi.n	8010fc8 <USBD_LL_ClearStallEP+0x5c>
 8010f9a:	a201      	add	r2, pc, #4	; (adr r2, 8010fa0 <USBD_LL_ClearStallEP+0x34>)
 8010f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa0:	08010fb1 	.word	0x08010fb1
 8010fa4:	08010fb7 	.word	0x08010fb7
 8010fa8:	08010fbd 	.word	0x08010fbd
 8010fac:	08010fc3 	.word	0x08010fc3
    case HAL_OK :
      usb_status = USBD_OK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8010fb4:	e00b      	b.n	8010fce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8010fba:	e008      	b.n	8010fce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8010fc0:	e005      	b.n	8010fce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010fc2:	2303      	movs	r3, #3
 8010fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8010fc6:	e002      	b.n	8010fce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010fc8:	2303      	movs	r3, #3
 8010fca:	73fb      	strb	r3, [r7, #15]
    break;
 8010fcc:	bf00      	nop
  }
  return usb_status;
 8010fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3710      	adds	r7, #16
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010fea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	da0b      	bge.n	801100c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ff4:	78fb      	ldrb	r3, [r7, #3]
 8010ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ffa:	68f9      	ldr	r1, [r7, #12]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	00db      	lsls	r3, r3, #3
 8011000:	4413      	add	r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	440b      	add	r3, r1
 8011006:	333e      	adds	r3, #62	; 0x3e
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	e00b      	b.n	8011024 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801100c:	78fb      	ldrb	r3, [r7, #3]
 801100e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011012:	68f9      	ldr	r1, [r7, #12]
 8011014:	4613      	mov	r3, r2
 8011016:	00db      	lsls	r3, r3, #3
 8011018:	4413      	add	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	440b      	add	r3, r1
 801101e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011024:	4618      	mov	r0, r3
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801103c:	2300      	movs	r3, #0
 801103e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011040:	2300      	movs	r3, #0
 8011042:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801104a:	78fa      	ldrb	r2, [r7, #3]
 801104c:	4611      	mov	r1, r2
 801104e:	4618      	mov	r0, r3
 8011050:	f7f1 fde0 	bl	8002c14 <HAL_PCD_SetAddress>
 8011054:	4603      	mov	r3, r0
 8011056:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011058:	7bbb      	ldrb	r3, [r7, #14]
 801105a:	2b03      	cmp	r3, #3
 801105c:	d816      	bhi.n	801108c <USBD_LL_SetUSBAddress+0x5c>
 801105e:	a201      	add	r2, pc, #4	; (adr r2, 8011064 <USBD_LL_SetUSBAddress+0x34>)
 8011060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011064:	08011075 	.word	0x08011075
 8011068:	0801107b 	.word	0x0801107b
 801106c:	08011081 	.word	0x08011081
 8011070:	08011087 	.word	0x08011087
    case HAL_OK :
      usb_status = USBD_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	73fb      	strb	r3, [r7, #15]
    break;
 8011078:	e00b      	b.n	8011092 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801107a:	2303      	movs	r3, #3
 801107c:	73fb      	strb	r3, [r7, #15]
    break;
 801107e:	e008      	b.n	8011092 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011080:	2301      	movs	r3, #1
 8011082:	73fb      	strb	r3, [r7, #15]
    break;
 8011084:	e005      	b.n	8011092 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011086:	2303      	movs	r3, #3
 8011088:	73fb      	strb	r3, [r7, #15]
    break;
 801108a:	e002      	b.n	8011092 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801108c:	2303      	movs	r3, #3
 801108e:	73fb      	strb	r3, [r7, #15]
    break;
 8011090:	bf00      	nop
  }
  return usb_status;
 8011092:	7bfb      	ldrb	r3, [r7, #15]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	607a      	str	r2, [r7, #4]
 80110a6:	603b      	str	r3, [r7, #0]
 80110a8:	460b      	mov	r3, r1
 80110aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80110ba:	7af9      	ldrb	r1, [r7, #11]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	f7f1 fed5 	bl	8002e6e <HAL_PCD_EP_Transmit>
 80110c4:	4603      	mov	r3, r0
 80110c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80110c8:	7dbb      	ldrb	r3, [r7, #22]
 80110ca:	2b03      	cmp	r3, #3
 80110cc:	d816      	bhi.n	80110fc <USBD_LL_Transmit+0x60>
 80110ce:	a201      	add	r2, pc, #4	; (adr r2, 80110d4 <USBD_LL_Transmit+0x38>)
 80110d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d4:	080110e5 	.word	0x080110e5
 80110d8:	080110eb 	.word	0x080110eb
 80110dc:	080110f1 	.word	0x080110f1
 80110e0:	080110f7 	.word	0x080110f7
    case HAL_OK :
      usb_status = USBD_OK;
 80110e4:	2300      	movs	r3, #0
 80110e6:	75fb      	strb	r3, [r7, #23]
    break;
 80110e8:	e00b      	b.n	8011102 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110ea:	2303      	movs	r3, #3
 80110ec:	75fb      	strb	r3, [r7, #23]
    break;
 80110ee:	e008      	b.n	8011102 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110f0:	2301      	movs	r3, #1
 80110f2:	75fb      	strb	r3, [r7, #23]
    break;
 80110f4:	e005      	b.n	8011102 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110f6:	2303      	movs	r3, #3
 80110f8:	75fb      	strb	r3, [r7, #23]
    break;
 80110fa:	e002      	b.n	8011102 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80110fc:	2303      	movs	r3, #3
 80110fe:	75fb      	strb	r3, [r7, #23]
    break;
 8011100:	bf00      	nop
  }
  return usb_status;
 8011102:	7dfb      	ldrb	r3, [r7, #23]
}
 8011104:	4618      	mov	r0, r3
 8011106:	3718      	adds	r7, #24
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	607a      	str	r2, [r7, #4]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	460b      	mov	r3, r1
 801111a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801112a:	7af9      	ldrb	r1, [r7, #11]
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	687a      	ldr	r2, [r7, #4]
 8011130:	f7f1 fe47 	bl	8002dc2 <HAL_PCD_EP_Receive>
 8011134:	4603      	mov	r3, r0
 8011136:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011138:	7dbb      	ldrb	r3, [r7, #22]
 801113a:	2b03      	cmp	r3, #3
 801113c:	d816      	bhi.n	801116c <USBD_LL_PrepareReceive+0x60>
 801113e:	a201      	add	r2, pc, #4	; (adr r2, 8011144 <USBD_LL_PrepareReceive+0x38>)
 8011140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011144:	08011155 	.word	0x08011155
 8011148:	0801115b 	.word	0x0801115b
 801114c:	08011161 	.word	0x08011161
 8011150:	08011167 	.word	0x08011167
    case HAL_OK :
      usb_status = USBD_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]
    break;
 8011158:	e00b      	b.n	8011172 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801115a:	2303      	movs	r3, #3
 801115c:	75fb      	strb	r3, [r7, #23]
    break;
 801115e:	e008      	b.n	8011172 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011160:	2301      	movs	r3, #1
 8011162:	75fb      	strb	r3, [r7, #23]
    break;
 8011164:	e005      	b.n	8011172 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011166:	2303      	movs	r3, #3
 8011168:	75fb      	strb	r3, [r7, #23]
    break;
 801116a:	e002      	b.n	8011172 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801116c:	2303      	movs	r3, #3
 801116e:	75fb      	strb	r3, [r7, #23]
    break;
 8011170:	bf00      	nop
  }
  return usb_status;
 8011172:	7dfb      	ldrb	r3, [r7, #23]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801118e:	78fa      	ldrb	r2, [r7, #3]
 8011190:	4611      	mov	r1, r2
 8011192:	4618      	mov	r0, r3
 8011194:	f7f1 fe53 	bl	8002e3e <HAL_PCD_EP_GetRxCount>
 8011198:	4603      	mov	r3, r0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
	...

080111a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111ac:	4b03      	ldr	r3, [pc, #12]	; (80111bc <USBD_static_malloc+0x18>)
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	20002474 	.word	0x20002474

080111c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]

}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80111d8:	f7ef fb6a 	bl	80008b0 <SystemClock_Config>
}
 80111dc:	bf00      	nop
 80111de:	bd80      	pop	{r7, pc}

080111e0 <__libc_init_array>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4d0d      	ldr	r5, [pc, #52]	; (8011218 <__libc_init_array+0x38>)
 80111e4:	4c0d      	ldr	r4, [pc, #52]	; (801121c <__libc_init_array+0x3c>)
 80111e6:	1b64      	subs	r4, r4, r5
 80111e8:	10a4      	asrs	r4, r4, #2
 80111ea:	2600      	movs	r6, #0
 80111ec:	42a6      	cmp	r6, r4
 80111ee:	d109      	bne.n	8011204 <__libc_init_array+0x24>
 80111f0:	4d0b      	ldr	r5, [pc, #44]	; (8011220 <__libc_init_array+0x40>)
 80111f2:	4c0c      	ldr	r4, [pc, #48]	; (8011224 <__libc_init_array+0x44>)
 80111f4:	f000 ffec 	bl	80121d0 <_init>
 80111f8:	1b64      	subs	r4, r4, r5
 80111fa:	10a4      	asrs	r4, r4, #2
 80111fc:	2600      	movs	r6, #0
 80111fe:	42a6      	cmp	r6, r4
 8011200:	d105      	bne.n	801120e <__libc_init_array+0x2e>
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	f855 3b04 	ldr.w	r3, [r5], #4
 8011208:	4798      	blx	r3
 801120a:	3601      	adds	r6, #1
 801120c:	e7ee      	b.n	80111ec <__libc_init_array+0xc>
 801120e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011212:	4798      	blx	r3
 8011214:	3601      	adds	r6, #1
 8011216:	e7f2      	b.n	80111fe <__libc_init_array+0x1e>
 8011218:	08012498 	.word	0x08012498
 801121c:	08012498 	.word	0x08012498
 8011220:	08012498 	.word	0x08012498
 8011224:	0801249c 	.word	0x0801249c

08011228 <memset>:
 8011228:	4402      	add	r2, r0
 801122a:	4603      	mov	r3, r0
 801122c:	4293      	cmp	r3, r2
 801122e:	d100      	bne.n	8011232 <memset+0xa>
 8011230:	4770      	bx	lr
 8011232:	f803 1b01 	strb.w	r1, [r3], #1
 8011236:	e7f9      	b.n	801122c <memset+0x4>

08011238 <iprintf>:
 8011238:	b40f      	push	{r0, r1, r2, r3}
 801123a:	4b0a      	ldr	r3, [pc, #40]	; (8011264 <iprintf+0x2c>)
 801123c:	b513      	push	{r0, r1, r4, lr}
 801123e:	681c      	ldr	r4, [r3, #0]
 8011240:	b124      	cbz	r4, 801124c <iprintf+0x14>
 8011242:	69a3      	ldr	r3, [r4, #24]
 8011244:	b913      	cbnz	r3, 801124c <iprintf+0x14>
 8011246:	4620      	mov	r0, r4
 8011248:	f000 f866 	bl	8011318 <__sinit>
 801124c:	ab05      	add	r3, sp, #20
 801124e:	9a04      	ldr	r2, [sp, #16]
 8011250:	68a1      	ldr	r1, [r4, #8]
 8011252:	9301      	str	r3, [sp, #4]
 8011254:	4620      	mov	r0, r4
 8011256:	f000 f9bd 	bl	80115d4 <_vfiprintf_r>
 801125a:	b002      	add	sp, #8
 801125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011260:	b004      	add	sp, #16
 8011262:	4770      	bx	lr
 8011264:	20000180 	.word	0x20000180

08011268 <std>:
 8011268:	2300      	movs	r3, #0
 801126a:	b510      	push	{r4, lr}
 801126c:	4604      	mov	r4, r0
 801126e:	e9c0 3300 	strd	r3, r3, [r0]
 8011272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011276:	6083      	str	r3, [r0, #8]
 8011278:	8181      	strh	r1, [r0, #12]
 801127a:	6643      	str	r3, [r0, #100]	; 0x64
 801127c:	81c2      	strh	r2, [r0, #14]
 801127e:	6183      	str	r3, [r0, #24]
 8011280:	4619      	mov	r1, r3
 8011282:	2208      	movs	r2, #8
 8011284:	305c      	adds	r0, #92	; 0x5c
 8011286:	f7ff ffcf 	bl	8011228 <memset>
 801128a:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <std+0x38>)
 801128c:	6263      	str	r3, [r4, #36]	; 0x24
 801128e:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <std+0x3c>)
 8011290:	62a3      	str	r3, [r4, #40]	; 0x28
 8011292:	4b05      	ldr	r3, [pc, #20]	; (80112a8 <std+0x40>)
 8011294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011296:	4b05      	ldr	r3, [pc, #20]	; (80112ac <std+0x44>)
 8011298:	6224      	str	r4, [r4, #32]
 801129a:	6323      	str	r3, [r4, #48]	; 0x30
 801129c:	bd10      	pop	{r4, pc}
 801129e:	bf00      	nop
 80112a0:	08011b7d 	.word	0x08011b7d
 80112a4:	08011b9f 	.word	0x08011b9f
 80112a8:	08011bd7 	.word	0x08011bd7
 80112ac:	08011bfb 	.word	0x08011bfb

080112b0 <_cleanup_r>:
 80112b0:	4901      	ldr	r1, [pc, #4]	; (80112b8 <_cleanup_r+0x8>)
 80112b2:	f000 b8af 	b.w	8011414 <_fwalk_reent>
 80112b6:	bf00      	nop
 80112b8:	08011ed5 	.word	0x08011ed5

080112bc <__sfmoreglue>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	2268      	movs	r2, #104	; 0x68
 80112c0:	1e4d      	subs	r5, r1, #1
 80112c2:	4355      	muls	r5, r2
 80112c4:	460e      	mov	r6, r1
 80112c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112ca:	f000 f8e5 	bl	8011498 <_malloc_r>
 80112ce:	4604      	mov	r4, r0
 80112d0:	b140      	cbz	r0, 80112e4 <__sfmoreglue+0x28>
 80112d2:	2100      	movs	r1, #0
 80112d4:	e9c0 1600 	strd	r1, r6, [r0]
 80112d8:	300c      	adds	r0, #12
 80112da:	60a0      	str	r0, [r4, #8]
 80112dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112e0:	f7ff ffa2 	bl	8011228 <memset>
 80112e4:	4620      	mov	r0, r4
 80112e6:	bd70      	pop	{r4, r5, r6, pc}

080112e8 <__sfp_lock_acquire>:
 80112e8:	4801      	ldr	r0, [pc, #4]	; (80112f0 <__sfp_lock_acquire+0x8>)
 80112ea:	f000 b8b3 	b.w	8011454 <__retarget_lock_acquire_recursive>
 80112ee:	bf00      	nop
 80112f0:	20002695 	.word	0x20002695

080112f4 <__sfp_lock_release>:
 80112f4:	4801      	ldr	r0, [pc, #4]	; (80112fc <__sfp_lock_release+0x8>)
 80112f6:	f000 b8ae 	b.w	8011456 <__retarget_lock_release_recursive>
 80112fa:	bf00      	nop
 80112fc:	20002695 	.word	0x20002695

08011300 <__sinit_lock_acquire>:
 8011300:	4801      	ldr	r0, [pc, #4]	; (8011308 <__sinit_lock_acquire+0x8>)
 8011302:	f000 b8a7 	b.w	8011454 <__retarget_lock_acquire_recursive>
 8011306:	bf00      	nop
 8011308:	20002696 	.word	0x20002696

0801130c <__sinit_lock_release>:
 801130c:	4801      	ldr	r0, [pc, #4]	; (8011314 <__sinit_lock_release+0x8>)
 801130e:	f000 b8a2 	b.w	8011456 <__retarget_lock_release_recursive>
 8011312:	bf00      	nop
 8011314:	20002696 	.word	0x20002696

08011318 <__sinit>:
 8011318:	b510      	push	{r4, lr}
 801131a:	4604      	mov	r4, r0
 801131c:	f7ff fff0 	bl	8011300 <__sinit_lock_acquire>
 8011320:	69a3      	ldr	r3, [r4, #24]
 8011322:	b11b      	cbz	r3, 801132c <__sinit+0x14>
 8011324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011328:	f7ff bff0 	b.w	801130c <__sinit_lock_release>
 801132c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011330:	6523      	str	r3, [r4, #80]	; 0x50
 8011332:	4b13      	ldr	r3, [pc, #76]	; (8011380 <__sinit+0x68>)
 8011334:	4a13      	ldr	r2, [pc, #76]	; (8011384 <__sinit+0x6c>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	62a2      	str	r2, [r4, #40]	; 0x28
 801133a:	42a3      	cmp	r3, r4
 801133c:	bf04      	itt	eq
 801133e:	2301      	moveq	r3, #1
 8011340:	61a3      	streq	r3, [r4, #24]
 8011342:	4620      	mov	r0, r4
 8011344:	f000 f820 	bl	8011388 <__sfp>
 8011348:	6060      	str	r0, [r4, #4]
 801134a:	4620      	mov	r0, r4
 801134c:	f000 f81c 	bl	8011388 <__sfp>
 8011350:	60a0      	str	r0, [r4, #8]
 8011352:	4620      	mov	r0, r4
 8011354:	f000 f818 	bl	8011388 <__sfp>
 8011358:	2200      	movs	r2, #0
 801135a:	60e0      	str	r0, [r4, #12]
 801135c:	2104      	movs	r1, #4
 801135e:	6860      	ldr	r0, [r4, #4]
 8011360:	f7ff ff82 	bl	8011268 <std>
 8011364:	68a0      	ldr	r0, [r4, #8]
 8011366:	2201      	movs	r2, #1
 8011368:	2109      	movs	r1, #9
 801136a:	f7ff ff7d 	bl	8011268 <std>
 801136e:	68e0      	ldr	r0, [r4, #12]
 8011370:	2202      	movs	r2, #2
 8011372:	2112      	movs	r1, #18
 8011374:	f7ff ff78 	bl	8011268 <std>
 8011378:	2301      	movs	r3, #1
 801137a:	61a3      	str	r3, [r4, #24]
 801137c:	e7d2      	b.n	8011324 <__sinit+0xc>
 801137e:	bf00      	nop
 8011380:	080123f8 	.word	0x080123f8
 8011384:	080112b1 	.word	0x080112b1

08011388 <__sfp>:
 8011388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138a:	4607      	mov	r7, r0
 801138c:	f7ff ffac 	bl	80112e8 <__sfp_lock_acquire>
 8011390:	4b1e      	ldr	r3, [pc, #120]	; (801140c <__sfp+0x84>)
 8011392:	681e      	ldr	r6, [r3, #0]
 8011394:	69b3      	ldr	r3, [r6, #24]
 8011396:	b913      	cbnz	r3, 801139e <__sfp+0x16>
 8011398:	4630      	mov	r0, r6
 801139a:	f7ff ffbd 	bl	8011318 <__sinit>
 801139e:	3648      	adds	r6, #72	; 0x48
 80113a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113a4:	3b01      	subs	r3, #1
 80113a6:	d503      	bpl.n	80113b0 <__sfp+0x28>
 80113a8:	6833      	ldr	r3, [r6, #0]
 80113aa:	b30b      	cbz	r3, 80113f0 <__sfp+0x68>
 80113ac:	6836      	ldr	r6, [r6, #0]
 80113ae:	e7f7      	b.n	80113a0 <__sfp+0x18>
 80113b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113b4:	b9d5      	cbnz	r5, 80113ec <__sfp+0x64>
 80113b6:	4b16      	ldr	r3, [pc, #88]	; (8011410 <__sfp+0x88>)
 80113b8:	60e3      	str	r3, [r4, #12]
 80113ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113be:	6665      	str	r5, [r4, #100]	; 0x64
 80113c0:	f000 f847 	bl	8011452 <__retarget_lock_init_recursive>
 80113c4:	f7ff ff96 	bl	80112f4 <__sfp_lock_release>
 80113c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80113cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80113d0:	6025      	str	r5, [r4, #0]
 80113d2:	61a5      	str	r5, [r4, #24]
 80113d4:	2208      	movs	r2, #8
 80113d6:	4629      	mov	r1, r5
 80113d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113dc:	f7ff ff24 	bl	8011228 <memset>
 80113e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113e8:	4620      	mov	r0, r4
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ec:	3468      	adds	r4, #104	; 0x68
 80113ee:	e7d9      	b.n	80113a4 <__sfp+0x1c>
 80113f0:	2104      	movs	r1, #4
 80113f2:	4638      	mov	r0, r7
 80113f4:	f7ff ff62 	bl	80112bc <__sfmoreglue>
 80113f8:	4604      	mov	r4, r0
 80113fa:	6030      	str	r0, [r6, #0]
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d1d5      	bne.n	80113ac <__sfp+0x24>
 8011400:	f7ff ff78 	bl	80112f4 <__sfp_lock_release>
 8011404:	230c      	movs	r3, #12
 8011406:	603b      	str	r3, [r7, #0]
 8011408:	e7ee      	b.n	80113e8 <__sfp+0x60>
 801140a:	bf00      	nop
 801140c:	080123f8 	.word	0x080123f8
 8011410:	ffff0001 	.word	0xffff0001

08011414 <_fwalk_reent>:
 8011414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011418:	4606      	mov	r6, r0
 801141a:	4688      	mov	r8, r1
 801141c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011420:	2700      	movs	r7, #0
 8011422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011426:	f1b9 0901 	subs.w	r9, r9, #1
 801142a:	d505      	bpl.n	8011438 <_fwalk_reent+0x24>
 801142c:	6824      	ldr	r4, [r4, #0]
 801142e:	2c00      	cmp	r4, #0
 8011430:	d1f7      	bne.n	8011422 <_fwalk_reent+0xe>
 8011432:	4638      	mov	r0, r7
 8011434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011438:	89ab      	ldrh	r3, [r5, #12]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d907      	bls.n	801144e <_fwalk_reent+0x3a>
 801143e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011442:	3301      	adds	r3, #1
 8011444:	d003      	beq.n	801144e <_fwalk_reent+0x3a>
 8011446:	4629      	mov	r1, r5
 8011448:	4630      	mov	r0, r6
 801144a:	47c0      	blx	r8
 801144c:	4307      	orrs	r7, r0
 801144e:	3568      	adds	r5, #104	; 0x68
 8011450:	e7e9      	b.n	8011426 <_fwalk_reent+0x12>

08011452 <__retarget_lock_init_recursive>:
 8011452:	4770      	bx	lr

08011454 <__retarget_lock_acquire_recursive>:
 8011454:	4770      	bx	lr

08011456 <__retarget_lock_release_recursive>:
 8011456:	4770      	bx	lr

08011458 <sbrk_aligned>:
 8011458:	b570      	push	{r4, r5, r6, lr}
 801145a:	4e0e      	ldr	r6, [pc, #56]	; (8011494 <sbrk_aligned+0x3c>)
 801145c:	460c      	mov	r4, r1
 801145e:	6831      	ldr	r1, [r6, #0]
 8011460:	4605      	mov	r5, r0
 8011462:	b911      	cbnz	r1, 801146a <sbrk_aligned+0x12>
 8011464:	f000 fb7a 	bl	8011b5c <_sbrk_r>
 8011468:	6030      	str	r0, [r6, #0]
 801146a:	4621      	mov	r1, r4
 801146c:	4628      	mov	r0, r5
 801146e:	f000 fb75 	bl	8011b5c <_sbrk_r>
 8011472:	1c43      	adds	r3, r0, #1
 8011474:	d00a      	beq.n	801148c <sbrk_aligned+0x34>
 8011476:	1cc4      	adds	r4, r0, #3
 8011478:	f024 0403 	bic.w	r4, r4, #3
 801147c:	42a0      	cmp	r0, r4
 801147e:	d007      	beq.n	8011490 <sbrk_aligned+0x38>
 8011480:	1a21      	subs	r1, r4, r0
 8011482:	4628      	mov	r0, r5
 8011484:	f000 fb6a 	bl	8011b5c <_sbrk_r>
 8011488:	3001      	adds	r0, #1
 801148a:	d101      	bne.n	8011490 <sbrk_aligned+0x38>
 801148c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011490:	4620      	mov	r0, r4
 8011492:	bd70      	pop	{r4, r5, r6, pc}
 8011494:	2000269c 	.word	0x2000269c

08011498 <_malloc_r>:
 8011498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801149c:	1ccd      	adds	r5, r1, #3
 801149e:	f025 0503 	bic.w	r5, r5, #3
 80114a2:	3508      	adds	r5, #8
 80114a4:	2d0c      	cmp	r5, #12
 80114a6:	bf38      	it	cc
 80114a8:	250c      	movcc	r5, #12
 80114aa:	2d00      	cmp	r5, #0
 80114ac:	4607      	mov	r7, r0
 80114ae:	db01      	blt.n	80114b4 <_malloc_r+0x1c>
 80114b0:	42a9      	cmp	r1, r5
 80114b2:	d905      	bls.n	80114c0 <_malloc_r+0x28>
 80114b4:	230c      	movs	r3, #12
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	2600      	movs	r6, #0
 80114ba:	4630      	mov	r0, r6
 80114bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c0:	4e2e      	ldr	r6, [pc, #184]	; (801157c <_malloc_r+0xe4>)
 80114c2:	f000 fdbb 	bl	801203c <__malloc_lock>
 80114c6:	6833      	ldr	r3, [r6, #0]
 80114c8:	461c      	mov	r4, r3
 80114ca:	bb34      	cbnz	r4, 801151a <_malloc_r+0x82>
 80114cc:	4629      	mov	r1, r5
 80114ce:	4638      	mov	r0, r7
 80114d0:	f7ff ffc2 	bl	8011458 <sbrk_aligned>
 80114d4:	1c43      	adds	r3, r0, #1
 80114d6:	4604      	mov	r4, r0
 80114d8:	d14d      	bne.n	8011576 <_malloc_r+0xde>
 80114da:	6834      	ldr	r4, [r6, #0]
 80114dc:	4626      	mov	r6, r4
 80114de:	2e00      	cmp	r6, #0
 80114e0:	d140      	bne.n	8011564 <_malloc_r+0xcc>
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	4631      	mov	r1, r6
 80114e6:	4638      	mov	r0, r7
 80114e8:	eb04 0803 	add.w	r8, r4, r3
 80114ec:	f000 fb36 	bl	8011b5c <_sbrk_r>
 80114f0:	4580      	cmp	r8, r0
 80114f2:	d13a      	bne.n	801156a <_malloc_r+0xd2>
 80114f4:	6821      	ldr	r1, [r4, #0]
 80114f6:	3503      	adds	r5, #3
 80114f8:	1a6d      	subs	r5, r5, r1
 80114fa:	f025 0503 	bic.w	r5, r5, #3
 80114fe:	3508      	adds	r5, #8
 8011500:	2d0c      	cmp	r5, #12
 8011502:	bf38      	it	cc
 8011504:	250c      	movcc	r5, #12
 8011506:	4629      	mov	r1, r5
 8011508:	4638      	mov	r0, r7
 801150a:	f7ff ffa5 	bl	8011458 <sbrk_aligned>
 801150e:	3001      	adds	r0, #1
 8011510:	d02b      	beq.n	801156a <_malloc_r+0xd2>
 8011512:	6823      	ldr	r3, [r4, #0]
 8011514:	442b      	add	r3, r5
 8011516:	6023      	str	r3, [r4, #0]
 8011518:	e00e      	b.n	8011538 <_malloc_r+0xa0>
 801151a:	6822      	ldr	r2, [r4, #0]
 801151c:	1b52      	subs	r2, r2, r5
 801151e:	d41e      	bmi.n	801155e <_malloc_r+0xc6>
 8011520:	2a0b      	cmp	r2, #11
 8011522:	d916      	bls.n	8011552 <_malloc_r+0xba>
 8011524:	1961      	adds	r1, r4, r5
 8011526:	42a3      	cmp	r3, r4
 8011528:	6025      	str	r5, [r4, #0]
 801152a:	bf18      	it	ne
 801152c:	6059      	strne	r1, [r3, #4]
 801152e:	6863      	ldr	r3, [r4, #4]
 8011530:	bf08      	it	eq
 8011532:	6031      	streq	r1, [r6, #0]
 8011534:	5162      	str	r2, [r4, r5]
 8011536:	604b      	str	r3, [r1, #4]
 8011538:	4638      	mov	r0, r7
 801153a:	f104 060b 	add.w	r6, r4, #11
 801153e:	f000 fd83 	bl	8012048 <__malloc_unlock>
 8011542:	f026 0607 	bic.w	r6, r6, #7
 8011546:	1d23      	adds	r3, r4, #4
 8011548:	1af2      	subs	r2, r6, r3
 801154a:	d0b6      	beq.n	80114ba <_malloc_r+0x22>
 801154c:	1b9b      	subs	r3, r3, r6
 801154e:	50a3      	str	r3, [r4, r2]
 8011550:	e7b3      	b.n	80114ba <_malloc_r+0x22>
 8011552:	6862      	ldr	r2, [r4, #4]
 8011554:	42a3      	cmp	r3, r4
 8011556:	bf0c      	ite	eq
 8011558:	6032      	streq	r2, [r6, #0]
 801155a:	605a      	strne	r2, [r3, #4]
 801155c:	e7ec      	b.n	8011538 <_malloc_r+0xa0>
 801155e:	4623      	mov	r3, r4
 8011560:	6864      	ldr	r4, [r4, #4]
 8011562:	e7b2      	b.n	80114ca <_malloc_r+0x32>
 8011564:	4634      	mov	r4, r6
 8011566:	6876      	ldr	r6, [r6, #4]
 8011568:	e7b9      	b.n	80114de <_malloc_r+0x46>
 801156a:	230c      	movs	r3, #12
 801156c:	603b      	str	r3, [r7, #0]
 801156e:	4638      	mov	r0, r7
 8011570:	f000 fd6a 	bl	8012048 <__malloc_unlock>
 8011574:	e7a1      	b.n	80114ba <_malloc_r+0x22>
 8011576:	6025      	str	r5, [r4, #0]
 8011578:	e7de      	b.n	8011538 <_malloc_r+0xa0>
 801157a:	bf00      	nop
 801157c:	20002698 	.word	0x20002698

08011580 <__sfputc_r>:
 8011580:	6893      	ldr	r3, [r2, #8]
 8011582:	3b01      	subs	r3, #1
 8011584:	2b00      	cmp	r3, #0
 8011586:	b410      	push	{r4}
 8011588:	6093      	str	r3, [r2, #8]
 801158a:	da08      	bge.n	801159e <__sfputc_r+0x1e>
 801158c:	6994      	ldr	r4, [r2, #24]
 801158e:	42a3      	cmp	r3, r4
 8011590:	db01      	blt.n	8011596 <__sfputc_r+0x16>
 8011592:	290a      	cmp	r1, #10
 8011594:	d103      	bne.n	801159e <__sfputc_r+0x1e>
 8011596:	f85d 4b04 	ldr.w	r4, [sp], #4
 801159a:	f000 bb33 	b.w	8011c04 <__swbuf_r>
 801159e:	6813      	ldr	r3, [r2, #0]
 80115a0:	1c58      	adds	r0, r3, #1
 80115a2:	6010      	str	r0, [r2, #0]
 80115a4:	7019      	strb	r1, [r3, #0]
 80115a6:	4608      	mov	r0, r1
 80115a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <__sfputs_r>:
 80115ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b0:	4606      	mov	r6, r0
 80115b2:	460f      	mov	r7, r1
 80115b4:	4614      	mov	r4, r2
 80115b6:	18d5      	adds	r5, r2, r3
 80115b8:	42ac      	cmp	r4, r5
 80115ba:	d101      	bne.n	80115c0 <__sfputs_r+0x12>
 80115bc:	2000      	movs	r0, #0
 80115be:	e007      	b.n	80115d0 <__sfputs_r+0x22>
 80115c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c4:	463a      	mov	r2, r7
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ffda 	bl	8011580 <__sfputc_r>
 80115cc:	1c43      	adds	r3, r0, #1
 80115ce:	d1f3      	bne.n	80115b8 <__sfputs_r+0xa>
 80115d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115d4 <_vfiprintf_r>:
 80115d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d8:	460d      	mov	r5, r1
 80115da:	b09d      	sub	sp, #116	; 0x74
 80115dc:	4614      	mov	r4, r2
 80115de:	4698      	mov	r8, r3
 80115e0:	4606      	mov	r6, r0
 80115e2:	b118      	cbz	r0, 80115ec <_vfiprintf_r+0x18>
 80115e4:	6983      	ldr	r3, [r0, #24]
 80115e6:	b90b      	cbnz	r3, 80115ec <_vfiprintf_r+0x18>
 80115e8:	f7ff fe96 	bl	8011318 <__sinit>
 80115ec:	4b89      	ldr	r3, [pc, #548]	; (8011814 <_vfiprintf_r+0x240>)
 80115ee:	429d      	cmp	r5, r3
 80115f0:	d11b      	bne.n	801162a <_vfiprintf_r+0x56>
 80115f2:	6875      	ldr	r5, [r6, #4]
 80115f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115f6:	07d9      	lsls	r1, r3, #31
 80115f8:	d405      	bmi.n	8011606 <_vfiprintf_r+0x32>
 80115fa:	89ab      	ldrh	r3, [r5, #12]
 80115fc:	059a      	lsls	r2, r3, #22
 80115fe:	d402      	bmi.n	8011606 <_vfiprintf_r+0x32>
 8011600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011602:	f7ff ff27 	bl	8011454 <__retarget_lock_acquire_recursive>
 8011606:	89ab      	ldrh	r3, [r5, #12]
 8011608:	071b      	lsls	r3, r3, #28
 801160a:	d501      	bpl.n	8011610 <_vfiprintf_r+0x3c>
 801160c:	692b      	ldr	r3, [r5, #16]
 801160e:	b9eb      	cbnz	r3, 801164c <_vfiprintf_r+0x78>
 8011610:	4629      	mov	r1, r5
 8011612:	4630      	mov	r0, r6
 8011614:	f000 fb5a 	bl	8011ccc <__swsetup_r>
 8011618:	b1c0      	cbz	r0, 801164c <_vfiprintf_r+0x78>
 801161a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801161c:	07dc      	lsls	r4, r3, #31
 801161e:	d50e      	bpl.n	801163e <_vfiprintf_r+0x6a>
 8011620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011624:	b01d      	add	sp, #116	; 0x74
 8011626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162a:	4b7b      	ldr	r3, [pc, #492]	; (8011818 <_vfiprintf_r+0x244>)
 801162c:	429d      	cmp	r5, r3
 801162e:	d101      	bne.n	8011634 <_vfiprintf_r+0x60>
 8011630:	68b5      	ldr	r5, [r6, #8]
 8011632:	e7df      	b.n	80115f4 <_vfiprintf_r+0x20>
 8011634:	4b79      	ldr	r3, [pc, #484]	; (801181c <_vfiprintf_r+0x248>)
 8011636:	429d      	cmp	r5, r3
 8011638:	bf08      	it	eq
 801163a:	68f5      	ldreq	r5, [r6, #12]
 801163c:	e7da      	b.n	80115f4 <_vfiprintf_r+0x20>
 801163e:	89ab      	ldrh	r3, [r5, #12]
 8011640:	0598      	lsls	r0, r3, #22
 8011642:	d4ed      	bmi.n	8011620 <_vfiprintf_r+0x4c>
 8011644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011646:	f7ff ff06 	bl	8011456 <__retarget_lock_release_recursive>
 801164a:	e7e9      	b.n	8011620 <_vfiprintf_r+0x4c>
 801164c:	2300      	movs	r3, #0
 801164e:	9309      	str	r3, [sp, #36]	; 0x24
 8011650:	2320      	movs	r3, #32
 8011652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011656:	f8cd 800c 	str.w	r8, [sp, #12]
 801165a:	2330      	movs	r3, #48	; 0x30
 801165c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011820 <_vfiprintf_r+0x24c>
 8011660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011664:	f04f 0901 	mov.w	r9, #1
 8011668:	4623      	mov	r3, r4
 801166a:	469a      	mov	sl, r3
 801166c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011670:	b10a      	cbz	r2, 8011676 <_vfiprintf_r+0xa2>
 8011672:	2a25      	cmp	r2, #37	; 0x25
 8011674:	d1f9      	bne.n	801166a <_vfiprintf_r+0x96>
 8011676:	ebba 0b04 	subs.w	fp, sl, r4
 801167a:	d00b      	beq.n	8011694 <_vfiprintf_r+0xc0>
 801167c:	465b      	mov	r3, fp
 801167e:	4622      	mov	r2, r4
 8011680:	4629      	mov	r1, r5
 8011682:	4630      	mov	r0, r6
 8011684:	f7ff ff93 	bl	80115ae <__sfputs_r>
 8011688:	3001      	adds	r0, #1
 801168a:	f000 80aa 	beq.w	80117e2 <_vfiprintf_r+0x20e>
 801168e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011690:	445a      	add	r2, fp
 8011692:	9209      	str	r2, [sp, #36]	; 0x24
 8011694:	f89a 3000 	ldrb.w	r3, [sl]
 8011698:	2b00      	cmp	r3, #0
 801169a:	f000 80a2 	beq.w	80117e2 <_vfiprintf_r+0x20e>
 801169e:	2300      	movs	r3, #0
 80116a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116a8:	f10a 0a01 	add.w	sl, sl, #1
 80116ac:	9304      	str	r3, [sp, #16]
 80116ae:	9307      	str	r3, [sp, #28]
 80116b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116b4:	931a      	str	r3, [sp, #104]	; 0x68
 80116b6:	4654      	mov	r4, sl
 80116b8:	2205      	movs	r2, #5
 80116ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116be:	4858      	ldr	r0, [pc, #352]	; (8011820 <_vfiprintf_r+0x24c>)
 80116c0:	f7ee fda6 	bl	8000210 <memchr>
 80116c4:	9a04      	ldr	r2, [sp, #16]
 80116c6:	b9d8      	cbnz	r0, 8011700 <_vfiprintf_r+0x12c>
 80116c8:	06d1      	lsls	r1, r2, #27
 80116ca:	bf44      	itt	mi
 80116cc:	2320      	movmi	r3, #32
 80116ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116d2:	0713      	lsls	r3, r2, #28
 80116d4:	bf44      	itt	mi
 80116d6:	232b      	movmi	r3, #43	; 0x2b
 80116d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116dc:	f89a 3000 	ldrb.w	r3, [sl]
 80116e0:	2b2a      	cmp	r3, #42	; 0x2a
 80116e2:	d015      	beq.n	8011710 <_vfiprintf_r+0x13c>
 80116e4:	9a07      	ldr	r2, [sp, #28]
 80116e6:	4654      	mov	r4, sl
 80116e8:	2000      	movs	r0, #0
 80116ea:	f04f 0c0a 	mov.w	ip, #10
 80116ee:	4621      	mov	r1, r4
 80116f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116f4:	3b30      	subs	r3, #48	; 0x30
 80116f6:	2b09      	cmp	r3, #9
 80116f8:	d94e      	bls.n	8011798 <_vfiprintf_r+0x1c4>
 80116fa:	b1b0      	cbz	r0, 801172a <_vfiprintf_r+0x156>
 80116fc:	9207      	str	r2, [sp, #28]
 80116fe:	e014      	b.n	801172a <_vfiprintf_r+0x156>
 8011700:	eba0 0308 	sub.w	r3, r0, r8
 8011704:	fa09 f303 	lsl.w	r3, r9, r3
 8011708:	4313      	orrs	r3, r2
 801170a:	9304      	str	r3, [sp, #16]
 801170c:	46a2      	mov	sl, r4
 801170e:	e7d2      	b.n	80116b6 <_vfiprintf_r+0xe2>
 8011710:	9b03      	ldr	r3, [sp, #12]
 8011712:	1d19      	adds	r1, r3, #4
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	9103      	str	r1, [sp, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	bfbb      	ittet	lt
 801171c:	425b      	neglt	r3, r3
 801171e:	f042 0202 	orrlt.w	r2, r2, #2
 8011722:	9307      	strge	r3, [sp, #28]
 8011724:	9307      	strlt	r3, [sp, #28]
 8011726:	bfb8      	it	lt
 8011728:	9204      	strlt	r2, [sp, #16]
 801172a:	7823      	ldrb	r3, [r4, #0]
 801172c:	2b2e      	cmp	r3, #46	; 0x2e
 801172e:	d10c      	bne.n	801174a <_vfiprintf_r+0x176>
 8011730:	7863      	ldrb	r3, [r4, #1]
 8011732:	2b2a      	cmp	r3, #42	; 0x2a
 8011734:	d135      	bne.n	80117a2 <_vfiprintf_r+0x1ce>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	1d1a      	adds	r2, r3, #4
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	9203      	str	r2, [sp, #12]
 801173e:	2b00      	cmp	r3, #0
 8011740:	bfb8      	it	lt
 8011742:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011746:	3402      	adds	r4, #2
 8011748:	9305      	str	r3, [sp, #20]
 801174a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011830 <_vfiprintf_r+0x25c>
 801174e:	7821      	ldrb	r1, [r4, #0]
 8011750:	2203      	movs	r2, #3
 8011752:	4650      	mov	r0, sl
 8011754:	f7ee fd5c 	bl	8000210 <memchr>
 8011758:	b140      	cbz	r0, 801176c <_vfiprintf_r+0x198>
 801175a:	2340      	movs	r3, #64	; 0x40
 801175c:	eba0 000a 	sub.w	r0, r0, sl
 8011760:	fa03 f000 	lsl.w	r0, r3, r0
 8011764:	9b04      	ldr	r3, [sp, #16]
 8011766:	4303      	orrs	r3, r0
 8011768:	3401      	adds	r4, #1
 801176a:	9304      	str	r3, [sp, #16]
 801176c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011770:	482c      	ldr	r0, [pc, #176]	; (8011824 <_vfiprintf_r+0x250>)
 8011772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011776:	2206      	movs	r2, #6
 8011778:	f7ee fd4a 	bl	8000210 <memchr>
 801177c:	2800      	cmp	r0, #0
 801177e:	d03f      	beq.n	8011800 <_vfiprintf_r+0x22c>
 8011780:	4b29      	ldr	r3, [pc, #164]	; (8011828 <_vfiprintf_r+0x254>)
 8011782:	bb1b      	cbnz	r3, 80117cc <_vfiprintf_r+0x1f8>
 8011784:	9b03      	ldr	r3, [sp, #12]
 8011786:	3307      	adds	r3, #7
 8011788:	f023 0307 	bic.w	r3, r3, #7
 801178c:	3308      	adds	r3, #8
 801178e:	9303      	str	r3, [sp, #12]
 8011790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011792:	443b      	add	r3, r7
 8011794:	9309      	str	r3, [sp, #36]	; 0x24
 8011796:	e767      	b.n	8011668 <_vfiprintf_r+0x94>
 8011798:	fb0c 3202 	mla	r2, ip, r2, r3
 801179c:	460c      	mov	r4, r1
 801179e:	2001      	movs	r0, #1
 80117a0:	e7a5      	b.n	80116ee <_vfiprintf_r+0x11a>
 80117a2:	2300      	movs	r3, #0
 80117a4:	3401      	adds	r4, #1
 80117a6:	9305      	str	r3, [sp, #20]
 80117a8:	4619      	mov	r1, r3
 80117aa:	f04f 0c0a 	mov.w	ip, #10
 80117ae:	4620      	mov	r0, r4
 80117b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117b4:	3a30      	subs	r2, #48	; 0x30
 80117b6:	2a09      	cmp	r2, #9
 80117b8:	d903      	bls.n	80117c2 <_vfiprintf_r+0x1ee>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d0c5      	beq.n	801174a <_vfiprintf_r+0x176>
 80117be:	9105      	str	r1, [sp, #20]
 80117c0:	e7c3      	b.n	801174a <_vfiprintf_r+0x176>
 80117c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80117c6:	4604      	mov	r4, r0
 80117c8:	2301      	movs	r3, #1
 80117ca:	e7f0      	b.n	80117ae <_vfiprintf_r+0x1da>
 80117cc:	ab03      	add	r3, sp, #12
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	462a      	mov	r2, r5
 80117d2:	4b16      	ldr	r3, [pc, #88]	; (801182c <_vfiprintf_r+0x258>)
 80117d4:	a904      	add	r1, sp, #16
 80117d6:	4630      	mov	r0, r6
 80117d8:	f3af 8000 	nop.w
 80117dc:	4607      	mov	r7, r0
 80117de:	1c78      	adds	r0, r7, #1
 80117e0:	d1d6      	bne.n	8011790 <_vfiprintf_r+0x1bc>
 80117e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117e4:	07d9      	lsls	r1, r3, #31
 80117e6:	d405      	bmi.n	80117f4 <_vfiprintf_r+0x220>
 80117e8:	89ab      	ldrh	r3, [r5, #12]
 80117ea:	059a      	lsls	r2, r3, #22
 80117ec:	d402      	bmi.n	80117f4 <_vfiprintf_r+0x220>
 80117ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117f0:	f7ff fe31 	bl	8011456 <__retarget_lock_release_recursive>
 80117f4:	89ab      	ldrh	r3, [r5, #12]
 80117f6:	065b      	lsls	r3, r3, #25
 80117f8:	f53f af12 	bmi.w	8011620 <_vfiprintf_r+0x4c>
 80117fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117fe:	e711      	b.n	8011624 <_vfiprintf_r+0x50>
 8011800:	ab03      	add	r3, sp, #12
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	462a      	mov	r2, r5
 8011806:	4b09      	ldr	r3, [pc, #36]	; (801182c <_vfiprintf_r+0x258>)
 8011808:	a904      	add	r1, sp, #16
 801180a:	4630      	mov	r0, r6
 801180c:	f000 f880 	bl	8011910 <_printf_i>
 8011810:	e7e4      	b.n	80117dc <_vfiprintf_r+0x208>
 8011812:	bf00      	nop
 8011814:	0801241c 	.word	0x0801241c
 8011818:	0801243c 	.word	0x0801243c
 801181c:	080123fc 	.word	0x080123fc
 8011820:	0801245c 	.word	0x0801245c
 8011824:	08012466 	.word	0x08012466
 8011828:	00000000 	.word	0x00000000
 801182c:	080115af 	.word	0x080115af
 8011830:	08012462 	.word	0x08012462

08011834 <_printf_common>:
 8011834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011838:	4616      	mov	r6, r2
 801183a:	4699      	mov	r9, r3
 801183c:	688a      	ldr	r2, [r1, #8]
 801183e:	690b      	ldr	r3, [r1, #16]
 8011840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011844:	4293      	cmp	r3, r2
 8011846:	bfb8      	it	lt
 8011848:	4613      	movlt	r3, r2
 801184a:	6033      	str	r3, [r6, #0]
 801184c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011850:	4607      	mov	r7, r0
 8011852:	460c      	mov	r4, r1
 8011854:	b10a      	cbz	r2, 801185a <_printf_common+0x26>
 8011856:	3301      	adds	r3, #1
 8011858:	6033      	str	r3, [r6, #0]
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	0699      	lsls	r1, r3, #26
 801185e:	bf42      	ittt	mi
 8011860:	6833      	ldrmi	r3, [r6, #0]
 8011862:	3302      	addmi	r3, #2
 8011864:	6033      	strmi	r3, [r6, #0]
 8011866:	6825      	ldr	r5, [r4, #0]
 8011868:	f015 0506 	ands.w	r5, r5, #6
 801186c:	d106      	bne.n	801187c <_printf_common+0x48>
 801186e:	f104 0a19 	add.w	sl, r4, #25
 8011872:	68e3      	ldr	r3, [r4, #12]
 8011874:	6832      	ldr	r2, [r6, #0]
 8011876:	1a9b      	subs	r3, r3, r2
 8011878:	42ab      	cmp	r3, r5
 801187a:	dc26      	bgt.n	80118ca <_printf_common+0x96>
 801187c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011880:	1e13      	subs	r3, r2, #0
 8011882:	6822      	ldr	r2, [r4, #0]
 8011884:	bf18      	it	ne
 8011886:	2301      	movne	r3, #1
 8011888:	0692      	lsls	r2, r2, #26
 801188a:	d42b      	bmi.n	80118e4 <_printf_common+0xb0>
 801188c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011890:	4649      	mov	r1, r9
 8011892:	4638      	mov	r0, r7
 8011894:	47c0      	blx	r8
 8011896:	3001      	adds	r0, #1
 8011898:	d01e      	beq.n	80118d8 <_printf_common+0xa4>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	68e5      	ldr	r5, [r4, #12]
 801189e:	6832      	ldr	r2, [r6, #0]
 80118a0:	f003 0306 	and.w	r3, r3, #6
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	bf08      	it	eq
 80118a8:	1aad      	subeq	r5, r5, r2
 80118aa:	68a3      	ldr	r3, [r4, #8]
 80118ac:	6922      	ldr	r2, [r4, #16]
 80118ae:	bf0c      	ite	eq
 80118b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118b4:	2500      	movne	r5, #0
 80118b6:	4293      	cmp	r3, r2
 80118b8:	bfc4      	itt	gt
 80118ba:	1a9b      	subgt	r3, r3, r2
 80118bc:	18ed      	addgt	r5, r5, r3
 80118be:	2600      	movs	r6, #0
 80118c0:	341a      	adds	r4, #26
 80118c2:	42b5      	cmp	r5, r6
 80118c4:	d11a      	bne.n	80118fc <_printf_common+0xc8>
 80118c6:	2000      	movs	r0, #0
 80118c8:	e008      	b.n	80118dc <_printf_common+0xa8>
 80118ca:	2301      	movs	r3, #1
 80118cc:	4652      	mov	r2, sl
 80118ce:	4649      	mov	r1, r9
 80118d0:	4638      	mov	r0, r7
 80118d2:	47c0      	blx	r8
 80118d4:	3001      	adds	r0, #1
 80118d6:	d103      	bne.n	80118e0 <_printf_common+0xac>
 80118d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e0:	3501      	adds	r5, #1
 80118e2:	e7c6      	b.n	8011872 <_printf_common+0x3e>
 80118e4:	18e1      	adds	r1, r4, r3
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	2030      	movs	r0, #48	; 0x30
 80118ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118ee:	4422      	add	r2, r4
 80118f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118f8:	3302      	adds	r3, #2
 80118fa:	e7c7      	b.n	801188c <_printf_common+0x58>
 80118fc:	2301      	movs	r3, #1
 80118fe:	4622      	mov	r2, r4
 8011900:	4649      	mov	r1, r9
 8011902:	4638      	mov	r0, r7
 8011904:	47c0      	blx	r8
 8011906:	3001      	adds	r0, #1
 8011908:	d0e6      	beq.n	80118d8 <_printf_common+0xa4>
 801190a:	3601      	adds	r6, #1
 801190c:	e7d9      	b.n	80118c2 <_printf_common+0x8e>
	...

08011910 <_printf_i>:
 8011910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011914:	7e0f      	ldrb	r7, [r1, #24]
 8011916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011918:	2f78      	cmp	r7, #120	; 0x78
 801191a:	4691      	mov	r9, r2
 801191c:	4680      	mov	r8, r0
 801191e:	460c      	mov	r4, r1
 8011920:	469a      	mov	sl, r3
 8011922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011926:	d807      	bhi.n	8011938 <_printf_i+0x28>
 8011928:	2f62      	cmp	r7, #98	; 0x62
 801192a:	d80a      	bhi.n	8011942 <_printf_i+0x32>
 801192c:	2f00      	cmp	r7, #0
 801192e:	f000 80d8 	beq.w	8011ae2 <_printf_i+0x1d2>
 8011932:	2f58      	cmp	r7, #88	; 0x58
 8011934:	f000 80a3 	beq.w	8011a7e <_printf_i+0x16e>
 8011938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801193c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011940:	e03a      	b.n	80119b8 <_printf_i+0xa8>
 8011942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011946:	2b15      	cmp	r3, #21
 8011948:	d8f6      	bhi.n	8011938 <_printf_i+0x28>
 801194a:	a101      	add	r1, pc, #4	; (adr r1, 8011950 <_printf_i+0x40>)
 801194c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011950:	080119a9 	.word	0x080119a9
 8011954:	080119bd 	.word	0x080119bd
 8011958:	08011939 	.word	0x08011939
 801195c:	08011939 	.word	0x08011939
 8011960:	08011939 	.word	0x08011939
 8011964:	08011939 	.word	0x08011939
 8011968:	080119bd 	.word	0x080119bd
 801196c:	08011939 	.word	0x08011939
 8011970:	08011939 	.word	0x08011939
 8011974:	08011939 	.word	0x08011939
 8011978:	08011939 	.word	0x08011939
 801197c:	08011ac9 	.word	0x08011ac9
 8011980:	080119ed 	.word	0x080119ed
 8011984:	08011aab 	.word	0x08011aab
 8011988:	08011939 	.word	0x08011939
 801198c:	08011939 	.word	0x08011939
 8011990:	08011aeb 	.word	0x08011aeb
 8011994:	08011939 	.word	0x08011939
 8011998:	080119ed 	.word	0x080119ed
 801199c:	08011939 	.word	0x08011939
 80119a0:	08011939 	.word	0x08011939
 80119a4:	08011ab3 	.word	0x08011ab3
 80119a8:	682b      	ldr	r3, [r5, #0]
 80119aa:	1d1a      	adds	r2, r3, #4
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	602a      	str	r2, [r5, #0]
 80119b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119b8:	2301      	movs	r3, #1
 80119ba:	e0a3      	b.n	8011b04 <_printf_i+0x1f4>
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	6829      	ldr	r1, [r5, #0]
 80119c0:	0606      	lsls	r6, r0, #24
 80119c2:	f101 0304 	add.w	r3, r1, #4
 80119c6:	d50a      	bpl.n	80119de <_printf_i+0xce>
 80119c8:	680e      	ldr	r6, [r1, #0]
 80119ca:	602b      	str	r3, [r5, #0]
 80119cc:	2e00      	cmp	r6, #0
 80119ce:	da03      	bge.n	80119d8 <_printf_i+0xc8>
 80119d0:	232d      	movs	r3, #45	; 0x2d
 80119d2:	4276      	negs	r6, r6
 80119d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d8:	485e      	ldr	r0, [pc, #376]	; (8011b54 <_printf_i+0x244>)
 80119da:	230a      	movs	r3, #10
 80119dc:	e019      	b.n	8011a12 <_printf_i+0x102>
 80119de:	680e      	ldr	r6, [r1, #0]
 80119e0:	602b      	str	r3, [r5, #0]
 80119e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80119e6:	bf18      	it	ne
 80119e8:	b236      	sxthne	r6, r6
 80119ea:	e7ef      	b.n	80119cc <_printf_i+0xbc>
 80119ec:	682b      	ldr	r3, [r5, #0]
 80119ee:	6820      	ldr	r0, [r4, #0]
 80119f0:	1d19      	adds	r1, r3, #4
 80119f2:	6029      	str	r1, [r5, #0]
 80119f4:	0601      	lsls	r1, r0, #24
 80119f6:	d501      	bpl.n	80119fc <_printf_i+0xec>
 80119f8:	681e      	ldr	r6, [r3, #0]
 80119fa:	e002      	b.n	8011a02 <_printf_i+0xf2>
 80119fc:	0646      	lsls	r6, r0, #25
 80119fe:	d5fb      	bpl.n	80119f8 <_printf_i+0xe8>
 8011a00:	881e      	ldrh	r6, [r3, #0]
 8011a02:	4854      	ldr	r0, [pc, #336]	; (8011b54 <_printf_i+0x244>)
 8011a04:	2f6f      	cmp	r7, #111	; 0x6f
 8011a06:	bf0c      	ite	eq
 8011a08:	2308      	moveq	r3, #8
 8011a0a:	230a      	movne	r3, #10
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a12:	6865      	ldr	r5, [r4, #4]
 8011a14:	60a5      	str	r5, [r4, #8]
 8011a16:	2d00      	cmp	r5, #0
 8011a18:	bfa2      	ittt	ge
 8011a1a:	6821      	ldrge	r1, [r4, #0]
 8011a1c:	f021 0104 	bicge.w	r1, r1, #4
 8011a20:	6021      	strge	r1, [r4, #0]
 8011a22:	b90e      	cbnz	r6, 8011a28 <_printf_i+0x118>
 8011a24:	2d00      	cmp	r5, #0
 8011a26:	d04d      	beq.n	8011ac4 <_printf_i+0x1b4>
 8011a28:	4615      	mov	r5, r2
 8011a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8011a32:	5dc7      	ldrb	r7, [r0, r7]
 8011a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a38:	4637      	mov	r7, r6
 8011a3a:	42bb      	cmp	r3, r7
 8011a3c:	460e      	mov	r6, r1
 8011a3e:	d9f4      	bls.n	8011a2a <_printf_i+0x11a>
 8011a40:	2b08      	cmp	r3, #8
 8011a42:	d10b      	bne.n	8011a5c <_printf_i+0x14c>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	07de      	lsls	r6, r3, #31
 8011a48:	d508      	bpl.n	8011a5c <_printf_i+0x14c>
 8011a4a:	6923      	ldr	r3, [r4, #16]
 8011a4c:	6861      	ldr	r1, [r4, #4]
 8011a4e:	4299      	cmp	r1, r3
 8011a50:	bfde      	ittt	le
 8011a52:	2330      	movle	r3, #48	; 0x30
 8011a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011a5c:	1b52      	subs	r2, r2, r5
 8011a5e:	6122      	str	r2, [r4, #16]
 8011a60:	f8cd a000 	str.w	sl, [sp]
 8011a64:	464b      	mov	r3, r9
 8011a66:	aa03      	add	r2, sp, #12
 8011a68:	4621      	mov	r1, r4
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	f7ff fee2 	bl	8011834 <_printf_common>
 8011a70:	3001      	adds	r0, #1
 8011a72:	d14c      	bne.n	8011b0e <_printf_i+0x1fe>
 8011a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a78:	b004      	add	sp, #16
 8011a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7e:	4835      	ldr	r0, [pc, #212]	; (8011b54 <_printf_i+0x244>)
 8011a80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011a84:	6829      	ldr	r1, [r5, #0]
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a8c:	6029      	str	r1, [r5, #0]
 8011a8e:	061d      	lsls	r5, r3, #24
 8011a90:	d514      	bpl.n	8011abc <_printf_i+0x1ac>
 8011a92:	07df      	lsls	r7, r3, #31
 8011a94:	bf44      	itt	mi
 8011a96:	f043 0320 	orrmi.w	r3, r3, #32
 8011a9a:	6023      	strmi	r3, [r4, #0]
 8011a9c:	b91e      	cbnz	r6, 8011aa6 <_printf_i+0x196>
 8011a9e:	6823      	ldr	r3, [r4, #0]
 8011aa0:	f023 0320 	bic.w	r3, r3, #32
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	2310      	movs	r3, #16
 8011aa8:	e7b0      	b.n	8011a0c <_printf_i+0xfc>
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	f043 0320 	orr.w	r3, r3, #32
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	2378      	movs	r3, #120	; 0x78
 8011ab4:	4828      	ldr	r0, [pc, #160]	; (8011b58 <_printf_i+0x248>)
 8011ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011aba:	e7e3      	b.n	8011a84 <_printf_i+0x174>
 8011abc:	0659      	lsls	r1, r3, #25
 8011abe:	bf48      	it	mi
 8011ac0:	b2b6      	uxthmi	r6, r6
 8011ac2:	e7e6      	b.n	8011a92 <_printf_i+0x182>
 8011ac4:	4615      	mov	r5, r2
 8011ac6:	e7bb      	b.n	8011a40 <_printf_i+0x130>
 8011ac8:	682b      	ldr	r3, [r5, #0]
 8011aca:	6826      	ldr	r6, [r4, #0]
 8011acc:	6961      	ldr	r1, [r4, #20]
 8011ace:	1d18      	adds	r0, r3, #4
 8011ad0:	6028      	str	r0, [r5, #0]
 8011ad2:	0635      	lsls	r5, r6, #24
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	d501      	bpl.n	8011adc <_printf_i+0x1cc>
 8011ad8:	6019      	str	r1, [r3, #0]
 8011ada:	e002      	b.n	8011ae2 <_printf_i+0x1d2>
 8011adc:	0670      	lsls	r0, r6, #25
 8011ade:	d5fb      	bpl.n	8011ad8 <_printf_i+0x1c8>
 8011ae0:	8019      	strh	r1, [r3, #0]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	6123      	str	r3, [r4, #16]
 8011ae6:	4615      	mov	r5, r2
 8011ae8:	e7ba      	b.n	8011a60 <_printf_i+0x150>
 8011aea:	682b      	ldr	r3, [r5, #0]
 8011aec:	1d1a      	adds	r2, r3, #4
 8011aee:	602a      	str	r2, [r5, #0]
 8011af0:	681d      	ldr	r5, [r3, #0]
 8011af2:	6862      	ldr	r2, [r4, #4]
 8011af4:	2100      	movs	r1, #0
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7ee fb8a 	bl	8000210 <memchr>
 8011afc:	b108      	cbz	r0, 8011b02 <_printf_i+0x1f2>
 8011afe:	1b40      	subs	r0, r0, r5
 8011b00:	6060      	str	r0, [r4, #4]
 8011b02:	6863      	ldr	r3, [r4, #4]
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	2300      	movs	r3, #0
 8011b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b0c:	e7a8      	b.n	8011a60 <_printf_i+0x150>
 8011b0e:	6923      	ldr	r3, [r4, #16]
 8011b10:	462a      	mov	r2, r5
 8011b12:	4649      	mov	r1, r9
 8011b14:	4640      	mov	r0, r8
 8011b16:	47d0      	blx	sl
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d0ab      	beq.n	8011a74 <_printf_i+0x164>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	079b      	lsls	r3, r3, #30
 8011b20:	d413      	bmi.n	8011b4a <_printf_i+0x23a>
 8011b22:	68e0      	ldr	r0, [r4, #12]
 8011b24:	9b03      	ldr	r3, [sp, #12]
 8011b26:	4298      	cmp	r0, r3
 8011b28:	bfb8      	it	lt
 8011b2a:	4618      	movlt	r0, r3
 8011b2c:	e7a4      	b.n	8011a78 <_printf_i+0x168>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	4632      	mov	r2, r6
 8011b32:	4649      	mov	r1, r9
 8011b34:	4640      	mov	r0, r8
 8011b36:	47d0      	blx	sl
 8011b38:	3001      	adds	r0, #1
 8011b3a:	d09b      	beq.n	8011a74 <_printf_i+0x164>
 8011b3c:	3501      	adds	r5, #1
 8011b3e:	68e3      	ldr	r3, [r4, #12]
 8011b40:	9903      	ldr	r1, [sp, #12]
 8011b42:	1a5b      	subs	r3, r3, r1
 8011b44:	42ab      	cmp	r3, r5
 8011b46:	dcf2      	bgt.n	8011b2e <_printf_i+0x21e>
 8011b48:	e7eb      	b.n	8011b22 <_printf_i+0x212>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	f104 0619 	add.w	r6, r4, #25
 8011b50:	e7f5      	b.n	8011b3e <_printf_i+0x22e>
 8011b52:	bf00      	nop
 8011b54:	0801246d 	.word	0x0801246d
 8011b58:	0801247e 	.word	0x0801247e

08011b5c <_sbrk_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4d06      	ldr	r5, [pc, #24]	; (8011b78 <_sbrk_r+0x1c>)
 8011b60:	2300      	movs	r3, #0
 8011b62:	4604      	mov	r4, r0
 8011b64:	4608      	mov	r0, r1
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	f000 fb1c 	bl	80121a4 <_sbrk>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_sbrk_r+0x1a>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_sbrk_r+0x1a>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	200026a0 	.word	0x200026a0

08011b7c <__sread>:
 8011b7c:	b510      	push	{r4, lr}
 8011b7e:	460c      	mov	r4, r1
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	f000 fab2 	bl	80120ec <_read_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	bfab      	itete	ge
 8011b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8011b90:	181b      	addge	r3, r3, r0
 8011b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b96:	bfac      	ite	ge
 8011b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b9a:	81a3      	strhlt	r3, [r4, #12]
 8011b9c:	bd10      	pop	{r4, pc}

08011b9e <__swrite>:
 8011b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	461f      	mov	r7, r3
 8011ba4:	898b      	ldrh	r3, [r1, #12]
 8011ba6:	05db      	lsls	r3, r3, #23
 8011ba8:	4605      	mov	r5, r0
 8011baa:	460c      	mov	r4, r1
 8011bac:	4616      	mov	r6, r2
 8011bae:	d505      	bpl.n	8011bbc <__swrite+0x1e>
 8011bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f000 f9c8 	bl	8011f4c <_lseek_r>
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bc6:	81a3      	strh	r3, [r4, #12]
 8011bc8:	4632      	mov	r2, r6
 8011bca:	463b      	mov	r3, r7
 8011bcc:	4628      	mov	r0, r5
 8011bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd2:	f000 b869 	b.w	8011ca8 <_write_r>

08011bd6 <__sseek>:
 8011bd6:	b510      	push	{r4, lr}
 8011bd8:	460c      	mov	r4, r1
 8011bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bde:	f000 f9b5 	bl	8011f4c <_lseek_r>
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	bf15      	itete	ne
 8011be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bf2:	81a3      	strheq	r3, [r4, #12]
 8011bf4:	bf18      	it	ne
 8011bf6:	81a3      	strhne	r3, [r4, #12]
 8011bf8:	bd10      	pop	{r4, pc}

08011bfa <__sclose>:
 8011bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bfe:	f000 b8d3 	b.w	8011da8 <_close_r>
	...

08011c04 <__swbuf_r>:
 8011c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c06:	460e      	mov	r6, r1
 8011c08:	4614      	mov	r4, r2
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b118      	cbz	r0, 8011c16 <__swbuf_r+0x12>
 8011c0e:	6983      	ldr	r3, [r0, #24]
 8011c10:	b90b      	cbnz	r3, 8011c16 <__swbuf_r+0x12>
 8011c12:	f7ff fb81 	bl	8011318 <__sinit>
 8011c16:	4b21      	ldr	r3, [pc, #132]	; (8011c9c <__swbuf_r+0x98>)
 8011c18:	429c      	cmp	r4, r3
 8011c1a:	d12b      	bne.n	8011c74 <__swbuf_r+0x70>
 8011c1c:	686c      	ldr	r4, [r5, #4]
 8011c1e:	69a3      	ldr	r3, [r4, #24]
 8011c20:	60a3      	str	r3, [r4, #8]
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	071a      	lsls	r2, r3, #28
 8011c26:	d52f      	bpl.n	8011c88 <__swbuf_r+0x84>
 8011c28:	6923      	ldr	r3, [r4, #16]
 8011c2a:	b36b      	cbz	r3, 8011c88 <__swbuf_r+0x84>
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	6820      	ldr	r0, [r4, #0]
 8011c30:	1ac0      	subs	r0, r0, r3
 8011c32:	6963      	ldr	r3, [r4, #20]
 8011c34:	b2f6      	uxtb	r6, r6
 8011c36:	4283      	cmp	r3, r0
 8011c38:	4637      	mov	r7, r6
 8011c3a:	dc04      	bgt.n	8011c46 <__swbuf_r+0x42>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f000 f948 	bl	8011ed4 <_fflush_r>
 8011c44:	bb30      	cbnz	r0, 8011c94 <__swbuf_r+0x90>
 8011c46:	68a3      	ldr	r3, [r4, #8]
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	60a3      	str	r3, [r4, #8]
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	6022      	str	r2, [r4, #0]
 8011c52:	701e      	strb	r6, [r3, #0]
 8011c54:	6963      	ldr	r3, [r4, #20]
 8011c56:	3001      	adds	r0, #1
 8011c58:	4283      	cmp	r3, r0
 8011c5a:	d004      	beq.n	8011c66 <__swbuf_r+0x62>
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	07db      	lsls	r3, r3, #31
 8011c60:	d506      	bpl.n	8011c70 <__swbuf_r+0x6c>
 8011c62:	2e0a      	cmp	r6, #10
 8011c64:	d104      	bne.n	8011c70 <__swbuf_r+0x6c>
 8011c66:	4621      	mov	r1, r4
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f000 f933 	bl	8011ed4 <_fflush_r>
 8011c6e:	b988      	cbnz	r0, 8011c94 <__swbuf_r+0x90>
 8011c70:	4638      	mov	r0, r7
 8011c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c74:	4b0a      	ldr	r3, [pc, #40]	; (8011ca0 <__swbuf_r+0x9c>)
 8011c76:	429c      	cmp	r4, r3
 8011c78:	d101      	bne.n	8011c7e <__swbuf_r+0x7a>
 8011c7a:	68ac      	ldr	r4, [r5, #8]
 8011c7c:	e7cf      	b.n	8011c1e <__swbuf_r+0x1a>
 8011c7e:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <__swbuf_r+0xa0>)
 8011c80:	429c      	cmp	r4, r3
 8011c82:	bf08      	it	eq
 8011c84:	68ec      	ldreq	r4, [r5, #12]
 8011c86:	e7ca      	b.n	8011c1e <__swbuf_r+0x1a>
 8011c88:	4621      	mov	r1, r4
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f000 f81e 	bl	8011ccc <__swsetup_r>
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d0cb      	beq.n	8011c2c <__swbuf_r+0x28>
 8011c94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c98:	e7ea      	b.n	8011c70 <__swbuf_r+0x6c>
 8011c9a:	bf00      	nop
 8011c9c:	0801241c 	.word	0x0801241c
 8011ca0:	0801243c 	.word	0x0801243c
 8011ca4:	080123fc 	.word	0x080123fc

08011ca8 <_write_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d07      	ldr	r5, [pc, #28]	; (8011cc8 <_write_r+0x20>)
 8011cac:	4604      	mov	r4, r0
 8011cae:	4608      	mov	r0, r1
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	602a      	str	r2, [r5, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	f000 fa82 	bl	80121c0 <_write>
 8011cbc:	1c43      	adds	r3, r0, #1
 8011cbe:	d102      	bne.n	8011cc6 <_write_r+0x1e>
 8011cc0:	682b      	ldr	r3, [r5, #0]
 8011cc2:	b103      	cbz	r3, 8011cc6 <_write_r+0x1e>
 8011cc4:	6023      	str	r3, [r4, #0]
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	200026a0 	.word	0x200026a0

08011ccc <__swsetup_r>:
 8011ccc:	4b32      	ldr	r3, [pc, #200]	; (8011d98 <__swsetup_r+0xcc>)
 8011cce:	b570      	push	{r4, r5, r6, lr}
 8011cd0:	681d      	ldr	r5, [r3, #0]
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	b125      	cbz	r5, 8011ce2 <__swsetup_r+0x16>
 8011cd8:	69ab      	ldr	r3, [r5, #24]
 8011cda:	b913      	cbnz	r3, 8011ce2 <__swsetup_r+0x16>
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f7ff fb1b 	bl	8011318 <__sinit>
 8011ce2:	4b2e      	ldr	r3, [pc, #184]	; (8011d9c <__swsetup_r+0xd0>)
 8011ce4:	429c      	cmp	r4, r3
 8011ce6:	d10f      	bne.n	8011d08 <__swsetup_r+0x3c>
 8011ce8:	686c      	ldr	r4, [r5, #4]
 8011cea:	89a3      	ldrh	r3, [r4, #12]
 8011cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cf0:	0719      	lsls	r1, r3, #28
 8011cf2:	d42c      	bmi.n	8011d4e <__swsetup_r+0x82>
 8011cf4:	06dd      	lsls	r5, r3, #27
 8011cf6:	d411      	bmi.n	8011d1c <__swsetup_r+0x50>
 8011cf8:	2309      	movs	r3, #9
 8011cfa:	6033      	str	r3, [r6, #0]
 8011cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d00:	81a3      	strh	r3, [r4, #12]
 8011d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d06:	e03e      	b.n	8011d86 <__swsetup_r+0xba>
 8011d08:	4b25      	ldr	r3, [pc, #148]	; (8011da0 <__swsetup_r+0xd4>)
 8011d0a:	429c      	cmp	r4, r3
 8011d0c:	d101      	bne.n	8011d12 <__swsetup_r+0x46>
 8011d0e:	68ac      	ldr	r4, [r5, #8]
 8011d10:	e7eb      	b.n	8011cea <__swsetup_r+0x1e>
 8011d12:	4b24      	ldr	r3, [pc, #144]	; (8011da4 <__swsetup_r+0xd8>)
 8011d14:	429c      	cmp	r4, r3
 8011d16:	bf08      	it	eq
 8011d18:	68ec      	ldreq	r4, [r5, #12]
 8011d1a:	e7e6      	b.n	8011cea <__swsetup_r+0x1e>
 8011d1c:	0758      	lsls	r0, r3, #29
 8011d1e:	d512      	bpl.n	8011d46 <__swsetup_r+0x7a>
 8011d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d22:	b141      	cbz	r1, 8011d36 <__swsetup_r+0x6a>
 8011d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d28:	4299      	cmp	r1, r3
 8011d2a:	d002      	beq.n	8011d32 <__swsetup_r+0x66>
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	f000 f991 	bl	8012054 <_free_r>
 8011d32:	2300      	movs	r3, #0
 8011d34:	6363      	str	r3, [r4, #52]	; 0x34
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	2300      	movs	r3, #0
 8011d40:	6063      	str	r3, [r4, #4]
 8011d42:	6923      	ldr	r3, [r4, #16]
 8011d44:	6023      	str	r3, [r4, #0]
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	f043 0308 	orr.w	r3, r3, #8
 8011d4c:	81a3      	strh	r3, [r4, #12]
 8011d4e:	6923      	ldr	r3, [r4, #16]
 8011d50:	b94b      	cbnz	r3, 8011d66 <__swsetup_r+0x9a>
 8011d52:	89a3      	ldrh	r3, [r4, #12]
 8011d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d5c:	d003      	beq.n	8011d66 <__swsetup_r+0x9a>
 8011d5e:	4621      	mov	r1, r4
 8011d60:	4630      	mov	r0, r6
 8011d62:	f000 f92b 	bl	8011fbc <__smakebuf_r>
 8011d66:	89a0      	ldrh	r0, [r4, #12]
 8011d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d6c:	f010 0301 	ands.w	r3, r0, #1
 8011d70:	d00a      	beq.n	8011d88 <__swsetup_r+0xbc>
 8011d72:	2300      	movs	r3, #0
 8011d74:	60a3      	str	r3, [r4, #8]
 8011d76:	6963      	ldr	r3, [r4, #20]
 8011d78:	425b      	negs	r3, r3
 8011d7a:	61a3      	str	r3, [r4, #24]
 8011d7c:	6923      	ldr	r3, [r4, #16]
 8011d7e:	b943      	cbnz	r3, 8011d92 <__swsetup_r+0xc6>
 8011d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d84:	d1ba      	bne.n	8011cfc <__swsetup_r+0x30>
 8011d86:	bd70      	pop	{r4, r5, r6, pc}
 8011d88:	0781      	lsls	r1, r0, #30
 8011d8a:	bf58      	it	pl
 8011d8c:	6963      	ldrpl	r3, [r4, #20]
 8011d8e:	60a3      	str	r3, [r4, #8]
 8011d90:	e7f4      	b.n	8011d7c <__swsetup_r+0xb0>
 8011d92:	2000      	movs	r0, #0
 8011d94:	e7f7      	b.n	8011d86 <__swsetup_r+0xba>
 8011d96:	bf00      	nop
 8011d98:	20000180 	.word	0x20000180
 8011d9c:	0801241c 	.word	0x0801241c
 8011da0:	0801243c 	.word	0x0801243c
 8011da4:	080123fc 	.word	0x080123fc

08011da8 <_close_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d06      	ldr	r5, [pc, #24]	; (8011dc4 <_close_r+0x1c>)
 8011dac:	2300      	movs	r3, #0
 8011dae:	4604      	mov	r4, r0
 8011db0:	4608      	mov	r0, r1
 8011db2:	602b      	str	r3, [r5, #0]
 8011db4:	f000 f9ce 	bl	8012154 <_close>
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d102      	bne.n	8011dc2 <_close_r+0x1a>
 8011dbc:	682b      	ldr	r3, [r5, #0]
 8011dbe:	b103      	cbz	r3, 8011dc2 <_close_r+0x1a>
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	bd38      	pop	{r3, r4, r5, pc}
 8011dc4:	200026a0 	.word	0x200026a0

08011dc8 <__sflush_r>:
 8011dc8:	898a      	ldrh	r2, [r1, #12]
 8011dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	4605      	mov	r5, r0
 8011dd0:	0710      	lsls	r0, r2, #28
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	d458      	bmi.n	8011e88 <__sflush_r+0xc0>
 8011dd6:	684b      	ldr	r3, [r1, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dc05      	bgt.n	8011de8 <__sflush_r+0x20>
 8011ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	dc02      	bgt.n	8011de8 <__sflush_r+0x20>
 8011de2:	2000      	movs	r0, #0
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dea:	2e00      	cmp	r6, #0
 8011dec:	d0f9      	beq.n	8011de2 <__sflush_r+0x1a>
 8011dee:	2300      	movs	r3, #0
 8011df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011df4:	682f      	ldr	r7, [r5, #0]
 8011df6:	602b      	str	r3, [r5, #0]
 8011df8:	d032      	beq.n	8011e60 <__sflush_r+0x98>
 8011dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011dfc:	89a3      	ldrh	r3, [r4, #12]
 8011dfe:	075a      	lsls	r2, r3, #29
 8011e00:	d505      	bpl.n	8011e0e <__sflush_r+0x46>
 8011e02:	6863      	ldr	r3, [r4, #4]
 8011e04:	1ac0      	subs	r0, r0, r3
 8011e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e08:	b10b      	cbz	r3, 8011e0e <__sflush_r+0x46>
 8011e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e0c:	1ac0      	subs	r0, r0, r3
 8011e0e:	2300      	movs	r3, #0
 8011e10:	4602      	mov	r2, r0
 8011e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e14:	6a21      	ldr	r1, [r4, #32]
 8011e16:	4628      	mov	r0, r5
 8011e18:	47b0      	blx	r6
 8011e1a:	1c43      	adds	r3, r0, #1
 8011e1c:	89a3      	ldrh	r3, [r4, #12]
 8011e1e:	d106      	bne.n	8011e2e <__sflush_r+0x66>
 8011e20:	6829      	ldr	r1, [r5, #0]
 8011e22:	291d      	cmp	r1, #29
 8011e24:	d82c      	bhi.n	8011e80 <__sflush_r+0xb8>
 8011e26:	4a2a      	ldr	r2, [pc, #168]	; (8011ed0 <__sflush_r+0x108>)
 8011e28:	40ca      	lsrs	r2, r1
 8011e2a:	07d6      	lsls	r6, r2, #31
 8011e2c:	d528      	bpl.n	8011e80 <__sflush_r+0xb8>
 8011e2e:	2200      	movs	r2, #0
 8011e30:	6062      	str	r2, [r4, #4]
 8011e32:	04d9      	lsls	r1, r3, #19
 8011e34:	6922      	ldr	r2, [r4, #16]
 8011e36:	6022      	str	r2, [r4, #0]
 8011e38:	d504      	bpl.n	8011e44 <__sflush_r+0x7c>
 8011e3a:	1c42      	adds	r2, r0, #1
 8011e3c:	d101      	bne.n	8011e42 <__sflush_r+0x7a>
 8011e3e:	682b      	ldr	r3, [r5, #0]
 8011e40:	b903      	cbnz	r3, 8011e44 <__sflush_r+0x7c>
 8011e42:	6560      	str	r0, [r4, #84]	; 0x54
 8011e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e46:	602f      	str	r7, [r5, #0]
 8011e48:	2900      	cmp	r1, #0
 8011e4a:	d0ca      	beq.n	8011de2 <__sflush_r+0x1a>
 8011e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e50:	4299      	cmp	r1, r3
 8011e52:	d002      	beq.n	8011e5a <__sflush_r+0x92>
 8011e54:	4628      	mov	r0, r5
 8011e56:	f000 f8fd 	bl	8012054 <_free_r>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8011e5e:	e7c1      	b.n	8011de4 <__sflush_r+0x1c>
 8011e60:	6a21      	ldr	r1, [r4, #32]
 8011e62:	2301      	movs	r3, #1
 8011e64:	4628      	mov	r0, r5
 8011e66:	47b0      	blx	r6
 8011e68:	1c41      	adds	r1, r0, #1
 8011e6a:	d1c7      	bne.n	8011dfc <__sflush_r+0x34>
 8011e6c:	682b      	ldr	r3, [r5, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0c4      	beq.n	8011dfc <__sflush_r+0x34>
 8011e72:	2b1d      	cmp	r3, #29
 8011e74:	d001      	beq.n	8011e7a <__sflush_r+0xb2>
 8011e76:	2b16      	cmp	r3, #22
 8011e78:	d101      	bne.n	8011e7e <__sflush_r+0xb6>
 8011e7a:	602f      	str	r7, [r5, #0]
 8011e7c:	e7b1      	b.n	8011de2 <__sflush_r+0x1a>
 8011e7e:	89a3      	ldrh	r3, [r4, #12]
 8011e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e84:	81a3      	strh	r3, [r4, #12]
 8011e86:	e7ad      	b.n	8011de4 <__sflush_r+0x1c>
 8011e88:	690f      	ldr	r7, [r1, #16]
 8011e8a:	2f00      	cmp	r7, #0
 8011e8c:	d0a9      	beq.n	8011de2 <__sflush_r+0x1a>
 8011e8e:	0793      	lsls	r3, r2, #30
 8011e90:	680e      	ldr	r6, [r1, #0]
 8011e92:	bf08      	it	eq
 8011e94:	694b      	ldreq	r3, [r1, #20]
 8011e96:	600f      	str	r7, [r1, #0]
 8011e98:	bf18      	it	ne
 8011e9a:	2300      	movne	r3, #0
 8011e9c:	eba6 0807 	sub.w	r8, r6, r7
 8011ea0:	608b      	str	r3, [r1, #8]
 8011ea2:	f1b8 0f00 	cmp.w	r8, #0
 8011ea6:	dd9c      	ble.n	8011de2 <__sflush_r+0x1a>
 8011ea8:	6a21      	ldr	r1, [r4, #32]
 8011eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011eac:	4643      	mov	r3, r8
 8011eae:	463a      	mov	r2, r7
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	47b0      	blx	r6
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	dc06      	bgt.n	8011ec6 <__sflush_r+0xfe>
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ebe:	81a3      	strh	r3, [r4, #12]
 8011ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ec4:	e78e      	b.n	8011de4 <__sflush_r+0x1c>
 8011ec6:	4407      	add	r7, r0
 8011ec8:	eba8 0800 	sub.w	r8, r8, r0
 8011ecc:	e7e9      	b.n	8011ea2 <__sflush_r+0xda>
 8011ece:	bf00      	nop
 8011ed0:	20400001 	.word	0x20400001

08011ed4 <_fflush_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	690b      	ldr	r3, [r1, #16]
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	b913      	cbnz	r3, 8011ee4 <_fflush_r+0x10>
 8011ede:	2500      	movs	r5, #0
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	b118      	cbz	r0, 8011eee <_fflush_r+0x1a>
 8011ee6:	6983      	ldr	r3, [r0, #24]
 8011ee8:	b90b      	cbnz	r3, 8011eee <_fflush_r+0x1a>
 8011eea:	f7ff fa15 	bl	8011318 <__sinit>
 8011eee:	4b14      	ldr	r3, [pc, #80]	; (8011f40 <_fflush_r+0x6c>)
 8011ef0:	429c      	cmp	r4, r3
 8011ef2:	d11b      	bne.n	8011f2c <_fflush_r+0x58>
 8011ef4:	686c      	ldr	r4, [r5, #4]
 8011ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d0ef      	beq.n	8011ede <_fflush_r+0xa>
 8011efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f00:	07d0      	lsls	r0, r2, #31
 8011f02:	d404      	bmi.n	8011f0e <_fflush_r+0x3a>
 8011f04:	0599      	lsls	r1, r3, #22
 8011f06:	d402      	bmi.n	8011f0e <_fflush_r+0x3a>
 8011f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f0a:	f7ff faa3 	bl	8011454 <__retarget_lock_acquire_recursive>
 8011f0e:	4628      	mov	r0, r5
 8011f10:	4621      	mov	r1, r4
 8011f12:	f7ff ff59 	bl	8011dc8 <__sflush_r>
 8011f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f18:	07da      	lsls	r2, r3, #31
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	d4e0      	bmi.n	8011ee0 <_fflush_r+0xc>
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	059b      	lsls	r3, r3, #22
 8011f22:	d4dd      	bmi.n	8011ee0 <_fflush_r+0xc>
 8011f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f26:	f7ff fa96 	bl	8011456 <__retarget_lock_release_recursive>
 8011f2a:	e7d9      	b.n	8011ee0 <_fflush_r+0xc>
 8011f2c:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <_fflush_r+0x70>)
 8011f2e:	429c      	cmp	r4, r3
 8011f30:	d101      	bne.n	8011f36 <_fflush_r+0x62>
 8011f32:	68ac      	ldr	r4, [r5, #8]
 8011f34:	e7df      	b.n	8011ef6 <_fflush_r+0x22>
 8011f36:	4b04      	ldr	r3, [pc, #16]	; (8011f48 <_fflush_r+0x74>)
 8011f38:	429c      	cmp	r4, r3
 8011f3a:	bf08      	it	eq
 8011f3c:	68ec      	ldreq	r4, [r5, #12]
 8011f3e:	e7da      	b.n	8011ef6 <_fflush_r+0x22>
 8011f40:	0801241c 	.word	0x0801241c
 8011f44:	0801243c 	.word	0x0801243c
 8011f48:	080123fc 	.word	0x080123fc

08011f4c <_lseek_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d07      	ldr	r5, [pc, #28]	; (8011f6c <_lseek_r+0x20>)
 8011f50:	4604      	mov	r4, r0
 8011f52:	4608      	mov	r0, r1
 8011f54:	4611      	mov	r1, r2
 8011f56:	2200      	movs	r2, #0
 8011f58:	602a      	str	r2, [r5, #0]
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	f000 f912 	bl	8012184 <_lseek>
 8011f60:	1c43      	adds	r3, r0, #1
 8011f62:	d102      	bne.n	8011f6a <_lseek_r+0x1e>
 8011f64:	682b      	ldr	r3, [r5, #0]
 8011f66:	b103      	cbz	r3, 8011f6a <_lseek_r+0x1e>
 8011f68:	6023      	str	r3, [r4, #0]
 8011f6a:	bd38      	pop	{r3, r4, r5, pc}
 8011f6c:	200026a0 	.word	0x200026a0

08011f70 <__swhatbuf_r>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	460e      	mov	r6, r1
 8011f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	b096      	sub	sp, #88	; 0x58
 8011f7c:	4614      	mov	r4, r2
 8011f7e:	461d      	mov	r5, r3
 8011f80:	da08      	bge.n	8011f94 <__swhatbuf_r+0x24>
 8011f82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f86:	2200      	movs	r2, #0
 8011f88:	602a      	str	r2, [r5, #0]
 8011f8a:	061a      	lsls	r2, r3, #24
 8011f8c:	d410      	bmi.n	8011fb0 <__swhatbuf_r+0x40>
 8011f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f92:	e00e      	b.n	8011fb2 <__swhatbuf_r+0x42>
 8011f94:	466a      	mov	r2, sp
 8011f96:	f000 f8bb 	bl	8012110 <_fstat_r>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	dbf1      	blt.n	8011f82 <__swhatbuf_r+0x12>
 8011f9e:	9a01      	ldr	r2, [sp, #4]
 8011fa0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fa4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fa8:	425a      	negs	r2, r3
 8011faa:	415a      	adcs	r2, r3
 8011fac:	602a      	str	r2, [r5, #0]
 8011fae:	e7ee      	b.n	8011f8e <__swhatbuf_r+0x1e>
 8011fb0:	2340      	movs	r3, #64	; 0x40
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	b016      	add	sp, #88	; 0x58
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011fbc <__smakebuf_r>:
 8011fbc:	898b      	ldrh	r3, [r1, #12]
 8011fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fc0:	079d      	lsls	r5, r3, #30
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	d507      	bpl.n	8011fd8 <__smakebuf_r+0x1c>
 8011fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	6123      	str	r3, [r4, #16]
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	6163      	str	r3, [r4, #20]
 8011fd4:	b002      	add	sp, #8
 8011fd6:	bd70      	pop	{r4, r5, r6, pc}
 8011fd8:	ab01      	add	r3, sp, #4
 8011fda:	466a      	mov	r2, sp
 8011fdc:	f7ff ffc8 	bl	8011f70 <__swhatbuf_r>
 8011fe0:	9900      	ldr	r1, [sp, #0]
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f7ff fa57 	bl	8011498 <_malloc_r>
 8011fea:	b948      	cbnz	r0, 8012000 <__smakebuf_r+0x44>
 8011fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff0:	059a      	lsls	r2, r3, #22
 8011ff2:	d4ef      	bmi.n	8011fd4 <__smakebuf_r+0x18>
 8011ff4:	f023 0303 	bic.w	r3, r3, #3
 8011ff8:	f043 0302 	orr.w	r3, r3, #2
 8011ffc:	81a3      	strh	r3, [r4, #12]
 8011ffe:	e7e3      	b.n	8011fc8 <__smakebuf_r+0xc>
 8012000:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <__smakebuf_r+0x7c>)
 8012002:	62b3      	str	r3, [r6, #40]	; 0x28
 8012004:	89a3      	ldrh	r3, [r4, #12]
 8012006:	6020      	str	r0, [r4, #0]
 8012008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	9b00      	ldr	r3, [sp, #0]
 8012010:	6163      	str	r3, [r4, #20]
 8012012:	9b01      	ldr	r3, [sp, #4]
 8012014:	6120      	str	r0, [r4, #16]
 8012016:	b15b      	cbz	r3, 8012030 <__smakebuf_r+0x74>
 8012018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801201c:	4630      	mov	r0, r6
 801201e:	f000 f889 	bl	8012134 <_isatty_r>
 8012022:	b128      	cbz	r0, 8012030 <__smakebuf_r+0x74>
 8012024:	89a3      	ldrh	r3, [r4, #12]
 8012026:	f023 0303 	bic.w	r3, r3, #3
 801202a:	f043 0301 	orr.w	r3, r3, #1
 801202e:	81a3      	strh	r3, [r4, #12]
 8012030:	89a0      	ldrh	r0, [r4, #12]
 8012032:	4305      	orrs	r5, r0
 8012034:	81a5      	strh	r5, [r4, #12]
 8012036:	e7cd      	b.n	8011fd4 <__smakebuf_r+0x18>
 8012038:	080112b1 	.word	0x080112b1

0801203c <__malloc_lock>:
 801203c:	4801      	ldr	r0, [pc, #4]	; (8012044 <__malloc_lock+0x8>)
 801203e:	f7ff ba09 	b.w	8011454 <__retarget_lock_acquire_recursive>
 8012042:	bf00      	nop
 8012044:	20002694 	.word	0x20002694

08012048 <__malloc_unlock>:
 8012048:	4801      	ldr	r0, [pc, #4]	; (8012050 <__malloc_unlock+0x8>)
 801204a:	f7ff ba04 	b.w	8011456 <__retarget_lock_release_recursive>
 801204e:	bf00      	nop
 8012050:	20002694 	.word	0x20002694

08012054 <_free_r>:
 8012054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012056:	2900      	cmp	r1, #0
 8012058:	d044      	beq.n	80120e4 <_free_r+0x90>
 801205a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801205e:	9001      	str	r0, [sp, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	f1a1 0404 	sub.w	r4, r1, #4
 8012066:	bfb8      	it	lt
 8012068:	18e4      	addlt	r4, r4, r3
 801206a:	f7ff ffe7 	bl	801203c <__malloc_lock>
 801206e:	4a1e      	ldr	r2, [pc, #120]	; (80120e8 <_free_r+0x94>)
 8012070:	9801      	ldr	r0, [sp, #4]
 8012072:	6813      	ldr	r3, [r2, #0]
 8012074:	b933      	cbnz	r3, 8012084 <_free_r+0x30>
 8012076:	6063      	str	r3, [r4, #4]
 8012078:	6014      	str	r4, [r2, #0]
 801207a:	b003      	add	sp, #12
 801207c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012080:	f7ff bfe2 	b.w	8012048 <__malloc_unlock>
 8012084:	42a3      	cmp	r3, r4
 8012086:	d908      	bls.n	801209a <_free_r+0x46>
 8012088:	6825      	ldr	r5, [r4, #0]
 801208a:	1961      	adds	r1, r4, r5
 801208c:	428b      	cmp	r3, r1
 801208e:	bf01      	itttt	eq
 8012090:	6819      	ldreq	r1, [r3, #0]
 8012092:	685b      	ldreq	r3, [r3, #4]
 8012094:	1949      	addeq	r1, r1, r5
 8012096:	6021      	streq	r1, [r4, #0]
 8012098:	e7ed      	b.n	8012076 <_free_r+0x22>
 801209a:	461a      	mov	r2, r3
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	b10b      	cbz	r3, 80120a4 <_free_r+0x50>
 80120a0:	42a3      	cmp	r3, r4
 80120a2:	d9fa      	bls.n	801209a <_free_r+0x46>
 80120a4:	6811      	ldr	r1, [r2, #0]
 80120a6:	1855      	adds	r5, r2, r1
 80120a8:	42a5      	cmp	r5, r4
 80120aa:	d10b      	bne.n	80120c4 <_free_r+0x70>
 80120ac:	6824      	ldr	r4, [r4, #0]
 80120ae:	4421      	add	r1, r4
 80120b0:	1854      	adds	r4, r2, r1
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	6011      	str	r1, [r2, #0]
 80120b6:	d1e0      	bne.n	801207a <_free_r+0x26>
 80120b8:	681c      	ldr	r4, [r3, #0]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	6053      	str	r3, [r2, #4]
 80120be:	4421      	add	r1, r4
 80120c0:	6011      	str	r1, [r2, #0]
 80120c2:	e7da      	b.n	801207a <_free_r+0x26>
 80120c4:	d902      	bls.n	80120cc <_free_r+0x78>
 80120c6:	230c      	movs	r3, #12
 80120c8:	6003      	str	r3, [r0, #0]
 80120ca:	e7d6      	b.n	801207a <_free_r+0x26>
 80120cc:	6825      	ldr	r5, [r4, #0]
 80120ce:	1961      	adds	r1, r4, r5
 80120d0:	428b      	cmp	r3, r1
 80120d2:	bf04      	itt	eq
 80120d4:	6819      	ldreq	r1, [r3, #0]
 80120d6:	685b      	ldreq	r3, [r3, #4]
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	bf04      	itt	eq
 80120dc:	1949      	addeq	r1, r1, r5
 80120de:	6021      	streq	r1, [r4, #0]
 80120e0:	6054      	str	r4, [r2, #4]
 80120e2:	e7ca      	b.n	801207a <_free_r+0x26>
 80120e4:	b003      	add	sp, #12
 80120e6:	bd30      	pop	{r4, r5, pc}
 80120e8:	20002698 	.word	0x20002698

080120ec <_read_r>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	4d07      	ldr	r5, [pc, #28]	; (801210c <_read_r+0x20>)
 80120f0:	4604      	mov	r4, r0
 80120f2:	4608      	mov	r0, r1
 80120f4:	4611      	mov	r1, r2
 80120f6:	2200      	movs	r2, #0
 80120f8:	602a      	str	r2, [r5, #0]
 80120fa:	461a      	mov	r2, r3
 80120fc:	f000 f84a 	bl	8012194 <_read>
 8012100:	1c43      	adds	r3, r0, #1
 8012102:	d102      	bne.n	801210a <_read_r+0x1e>
 8012104:	682b      	ldr	r3, [r5, #0]
 8012106:	b103      	cbz	r3, 801210a <_read_r+0x1e>
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	bd38      	pop	{r3, r4, r5, pc}
 801210c:	200026a0 	.word	0x200026a0

08012110 <_fstat_r>:
 8012110:	b538      	push	{r3, r4, r5, lr}
 8012112:	4d07      	ldr	r5, [pc, #28]	; (8012130 <_fstat_r+0x20>)
 8012114:	2300      	movs	r3, #0
 8012116:	4604      	mov	r4, r0
 8012118:	4608      	mov	r0, r1
 801211a:	4611      	mov	r1, r2
 801211c:	602b      	str	r3, [r5, #0]
 801211e:	f000 f821 	bl	8012164 <_fstat>
 8012122:	1c43      	adds	r3, r0, #1
 8012124:	d102      	bne.n	801212c <_fstat_r+0x1c>
 8012126:	682b      	ldr	r3, [r5, #0]
 8012128:	b103      	cbz	r3, 801212c <_fstat_r+0x1c>
 801212a:	6023      	str	r3, [r4, #0]
 801212c:	bd38      	pop	{r3, r4, r5, pc}
 801212e:	bf00      	nop
 8012130:	200026a0 	.word	0x200026a0

08012134 <_isatty_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	4d06      	ldr	r5, [pc, #24]	; (8012150 <_isatty_r+0x1c>)
 8012138:	2300      	movs	r3, #0
 801213a:	4604      	mov	r4, r0
 801213c:	4608      	mov	r0, r1
 801213e:	602b      	str	r3, [r5, #0]
 8012140:	f000 f818 	bl	8012174 <_isatty>
 8012144:	1c43      	adds	r3, r0, #1
 8012146:	d102      	bne.n	801214e <_isatty_r+0x1a>
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	b103      	cbz	r3, 801214e <_isatty_r+0x1a>
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	bd38      	pop	{r3, r4, r5, pc}
 8012150:	200026a0 	.word	0x200026a0

08012154 <_close>:
 8012154:	4b02      	ldr	r3, [pc, #8]	; (8012160 <_close+0xc>)
 8012156:	2258      	movs	r2, #88	; 0x58
 8012158:	601a      	str	r2, [r3, #0]
 801215a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801215e:	4770      	bx	lr
 8012160:	200026a0 	.word	0x200026a0

08012164 <_fstat>:
 8012164:	4b02      	ldr	r3, [pc, #8]	; (8012170 <_fstat+0xc>)
 8012166:	2258      	movs	r2, #88	; 0x58
 8012168:	601a      	str	r2, [r3, #0]
 801216a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801216e:	4770      	bx	lr
 8012170:	200026a0 	.word	0x200026a0

08012174 <_isatty>:
 8012174:	4b02      	ldr	r3, [pc, #8]	; (8012180 <_isatty+0xc>)
 8012176:	2258      	movs	r2, #88	; 0x58
 8012178:	601a      	str	r2, [r3, #0]
 801217a:	2000      	movs	r0, #0
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop
 8012180:	200026a0 	.word	0x200026a0

08012184 <_lseek>:
 8012184:	4b02      	ldr	r3, [pc, #8]	; (8012190 <_lseek+0xc>)
 8012186:	2258      	movs	r2, #88	; 0x58
 8012188:	601a      	str	r2, [r3, #0]
 801218a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801218e:	4770      	bx	lr
 8012190:	200026a0 	.word	0x200026a0

08012194 <_read>:
 8012194:	4b02      	ldr	r3, [pc, #8]	; (80121a0 <_read+0xc>)
 8012196:	2258      	movs	r2, #88	; 0x58
 8012198:	601a      	str	r2, [r3, #0]
 801219a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801219e:	4770      	bx	lr
 80121a0:	200026a0 	.word	0x200026a0

080121a4 <_sbrk>:
 80121a4:	4a04      	ldr	r2, [pc, #16]	; (80121b8 <_sbrk+0x14>)
 80121a6:	6811      	ldr	r1, [r2, #0]
 80121a8:	4603      	mov	r3, r0
 80121aa:	b909      	cbnz	r1, 80121b0 <_sbrk+0xc>
 80121ac:	4903      	ldr	r1, [pc, #12]	; (80121bc <_sbrk+0x18>)
 80121ae:	6011      	str	r1, [r2, #0]
 80121b0:	6810      	ldr	r0, [r2, #0]
 80121b2:	4403      	add	r3, r0
 80121b4:	6013      	str	r3, [r2, #0]
 80121b6:	4770      	bx	lr
 80121b8:	200026a4 	.word	0x200026a4
 80121bc:	200026a8 	.word	0x200026a8

080121c0 <_write>:
 80121c0:	4b02      	ldr	r3, [pc, #8]	; (80121cc <_write+0xc>)
 80121c2:	2258      	movs	r2, #88	; 0x58
 80121c4:	601a      	str	r2, [r3, #0]
 80121c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121ca:	4770      	bx	lr
 80121cc:	200026a0 	.word	0x200026a0

080121d0 <_init>:
 80121d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d2:	bf00      	nop
 80121d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121d6:	bc08      	pop	{r3}
 80121d8:	469e      	mov	lr, r3
 80121da:	4770      	bx	lr

080121dc <_fini>:
 80121dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121de:	bf00      	nop
 80121e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e2:	bc08      	pop	{r3}
 80121e4:	469e      	mov	lr, r3
 80121e6:	4770      	bx	lr
