
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a3c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08011c00  08011c00  00021c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122f8  080122f8  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080122f8  080122f8  000222f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012300  08012300  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012300  08012300  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012304  08012304  00022304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08012308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002594  20000354  0801265c  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200028e8  0801265c  000328e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc59  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ed  00000000  00000000  0005bfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  000617d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd0  00000000  00000000  000639e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000878a  00000000  00000000  000659b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c615  00000000  00000000  0006e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120492  00000000  00000000  0009a757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001babe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1f0  00000000  00000000  001bac3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c4e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c4ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011be4 	.word	0x08011be4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08011be4 	.word	0x08011be4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f001 fd11 	bl	8002922 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f001 fd08 	bl	800293e <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000370 	.word	0x20000370
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c4 	.word	0x200003c4

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fc32 	bl	8002804 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fcc6 	bl	800293e <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fd08 	bl	80029d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e f885 	bl	800f100 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fed6 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fa00 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 f9ea 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	f6ad 2d98 	subw	sp, sp, #2712	; 0xa98
 80010a6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <main+0x1c0>)
 80010aa:	f607 2444 	addw	r4, r7, #2628	; 0xa44
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	c403      	stmia	r4!, {r0, r1}
 80010ba:	7022      	strb	r2, [r4, #0]
 80010bc:	f607 235d 	addw	r3, r7, #2653	; 0xa5d
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 80010d0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80010d4:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80010d8:	461a      	mov	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	6093      	str	r3, [r2, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 80010e4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80010e8:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80010f6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80010fa:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8001106:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800110a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001122:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001126:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 800113e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001142:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 800115a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800115e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001162:	4a40      	ldr	r2, [pc, #256]	; (8001264 <main+0x1c4>)
 8001164:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 8001166:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800116a:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	3304      	adds	r3, #4
 8001174:	2224      	movs	r2, #36	; 0x24
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00d ffc1 	bl	800f100 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 800117e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001182:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	2224      	movs	r2, #36	; 0x24
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00d ffb5 	bl	800f100 <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80011a2:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011a6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80011aa:	f6a3 2378 	subw	r3, r3, #2680	; 0xa78
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 fede 	bl	8001f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f857 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fa6f 	bl	80016ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ce:	f000 f8b9 	bl	8001344 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 80011d2:	f000 f8f7 	bl	80013c4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011d6:	f000 f917 	bl	8001408 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011da:	f000 f9c9 	bl	8001570 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011de:	f000 fa15 	bl	800160c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80011e2:	f00b fb35 	bl	800c850 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80011e6:	f00d f98d 	bl	800e504 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 80011ea:	f000 f94b 	bl	8001484 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011ee:	f000 f895 	bl	800131c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 80011f2:	f000 fbcf 	bl	8001994 <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 80011f6:	f7ff fe71 	bl	8000edc <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 80011fa:	481b      	ldr	r0, [pc, #108]	; (8001268 <main+0x1c8>)
 80011fc:	f000 fd32 	bl	8001c64 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8001200:	481a      	ldr	r0, [pc, #104]	; (800126c <main+0x1cc>)
 8001202:	f000 fd2f 	bl	8001c64 <HAL_UART_MspInit>

  HAL_StatusTypeDef status;


  // enable channel 1 for MIRA communication
  HAL_GPIO_TogglePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin);
 8001206:	2110      	movs	r1, #16
 8001208:	4819      	ldr	r0, [pc, #100]	; (8001270 <main+0x1d0>)
 800120a:	f001 fae1 	bl	80027d0 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin);
 800120e:	2120      	movs	r1, #32
 8001210:	4817      	ldr	r0, [pc, #92]	; (8001270 <main+0x1d0>)
 8001212:	f001 fadd 	bl	80027d0 <HAL_GPIO_TogglePin>

  //msg_size = build_message(&message, &command, &payload);
  //status = mira_write(&huart1, message, 5000);
  uint8_t reg[1] = {0x02};
 8001216:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800121a:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
  uint8_t data[4] = {0x00,0x00,0x00,0x01};
 8001222:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001226:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800122a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800122e:	601a      	str	r2, [r3, #0]
  uint8_t mira_rx[10];
  status = mira_write_register(&huart1, reg, data, mira_rx, 5000);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	f107 0210 	add.w	r2, r7, #16
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	f241 3088 	movw	r0, #5000	; 0x1388
 800123e:	9000      	str	r0, [sp, #0]
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <main+0x1c8>)
 8001242:	f000 fb37 	bl	80018b4 <mira_write_register>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 3a8f 	strb.w	r3, [r7, #2703]	; 0xa8f

  if (status == HAL_OK) {
 800124c:	f897 3a8f 	ldrb.w	r3, [r7, #2703]	; 0xa8f
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <main+0x1bc>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <main+0x1d4>)
 8001258:	f001 faba 	bl	80027d0 <HAL_GPIO_TogglePin>

  //reg[0] = 0x00;
  //data[3] = 0x05;
  //status = mira_write_register(&huart1, reg, data, 5000);

  while(1);
 800125c:	e7fe      	b.n	800125c <main+0x1bc>
 800125e:	bf00      	nop
 8001260:	08011c00 	.word	0x08011c00
 8001264:	00202d20 	.word	0x00202d20
 8001268:	2000054c 	.word	0x2000054c
 800126c:	200005dc 	.word	0x200005dc
 8001270:	48001000 	.word	0x48001000
 8001274:	48000c00 	.word	0x48000c00

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	; 0x58
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2244      	movs	r2, #68	; 0x44
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f00d ff3a 	bl	800f100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800129a:	2000      	movs	r0, #0
 800129c:	f002 fdd2 	bl	8003e44 <HAL_PWREx_ControlVoltageScaling>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80012a6:	f000 fad1 	bl	800184c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80012aa:	2321      	movs	r3, #33	; 0x21
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012bc:	2303      	movs	r3, #3
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80012c4:	231e      	movs	r3, #30
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fe67 	bl	8003fac <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80012e4:	f000 fab2 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2303      	movs	r3, #3
 80012ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	2105      	movs	r1, #5
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fa6d 	bl	80047e0 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800130c:	f000 fa9e 	bl	800184c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001310:	f003 fc64 	bl	8004bdc <HAL_RCC_EnableCSS>
}
 8001314:	bf00      	nop
 8001316:	3758      	adds	r7, #88	; 0x58
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	201a      	movs	r0, #26
 8001326:	f000 ffa0 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800132a:	201a      	movs	r0, #26
 800132c:	f000 ffb9 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2026      	movs	r0, #38	; 0x26
 8001336:	f000 ff98 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133a:	2026      	movs	r0, #38	; 0x26
 800133c:	f000 ffb1 	bl	80022a2 <HAL_NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C1_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C1_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C1_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001380:	f001 fa40 	bl	8002804 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fa5f 	bl	800184c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x74>)
 8001392:	f001 fad4 	bl	800293e <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fa56 	bl	800184c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C1_Init+0x74>)
 80013a4:	f001 fb16 	bl	80029d4 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fa4d 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200003c8 	.word	0x200003c8
 80013bc:	40005400 	.word	0x40005400
 80013c0:	307075b1 	.word	0x307075b1

080013c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <MX_SDMMC1_SD_Init+0x40>)
 80013cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <MX_SDMMC1_SD_Init+0x3c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000041c 	.word	0x2000041c
 8001404:	50062400 	.word	0x50062400

08001408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_SPI1_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <MX_SPI1_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_SPI1_Init+0x74>)
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_SPI1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_SPI1_Init+0x74>)
 8001422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_SPI1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_SPI1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_SPI1_Init+0x74>)
 8001436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_SPI1_Init+0x74>)
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_SPI1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_SPI1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_SPI1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_SPI1_Init+0x74>)
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_SPI1_Init+0x74>)
 8001462:	2208      	movs	r2, #8
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_SPI1_Init+0x74>)
 8001468:	f006 fe2f 	bl	80080ca <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001472:	f000 f9eb 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000049c 	.word	0x2000049c
 8001480:	40013000 	.word	0x40013000

08001484 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b092      	sub	sp, #72	; 0x48
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	222c      	movs	r2, #44	; 0x2c
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00d fe2b 	bl	800f100 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014ac:	4a2f      	ldr	r2, [pc, #188]	; (800156c <MX_TIM17_Init+0xe8>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014c0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80014c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014d8:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014da:	f006 fe99 	bl	8008210 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80014e4:	f000 f9b2 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80014e8:	481f      	ldr	r0, [pc, #124]	; (8001568 <MX_TIM17_Init+0xe4>)
 80014ea:	f006 fee8 	bl	80082be <HAL_TIM_OC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80014f4:	f000 f9aa 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <MX_TIM17_Init+0xe4>)
 800151e:	f007 f84f 	bl	80085c0 <HAL_TIM_OC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001528:	f000 f990 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM17_Init+0xe4>)
 8001550:	f007 fc52 	bl	8008df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800155a:	f000 f977 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3748      	adds	r7, #72	; 0x48
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000500 	.word	0x20000500
 800156c:	40014800 	.word	0x40014800

08001570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_USART1_UART_Init+0x90>)
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MX_USART1_UART_Init+0x94>)
 8001578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_USART1_UART_Init+0x90>)
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <MX_USART1_UART_Init+0x98>)
 800157e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_USART1_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_USART1_UART_Init+0x90>)
 8001594:	220c      	movs	r2, #12
 8001596:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_USART1_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015b8:	f007 fcba 	bl	8008f30 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80015c2:	f000 f943 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015ca:	f008 ff54 	bl	800a476 <HAL_UARTEx_SetTxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80015d4:	f000 f93a 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015dc:	f008 ff89 	bl	800a4f2 <HAL_UARTEx_SetRxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80015e6:	f000 f931 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART1_UART_Init+0x90>)
 80015ec:	f008 ff0a 	bl	800a404 <HAL_UARTEx_DisableFifoMode>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80015f6:	f000 f929 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000054c 	.word	0x2000054c
 8001604:	40013800 	.word	0x40013800
 8001608:	0001c138 	.word	0x0001c138

0800160c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <MX_USART2_UART_Init+0x9c>)
 8001614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800161c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001650:	2210      	movs	r2, #16
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001656:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 800165e:	f007 fc67 	bl	8008f30 <HAL_UART_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001668:	f000 f8f0 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001670:	f008 ff01 	bl	800a476 <HAL_UARTEx_SetTxFifoThreshold>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800167a:	f000 f8e7 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001682:	f008 ff36 	bl	800a4f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800168c:	f000 f8de 	bl	800184c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_USART2_UART_Init+0x98>)
 8001692:	f008 feb7 	bl	800a404 <HAL_UARTEx_DisableFifoMode>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800169c:	f000 f8d6 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200005dc 	.word	0x200005dc
 80016a8:	40004400 	.word	0x40004400

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a5c      	ldr	r2, [pc, #368]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a56      	ldr	r2, [pc, #344]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a50      	ldr	r2, [pc, #320]	; (8001838 <MX_GPIO_Init+0x18c>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <MX_GPIO_Init+0x18c>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b45      	ldr	r3, [pc, #276]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <MX_GPIO_Init+0x18c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <MX_GPIO_Init+0x18c>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001752:	2200      	movs	r2, #0
 8001754:	f641 013c 	movw	r1, #6204	; 0x183c
 8001758:	4838      	ldr	r0, [pc, #224]	; (800183c <MX_GPIO_Init+0x190>)
 800175a:	f001 f821 	bl	80027a0 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2130      	movs	r1, #48	; 0x30
 8001762:	4837      	ldr	r0, [pc, #220]	; (8001840 <MX_GPIO_Init+0x194>)
 8001764:	f001 f81c 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2178      	movs	r1, #120	; 0x78
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <MX_GPIO_Init+0x198>)
 800176e:	f001 f817 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001772:	f641 033c 	movw	r3, #6204	; 0x183c
 8001776:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	482c      	ldr	r0, [pc, #176]	; (800183c <MX_GPIO_Init+0x190>)
 800178c:	f000 fe5e 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4826      	ldr	r0, [pc, #152]	; (8001840 <MX_GPIO_Init+0x194>)
 80017a6:	f000 fe51 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80017aa:	f248 0302 	movw	r3, #32770	; 0x8002
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f000 fe43 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 80017c6:	2330      	movs	r3, #48	; 0x30
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <MX_GPIO_Init+0x194>)
 80017de:	f000 fe35 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4811      	ldr	r0, [pc, #68]	; (800183c <MX_GPIO_Init+0x190>)
 80017f8:	f000 fe28 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80017fc:	2378      	movs	r3, #120	; 0x78
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_GPIO_Init+0x198>)
 8001814:	f000 fe1a 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001818:	2320      	movs	r3, #32
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_GPIO_Init+0x19c>)
 800182c:	f000 fe0e 	bl	800244c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	48001000 	.word	0x48001000
 8001840:	48000800 	.word	0x48000800
 8001844:	48000c00 	.word	0x48000c00
 8001848:	48000400 	.word	0x48000400

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8001854:	4801      	ldr	r0, [pc, #4]	; (800185c <Error_Handler+0x10>)
 8001856:	f00e f9a5 	bl	800fba4 <iprintf>
  while (1)
 800185a:	e7fe      	b.n	800185a <Error_Handler+0xe>
 800185c:	08011c34 	.word	0x08011c34

08001860 <CRC16>:
//empty payload
const uint8_t EMPTY_PAYLOAD[1] = {0x99}; //Check that this is not used


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
	0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
	0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
	0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 800186c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001870:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 8001872:	e011      	b.n	8001898 <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4053      	eors	r3, r2
 8001882:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <CRC16+0x50>)
 800188e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	4053      	eors	r3, r2
 8001896:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	807a      	strh	r2, [r7, #2]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e8      	bne.n	8001874 <CRC16+0x14>
	}
	return wCRCWord;
 80018a2:	89fb      	ldrh	r3, [r7, #14]

}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	08011c94 	.word	0x08011c94

080018b4 <mira_write_register>:


HAL_StatusTypeDef mira_write_register(UART_HandleTypeDef *huart, uint8_t *reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t message[14];

	uint8_t sync[2] = {0x5a, 0xce};
 80018c2:	f64c 635a 	movw	r3, #52826	; 0xce5a
 80018c6:	843b      	strh	r3, [r7, #32]
	uint8_t length[2] = {0x00, 0x05};
 80018c8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018cc:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 80018ce:	23c1      	movs	r3, #193	; 0xc1
 80018d0:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 80018d2:	23e1      	movs	r3, #225	; 0xe1
 80018d4:	753b      	strb	r3, [r7, #20]
	uint8_t command[1] = {0x03};
 80018d6:	2303      	movs	r3, #3
 80018d8:	743b      	strb	r3, [r7, #16]
	//uint8_t payload[5] = {0x02,0x00,0x00,0x00,0x01};
	uint16_t sum = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	86bb      	strh	r3, [r7, #52]	; 0x34

	message[0] = sync[0];
 80018de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[1] = sync[1];
 80018e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[2] = length[0];
 80018ee:	7f3b      	ldrb	r3, [r7, #28]
 80018f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[3] = length[1];
 80018f4:	7f7b      	ldrb	r3, [r7, #29]
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[4] = src[0];
 80018fa:	7e3b      	ldrb	r3, [r7, #24]
 80018fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message[5] = dest[0];
 8001900:	7d3b      	ldrb	r3, [r7, #20]
 8001902:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message[6] = command[0];
 8001906:	7c3b      	ldrb	r3, [r7, #16]
 8001908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	message[7] = reg[0];
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	message[8] = data[0];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message[9] = data[1];
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	message[10] = data[2];
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	789b      	ldrb	r3, [r3, #2]
 8001928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	message[11] = data[3];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	78db      	ldrb	r3, [r3, #3]
 8001930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	sum = CRC16(message+2, 10);
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	3302      	adds	r3, #2
 800193a:	210a      	movs	r1, #10
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff8f 	bl	8001860 <CRC16>
 8001942:	4603      	mov	r3, r0
 8001944:	86bb      	strh	r3, [r7, #52]	; 0x34

	message[12] = (sum&0xFF00)>>8;
 8001946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	message[13] = (sum&0x00FF);
 8001952:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 14, Timeout);
 800195a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800195e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001960:	220e      	movs	r2, #14
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f007 fb34 	bl	8008fd0 <HAL_UART_Transmit>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (status == HAL_OK) {
 800196e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <mira_write_register+0xd4>
		//status = mira_read_reply(huart, rxBuffer, Timeout);
		status = HAL_UART_Receive(huart, rxBuffer, 10, Timeout);
 8001976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001978:	220a      	movs	r2, #10
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f007 fbbe 	bl	80090fe <HAL_UART_Receive>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	// return status
	return status;
 8001988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 800198c:	4618      	mov	r0, r3
 800198e:	3738      	adds	r7, #56	; 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x44>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_MspInit+0x44>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6613      	str	r3, [r2, #96]	; 0x60
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_MspInit+0x44>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_MspInit+0x44>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_MspInit+0x44>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_MspInit+0x44>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0ae      	sub	sp, #184	; 0xb8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2294      	movs	r2, #148	; 0x94
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00d fb7f 	bl	800f100 <memset>
  if(hi2c->Instance==I2C1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_I2C_MspInit+0xb0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13a      	bne.n	8001a82 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f9cb 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff ff12 	bl	800184c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a46:	2312      	movs	r3, #18
 8001a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a62:	4619      	mov	r1, r3
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <HAL_I2C_MspInit+0xb8>)
 8001a66:	f000 fcf1 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	37b8      	adds	r7, #184	; 0xb8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000400 	.word	0x48000400

08001a98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0b0      	sub	sp, #192	; 0xc0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	2294      	movs	r2, #148	; 0x94
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00d fb21 	bl	800f100 <memset>
  if(hsd->Instance==SDMMC1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_SD_MspInit+0xf8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d15e      	bne.n	8001b86 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001ac8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001acc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f96b 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001ae4:	f7ff feb2 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_SD_MspInit+0xfc>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b30:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b54:	4619      	mov	r1, r3
 8001b56:	4810      	ldr	r0, [pc, #64]	; (8001b98 <HAL_SD_MspInit+0x100>)
 8001b58:	f000 fc78 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b74:	230c      	movs	r3, #12
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <HAL_SD_MspInit+0x104>)
 8001b82:	f000 fc63 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	37c0      	adds	r7, #192	; 0xc0
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	50062400 	.word	0x50062400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00

08001ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_SPI_MspInit+0x7c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d128      	bne.n	8001c14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001bf2:	23f0      	movs	r3, #240	; 0xf0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c02:	2305      	movs	r3, #5
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f000 fc1c 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_TIM_Base_MspInit+0x38>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10b      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x3c>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x3c>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_Base_MspInit+0x3c>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40014800 	.word	0x40014800
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0b0      	sub	sp, #192	; 0xc0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	2294      	movs	r2, #148	; 0x94
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00d fa3b 	bl	800f100 <memset>
  if(huart->Instance==USART1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a43      	ldr	r2, [pc, #268]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d13d      	bne.n	8001d10 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f887 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cac:	f7ff fdce 	bl	800184c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	4a3a      	ldr	r2, [pc, #232]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001ce0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0a:	f000 fb9f 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d0e:	e040      	b.n	8001d92 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_UART_MspInit+0x140>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d13b      	bne.n	8001d92 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f844 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001d32:	f7ff fd8b 	bl	800184c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001d66:	230c      	movs	r3, #12
 8001d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f000 fb5d 	bl	800244c <HAL_GPIO_Init>
}
 8001d92:	bf00      	nop
 8001d94:	37c0      	adds	r7, #192	; 0xc0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40004400 	.word	0x40004400

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001dac:	f002 ff26 	bl	8004bfc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x8>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 f918 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e1a:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e32:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8001e36:	f006 faa3 	bl	8008380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000cb8 	.word	0x20000cb8
 8001e44:	20000cb9 	.word	0x20000cb9
 8001e48:	20000500 	.word	0x20000500

08001e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <USART2_IRQHandler+0x90>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <USART2_IRQHandler+0x94>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <USART2_IRQHandler+0x98>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <USART2_IRQHandler+0x94>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	1c59      	adds	r1, r3, #1
 8001e6c:	b2c8      	uxtb	r0, r1
 8001e6e:	491c      	ldr	r1, [pc, #112]	; (8001ee0 <USART2_IRQHandler+0x94>)
 8001e70:	7008      	strb	r0, [r1, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b0a      	cmp	r3, #10
 8001e7c:	d126      	bne.n	8001ecc <USART2_IRQHandler+0x80>
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <USART2_IRQHandler+0x9c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d022      	beq.n	8001ecc <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <USART2_IRQHandler+0x98>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <USART2_IRQHandler+0x94>)
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4413      	add	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <USART2_IRQHandler+0xa0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <USART2_IRQHandler+0xa0>)
 8001ea0:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <USART2_IRQHandler+0x9c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <USART2_IRQHandler+0x9c>)
 8001eac:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <USART2_IRQHandler+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <USART2_IRQHandler+0x98>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <USART2_IRQHandler+0xa4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d103      	bne.n	8001ec6 <USART2_IRQHandler+0x7a>
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <USART2_IRQHandler+0x98>)
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <USART2_IRQHandler+0xa8>)
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e002      	b.n	8001ecc <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <USART2_IRQHandler+0x98>)
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <USART2_IRQHandler+0xa4>)
 8001eca:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <USART2_IRQHandler+0x90>)
 8001ece:	f007 f9eb 	bl	80092a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200005dc 	.word	0x200005dc
 8001ee0:	20000cb0 	.word	0x20000cb0
 8001ee4:	20000cac 	.word	0x20000cac
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000cb4 	.word	0x20000cb4
 8001ef0:	2000066c 	.word	0x2000066c
 8001ef4:	2000098c 	.word	0x2000098c

08001ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <OTG_FS_IRQHandler+0x10>)
 8001efe:	f000 ff08 	bl	8002d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200021a8 	.word	0x200021a8

08001f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LoopForever+0xe>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <LoopForever+0x16>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f00d f895 	bl	800f08c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f62:	f7ff f89d 	bl	80010a0 <main>

08001f66 <LoopForever>:

LoopForever:
    b LoopForever
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001f74:	08012308 	.word	0x08012308
  ldr r2, =_sbss
 8001f78:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001f7c:	200028e8 	.word	0x200028e8

08001f80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_IRQHandler>

08001f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f961 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f80e 	bl	8001fb4 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	e001      	b.n	8001fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa4:	f7ff fcf6 	bl	8001994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_InitTick+0x6c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_InitTick+0x70>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_InitTick+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f96d 	bl	80022be <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d809      	bhi.n	8002004 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	f000 f937 	bl	800226a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0x74>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e007      	b.n	8002014 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e004      	b.n	8002014 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e001      	b.n	8002014 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000000c 	.word	0x2000000c
 8002024:	20000004 	.word	0x20000004
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000000c 	.word	0x2000000c
 8002050:	20000cbc 	.word	0x20000cbc

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000cbc 	.word	0x20000cbc

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffde 	bl	8002054 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_EnableIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff29 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff3e 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff8e 	bl	80021a8 <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff31 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e040      	b.n	8002382 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020e 	bic.w	r2, r2, #14
 800230e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800231e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f003 021c 	and.w	r2, r3, #28
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800234c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800236e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d005      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e047      	b.n	8002442 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 020e 	bic.w	r2, r2, #14
 80023c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f003 021c 	and.w	r2, r3, #28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023fe:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00c      	beq.n	8002422 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002420:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
    }
  }
  return status;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	e166      	b.n	800272a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8158 	beq.w	8002724 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d005      	beq.n	800248c <HAL_GPIO_Init+0x40>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d130      	bne.n	80024ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c2:	2201      	movs	r2, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0201 	and.w	r2, r3, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d017      	beq.n	800252a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d123      	bne.n	800257e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	08da      	lsrs	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3208      	adds	r2, #8
 800253e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	6939      	ldr	r1, [r7, #16]
 800257a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0203 	and.w	r2, r3, #3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80b2 	beq.w	8002724 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c0:	4b61      	ldr	r3, [pc, #388]	; (8002748 <HAL_GPIO_Init+0x2fc>)
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	4a60      	ldr	r2, [pc, #384]	; (8002748 <HAL_GPIO_Init+0x2fc>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6613      	str	r3, [r2, #96]	; 0x60
 80025cc:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <HAL_GPIO_Init+0x2fc>)
 80025ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d8:	4a5c      	ldr	r2, [pc, #368]	; (800274c <HAL_GPIO_Init+0x300>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002602:	d02b      	beq.n	800265c <HAL_GPIO_Init+0x210>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x304>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d025      	beq.n	8002658 <HAL_GPIO_Init+0x20c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_GPIO_Init+0x308>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01f      	beq.n	8002654 <HAL_GPIO_Init+0x208>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_GPIO_Init+0x30c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d019      	beq.n	8002650 <HAL_GPIO_Init+0x204>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_GPIO_Init+0x310>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_GPIO_Init+0x200>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_GPIO_Init+0x314>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00d      	beq.n	8002648 <HAL_GPIO_Init+0x1fc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a4d      	ldr	r2, [pc, #308]	; (8002764 <HAL_GPIO_Init+0x318>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x1f8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a4c      	ldr	r2, [pc, #304]	; (8002768 <HAL_GPIO_Init+0x31c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_GPIO_Init+0x1f4>
 800263c:	2307      	movs	r3, #7
 800263e:	e00e      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002640:	2308      	movs	r3, #8
 8002642:	e00c      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002644:	2306      	movs	r3, #6
 8002646:	e00a      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002648:	2305      	movs	r3, #5
 800264a:	e008      	b.n	800265e <HAL_GPIO_Init+0x212>
 800264c:	2304      	movs	r3, #4
 800264e:	e006      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002650:	2303      	movs	r3, #3
 8002652:	e004      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002654:	2302      	movs	r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x212>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_GPIO_Init+0x212>
 800265c:	2300      	movs	r3, #0
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4093      	lsls	r3, r2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800266e:	4937      	ldr	r1, [pc, #220]	; (800274c <HAL_GPIO_Init+0x300>)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267c:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_GPIO_Init+0x320>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a0:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_GPIO_Init+0x320>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_GPIO_Init+0x320>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_GPIO_Init+0x320>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_GPIO_Init+0x320>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_GPIO_Init+0x320>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_GPIO_Init+0x320>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <HAL_GPIO_Init+0x320>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3301      	adds	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f ae91 	bne.w	800245c <HAL_GPIO_Init+0x10>
  }
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000
 8002750:	48000400 	.word	0x48000400
 8002754:	48000800 	.word	0x48000800
 8002758:	48000c00 	.word	0x48000c00
 800275c:	48001000 	.word	0x48001000
 8002760:	48001400 	.word	0x48001400
 8002764:	48001800 	.word	0x48001800
 8002768:	48001c00 	.word	0x48001c00
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43d9      	mvns	r1, r3
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	400b      	ands	r3, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e081      	b.n	800291a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff f8d6 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e006      	b.n	800288c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800288a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d104      	bne.n	800289e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800289c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69d9      	ldr	r1, [r3, #28]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	d138      	bne.n	80029c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800295e:	2302      	movs	r3, #2
 8002960:	e032      	b.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2224      	movs	r2, #36	; 0x24
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002990:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d139      	bne.n	8002a5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e033      	b.n	8002a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	; 0x24
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b08f      	sub	sp, #60	; 0x3c
 8002a70:	af0a      	add	r7, sp, #40	; 0x28
 8002a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e116      	b.n	8002cac <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f00b ff13 	bl	800e8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f008 fc64 	bl	800b38a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	687e      	ldr	r6, [r7, #4]
 8002aca:	466d      	mov	r5, sp
 8002acc:	f106 0410 	add.w	r4, r6, #16
 8002ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae0:	1d33      	adds	r3, r6, #4
 8002ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f008 fb77 	bl	800b1d8 <USB_CoreInit>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0d7      	b.n	8002cac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f008 fc52 	bl	800b3ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e04a      	b.n	8002ba4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	333d      	adds	r3, #61	; 0x3d
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	333c      	adds	r3, #60	; 0x3c
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	b298      	uxth	r0, r3
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3344      	adds	r3, #68	; 0x44
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3340      	adds	r3, #64	; 0x40
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3348      	adds	r3, #72	; 0x48
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	334c      	adds	r3, #76	; 0x4c
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3354      	adds	r3, #84	; 0x54
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3af      	bcc.n	8002b0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e044      	b.n	8002c3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3b5      	bcc.n	8002bb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	687e      	ldr	r6, [r7, #4]
 8002c50:	466d      	mov	r5, sp
 8002c52:	f106 0410 	add.w	r4, r6, #16
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c66:	1d33      	adds	r3, r6, #4
 8002c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f008 fbea 	bl	800b444 <USB_DevInit>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e014      	b.n	8002cac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f001 f882 	bl	8003da4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f009 fc72 	bl	800c58e <USB_DevDisconnect>

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_PCD_Start+0x1c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e01c      	b.n	8002d0a <HAL_PCD_Start+0x56>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f008 fb39 	bl	800b368 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f009 fc26 	bl	800c54c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d12:	b590      	push	{r4, r7, lr}
 8002d14:	b08d      	sub	sp, #52	; 0x34
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f009 fce4 	bl	800c6f6 <USB_GetMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 847e 	bne.w	8003632 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f009 fc48 	bl	800c5d0 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8474 	beq.w	8003630 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 fc35 	bl	800c5d0 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f002 0202 	and.w	r2, r2, #2
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f009 fc23 	bl	800c5d0 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d161      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	0c5b      	lsrs	r3, r3, #17
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d124      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d035      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6a38      	ldr	r0, [r7, #32]
 8002df0:	f009 fa5a 	bl	800c2a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e12:	441a      	add	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	621a      	str	r2, [r3, #32]
 8002e18:	e016      	b.n	8002e48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	0c5b      	lsrs	r3, r3, #17
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d110      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6a38      	ldr	r0, [r7, #32]
 8002e32:	f009 fa39 	bl	800c2a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e42:	441a      	add	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0210 	orr.w	r2, r2, #16
 8002e56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f009 fbb7 	bl	800c5d0 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e6c:	f040 80a7 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f009 fbbc 	bl	800c5f6 <USB_ReadDevAllOutEpInterrupt>
 8002e7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e80:	e099      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 808e 	beq.w	8002faa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f009 fbe0 	bl	800c65e <USB_ReadDevOutEPInterrupt>
 8002e9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2301      	movs	r3, #1
 8002eba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fe96 	bl	8003bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	2308      	movs	r3, #8
 8002ede:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fed2 	bl	8003c8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	2310      	movs	r3, #16
 8002f02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d030      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d109      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f00b fdf7 	bl	800eb4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	2320      	movs	r3, #32
 8002f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af62 	bne.w	8002e82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f009 fb04 	bl	800c5d0 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd2:	f040 80a4 	bne.w	800311e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f009 fb25 	bl	800c62a <USB_ReadDevAllInEpInterrupt>
 8002fe0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fe6:	e096      	b.n	8003116 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 808b 	beq.w	800310a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f009 fb4b 	bl	800c69a <USB_ReadDevInEPInterrupt>
 8003004:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2201      	movs	r2, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	69f9      	ldr	r1, [r7, #28]
 800302c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003030:	4013      	ands	r3, r2
 8003032:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	2301      	movs	r3, #1
 8003044:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f00b fce8 	bl	800ea22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003068:	461a      	mov	r2, r3
 800306a:	2308      	movs	r3, #8
 800306c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003084:	461a      	mov	r2, r3
 8003086:	2310      	movs	r3, #16
 8003088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	2340      	movs	r3, #64	; 0x40
 80030a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d023      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b2:	6a38      	ldr	r0, [r7, #32]
 80030b4:	f008 fb12 	bl	800b6dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3338      	adds	r3, #56	; 0x38
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f00b fd45 	bl	800eb70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2302      	movs	r3, #2
 80030f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fcea 	bl	8003ade <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	3301      	adds	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af65 	bne.w	8002fe8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f009 fa54 	bl	800c5d0 <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800312e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003132:	d122      	bne.n	800317a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800315a:	2100      	movs	r1, #0
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fe45 	bl	8003dec <HAL_PCDEx_LPM_Callback>
 8003162:	e002      	b.n	800316a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f00b fcc9 	bl	800eafc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f009 fa26 	bl	800c5d0 <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318e:	d112      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f00b fc85 	bl	800eab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f009 fa08 	bl	800c5d0 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d121      	bne.n	8003210 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80031da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d111      	bne.n	800320a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003200:	2101      	movs	r1, #1
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fdf2 	bl	8003dec <HAL_PCDEx_LPM_Callback>
 8003208:	e002      	b.n	8003210 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f00b fc50 	bl	800eab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f009 f9db 	bl	800c5d0 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	f040 80b5 	bne.w	8003392 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2110      	movs	r1, #16
 8003242:	4618      	mov	r0, r3
 8003244:	f008 fa4a 	bl	800b6dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	e046      	b.n	80032dc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003260:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	440a      	add	r2, r1
 8003278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800327c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003280:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c6:	0151      	lsls	r1, r2, #5
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	440a      	add	r2, r1
 80032cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	3301      	adds	r3, #1
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3b3      	bcc.n	800324e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f043 030b 	orr.w	r3, r3, #11
 8003316:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	e015      	b.n	800335c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003342:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003346:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003356:	f043 030b 	orr.w	r3, r3, #11
 800335a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800336e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f009 f9eb 	bl	800c758 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f009 f91a 	bl	800c5d0 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d124      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f009 f9b0 	bl	800c712 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f008 fa0d 	bl	800b7d6 <USB_GetDevSpeed>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	f001 fbd0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 80033cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4620      	mov	r0, r4
 80033d8:	f007 ff2a 	bl	800b230 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f00b fb48 	bl	800ea72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f009 f8ea 	bl	800c5d0 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d10a      	bne.n	800341c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f00b fb25 	bl	800ea56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f002 0208 	and.w	r2, r2, #8
 800341a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f009 f8d5 	bl	800c5d0 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d122      	bne.n	8003476 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343c:	2301      	movs	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e014      	b.n	800346c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb0b 	bl	8003a7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	3301      	adds	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	429a      	cmp	r2, r3
 8003474:	d3e5      	bcc.n	8003442 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f009 f8a8 	bl	800c5d0 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d13b      	bne.n	8003504 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348c:	2301      	movs	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e02b      	b.n	80034ea <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3340      	adds	r3, #64	; 0x40
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d115      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da12      	bge.n	80034e4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	333f      	adds	r3, #63	; 0x3f
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 facc 	bl	8003a7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	3301      	adds	r3, #1
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3ce      	bcc.n	8003492 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f009 f861 	bl	800c5d0 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003518:	d155      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351a:	2301      	movs	r3, #1
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e045      	b.n	80035ac <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d12e      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003548:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	da2b      	bge.n	80035a6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800355a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355e:	429a      	cmp	r2, r3
 8003560:	d121      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6053      	str	r3, [r2, #4]
            break;
 80035a4:	e007      	b.n	80035b6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3b4      	bcc.n	8003520 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f009 f800 	bl	800c5d0 <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d10a      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f00b fad9 	bl	800eb94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f008 ffea 	bl	800c5d0 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d115      	bne.n	8003632 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f00b fac9 	bl	800ebb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e000      	b.n	8003632 <HAL_PCD_IRQHandler+0x920>
      return;
 8003630:	bf00      	nop
    }
  }
}
 8003632:	3734      	adds	r7, #52	; 0x34
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_SetAddress+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e013      	b.n	800367a <HAL_PCD_SetAddress+0x42>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f008 ff48 	bl	800c500 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	461a      	mov	r2, r3
 8003690:	4603      	mov	r3, r0
 8003692:	70fb      	strb	r3, [r7, #3]
 8003694:	460b      	mov	r3, r1
 8003696:	803b      	strh	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da0f      	bge.n	80036c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	705a      	strb	r2, [r3, #1]
 80036c6:	e00f      	b.n	80036e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f4:	883a      	ldrh	r2, [r7, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	78ba      	ldrb	r2, [r7, #2]
 80036fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003712:	78bb      	ldrb	r3, [r7, #2]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d102      	bne.n	800371e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_PCD_EP_Open+0xaa>
 8003728:	2302      	movs	r3, #2
 800372a:	e00e      	b.n	800374a <HAL_PCD_EP_Open+0xc8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	f008 f86a 	bl	800b814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003748:	7afb      	ldrb	r3, [r7, #11]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da0f      	bge.n	8003786 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	3338      	adds	r3, #56	; 0x38
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	705a      	strb	r2, [r3, #1]
 8003784:	e00f      	b.n	80037a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_PCD_EP_Close+0x6e>
 80037bc:	2302      	movs	r3, #2
 80037be:	e00e      	b.n	80037de <HAL_PCD_EP_Close+0x8c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f008 f8a8 	bl	800b924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	460b      	mov	r3, r1
 80037f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	7afb      	ldrb	r3, [r7, #11]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	b2da      	uxtb	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	4618      	mov	r0, r3
 8003846:	f008 fb29 	bl	800be9c <USB_EP0StartXfer>
 800384a:	e005      	b.n	8003858 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	4618      	mov	r0, r3
 8003854:	f008 f942 	bl	800badc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003884:	681b      	ldr	r3, [r3, #0]
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	460b      	mov	r3, r1
 80038a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	7afb      	ldrb	r3, [r7, #11]
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3338      	adds	r3, #56	; 0x38
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	3304      	adds	r3, #4
 80038b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2201      	movs	r2, #1
 80038d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f008 fad4 	bl	800be9c <USB_EP0StartXfer>
 80038f4:	e005      	b.n	8003902 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f008 f8ed 	bl	800badc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d901      	bls.n	800392a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e04e      	b.n	80039c8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800392a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da0f      	bge.n	8003952 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	3338      	adds	r3, #56	; 0x38
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	705a      	strb	r2, [r3, #1]
 8003950:	e00d      	b.n	800396e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_PCD_EP_SetStall+0x82>
 800398a:	2302      	movs	r3, #2
 800398c:	e01c      	b.n	80039c8 <HAL_PCD_EP_SetStall+0xbc>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	f008 fcdb 	bl	800c358 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f008 fecd 	bl	800c758 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d901      	bls.n	80039ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e042      	b.n	8003a74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0f      	bge.n	8003a16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3338      	adds	r3, #56	; 0x38
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	e00f      	b.n	8003a36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_PCD_EP_ClrStall+0x86>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e00e      	b.n	8003a74 <HAL_PCD_EP_ClrStall+0xa4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f008 fce5 	bl	800c434 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0c      	bge.n	8003aaa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e00c      	b.n	8003ac4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f008 fb08 	bl	800c0e0 <USB_EPStopXfer>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	3338      	adds	r3, #56	; 0x38
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d901      	bls.n	8003b16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e067      	b.n	8003be6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3303      	adds	r3, #3
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b3a:	e026      	b.n	8003b8a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d902      	bls.n	8003b58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3303      	adds	r3, #3
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6919      	ldr	r1, [r3, #16]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f008 fb61 	bl	800c234 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d809      	bhi.n	8003bb4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d203      	bcs.n	8003bb4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1c3      	bne.n	8003b3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d811      	bhi.n	8003be4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	333c      	adds	r3, #60	; 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <PCD_EP_OutXfrComplete_int+0x98>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d124      	bne.n	8003c70 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	6093      	str	r3, [r2, #8]
 8003c44:	e01a      	b.n	8003c7c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2320      	movs	r3, #32
 8003c60:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f00a febf 	bl	800e9ec <HAL_PCD_DataOutStageCallback>
 8003c6e:	e005      	b.n	8003c7c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f00a feb8 	bl	800e9ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	4f54310a 	.word	0x4f54310a

08003c8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	333c      	adds	r3, #60	; 0x3c
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <PCD_EP_OutSetupPacket_int+0x64>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d90e      	bls.n	8003ce0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f00a fe71 	bl	800e9c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	4f54300a 	.word	0x4f54300a

08003cf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
 8003d00:	4613      	mov	r3, r2
 8003d02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d12:	883b      	ldrh	r3, [r7, #0]
 8003d14:	0419      	lsls	r1, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d20:	e028      	b.n	8003d74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e00d      	b.n	8003d52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	3340      	adds	r3, #64	; 0x40
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4413      	add	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d3ec      	bcc.n	8003d36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d5c:	883b      	ldrh	r3, [r7, #0]
 8003d5e:	0418      	lsls	r0, r3, #16
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4302      	orrs	r2, r0
 8003d6c:	3340      	adds	r3, #64	; 0x40
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	f043 0303 	orr.w	r3, r3, #3
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e14:	d102      	bne.n	8003e1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1a:	e00b      	b.n	8003e34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2a:	d102      	bne.n	8003e32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e30:	e000      	b.n	8003e34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40007000 	.word	0x40007000

08003e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d141      	bne.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d131      	bne.n	8003ec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e60:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e66:	4a46      	ldr	r2, [pc, #280]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e78:	4a41      	ldr	r2, [pc, #260]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2232      	movs	r2, #50	; 0x32
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	4a3f      	ldr	r2, [pc, #252]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	0c9b      	lsrs	r3, r3, #18
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e96:	e002      	b.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f2      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d158      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e057      	b.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eca:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ed4:	e04d      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d141      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eea:	d131      	bne.n	8003f50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eec:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef2:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f04:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2232      	movs	r2, #50	; 0x32
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f22:	e002      	b.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d102      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f2      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d112      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e011      	b.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f60:	e007      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40007000 	.word	0x40007000
 8003f84:	20000004 	.word	0x20000004
 8003f88:	431bde83 	.word	0x431bde83

08003f8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6053      	str	r3, [r2, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40007000 	.word	0x40007000

08003fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f000 bc08 	b.w	80047d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc0:	4b96      	ldr	r3, [pc, #600]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fca:	4b94      	ldr	r3, [pc, #592]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80e4 	beq.w	80041aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4c>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	f040 808b 	bne.w	8004106 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	f040 8087 	bne.w	8004106 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ff8:	4b88      	ldr	r3, [pc, #544]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_OscConfig+0x64>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e3df      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	4b81      	ldr	r3, [pc, #516]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_RCC_OscConfig+0x7e>
 8004020:	4b7e      	ldr	r3, [pc, #504]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004028:	e005      	b.n	8004036 <HAL_RCC_OscConfig+0x8a>
 800402a:	4b7c      	ldr	r3, [pc, #496]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004036:	4293      	cmp	r3, r2
 8004038:	d223      	bcs.n	8004082 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fdf8 	bl	8004c34 <RCC_SetFlashLatencyFromMSIRange>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e3c0      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800404e:	4b73      	ldr	r3, [pc, #460]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a72      	ldr	r2, [pc, #456]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004054:	f043 0308 	orr.w	r3, r3, #8
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b70      	ldr	r3, [pc, #448]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	496d      	ldr	r1, [pc, #436]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800406c:	4b6b      	ldr	r3, [pc, #428]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	4968      	ldr	r1, [pc, #416]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
 8004080:	e025      	b.n	80040ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004082:	4b66      	ldr	r3, [pc, #408]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a65      	ldr	r2, [pc, #404]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4960      	ldr	r1, [pc, #384]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a0:	4b5e      	ldr	r3, [pc, #376]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	495b      	ldr	r1, [pc, #364]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fdb8 	bl	8004c34 <RCC_SetFlashLatencyFromMSIRange>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e380      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ce:	f000 fcc1 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80040d2:	4602      	mov	r2, r0
 80040d4:	4b51      	ldr	r3, [pc, #324]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4950      	ldr	r1, [pc, #320]	; (8004220 <HAL_RCC_OscConfig+0x274>)
 80040e0:	5ccb      	ldrb	r3, [r1, r3]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a4e      	ldr	r2, [pc, #312]	; (8004224 <HAL_RCC_OscConfig+0x278>)
 80040ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040ee:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd ff5e 	bl	8001fb4 <HAL_InitTick>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d052      	beq.n	80041a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	e364      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d032      	beq.n	8004174 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800410e:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a42      	ldr	r2, [pc, #264]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800411a:	f7fd ff9b 	bl	8002054 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004122:	f7fd ff97 	bl	8002054 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e34d      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004134:	4b39      	ldr	r3, [pc, #228]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004140:	4b36      	ldr	r3, [pc, #216]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a35      	ldr	r2, [pc, #212]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004146:	f043 0308 	orr.w	r3, r3, #8
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4930      	ldr	r1, [pc, #192]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800415e:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	492b      	ldr	r1, [pc, #172]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
 8004172:	e01a      	b.n	80041aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004174:	4b29      	ldr	r3, [pc, #164]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a28      	ldr	r2, [pc, #160]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004180:	f7fd ff68 	bl	8002054 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004188:	f7fd ff64 	bl	8002054 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e31a      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_OscConfig+0x270>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1dc>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d073      	beq.n	800429e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_OscConfig+0x21c>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d063      	beq.n	800429c <HAL_RCC_OscConfig+0x2f0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d15f      	bne.n	800429c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e2f7      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x24c>
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_RCC_OscConfig+0x270>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e025      	b.n	8004244 <HAL_RCC_OscConfig+0x298>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d114      	bne.n	800422c <HAL_RCC_OscConfig+0x280>
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a05      	ldr	r2, [pc, #20]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a02      	ldr	r2, [pc, #8]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e013      	b.n	8004244 <HAL_RCC_OscConfig+0x298>
 800421c:	40021000 	.word	0x40021000
 8004220:	08011e94 	.word	0x08011e94
 8004224:	20000004 	.word	0x20000004
 8004228:	20000008 	.word	0x20000008
 800422c:	4ba0      	ldr	r3, [pc, #640]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a9f      	ldr	r2, [pc, #636]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b9d      	ldr	r3, [pc, #628]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a9c      	ldr	r2, [pc, #624]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd ff02 	bl	8002054 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fd fefe 	bl	8002054 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e2b4      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	4b92      	ldr	r3, [pc, #584]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x2a8>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd feee 	bl	8002054 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd feea 	bl	8002054 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e2a0      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x2d0>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d060      	beq.n	800436c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_OscConfig+0x310>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d119      	bne.n	80042ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d116      	bne.n	80042ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042bc:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_OscConfig+0x328>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e27d      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d4:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	4973      	ldr	r1, [pc, #460]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e8:	e040      	b.n	800436c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d023      	beq.n	800433a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f2:	4b6f      	ldr	r3, [pc, #444]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6e      	ldr	r2, [pc, #440]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fea9 	bl	8002054 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fea5 	bl	8002054 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e25b      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	495f      	ldr	r1, [pc, #380]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
 8004338:	e018      	b.n	800436c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433a:	4b5d      	ldr	r3, [pc, #372]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a5c      	ldr	r2, [pc, #368]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd fe85 	bl	8002054 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434e:	f7fd fe81 	bl	8002054 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e237      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004360:	4b53      	ldr	r3, [pc, #332]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d03c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01c      	beq.n	80043ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004380:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004386:	4a4a      	ldr	r2, [pc, #296]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fe60 	bl	8002054 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fd fe5c 	bl	8002054 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e212      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043aa:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80043ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ef      	beq.n	8004398 <HAL_RCC_OscConfig+0x3ec>
 80043b8:	e01b      	b.n	80043f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80043bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c0:	4a3b      	ldr	r2, [pc, #236]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fe43 	bl	8002054 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d2:	f7fd fe3f 	bl	8002054 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1f5      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e4:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ef      	bne.n	80043d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a6 	beq.w	800454c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10d      	bne.n	800442c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	; 0x58
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004428:	2301      	movs	r3, #1
 800442a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_RCC_OscConfig+0x508>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d118      	bne.n	800446a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCC_OscConfig+0x508>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_RCC_OscConfig+0x508>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004444:	f7fd fe06 	bl	8002054 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fd fe02 	bl	8002054 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1b8      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_RCC_OscConfig+0x508>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d108      	bne.n	8004484 <HAL_RCC_OscConfig+0x4d8>
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004482:	e029      	b.n	80044d8 <HAL_RCC_OscConfig+0x52c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b05      	cmp	r3, #5
 800448a:	d115      	bne.n	80044b8 <HAL_RCC_OscConfig+0x50c>
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a03      	ldr	r2, [pc, #12]	; (80044b0 <HAL_RCC_OscConfig+0x504>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ac:	e014      	b.n	80044d8 <HAL_RCC_OscConfig+0x52c>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	4b9d      	ldr	r3, [pc, #628]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	4a9c      	ldr	r2, [pc, #624]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c8:	4b99      	ldr	r3, [pc, #612]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	4a98      	ldr	r2, [pc, #608]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d016      	beq.n	800450e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fd fdb8 	bl	8002054 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd fdb4 	bl	8002054 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e168      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fe:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ed      	beq.n	80044e8 <HAL_RCC_OscConfig+0x53c>
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fd fda1 	bl	8002054 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fd fd9d 	bl	8002054 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e151      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800452c:	4b80      	ldr	r3, [pc, #512]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ed      	bne.n	8004516 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453a:	7ffb      	ldrb	r3, [r7, #31]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b7b      	ldr	r3, [pc, #492]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	4a7a      	ldr	r2, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d03c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01c      	beq.n	800459a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004560:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004566:	4a72      	ldr	r2, [pc, #456]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fd fd70 	bl	8002054 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004578:	f7fd fd6c 	bl	8002054 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e122      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458a:	4b69      	ldr	r3, [pc, #420]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800458c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCC_OscConfig+0x5cc>
 8004598:	e01b      	b.n	80045d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800459a:	4b65      	ldr	r3, [pc, #404]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800459c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a0:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fd fd53 	bl	8002054 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b2:	f7fd fd4f 	bl	8002054 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e105      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c4:	4b5a      	ldr	r3, [pc, #360]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80045c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ef      	bne.n	80045b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80f9 	beq.w	80047ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	f040 80cf 	bne.w	8004784 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045e6:	4b52      	ldr	r3, [pc, #328]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 0203 	and.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d12c      	bne.n	8004654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	3b01      	subs	r3, #1
 8004606:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d123      	bne.n	8004654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d11b      	bne.n	8004654 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d113      	bne.n	8004654 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d109      	bne.n	8004654 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d071      	beq.n	8004738 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d068      	beq.n	800472c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0ac      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004676:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004682:	f7fd fce7 	bl	8002054 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fd fce3 	bl	8002054 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e099      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x788>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c2:	0212      	lsls	r2, r2, #8
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0552      	lsls	r2, r2, #21
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046d6:	0852      	lsrs	r2, r2, #1
 80046d8:	3a01      	subs	r2, #1
 80046da:	0652      	lsls	r2, r2, #25
 80046dc:	4311      	orrs	r1, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e2:	06d2      	lsls	r2, r2, #27
 80046e4:	430a      	orrs	r2, r1
 80046e6:	4912      	ldr	r1, [pc, #72]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004704:	f7fd fca6 	bl	8002054 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd fca2 	bl	8002054 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e058      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_RCC_OscConfig+0x784>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800472a:	e050      	b.n	80047ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e04f      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
 8004730:	40021000 	.word	0x40021000
 8004734:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d144      	bne.n	80047ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800475c:	f7fd fc7a 	bl	8002054 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fc76 	bl	8002054 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e02c      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x7b8>
 8004782:	e024      	b.n	80047ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d01f      	beq.n	80047ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 8004790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fd fc5d 	bl	8002054 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479e:	f7fd fc59 	bl	8002054 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e00f      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	4905      	ldr	r1, [pc, #20]	; (80047d8 <HAL_RCC_OscConfig+0x82c>)
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x830>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
 80047c8:	e001      	b.n	80047ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	feeefffc 	.word	0xfeeefffc

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e11d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047f8:	4b90      	ldr	r3, [pc, #576]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d910      	bls.n	8004828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b8d      	ldr	r3, [pc, #564]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 020f 	bic.w	r2, r3, #15
 800480e:	498b      	ldr	r1, [pc, #556]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e105      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b81      	ldr	r3, [pc, #516]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004840:	429a      	cmp	r2, r3
 8004842:	d908      	bls.n	8004856 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	497b      	ldr	r1, [pc, #492]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d079      	beq.n	8004956 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d11e      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486a:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0dc      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800487a:	f000 fa35 	bl	8004ce8 <RCC_GetSysClockFreqFromPLLSource>
 800487e:	4603      	mov	r3, r0
 8004880:	4a70      	ldr	r2, [pc, #448]	; (8004a44 <HAL_RCC_ClockConfig+0x264>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d946      	bls.n	8004914 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004886:	4b6e      	ldr	r3, [pc, #440]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d140      	bne.n	8004914 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004892:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489a:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800489c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e035      	b.n	8004914 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b0:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b9      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c8:	4b5d      	ldr	r3, [pc, #372]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0ad      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0a5      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80048e8:	f000 f8b4 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4a55      	ldr	r2, [pc, #340]	; (8004a44 <HAL_RCC_ClockConfig+0x264>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d90f      	bls.n	8004914 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048f4:	4b52      	ldr	r3, [pc, #328]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004900:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004908:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004914:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4947      	ldr	r1, [pc, #284]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004926:	f7fd fb95 	bl	8002054 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492c:	e00a      	b.n	8004944 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492e:	f7fd fb91 	bl	8002054 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	; 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e077      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 020c 	and.w	r2, r3, #12
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	429a      	cmp	r2, r3
 8004954:	d1eb      	bne.n	800492e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d105      	bne.n	8004968 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a37      	ldr	r2, [pc, #220]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004980:	429a      	cmp	r2, r3
 8004982:	d208      	bcs.n	8004996 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	492b      	ldr	r1, [pc, #172]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004996:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d210      	bcs.n	80049c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a4:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 020f 	bic.w	r2, r3, #15
 80049ac:	4923      	ldr	r1, [pc, #140]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCC_ClockConfig+0x25c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e036      	b.n	8004a34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d2:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4918      	ldr	r1, [pc, #96]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4910      	ldr	r1, [pc, #64]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a04:	f000 f826 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <HAL_RCC_ClockConfig+0x268>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x26c>)
 8004a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fd fac3 	bl	8001fb4 <HAL_InitTick>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	04c4b400 	.word	0x04c4b400
 8004a48:	08011e94 	.word	0x08011e94
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	20000008 	.word	0x20000008

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d121      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d11e      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a88:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e005      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10d      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e004      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ada:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d134      	bne.n	8004b4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0xa6>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d003      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0xac>
 8004af8:	e005      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004afc:	617b      	str	r3, [r7, #20]
      break;
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b02:	617b      	str	r3, [r7, #20]
      break;
 8004b04:	e002      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	617b      	str	r3, [r7, #20]
      break;
 8004b0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	fb03 f202 	mul.w	r2, r3, r2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	0e5b      	lsrs	r3, r3, #25
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	08011eac 	.word	0x08011eac
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000004 	.word	0x20000004

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4904      	ldr	r1, [pc, #16]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	08011ea4 	.word	0x08011ea4

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bb4:	f7ff ffda 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0adb      	lsrs	r3, r3, #11
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08011ea4 	.word	0x08011ea4

08004bdc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_EnableCSS+0x1c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <HAL_RCC_EnableCSS+0x1c>)
 8004be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bea:	6013      	str	r3, [r2, #0]
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000

08004bfc <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0c:	d105      	bne.n	8004c1a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004c0e:	f000 f809 	bl	8004c24 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c18:	621a      	str	r2, [r3, #32]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000

08004c24 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c4c:	f7ff f8da 	bl	8003e04 <HAL_PWREx_GetVoltageRange>
 8004c50:	6178      	str	r0, [r7, #20]
 8004c52:	e014      	b.n	8004c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c60:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c6c:	f7ff f8ca 	bl	8003e04 <HAL_PWREx_GetVoltageRange>
 8004c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c72:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d10b      	bne.n	8004c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d913      	bls.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c90:	d902      	bls.n	8004c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c92:	2302      	movs	r3, #2
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e00d      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c98:	2301      	movs	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	e00a      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca2:	d902      	bls.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e004      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d101      	bne.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 020f 	bic.w	r2, r3, #15
 8004cbc:	4909      	ldr	r1, [pc, #36]	; (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40022000 	.word	0x40022000

08004ce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d00b      	beq.n	8004d16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d825      	bhi.n	8004d50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d008      	beq.n	8004d1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11f      	bne.n	8004d50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d12:	613b      	str	r3, [r7, #16]
    break;
 8004d14:	e01f      	b.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d16:	4b25      	ldr	r3, [pc, #148]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d18:	613b      	str	r3, [r7, #16]
    break;
 8004d1a:	e01c      	b.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e005      	b.n	8004d44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	613b      	str	r3, [r7, #16]
    break;
 8004d4e:	e002      	b.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
    break;
 8004d54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	3301      	adds	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	fb03 f202 	mul.w	r2, r3, r2
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0e5b      	lsrs	r3, r3, #25
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	3301      	adds	r3, #1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d96:	683b      	ldr	r3, [r7, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40021000 	.word	0x40021000
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	08011eac 	.word	0x08011eac

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d040      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d02a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d825      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d026      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004de0:	2b60      	cmp	r3, #96	; 0x60
 8004de2:	d821      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d006      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d81d      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d010      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004df4:	e018      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df6:	4b89      	ldr	r3, [pc, #548]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4a88      	ldr	r2, [pc, #544]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e02:	e015      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fa24 	bl	8006258 <RCCEx_PLLSAI1_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e14:	e00c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3320      	adds	r3, #32
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fb0f 	bl	8006440 <RCCEx_PLLSAI2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	74fb      	strb	r3, [r7, #19]
      break;
 8004e2c:	e000      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e36:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	4975      	ldr	r1, [pc, #468]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e4c:	e001      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d047      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d030      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d82a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d02a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e78:	d824      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e84:	d81e      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d010      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e90:	e018      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e92:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4a61      	ldr	r2, [pc, #388]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e9e:	e015      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 f9d6 	bl	8006258 <RCCEx_PLLSAI1_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3320      	adds	r3, #32
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 fac1 	bl	8006440 <RCCEx_PLLSAI2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ed2:	4b52      	ldr	r3, [pc, #328]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	494e      	ldr	r1, [pc, #312]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ee8:	e001      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 809f 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f00:	4b46      	ldr	r3, [pc, #280]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f3e:	f7fd f889 	bl	8002054 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f44:	e009      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fd f885 	bl	8002054 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d902      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	74fb      	strb	r3, [r7, #19]
        break;
 8004f58:	e005      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0ef      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d15b      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01f      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d019      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb6:	4a19      	ldr	r2, [pc, #100]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d016      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd f844 	bl	8002054 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fd f840 	bl	8002054 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d902      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe6:	e006      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ec      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7c7b      	ldrb	r3, [r7, #17]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4ba0      	ldr	r3, [pc, #640]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	4a9f      	ldr	r2, [pc, #636]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	4b9a      	ldr	r3, [pc, #616]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f023 0203 	bic.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	4996      	ldr	r1, [pc, #600]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005068:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f023 020c 	bic.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	498e      	ldr	r1, [pc, #568]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	4985      	ldr	r1, [pc, #532]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ac:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	497d      	ldr	r1, [pc, #500]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ce:	4b78      	ldr	r3, [pc, #480]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	4974      	ldr	r1, [pc, #464]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f0:	4b6f      	ldr	r3, [pc, #444]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	496c      	ldr	r1, [pc, #432]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005112:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005120:	4963      	ldr	r1, [pc, #396]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005142:	495b      	ldr	r1, [pc, #364]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005156:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	4952      	ldr	r1, [pc, #328]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005178:	4b4d      	ldr	r3, [pc, #308]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	494a      	ldr	r1, [pc, #296]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800519a:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	4941      	ldr	r1, [pc, #260]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c2:	f023 0203 	bic.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	4939      	ldr	r1, [pc, #228]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d028      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	4930      	ldr	r1, [pc, #192]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fc:	d106      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005208:	60d3      	str	r3, [r2, #12]
 800520a:	e011      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f001 f81b 	bl	8006258 <RCCEx_PLLSAI1_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005226:	7cfb      	ldrb	r3, [r7, #19]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d04d      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005244:	d108      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005252:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005256:	e012      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005264:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005292:	60d3      	str	r3, [r2, #12]
 8005294:	e020      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529e:	d109      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a02      	ldr	r2, [pc, #8]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e014      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 ffc7 	bl	8006258 <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d028      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e4:	4b4a      	ldr	r3, [pc, #296]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f2:	4947      	ldr	r1, [pc, #284]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d106      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b42      	ldr	r3, [pc, #264]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a41      	ldr	r2, [pc, #260]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530e:	60d3      	str	r3, [r2, #12]
 8005310:	e011      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800531a:	d10c      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2101      	movs	r1, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 ff98 	bl	8006258 <RCCEx_PLLSAI1_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	492f      	ldr	r1, [pc, #188]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 ff73 	bl	8006258 <RCCEx_PLLSAI1_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800538c:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005392:	f023 0204 	bic.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	491c      	ldr	r1, [pc, #112]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053b0:	4b17      	ldr	r3, [pc, #92]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b6:	f023 0218 	bic.w	r2, r3, #24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	4913      	ldr	r1, [pc, #76]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d017      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e4:	490a      	ldr	r1, [pc, #40]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005404:	7cbb      	ldrb	r3, [r7, #18]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000

08005414 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005426:	d13e      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005428:	4bb6      	ldr	r3, [pc, #728]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543a:	d028      	beq.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	f200 86f4 	bhi.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544c:	d005      	beq.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005454:	d00e      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005456:	f000 beea 	b.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800545a:	4baa      	ldr	r3, [pc, #680]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	f040 86e4 	bne.w	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
      break;
 8005470:	f000 bedf 	b.w	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005474:	4ba3      	ldr	r3, [pc, #652]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b02      	cmp	r3, #2
 8005480:	f040 86d9 	bne.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005484:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005488:	61fb      	str	r3, [r7, #28]
      break;
 800548a:	f000 bed4 	b.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800548e:	4b9d      	ldr	r3, [pc, #628]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800549a:	f040 86ce 	bne.w	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800549e:	4b9a      	ldr	r3, [pc, #616]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054a0:	61fb      	str	r3, [r7, #28]
      break;
 80054a2:	f000 beca 	b.w	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054a6:	4b97      	ldr	r3, [pc, #604]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d036      	beq.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d840      	bhi.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d003      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d020      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80054c8:	e039      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b8e      	ldr	r3, [pc, #568]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d116      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80054d6:	4b8b      	ldr	r3, [pc, #556]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80054e2:	4b88      	ldr	r3, [pc, #544]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	e005      	b.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80054ee:	4b85      	ldr	r3, [pc, #532]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a84      	ldr	r2, [pc, #528]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005502:	e01f      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	61bb      	str	r3, [r7, #24]
      break;
 8005508:	e01c      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800550a:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d102      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005518:	4b7d      	ldr	r3, [pc, #500]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800551a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800551c:	e012      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
      break;
 8005522:	e00f      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005524:	4b77      	ldr	r3, [pc, #476]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005530:	d102      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005532:	4b78      	ldr	r3, [pc, #480]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005536:	e005      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
      break;
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
      break;
 8005542:	bf00      	nop
    }

    switch(PeriphClk)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800554a:	f000 8606 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005554:	f200 8673 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555e:	f000 8469 	beq.w	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005568:	f200 8669 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005572:	f000 8531 	beq.w	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557c:	f200 865f 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005586:	f000 8187 	beq.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005590:	f200 8655 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800559a:	f000 80cd 	beq.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a4:	f200 864b 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	f000 8430 	beq.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	f200 8641 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c2:	f000 83e4 	beq.w	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055cc:	f200 8637 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	f000 80af 	beq.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	f200 862d 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	f000 809d 	beq.w	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	f200 8623 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fe:	f000 808b 	beq.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005608:	f200 8619 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005612:	f000 8554 	beq.w	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	f200 860f 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005626:	f000 8500 	beq.w	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005630:	f200 8605 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	f000 84a1 	beq.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	f200 85fb 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	f000 846c 	beq.w	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	f200 85f3 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b20      	cmp	r3, #32
 800565c:	d84c      	bhi.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 85ec 	beq.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	2b1f      	cmp	r3, #31
 800566c:	f200 85e7 	bhi.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005670:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	08005a8d 	.word	0x08005a8d
 800567c:	08005afb 	.word	0x08005afb
 8005680:	0800623f 	.word	0x0800623f
 8005684:	08005b8f 	.word	0x08005b8f
 8005688:	0800623f 	.word	0x0800623f
 800568c:	0800623f 	.word	0x0800623f
 8005690:	0800623f 	.word	0x0800623f
 8005694:	08005c07 	.word	0x08005c07
 8005698:	0800623f 	.word	0x0800623f
 800569c:	0800623f 	.word	0x0800623f
 80056a0:	0800623f 	.word	0x0800623f
 80056a4:	0800623f 	.word	0x0800623f
 80056a8:	0800623f 	.word	0x0800623f
 80056ac:	0800623f 	.word	0x0800623f
 80056b0:	0800623f 	.word	0x0800623f
 80056b4:	08005c8b 	.word	0x08005c8b
 80056b8:	0800623f 	.word	0x0800623f
 80056bc:	0800623f 	.word	0x0800623f
 80056c0:	0800623f 	.word	0x0800623f
 80056c4:	0800623f 	.word	0x0800623f
 80056c8:	0800623f 	.word	0x0800623f
 80056cc:	0800623f 	.word	0x0800623f
 80056d0:	0800623f 	.word	0x0800623f
 80056d4:	0800623f 	.word	0x0800623f
 80056d8:	0800623f 	.word	0x0800623f
 80056dc:	0800623f 	.word	0x0800623f
 80056e0:	0800623f 	.word	0x0800623f
 80056e4:	0800623f 	.word	0x0800623f
 80056e8:	0800623f 	.word	0x0800623f
 80056ec:	0800623f 	.word	0x0800623f
 80056f0:	0800623f 	.word	0x0800623f
 80056f4:	08005d0d 	.word	0x08005d0d
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	f000 83e8 	beq.w	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005700:	f000 bd9d 	b.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005704:	40021000 	.word	0x40021000
 8005708:	0003d090 	.word	0x0003d090
 800570c:	08011eac 	.word	0x08011eac
 8005710:	00f42400 	.word	0x00f42400
 8005714:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800571e:	f000 ff83 	bl	8006628 <RCCEx_GetSAIxPeriphCLKFreq>
 8005722:	61f8      	str	r0, [r7, #28]
      break;
 8005724:	f000 bd8e 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800572e:	f000 ff7b 	bl	8006628 <RCCEx_GetSAIxPeriphCLKFreq>
 8005732:	61f8      	str	r0, [r7, #28]
      break;
 8005734:	f000 bd86 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005738:	4b9a      	ldr	r3, [pc, #616]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800574a:	d015      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005752:	f200 8092 	bhi.w	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575c:	d029      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005764:	f200 8089 	bhi.w	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d07b      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005774:	d04a      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005776:	e080      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005778:	4b8a      	ldr	r3, [pc, #552]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d17d      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005784:	4b87      	ldr	r3, [pc, #540]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005790:	4b84      	ldr	r3, [pc, #528]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	e005      	b.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800579c:	4b81      	ldr	r3, [pc, #516]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	4a7f      	ldr	r2, [pc, #508]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80057aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ae:	61fb      	str	r3, [r7, #28]
          break;
 80057b0:	e066      	b.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057b2:	4b7c      	ldr	r3, [pc, #496]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057be:	d162      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057c0:	4b78      	ldr	r3, [pc, #480]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057cc:	d15b      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80057ce:	4b75      	ldr	r3, [pc, #468]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	fb03 f202 	mul.w	r2, r3, r2
 80057e2:	4b70      	ldr	r3, [pc, #448]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	3301      	adds	r3, #1
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80057f4:	4b6b      	ldr	r3, [pc, #428]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	0d5b      	lsrs	r3, r3, #21
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	3301      	adds	r3, #1
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	61fb      	str	r3, [r7, #28]
          break;
 800580a:	e03c      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800580c:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005818:	d138      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800581a:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005826:	d131      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005828:	4b5e      	ldr	r3, [pc, #376]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005832:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	fb03 f202 	mul.w	r2, r3, r2
 800583c:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3301      	adds	r3, #1
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800584e:	4b55      	ldr	r3, [pc, #340]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	0d5b      	lsrs	r3, r3, #21
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	3301      	adds	r3, #1
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	61fb      	str	r3, [r7, #28]
          break;
 8005864:	e012      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005866:	4b4f      	ldr	r3, [pc, #316]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b02      	cmp	r3, #2
 8005872:	d10e      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005876:	61fb      	str	r3, [r7, #28]
          break;
 8005878:	e00b      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800587a:	bf00      	nop
 800587c:	f000 bce2 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005880:	bf00      	nop
 8005882:	f000 bcdf 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005886:	bf00      	nop
 8005888:	f000 bcdc 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800588c:	bf00      	nop
 800588e:	f000 bcd9 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005892:	bf00      	nop
        break;
 8005894:	f000 bcd6 	b.w	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005898:	4b42      	ldr	r3, [pc, #264]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800589a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800589e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a6:	d13d      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058a8:	4b3e      	ldr	r3, [pc, #248]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b4:	f040 84c5 	bne.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80058b8:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	f040 84bd 	bne.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058c8:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	fb03 f202 	mul.w	r2, r3, r2
 80058dc:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3301      	adds	r3, #1
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80058ee:	4b2d      	ldr	r3, [pc, #180]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	0edb      	lsrs	r3, r3, #27
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005900:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800590c:	2311      	movs	r3, #17
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e001      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005912:	2307      	movs	r3, #7
 8005914:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	61fb      	str	r3, [r7, #28]
      break;
 8005920:	f000 bc8f 	b.w	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005936:	d016      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800593e:	f200 809b 	bhi.w	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005948:	d032      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005950:	f200 8092 	bhi.w	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8084 	beq.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005962:	d052      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005964:	e088      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	f040 8084 	bne.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	e005      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800599a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599e:	61fb      	str	r3, [r7, #28]
          break;
 80059a0:	e06c      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	08011eac 	.word	0x08011eac
 80059ac:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059b0:	4ba5      	ldr	r3, [pc, #660]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059bc:	d160      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059be:	4ba2      	ldr	r3, [pc, #648]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ca:	d159      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059cc:	4b9e      	ldr	r3, [pc, #632]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	fb03 f202 	mul.w	r2, r3, r2
 80059e0:	4b99      	ldr	r3, [pc, #612]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3301      	adds	r3, #1
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80059f2:	4b95      	ldr	r3, [pc, #596]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	0d5b      	lsrs	r3, r3, #21
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	3301      	adds	r3, #1
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	61fb      	str	r3, [r7, #28]
          break;
 8005a08:	e03a      	b.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a0a:	4b8f      	ldr	r3, [pc, #572]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a16:	d135      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a18:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a24:	d12e      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a30:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	fb03 f202 	mul.w	r2, r3, r2
 8005a3a:	4b83      	ldr	r3, [pc, #524]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	3301      	adds	r3, #1
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a4c:	4b7e      	ldr	r3, [pc, #504]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	0d5b      	lsrs	r3, r3, #21
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	61fb      	str	r3, [r7, #28]
          break;
 8005a62:	e00f      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a64:	4b78      	ldr	r3, [pc, #480]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d10a      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005a72:	4b76      	ldr	r3, [pc, #472]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005a74:	61fb      	str	r3, [r7, #28]
          break;
 8005a76:	e007      	b.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005a78:	bf00      	nop
 8005a7a:	e3e2      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a7c:	bf00      	nop
 8005a7e:	e3e0      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a80:	bf00      	nop
 8005a82:	e3de      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a84:	bf00      	nop
 8005a86:	e3dc      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005a88:	bf00      	nop
      break;
 8005a8a:	e3da      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a8c:	4b6e      	ldr	r3, [pc, #440]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d827      	bhi.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005abd 	.word	0x08005abd
 8005aac:	08005ac5 	.word	0x08005ac5
 8005ab0:	08005ad9 	.word	0x08005ad9
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7ff f87c 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
          break;
 8005aba:	e01d      	b.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005abc:	f7fe ffca 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005ac0:	61f8      	str	r0, [r7, #28]
          break;
 8005ac2:	e019      	b.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ac4:	4b60      	ldr	r3, [pc, #384]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad0:	d10f      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ad4:	61fb      	str	r3, [r7, #28]
          break;
 8005ad6:	e00c      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ad8:	4b5b      	ldr	r3, [pc, #364]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	61fb      	str	r3, [r7, #28]
          break;
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005aee:	bf00      	nop
 8005af0:	e3a8      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005af2:	bf00      	nop
 8005af4:	e3a6      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005af6:	bf00      	nop
        break;
 8005af8:	e3a4      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005afa:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f003 030c 	and.w	r3, r3, #12
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d83a      	bhi.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b83 	.word	0x08005b83
 8005b1c:	08005b83 	.word	0x08005b83
 8005b20:	08005b83 	.word	0x08005b83
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	08005b83 	.word	0x08005b83
 8005b2c:	08005b83 	.word	0x08005b83
 8005b30:	08005b83 	.word	0x08005b83
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b83 	.word	0x08005b83
 8005b3c:	08005b83 	.word	0x08005b83
 8005b40:	08005b83 	.word	0x08005b83
 8005b44:	08005b6d 	.word	0x08005b6d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7ff f81c 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
          break;
 8005b4e:	e01d      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b50:	f7fe ff80 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005b54:	61f8      	str	r0, [r7, #28]
          break;
 8005b56:	e019      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b58:	4b3b      	ldr	r3, [pc, #236]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d10f      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005b66:	4b3a      	ldr	r3, [pc, #232]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b68:	61fb      	str	r3, [r7, #28]
          break;
 8005b6a:	e00c      	b.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d107      	bne.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	61fb      	str	r3, [r7, #28]
          break;
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005b82:	bf00      	nop
 8005b84:	e35e      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b86:	bf00      	nop
 8005b88:	e35c      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b8a:	bf00      	nop
        break;
 8005b8c:	e35a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	d021      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b30      	cmp	r3, #48	; 0x30
 8005ba4:	d829      	bhi.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d011      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d823      	bhi.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005bbe:	e01c      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fe ffe0 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	61f8      	str	r0, [r7, #28]
          break;
 8005bc6:	e01d      	b.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc8:	f7fe ff44 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005bcc:	61f8      	str	r0, [r7, #28]
          break;
 8005bce:	e019      	b.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bdc:	d10f      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005bde:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005be0:	61fb      	str	r3, [r7, #28]
          break;
 8005be2:	e00c      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005be4:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf6:	61fb      	str	r3, [r7, #28]
          break;
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005bfa:	bf00      	nop
 8005bfc:	e322      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bfe:	bf00      	nop
 8005c00:	e320      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c02:	bf00      	nop
        break;
 8005c04:	e31e      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2bc0      	cmp	r3, #192	; 0xc0
 8005c16:	d027      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c1c:	d82f      	bhi.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d017      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d829      	bhi.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d004      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005c36:	e022      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7fe ffa4 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	61f8      	str	r0, [r7, #28]
          break;
 8005c3e:	e023      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c40:	f7fe ff08 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005c44:	61f8      	str	r0, [r7, #28]
          break;
 8005c46:	e01f      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	02dc6c00 	.word	0x02dc6c00
 8005c50:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c54:	4b9b      	ldr	r3, [pc, #620]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d10f      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005c62:	4b99      	ldr	r3, [pc, #612]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005c64:	61fb      	str	r3, [r7, #28]
          break;
 8005c66:	e00c      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c68:	4b96      	ldr	r3, [pc, #600]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d107      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7a:	61fb      	str	r3, [r7, #28]
          break;
 8005c7c:	e003      	b.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005c7e:	bf00      	nop
 8005c80:	e2e0      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c82:	bf00      	nop
 8005c84:	e2de      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c86:	bf00      	nop
        break;
 8005c88:	e2dc      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c8a:	4b8e      	ldr	r3, [pc, #568]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9c:	d025      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca4:	d82c      	bhi.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cac:	d013      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d824      	bhi.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d004      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005cc4:	e01c      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7fe ff5d 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005cca:	61f8      	str	r0, [r7, #28]
          break;
 8005ccc:	e01d      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe fec1 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005cd2:	61f8      	str	r0, [r7, #28]
          break;
 8005cd4:	e019      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd6:	4b7b      	ldr	r3, [pc, #492]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce2:	d10f      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005ce4:	4b78      	ldr	r3, [pc, #480]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ce6:	61fb      	str	r3, [r7, #28]
          break;
 8005ce8:	e00c      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cea:	4b76      	ldr	r3, [pc, #472]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfc:	61fb      	str	r3, [r7, #28]
          break;
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005d00:	bf00      	nop
 8005d02:	e29f      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d04:	bf00      	nop
 8005d06:	e29d      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d08:	bf00      	nop
        break;
 8005d0a:	e29b      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d0c:	4b6d      	ldr	r3, [pc, #436]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1e:	d025      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d26:	d82c      	bhi.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d36:	d824      	bhi.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005d46:	e01c      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d48:	f7fe ff1c 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	61f8      	str	r0, [r7, #28]
          break;
 8005d4e:	e01d      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d50:	f7fe fe80 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005d54:	61f8      	str	r0, [r7, #28]
          break;
 8005d56:	e019      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d58:	4b5a      	ldr	r3, [pc, #360]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d10f      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005d66:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d68:	61fb      	str	r3, [r7, #28]
          break;
 8005d6a:	e00c      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d6c:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	61fb      	str	r3, [r7, #28]
          break;
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005d82:	bf00      	nop
 8005d84:	e25e      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d86:	bf00      	nop
 8005d88:	e25c      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d8a:	bf00      	nop
        break;
 8005d8c:	e25a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d8e:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da0:	d007      	beq.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da8:	d12f      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe fe53 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005dae:	61f8      	str	r0, [r7, #28]
          break;
 8005db0:	e02e      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005db2:	4b44      	ldr	r3, [pc, #272]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dbe:	d126      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005dc0:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	fb03 f202 	mul.w	r2, r3, r2
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	3301      	adds	r3, #1
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005df2:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	0e5b      	lsrs	r3, r3, #25
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]
          break;
 8005e08:	e001      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005e0a:	bf00      	nop
 8005e0c:	e21a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e0e:	bf00      	nop
        break;
 8005e10:	e218      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e24:	f7fe fec4 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8005e28:	61f8      	str	r0, [r7, #28]
        break;
 8005e2a:	e20b      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e2c:	f7fe fe12 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e207      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3a:	f003 0318 	and.w	r3, r3, #24
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d010      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d834      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d024      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005e58:	e02d      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005e5a:	69b9      	ldr	r1, [r7, #24]
 8005e5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e60:	f000 fbe2 	bl	8006628 <RCCEx_GetSAIxPeriphCLKFreq>
 8005e64:	61f8      	str	r0, [r7, #28]
          break;
 8005e66:	e02b      	b.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d122      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	e005      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	4a0c      	ldr	r2, [pc, #48]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9e:	61fb      	str	r3, [r7, #28]
          break;
 8005ea0:	e00b      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eae:	d106      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005eb2:	61fb      	str	r3, [r7, #28]
          break;
 8005eb4:	e003      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005eb6:	bf00      	nop
 8005eb8:	e1c4      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eba:	bf00      	nop
 8005ebc:	e1c2      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ebe:	bf00      	nop
        break;
 8005ec0:	e1c0      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	08011eac 	.word	0x08011eac
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ed0:	4b96      	ldr	r3, [pc, #600]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d819      	bhi.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d004      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005efa:	e011      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe fe42 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005f00:	61f8      	str	r0, [r7, #28]
          break;
 8005f02:	e010      	b.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f04:	f7fe fda6 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005f08:	61f8      	str	r0, [r7, #28]
          break;
 8005f0a:	e00c      	b.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f0c:	4b87      	ldr	r3, [pc, #540]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f18:	d104      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005f1a:	4b85      	ldr	r3, [pc, #532]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f1c:	61fb      	str	r3, [r7, #28]
          break;
 8005f1e:	e001      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005f20:	bf00      	nop
 8005f22:	e18f      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f24:	bf00      	nop
        break;
 8005f26:	e18d      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f28:	4b80      	ldr	r3, [pc, #512]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3a:	d013      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f42:	d819      	bhi.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f50:	d004      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005f52:	e011      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fe fe16 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005f58:	61f8      	str	r0, [r7, #28]
          break;
 8005f5a:	e010      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f5c:	f7fe fd7a 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005f60:	61f8      	str	r0, [r7, #28]
          break;
 8005f62:	e00c      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f64:	4b71      	ldr	r3, [pc, #452]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f70:	d104      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005f72:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f74:	61fb      	str	r3, [r7, #28]
          break;
 8005f76:	e001      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005f78:	bf00      	nop
 8005f7a:	e163      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f7c:	bf00      	nop
        break;
 8005f7e:	e161      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f92:	d013      	beq.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9a:	d819      	bhi.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d004      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005faa:	e011      	b.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fe fdea 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	61f8      	str	r0, [r7, #28]
          break;
 8005fb2:	e010      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fb4:	f7fe fd4e 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005fb8:	61f8      	str	r0, [r7, #28]
          break;
 8005fba:	e00c      	b.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fbc:	4b5b      	ldr	r3, [pc, #364]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d104      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005fca:	4b59      	ldr	r3, [pc, #356]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005fcc:	61fb      	str	r3, [r7, #28]
          break;
 8005fce:	e001      	b.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005fd0:	bf00      	nop
 8005fd2:	e137      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fd4:	bf00      	nop
        break;
 8005fd6:	e135      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005fd8:	4b54      	ldr	r3, [pc, #336]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d011      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d818      	bhi.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d004      	beq.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005ffc:	e011      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ffe:	f7fe fdc1 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8006002:	61f8      	str	r0, [r7, #28]
          break;
 8006004:	e010      	b.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006006:	f7fe fd25 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800600a:	61f8      	str	r0, [r7, #28]
          break;
 800600c:	e00c      	b.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800600e:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601a:	d104      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800601c:	4b44      	ldr	r3, [pc, #272]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800601e:	61fb      	str	r3, [r7, #28]
          break;
 8006020:	e001      	b.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006022:	bf00      	nop
 8006024:	e10e      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006026:	bf00      	nop
        break;
 8006028:	e10c      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800602a:	4b40      	ldr	r3, [pc, #256]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800603c:	d02c      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006044:	d833      	bhi.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800604c:	d01a      	beq.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006054:	d82b      	bhi.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006062:	d004      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006064:	e023      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006066:	f7fe fd8d 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 800606a:	61f8      	str	r0, [r7, #28]
          break;
 800606c:	e026      	b.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d11a      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800607c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006080:	61fb      	str	r3, [r7, #28]
          break;
 8006082:	e016      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006084:	4b29      	ldr	r3, [pc, #164]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006090:	d111      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006094:	61fb      	str	r3, [r7, #28]
          break;
 8006096:	e00e      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d109      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	61fb      	str	r3, [r7, #28]
          break;
 80060ac:	e005      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80060ae:	bf00      	nop
 80060b0:	e0c8      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060b2:	bf00      	nop
 80060b4:	e0c6      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060b6:	bf00      	nop
 80060b8:	e0c4      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ba:	bf00      	nop
        break;
 80060bc:	e0c2      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d0:	d030      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d8:	d837      	bhi.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e0:	d01a      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e8:	d82f      	bhi.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d004      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80060f8:	e027      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fe fd43 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80060fe:	61f8      	str	r0, [r7, #28]
          break;
 8006100:	e02a      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d11e      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006110:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006114:	61fb      	str	r3, [r7, #28]
          break;
 8006116:	e01a      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	d115      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006126:	4b02      	ldr	r3, [pc, #8]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006128:	61fb      	str	r3, [r7, #28]
          break;
 800612a:	e012      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800612c:	40021000 	.word	0x40021000
 8006130:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006134:	4b46      	ldr	r3, [pc, #280]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d109      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	61fb      	str	r3, [r7, #28]
          break;
 8006148:	e005      	b.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800614a:	bf00      	nop
 800614c:	e07a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800614e:	bf00      	nop
 8006150:	e078      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006152:	bf00      	nop
 8006154:	e076      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006156:	bf00      	nop
        break;
 8006158:	e074      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800615a:	4b3d      	ldr	r3, [pc, #244]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800615c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006160:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800616c:	d02c      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006174:	d855      	bhi.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d004      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006184:	e04d      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006186:	f7fe fc65 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800618a:	61f8      	str	r0, [r7, #28]
          break;
 800618c:	e04e      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d145      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800619a:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	e005      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80061b2:	4b27      	ldr	r3, [pc, #156]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	4a25      	ldr	r2, [pc, #148]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80061c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c4:	61fb      	str	r3, [r7, #28]
          break;
 80061c6:	e02e      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061c8:	4b21      	ldr	r3, [pc, #132]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d4:	d129      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061d6:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e2:	d122      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061e4:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	fb03 f202 	mul.w	r2, r3, r2
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3301      	adds	r3, #1
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	0d5b      	lsrs	r3, r3, #21
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	3301      	adds	r3, #1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]
          break;
 8006220:	e003      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006222:	bf00      	nop
 8006224:	e00e      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006226:	bf00      	nop
 8006228:	e00c      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800622a:	bf00      	nop
        break;
 800622c:	e00a      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800622e:	bf00      	nop
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006232:	bf00      	nop
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006242:	bf00      	nop
    }
  }

  return(frequency);
 8006244:	69fb      	ldr	r3, [r7, #28]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	08011eac 	.word	0x08011eac

08006258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006266:	4b72      	ldr	r3, [pc, #456]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006272:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0203 	and.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d103      	bne.n	800628a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
       ||
 8006286:	2b00      	cmp	r3, #0
 8006288:	d142      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e03f      	b.n	8006310 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d018      	beq.n	80062ca <RCCEx_PLLSAI1_Config+0x72>
 8006298:	2b03      	cmp	r3, #3
 800629a:	d825      	bhi.n	80062e8 <RCCEx_PLLSAI1_Config+0x90>
 800629c:	2b01      	cmp	r3, #1
 800629e:	d002      	beq.n	80062a6 <RCCEx_PLLSAI1_Config+0x4e>
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d009      	beq.n	80062b8 <RCCEx_PLLSAI1_Config+0x60>
 80062a4:	e020      	b.n	80062e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062a6:	4b62      	ldr	r3, [pc, #392]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d11d      	bne.n	80062ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b6:	e01a      	b.n	80062ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062b8:	4b5d      	ldr	r3, [pc, #372]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d116      	bne.n	80062f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c8:	e013      	b.n	80062f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ca:	4b59      	ldr	r3, [pc, #356]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062d6:	4b56      	ldr	r3, [pc, #344]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062e6:	e006      	b.n	80062f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
      break;
 80062ec:	e004      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062ee:	bf00      	nop
 80062f0:	e002      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80062fe:	4b4c      	ldr	r3, [pc, #304]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4949      	ldr	r1, [pc, #292]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 8086 	bne.w	8006424 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006318:	4b45      	ldr	r3, [pc, #276]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a44      	ldr	r2, [pc, #272]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 800631e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006324:	f7fb fe96 	bl	8002054 <HAL_GetTick>
 8006328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800632a:	e009      	b.n	8006340 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800632c:	f7fb fe92 	bl	8002054 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d902      	bls.n	8006340 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
        break;
 800633e:	e005      	b.n	800634c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006340:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ef      	bne.n	800632c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d168      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d113      	bne.n	8006380 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006358:	4b35      	ldr	r3, [pc, #212]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	4b35      	ldr	r3, [pc, #212]	; (8006434 <RCCEx_PLLSAI1_Config+0x1dc>)
 800635e:	4013      	ands	r3, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6892      	ldr	r2, [r2, #8]
 8006364:	0211      	lsls	r1, r2, #8
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68d2      	ldr	r2, [r2, #12]
 800636a:	06d2      	lsls	r2, r2, #27
 800636c:	4311      	orrs	r1, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6852      	ldr	r2, [r2, #4]
 8006372:	3a01      	subs	r2, #1
 8006374:	0112      	lsls	r2, r2, #4
 8006376:	430a      	orrs	r2, r1
 8006378:	492d      	ldr	r1, [pc, #180]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]
 800637e:	e02d      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d115      	bne.n	80063b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006386:	4b2a      	ldr	r3, [pc, #168]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6892      	ldr	r2, [r2, #8]
 8006392:	0211      	lsls	r1, r2, #8
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6912      	ldr	r2, [r2, #16]
 8006398:	0852      	lsrs	r2, r2, #1
 800639a:	3a01      	subs	r2, #1
 800639c:	0552      	lsls	r2, r2, #21
 800639e:	4311      	orrs	r1, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	3a01      	subs	r2, #1
 80063a6:	0112      	lsls	r2, r2, #4
 80063a8:	430a      	orrs	r2, r1
 80063aa:	4921      	ldr	r1, [pc, #132]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]
 80063b0:	e014      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6892      	ldr	r2, [r2, #8]
 80063be:	0211      	lsls	r1, r2, #8
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6952      	ldr	r2, [r2, #20]
 80063c4:	0852      	lsrs	r2, r2, #1
 80063c6:	3a01      	subs	r2, #1
 80063c8:	0652      	lsls	r2, r2, #25
 80063ca:	4311      	orrs	r1, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6852      	ldr	r2, [r2, #4]
 80063d0:	3a01      	subs	r2, #1
 80063d2:	0112      	lsls	r2, r2, #4
 80063d4:	430a      	orrs	r2, r1
 80063d6:	4916      	ldr	r1, [pc, #88]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fb fe34 	bl	8002054 <HAL_GetTick>
 80063ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ee:	e009      	b.n	8006404 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063f0:	f7fb fe30 	bl	8002054 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d902      	bls.n	8006404 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	73fb      	strb	r3, [r7, #15]
          break;
 8006402:	e005      	b.n	8006410 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ef      	beq.n	80063f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	4904      	ldr	r1, [pc, #16]	; (8006430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006420:	4313      	orrs	r3, r2
 8006422:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40021000 	.word	0x40021000
 8006434:	07ff800f 	.word	0x07ff800f
 8006438:	ff9f800f 	.word	0xff9f800f
 800643c:	f9ff800f 	.word	0xf9ff800f

08006440 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800644e:	4b72      	ldr	r3, [pc, #456]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800645a:	4b6f      	ldr	r3, [pc, #444]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0203 	and.w	r2, r3, #3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d103      	bne.n	8006472 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
       ||
 800646e:	2b00      	cmp	r3, #0
 8006470:	d142      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e03f      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d018      	beq.n	80064b2 <RCCEx_PLLSAI2_Config+0x72>
 8006480:	2b03      	cmp	r3, #3
 8006482:	d825      	bhi.n	80064d0 <RCCEx_PLLSAI2_Config+0x90>
 8006484:	2b01      	cmp	r3, #1
 8006486:	d002      	beq.n	800648e <RCCEx_PLLSAI2_Config+0x4e>
 8006488:	2b02      	cmp	r3, #2
 800648a:	d009      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0x60>
 800648c:	e020      	b.n	80064d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800648e:	4b62      	ldr	r3, [pc, #392]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11d      	bne.n	80064d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649e:	e01a      	b.n	80064d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064a0:	4b5d      	ldr	r3, [pc, #372]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d116      	bne.n	80064da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b0:	e013      	b.n	80064da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064b2:	4b59      	ldr	r3, [pc, #356]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10f      	bne.n	80064de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064be:	4b56      	ldr	r3, [pc, #344]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ce:	e006      	b.n	80064de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e004      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064d6:	bf00      	nop
 80064d8:	e002      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064de:	bf00      	nop
    }

    if(status == HAL_OK)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80064e6:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f023 0203 	bic.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4949      	ldr	r1, [pc, #292]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 8086 	bne.w	800660c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006500:	4b45      	ldr	r3, [pc, #276]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a44      	ldr	r2, [pc, #272]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650c:	f7fb fda2 	bl	8002054 <HAL_GetTick>
 8006510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006512:	e009      	b.n	8006528 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006514:	f7fb fd9e 	bl	8002054 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d902      	bls.n	8006528 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	73fb      	strb	r3, [r7, #15]
        break;
 8006526:	e005      	b.n	8006534 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006528:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ef      	bne.n	8006514 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d168      	bne.n	800660c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d113      	bne.n	8006568 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006546:	4013      	ands	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6892      	ldr	r2, [r2, #8]
 800654c:	0211      	lsls	r1, r2, #8
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68d2      	ldr	r2, [r2, #12]
 8006552:	06d2      	lsls	r2, r2, #27
 8006554:	4311      	orrs	r1, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6852      	ldr	r2, [r2, #4]
 800655a:	3a01      	subs	r2, #1
 800655c:	0112      	lsls	r2, r2, #4
 800655e:	430a      	orrs	r2, r1
 8006560:	492d      	ldr	r1, [pc, #180]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006562:	4313      	orrs	r3, r2
 8006564:	614b      	str	r3, [r1, #20]
 8006566:	e02d      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d115      	bne.n	800659a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006570:	695a      	ldr	r2, [r3, #20]
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006574:	4013      	ands	r3, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	0211      	lsls	r1, r2, #8
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6912      	ldr	r2, [r2, #16]
 8006580:	0852      	lsrs	r2, r2, #1
 8006582:	3a01      	subs	r2, #1
 8006584:	0552      	lsls	r2, r2, #21
 8006586:	4311      	orrs	r1, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6852      	ldr	r2, [r2, #4]
 800658c:	3a01      	subs	r2, #1
 800658e:	0112      	lsls	r2, r2, #4
 8006590:	430a      	orrs	r2, r1
 8006592:	4921      	ldr	r1, [pc, #132]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006594:	4313      	orrs	r3, r2
 8006596:	614b      	str	r3, [r1, #20]
 8006598:	e014      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800659a:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <RCCEx_PLLSAI2_Config+0x1e4>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	0211      	lsls	r1, r2, #8
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6952      	ldr	r2, [r2, #20]
 80065ac:	0852      	lsrs	r2, r2, #1
 80065ae:	3a01      	subs	r2, #1
 80065b0:	0652      	lsls	r2, r2, #25
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6852      	ldr	r2, [r2, #4]
 80065b8:	3a01      	subs	r2, #1
 80065ba:	0112      	lsls	r2, r2, #4
 80065bc:	430a      	orrs	r2, r1
 80065be:	4916      	ldr	r1, [pc, #88]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065c4:	4b14      	ldr	r3, [pc, #80]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fb fd40 	bl	8002054 <HAL_GetTick>
 80065d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065d6:	e009      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065d8:	f7fb fd3c 	bl	8002054 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d902      	bls.n	80065ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	73fb      	strb	r3, [r7, #15]
          break;
 80065ea:	e005      	b.n	80065f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ef      	beq.n	80065d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4904      	ldr	r1, [pc, #16]	; (8006618 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
 800661c:	07ff800f 	.word	0x07ff800f
 8006620:	ff9f800f 	.word	0xff9f800f
 8006624:	f9ff800f 	.word	0xf9ff800f

08006628 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006628:	b480      	push	{r7}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006644:	d10b      	bne.n	800665e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800664c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006650:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d112      	bne.n	800667e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006658:	4b7a      	ldr	r3, [pc, #488]	; (8006844 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	e00f      	b.n	800667e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006664:	d10b      	bne.n	800667e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006666:	4b76      	ldr	r3, [pc, #472]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800666c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006670:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006678:	d101      	bne.n	800667e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800667a:	4b72      	ldr	r3, [pc, #456]	; (8006844 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800667c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 80d6 	bne.w	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d003      	beq.n	8006698 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006696:	d13b      	bne.n	8006710 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006698:	4b69      	ldr	r3, [pc, #420]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066a4:	f040 80c4 	bne.w	8006830 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80066a8:	4b65      	ldr	r3, [pc, #404]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80bd 	beq.w	8006830 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066b6:	4b62      	ldr	r3, [pc, #392]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	3301      	adds	r3, #1
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80066ca:	4b5d      	ldr	r3, [pc, #372]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80066d6:	4b5a      	ldr	r3, [pc, #360]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	0edb      	lsrs	r3, r3, #27
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80066e8:	4b55      	ldr	r3, [pc, #340]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80066f4:	2311      	movs	r3, #17
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e001      	b.n	80066fe <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80066fa:	2307      	movs	r3, #7
 80066fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	fb03 f202 	mul.w	r2, r3, r2
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fbb2 f3f3 	udiv	r3, r2, r3
 800670c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800670e:	e08f      	b.n	8006830 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d13a      	bne.n	800678c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006716:	4b4a      	ldr	r3, [pc, #296]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800671e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006722:	f040 8086 	bne.w	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006726:	4b46      	ldr	r3, [pc, #280]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d07f      	beq.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006732:	4b43      	ldr	r3, [pc, #268]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	3301      	adds	r3, #1
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006750:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006752:	4b3b      	ldr	r3, [pc, #236]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	0edb      	lsrs	r3, r3, #27
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006764:	4b36      	ldr	r3, [pc, #216]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006770:	2311      	movs	r3, #17
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e001      	b.n	800677a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006776:	2307      	movs	r3, #7
 8006778:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	fb03 f202 	mul.w	r2, r3, r2
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e052      	b.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d003      	beq.n	800679a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006798:	d109      	bne.n	80067ae <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679a:	4b29      	ldr	r3, [pc, #164]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d144      	bne.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80067aa:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ac:	e041      	b.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d003      	beq.n	80067bc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ba:	d13a      	bne.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80067bc:	4b20      	ldr	r3, [pc, #128]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c8:	d133      	bne.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d02d      	beq.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	3301      	adds	r3, #1
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	0edb      	lsrs	r3, r3, #27
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006808:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006814:	2311      	movs	r3, #17
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e001      	b.n	800681e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800681a:	2307      	movs	r3, #7
 800681c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	fb03 f202 	mul.w	r2, r3, r2
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	e000      	b.n	8006832 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006830:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006832:	69fb      	ldr	r3, [r7, #28]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3724      	adds	r7, #36	; 0x24
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40021000 	.word	0x40021000
 8006844:	001fff68 	.word	0x001fff68
 8006848:	00f42400 	.word	0x00f42400

0800684c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e078      	b.n	8006950 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fb f911 	bl	8001a98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2203      	movs	r2, #3
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f86a 	bl	8006958 <HAL_SD_InitCard>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e060      	b.n	8006950 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fdcd 	bl	8007434 <HAL_SD_GetCardStatus>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e055      	b.n	8006950 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80068a4:	7e3b      	ldrb	r3, [r7, #24]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80068aa:	7e7b      	ldrb	r3, [r7, #25]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10a      	bne.n	80068ce <HAL_SD_Init+0x82>
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_SD_Init+0x78>
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80068cc:	e00b      	b.n	80068e6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d104      	bne.n	80068e0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80068de:	e002      	b.n	80068e6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fe83 	bl	80075f8 <HAL_SD_ConfigWideBusOperation>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e029      	b.n	8006950 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80068fc:	f7fb fbaa 	bl	8002054 <HAL_GetTick>
 8006900:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006902:	e014      	b.n	800692e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006904:	f7fb fba6 	bl	8002054 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006912:	d10c      	bne.n	800692e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e010      	b.n	8006950 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 ff76 	bl	8007820 <HAL_SD_GetCardState>
 8006934:	4603      	mov	r3, r0
 8006936:	2b04      	cmp	r3, #4
 8006938:	d1e4      	bne.n	8006904 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3728      	adds	r7, #40	; 0x28
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006958:	b5b0      	push	{r4, r5, r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	af04      	add	r7, sp, #16
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006960:	2300      	movs	r3, #0
 8006962:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006970:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006974:	f7fe fd4e 	bl	8005414 <HAL_RCCEx_GetPeriphCLKFreq>
 8006978:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e079      	b.n	8006a88 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <HAL_SD_InitCard+0x138>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d107      	bne.n	80069c0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0210 	orr.w	r2, r2, #16
 80069be:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681d      	ldr	r5, [r3, #0]
 80069c4:	466c      	mov	r4, sp
 80069c6:	f107 0314 	add.w	r3, r7, #20
 80069ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069d2:	f107 0308 	add.w	r3, r7, #8
 80069d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069d8:	4628      	mov	r0, r5
 80069da:	f003 fe17 	bl	800a60c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f003 fe5a 	bl	800a69c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80069f4:	4a27      	ldr	r2, [pc, #156]	; (8006a94 <HAL_SD_InitCard+0x13c>)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	3301      	adds	r3, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fb fb34 	bl	800206c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 ffeb 	bl	80079e0 <SD_PowerON>
 8006a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e02e      	b.n	8006a88 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 ff18 	bl	8007860 <SD_InitCard>
 8006a30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e01b      	b.n	8006a88 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f003 feb5 	bl	800a7c8 <SDMMC_CmdBlockLength>
 8006a5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a0b      	ldr	r2, [pc, #44]	; (8006a98 <HAL_SD_InitCard+0x140>)
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3728      	adds	r7, #40	; 0x28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a90:	014f8b59 	.word	0x014f8b59
 8006a94:	00012110 	.word	0x00012110
 8006a98:	1fe00fff 	.word	0x1fe00fff

08006a9c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b092      	sub	sp, #72	; 0x48
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006aaa:	f7fb fad3 	bl	8002054 <HAL_GetTick>
 8006aae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e170      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f040 8163 	bne.w	8006da2 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d907      	bls.n	8006b00 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e157      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2203      	movs	r2, #3
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d002      	beq.n	8006b1e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	025b      	lsls	r3, r3, #9
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b22:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	025b      	lsls	r3, r3, #9
 8006b28:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b2a:	2390      	movs	r3, #144	; 0x90
 8006b2c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f107 0214 	add.w	r2, r7, #20
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f003 fe13 	bl	800a770 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b58:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d90a      	bls.n	8006b76 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2202      	movs	r2, #2
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f003 fe71 	bl	800a854 <SDMMC_CmdReadMultiBlock>
 8006b72:	6478      	str	r0, [r7, #68]	; 0x44
 8006b74:	e009      	b.n	8006b8a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b82:	4618      	mov	r0, r3
 8006b84:	f003 fe43 	bl	800a80e <SDMMC_CmdReadSingleBlock>
 8006b88:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d012      	beq.n	8006bb6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a88      	ldr	r2, [pc, #544]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0fc      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bba:	e061      	b.n	8006c80 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d03c      	beq.n	8006c44 <HAL_SD_ReadBlocks+0x1a8>
 8006bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d039      	beq.n	8006c44 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd4:	e033      	b.n	8006c3e <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f003 fd40 	bl	800a660 <SDMMC_ReadFIFO>
 8006be0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	3301      	adds	r3, #1
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c02:	3301      	adds	r3, #1
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	3301      	adds	r3, #1
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	3301      	adds	r3, #1
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c34:	3b01      	subs	r3, #1
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c40:	2b07      	cmp	r3, #7
 8006c42:	d9c8      	bls.n	8006bd6 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c44:	f7fb fa06 	bl	8002054 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d902      	bls.n	8006c5a <HAL_SD_ReadBlocks+0x1be>
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d112      	bne.n	8006c80 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a56      	ldr	r2, [pc, #344]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e097      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d096      	beq.n	8006bbc <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d022      	beq.n	8006cf2 <HAL_SD_ReadBlocks+0x256>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d91f      	bls.n	8006cf2 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d01b      	beq.n	8006cf2 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f003 fe32 	bl	800a928 <SDMMC_CmdStopTransfer>
 8006cc4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d012      	beq.n	8006cf2 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a39      	ldr	r2, [pc, #228]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e05e      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d012      	beq.n	8006d26 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	f043 0208 	orr.w	r2, r3, #8
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e044      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d012      	beq.n	8006d5a <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	f043 0202 	orr.w	r2, r3, #2
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e02a      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d012      	beq.n	8006d8e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a12      	ldr	r2, [pc, #72]	; (8006db8 <HAL_SD_ReadBlocks+0x31c>)
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f043 0220 	orr.w	r2, r3, #32
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e010      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <HAL_SD_ReadBlocks+0x320>)
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e006      	b.n	8006db0 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3748      	adds	r7, #72	; 0x48
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	1fe00fff 	.word	0x1fe00fff
 8006dbc:	18000f3a 	.word	0x18000f3a

08006dc0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b092      	sub	sp, #72	; 0x48
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006dce:	f7fb f941 	bl	8002054 <HAL_GetTick>
 8006dd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d107      	bne.n	8006df2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e174      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	f040 8167 	bne.w	80070ce <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d907      	bls.n	8006e24 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e15b      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2203      	movs	r2, #3
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2200      	movs	r2, #0
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d002      	beq.n	8006e42 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	025b      	lsls	r3, r3, #9
 8006e40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e46:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	025b      	lsls	r3, r3, #9
 8006e4c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e4e:	2390      	movs	r3, #144	; 0x90
 8006e50:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f107 0218 	add.w	r2, r7, #24
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f003 fc81 	bl	800a770 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e7c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d90a      	bls.n	8006e9a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e90:	4618      	mov	r0, r3
 8006e92:	f003 fd25 	bl	800a8e0 <SDMMC_CmdWriteMultiBlock>
 8006e96:	6478      	str	r0, [r7, #68]	; 0x44
 8006e98:	e009      	b.n	8006eae <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f003 fcf7 	bl	800a89a <SDMMC_CmdWriteSingleBlock>
 8006eac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a8a      	ldr	r2, [pc, #552]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e100      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006ede:	e065      	b.n	8006fac <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d040      	beq.n	8006f70 <HAL_SD_WriteBlocks+0x1b0>
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d03d      	beq.n	8006f70 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef8:	e037      	b.n	8006f6a <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	3301      	adds	r3, #1
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	021a      	lsls	r2, r3, #8
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f20:	3b01      	subs	r3, #1
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	041a      	lsls	r2, r3, #16
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	3301      	adds	r3, #1
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	061a      	lsls	r2, r3, #24
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f50:	3b01      	subs	r3, #1
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f107 0214 	add.w	r2, r7, #20
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f003 fb8b 	bl	800a67a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f66:	3301      	adds	r3, #1
 8006f68:	643b      	str	r3, [r7, #64]	; 0x40
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6c:	2b07      	cmp	r3, #7
 8006f6e:	d9c4      	bls.n	8006efa <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006f70:	f7fb f870 	bl	8002054 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d902      	bls.n	8006f86 <HAL_SD_WriteBlocks+0x1c6>
 8006f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d112      	bne.n	8006fac <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a56      	ldr	r2, [pc, #344]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e097      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d092      	beq.n	8006ee0 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d022      	beq.n	800701e <HAL_SD_WriteBlocks+0x25e>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d91f      	bls.n	800701e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d01b      	beq.n	800701e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f003 fc9c 	bl	800a928 <SDMMC_CmdStopTransfer>
 8006ff0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a39      	ldr	r2, [pc, #228]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007006:	431a      	orrs	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e05e      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d012      	beq.n	8007052 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	f043 0208 	orr.w	r2, r3, #8
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e044      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	f043 0202 	orr.w	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e02a      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <HAL_SD_WriteBlocks+0x324>)
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	f043 0210 	orr.w	r2, r3, #16
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e010      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <HAL_SD_WriteBlocks+0x328>)
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e006      	b.n	80070dc <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3748      	adds	r7, #72	; 0x48
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	1fe00fff 	.word	0x1fe00fff
 80070e8:	18000f3a 	.word	0x18000f3a

080070ec <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fa:	0f9b      	lsrs	r3, r3, #30
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	0e9b      	lsrs	r3, r3, #26
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	0e1b      	lsrs	r3, r3, #24
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	b2da      	uxtb	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	0c1b      	lsrs	r3, r3, #16
 800712c:	b2da      	uxtb	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	b2da      	uxtb	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007142:	b2da      	uxtb	r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	b29a      	uxth	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007158:	0c1b      	lsrs	r3, r3, #16
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716a:	0bdb      	lsrs	r3, r3, #15
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800717c:	0b9b      	lsrs	r3, r3, #14
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718e:	0b5b      	lsrs	r3, r3, #13
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	b2da      	uxtb	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a0:	0b1b      	lsrs	r3, r3, #12
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d163      	bne.n	8007284 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c0:	009a      	lsls	r2, r3, #2
 80071c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071c6:	4013      	ands	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071cc:	0f92      	lsrs	r2, r2, #30
 80071ce:	431a      	orrs	r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d8:	0edb      	lsrs	r3, r3, #27
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ea:	0e1b      	lsrs	r3, r3, #24
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071fc:	0d5b      	lsrs	r3, r3, #21
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800720e:	0c9b      	lsrs	r3, r3, #18
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	b2da      	uxtb	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007220:	0bdb      	lsrs	r3, r3, #15
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	b2da      	uxtb	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	7e1b      	ldrb	r3, [r3, #24]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	3302      	adds	r3, #2
 8007244:	2201      	movs	r2, #1
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800724e:	fb03 f202 	mul.w	r2, r3, r2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	7a1b      	ldrb	r3, [r3, #8]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007270:	0a52      	lsrs	r2, r2, #9
 8007272:	fb03 f202 	mul.w	r2, r3, r2
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007280:	659a      	str	r2, [r3, #88]	; 0x58
 8007282:	e031      	b.n	80072e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d11d      	bne.n	80072c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800729a:	0c1b      	lsrs	r3, r3, #16
 800729c:	431a      	orrs	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	3301      	adds	r3, #1
 80072a8:	029a      	lsls	r2, r3, #10
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	659a      	str	r2, [r3, #88]	; 0x58
 80072c6:	e00f      	b.n	80072e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_SD_GetCardCSD+0x344>)
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e09d      	b.n	8007424 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ec:	0b9b      	lsrs	r3, r3, #14
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fe:	09db      	lsrs	r3, r3, #7
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007306:	b2da      	uxtb	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007316:	b2da      	uxtb	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007320:	0fdb      	lsrs	r3, r3, #31
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732c:	0f5b      	lsrs	r3, r3, #29
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	0e9b      	lsrs	r3, r3, #26
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007350:	0d9b      	lsrs	r3, r3, #22
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	b2da      	uxtb	r2, r3
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	0d5b      	lsrs	r3, r3, #21
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	b2da      	uxtb	r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007392:	0bdb      	lsrs	r3, r3, #15
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	b2da      	uxtb	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a6:	0b9b      	lsrs	r3, r3, #14
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ba:	0b5b      	lsrs	r3, r3, #13
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ce:	0b1b      	lsrs	r3, r3, #12
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e2:	0a9b      	lsrs	r3, r3, #10
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007412:	b2da      	uxtb	r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	1fe00fff 	.word	0x1fe00fff

08007434 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b094      	sub	sp, #80	; 0x50
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007444:	f107 0308 	add.w	r3, r7, #8
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fbd4 	bl	8007bf8 <SD_SendSDStatus>
 8007450:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007454:	2b00      	cmp	r3, #0
 8007456:	d011      	beq.n	800747c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a4f      	ldr	r2, [pc, #316]	; (800759c <HAL_SD_GetCardStatus+0x168>)
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800747a:	e070      	b.n	800755e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	099b      	lsrs	r3, r3, #6
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	b2da      	uxtb	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	0e1b      	lsrs	r3, r3, #24
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	061a      	lsls	r2, r3, #24
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	0e1b      	lsrs	r3, r3, #24
 80074d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	0d1b      	lsrs	r3, r3, #20
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007504:	b29a      	uxth	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	b29b      	uxth	r3, r3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	b29b      	uxth	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b29a      	uxth	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	0a9b      	lsrs	r3, r3, #10
 800751a:	b2db      	uxtb	r3, r3
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	b2da      	uxtb	r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	b2da      	uxtb	r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	b2da      	uxtb	r2, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	b2da      	uxtb	r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	0e1b      	lsrs	r3, r3, #24
 8007558:	b2da      	uxtb	r2, r3
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007566:	4618      	mov	r0, r3
 8007568:	f003 f92e 	bl	800a7c8 <SDMMC_CmdBlockLength>
 800756c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800756e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00d      	beq.n	8007590 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a08      	ldr	r2, [pc, #32]	; (800759c <HAL_SD_GetCardStatus+0x168>)
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007590:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007594:	4618      	mov	r0, r3
 8007596:	3750      	adds	r7, #80	; 0x50
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	1fe00fff 	.word	0x1fe00fff

080075a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075f8:	b5b0      	push	{r4, r5, r7, lr}
 80075fa:	b090      	sub	sp, #64	; 0x40
 80075fc:	af04      	add	r7, sp, #16
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2203      	movs	r2, #3
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007614:	2b03      	cmp	r3, #3
 8007616:	d02e      	beq.n	8007676 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761e:	d106      	bne.n	800762e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
 800762c:	e029      	b.n	8007682 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007634:	d10a      	bne.n	800764c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fbd6 	bl	8007de8 <SD_WideBus_Enable>
 800763c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
 800764a:	e01a      	b.n	8007682 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fc13 	bl	8007e7e <SD_WideBus_Disable>
 8007658:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
 8007666:	e00c      	b.n	8007682 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
 8007674:	e005      	b.n	8007682 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a60      	ldr	r2, [pc, #384]	; (8007810 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007698:	e097      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800769a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800769e:	f7fd feb9 	bl	8005414 <HAL_RCCEx_GetPeriphCLKFreq>
 80076a2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8086 	beq.w	80077b8 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695a      	ldr	r2, [r3, #20]
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	4952      	ldr	r1, [pc, #328]	; (8007814 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80076ca:	fba1 1303 	umull	r1, r3, r1, r3
 80076ce:	0e1b      	lsrs	r3, r3, #24
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d303      	bcc.n	80076dc <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	e05a      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e4:	d103      	bne.n	80076ee <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e051      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f6:	d126      	bne.n	8007746 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10e      	bne.n	800771e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	4a45      	ldr	r2, [pc, #276]	; (8007818 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d906      	bls.n	8007716 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	4a42      	ldr	r2, [pc, #264]	; (8007814 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	0e5b      	lsrs	r3, r3, #25
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e03d      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	e039      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <HAL_SD_ConfigWideBusOperation+0x220>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d906      	bls.n	800773e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	4a38      	ldr	r2, [pc, #224]	; (8007814 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	0e5b      	lsrs	r3, r3, #25
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e029      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	61fb      	str	r3, [r7, #28]
 8007744:	e025      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10e      	bne.n	800776c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	4a32      	ldr	r2, [pc, #200]	; (800781c <HAL_SD_ConfigWideBusOperation+0x224>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d906      	bls.n	8007764 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e016      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e012      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	4a28      	ldr	r2, [pc, #160]	; (800781c <HAL_SD_ConfigWideBusOperation+0x224>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d906      	bls.n	800778c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	4a24      	ldr	r2, [pc, #144]	; (8007814 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	0e1b      	lsrs	r3, r3, #24
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e002      	b.n	8007792 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681d      	ldr	r5, [r3, #0]
 800779c:	466c      	mov	r4, sp
 800779e:	f107 0318 	add.w	r3, r7, #24
 80077a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077b0:	4628      	mov	r0, r5
 80077b2:	f002 ff2b 	bl	800a60c <SDMMC_Init>
 80077b6:	e008      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077d2:	4618      	mov	r0, r3
 80077d4:	f002 fff8 	bl	800a7c8 <SDMMC_CmdBlockLength>
 80077d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <HAL_SD_ConfigWideBusOperation+0x218>)
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007806:	4618      	mov	r0, r3
 8007808:	3730      	adds	r7, #48	; 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	bdb0      	pop	{r4, r5, r7, pc}
 800780e:	bf00      	nop
 8007810:	1fe00fff 	.word	0x1fe00fff
 8007814:	55e63b89 	.word	0x55e63b89
 8007818:	02faf080 	.word	0x02faf080
 800781c:	017d7840 	.word	0x017d7840

08007820 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800782c:	f107 030c 	add.w	r3, r7, #12
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fab0 	bl	8007d98 <SD_SendStatus>
 8007838:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	0a5b      	lsrs	r3, r3, #9
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007856:	693b      	ldr	r3, [r7, #16]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007860:	b5b0      	push	{r4, r5, r7, lr}
 8007862:	b090      	sub	sp, #64	; 0x40
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007868:	2301      	movs	r3, #1
 800786a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f002 ff25 	bl	800a6c0 <SDMMC_GetPowerState>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800787c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007880:	e0a9      	b.n	80079d6 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	2b03      	cmp	r3, #3
 8007888:	d02e      	beq.n	80078e8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f003 f96a 	bl	800ab68 <SDMMC_CmdSendCID>
 8007894:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800789c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789e:	e09a      	b.n	80079d6 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f002 ff4f 	bl	800a74a <SDMMC_GetResponse>
 80078ac:	4602      	mov	r2, r0
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2104      	movs	r1, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f002 ff46 	bl	800a74a <SDMMC_GetResponse>
 80078be:	4602      	mov	r2, r0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2108      	movs	r1, #8
 80078ca:	4618      	mov	r0, r3
 80078cc:	f002 ff3d 	bl	800a74a <SDMMC_GetResponse>
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	210c      	movs	r1, #12
 80078dc:	4618      	mov	r0, r3
 80078de:	f002 ff34 	bl	800a74a <SDMMC_GetResponse>
 80078e2:	4602      	mov	r2, r0
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d00d      	beq.n	800790c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f107 020e 	add.w	r2, r7, #14
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f003 f973 	bl	800abe6 <SDMMC_CmdSetRelAdd>
 8007900:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <SD_InitCard+0xac>
    {
      return errorstate;
 8007908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790a:	e064      	b.n	80079d6 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	2b03      	cmp	r3, #3
 8007912:	d036      	beq.n	8007982 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	461a      	mov	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f003 f93c 	bl	800aba6 <SDMMC_CmdSendCSD>
 800792e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <SD_InitCard+0xda>
    {
      return errorstate;
 8007936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007938:	e04d      	b.n	80079d6 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f002 ff02 	bl	800a74a <SDMMC_GetResponse>
 8007946:	4602      	mov	r2, r0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2104      	movs	r1, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f002 fef9 	bl	800a74a <SDMMC_GetResponse>
 8007958:	4602      	mov	r2, r0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2108      	movs	r1, #8
 8007964:	4618      	mov	r0, r3
 8007966:	f002 fef0 	bl	800a74a <SDMMC_GetResponse>
 800796a:	4602      	mov	r2, r0
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	210c      	movs	r1, #12
 8007976:	4618      	mov	r0, r3
 8007978:	f002 fee7 	bl	800a74a <SDMMC_GetResponse>
 800797c:	4602      	mov	r2, r0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2104      	movs	r1, #4
 8007988:	4618      	mov	r0, r3
 800798a:	f002 fede 	bl	800a74a <SDMMC_GetResponse>
 800798e:	4603      	mov	r3, r0
 8007990:	0d1a      	lsrs	r2, r3, #20
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007996:	f107 0310 	add.w	r3, r7, #16
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fba5 	bl	80070ec <HAL_SD_GetCardCSD>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079ac:	e013      	b.n	80079d6 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6819      	ldr	r1, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b6:	041b      	lsls	r3, r3, #16
 80079b8:	2200      	movs	r2, #0
 80079ba:	461c      	mov	r4, r3
 80079bc:	4615      	mov	r5, r2
 80079be:	4622      	mov	r2, r4
 80079c0:	462b      	mov	r3, r5
 80079c2:	4608      	mov	r0, r1
 80079c4:	f002 ffe6 	bl	800a994 <SDMMC_CmdSelDesel>
 80079c8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <SD_InitCard+0x174>
  {
    return errorstate;
 80079d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d2:	e000      	b.n	80079d6 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3740      	adds	r7, #64	; 0x40
 80079da:	46bd      	mov	sp, r7
 80079dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080079e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	2300      	movs	r3, #0
 80079f2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80079f4:	f7fa fb2e 	bl	8002054 <HAL_GetTick>
 80079f8:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 ffec 	bl	800a9dc <SDMMC_CmdGoIdleState>
 8007a04:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <SD_PowerON+0x30>
  {
    return errorstate;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	e0ed      	b.n	8007bec <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 ffff 	bl	800aa18 <SDMMC_CmdOperCond>
 8007a1a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f002 ffd5 	bl	800a9dc <SDMMC_CmdGoIdleState>
 8007a32:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <SD_PowerON+0x64>
    {
      return errorstate;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	e0d6      	b.n	8007bec <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d137      	bne.n	8007abc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2100      	movs	r1, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	f003 f800 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007a58:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d02d      	beq.n	8007abc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a64:	e0c2      	b.n	8007bec <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f002 fff3 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007a72:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <SD_PowerON+0x9e>
    {
      return errorstate;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	e0b6      	b.n	8007bec <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	495c      	ldr	r1, [pc, #368]	; (8007bf4 <SD_PowerON+0x214>)
 8007a84:	4618      	mov	r0, r3
 8007a86:	f003 f80a 	bl	800aa9e <SDMMC_CmdAppOperCommand>
 8007a8a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a96:	e0a9      	b.n	8007bec <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f002 fe53 	bl	800a74a <SDMMC_GetResponse>
 8007aa4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	0fdb      	lsrs	r3, r3, #31
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <SD_PowerON+0xd2>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <SD_PowerON+0xd4>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61bb      	str	r3, [r7, #24]

    count++;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d802      	bhi.n	8007acc <SD_PowerON+0xec>
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0cc      	beq.n	8007a66 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d902      	bls.n	8007adc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ada:	e087      	b.n	8007bec <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d07e      	beq.n	8007be4 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d17a      	bne.n	8007bea <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d075      	beq.n	8007bea <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b04:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0208 	orr.w	r2, r2, #8
 8007b14:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f003 f8ca 	bl	800acb4 <SDMMC_CmdVoltageSwitch>
 8007b20:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <SD_PowerON+0x162>
        {
          return errorstate;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e05f      	b.n	8007bec <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b2c:	f7fa fa92 	bl	8002054 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b3a:	d102      	bne.n	8007b42 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b40:	e054      	b.n	8007bec <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b50:	d1ec      	bne.n	8007b2c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6a:	d002      	beq.n	8007b72 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b70:	e03c      	b.n	8007bec <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007b72:	2001      	movs	r0, #1
 8007b74:	f000 fa9e 	bl	80080b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0204 	orr.w	r2, r2, #4
 8007b86:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007b88:	e00a      	b.n	8007ba0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b8a:	f7fa fa63 	bl	8002054 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b98:	d102      	bne.n	8007ba0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007b9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b9e:	e025      	b.n	8007bec <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bae:	d1ec      	bne.n	8007b8a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc8:	d102      	bne.n	8007bd0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bce:	e00d      	b.n	8007bec <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2213      	movs	r2, #19
 8007bd6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
 8007be2:	e002      	b.n	8007bea <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	c1100000 	.word	0xc1100000

08007bf8 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c02:	f7fa fa27 	bl	8002054 <HAL_GetTick>
 8007c06:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fd99 	bl	800a74a <SDMMC_GetResponse>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c22:	d102      	bne.n	8007c2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c28:	e0b0      	b.n	8007d8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2140      	movs	r1, #64	; 0x40
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 fdc9 	bl	800a7c8 <SDMMC_CmdBlockLength>
 8007c36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	e0a0      	b.n	8007d8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f002 fefe 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007c5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	e08d      	b.n	8007d8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007c7a:	2360      	movs	r3, #96	; 0x60
 8007c7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f107 0208 	add.w	r2, r7, #8
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fd6b 	bl	800a770 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f002 ffe6 	bl	800ac70 <SDMMC_CmdStatusRegister>
 8007ca4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02b      	beq.n	8007d04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	e069      	b.n	8007d8c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d013      	beq.n	8007cee <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cca:	e00d      	b.n	8007ce8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 fcc5 	bl	800a660 <SDMMC_ReadFIFO>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	601a      	str	r2, [r3, #0]
        pData++;
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	3304      	adds	r3, #4
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	2b07      	cmp	r3, #7
 8007cec:	d9ee      	bls.n	8007ccc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cee:	f7fa f9b1 	bl	8002054 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfc:	d102      	bne.n	8007d04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007cfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d02:	e043      	b.n	8007d8c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0d2      	beq.n	8007cb8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d20:	2308      	movs	r3, #8
 8007d22:	e033      	b.n	8007d8c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d32:	2302      	movs	r3, #2
 8007d34:	e02a      	b.n	8007d8c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007d44:	2320      	movs	r3, #32
 8007d46:	e021      	b.n	8007d8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f002 fc87 	bl	800a660 <SDMMC_ReadFIFO>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	601a      	str	r2, [r3, #0]
    pData++;
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d5e:	f7fa f979 	bl	8002054 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6c:	d102      	bne.n	8007d74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d72:	e00b      	b.n	8007d8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e2      	bne.n	8007d48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a03      	ldr	r2, [pc, #12]	; (8007d94 <SD_SendSDStatus+0x19c>)
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3730      	adds	r7, #48	; 0x30
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	18000f3a 	.word	0x18000f3a

08007d98 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dac:	e018      	b.n	8007de0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db6:	041b      	lsls	r3, r3, #16
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f002 ff35 	bl	800ac2a <SDMMC_CmdSendStatus>
 8007dc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	e009      	b.n	8007de0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 fcb9 	bl	800a74a <SDMMC_GetResponse>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fca3 	bl	800a74a <SDMMC_GetResponse>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e0e:	d102      	bne.n	8007e16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e14:	e02f      	b.n	8007e76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f879 	bl	8007f14 <SD_FindSCR>
 8007e22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	e023      	b.n	8007e76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01c      	beq.n	8007e72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f002 fe07 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007e4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	e00f      	b.n	8007e76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f002 fe3e 	bl	800aade <SDMMC_CmdBusWidth>
 8007e62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	e003      	b.n	8007e76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e001      	b.n	8007e76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 fc58 	bl	800a74a <SDMMC_GetResponse>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ea4:	d102      	bne.n	8007eac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eaa:	e02f      	b.n	8007f0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007eac:	f107 030c 	add.w	r3, r7, #12
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f82e 	bl	8007f14 <SD_FindSCR>
 8007eb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	e023      	b.n	8007f0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01c      	beq.n	8007f08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f002 fdbc 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007ee0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	e00f      	b.n	8007f0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 fdf3 	bl	800aade <SDMMC_CmdBusWidth>
 8007ef8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	e003      	b.n	8007f0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e001      	b.n	8007f0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	; 0x38
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f1e:	f7fa f899 	bl	8002054 <HAL_GetTick>
 8007f22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2108      	movs	r1, #8
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f002 fc44 	bl	800a7c8 <SDMMC_CmdBlockLength>
 8007f40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	e0ad      	b.n	80080a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f002 fd7d 	bl	800aa58 <SDMMC_CmdAppCommand>
 8007f5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	e09e      	b.n	80080a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f70:	2308      	movs	r3, #8
 8007f72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007f74:	2330      	movs	r3, #48	; 0x30
 8007f76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f107 0210 	add.w	r2, r7, #16
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 fbee 	bl	800a770 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 fdc3 	bl	800ab24 <SDMMC_CmdSendSCR>
 8007f9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d027      	beq.n	8007ff6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	e07e      	b.n	80080a8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d113      	bne.n	8007fe0 <SD_FindSCR+0xcc>
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d110      	bne.n	8007fe0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f002 fb4c 	bl	800a660 <SDMMC_ReadFIFO>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f002 fb45 	bl	800a660 <SDMMC_ReadFIFO>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	60fb      	str	r3, [r7, #12]
      index++;
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	3301      	adds	r3, #1
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fe0:	f7fa f838 	bl	8002054 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fee:	d102      	bne.n	8007ff6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ff4:	e058      	b.n	80080a8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ffc:	f240 532a 	movw	r3, #1322	; 0x52a
 8008000:	4013      	ands	r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0d1      	beq.n	8007faa <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2208      	movs	r2, #8
 800801a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800801c:	2308      	movs	r3, #8
 800801e:	e043      	b.n	80080a8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2202      	movs	r2, #2
 8008034:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008036:	2302      	movs	r3, #2
 8008038:	e036      	b.n	80080a8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2220      	movs	r2, #32
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008050:	2320      	movs	r3, #32
 8008052:	e029      	b.n	80080a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <SD_FindSCR+0x19c>)
 800805a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	061a      	lsls	r2, r3, #24
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008068:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008072:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0e1b      	lsrs	r3, r3, #24
 8008078:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	601a      	str	r2, [r3, #0]
    scr++;
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	3304      	adds	r3, #4
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	061a      	lsls	r2, r3, #24
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008090:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800809a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	0e1b      	lsrs	r3, r3, #24
 80080a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3738      	adds	r7, #56	; 0x38
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	18000f3a 	.word	0x18000f3a

080080b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e095      	b.n	8008208 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ec:	d009      	beq.n	8008102 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	61da      	str	r2, [r3, #28]
 80080f4:	e005      	b.n	8008102 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f9 fd3f 	bl	8001ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008138:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008142:	d902      	bls.n	800814a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e002      	b.n	8008150 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800814a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008158:	d007      	beq.n	800816a <HAL_SPI_Init+0xa0>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008162:	d002      	beq.n	800816a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	ea42 0103 	orr.w	r1, r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	f003 0204 	and.w	r2, r3, #4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80081e6:	ea42 0103 	orr.w	r1, r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e049      	b.n	80082b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7f9 fcf4 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fa62 	bl	8008718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e049      	b.n	8008364 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d106      	bne.n	80082ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f841 	bl	800836c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2202      	movs	r2, #2
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f000 fa0b 	bl	8008718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b02      	cmp	r3, #2
 8008394:	d122      	bne.n	80083dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d11b      	bne.n	80083dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f06f 0202 	mvn.w	r2, #2
 80083ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f98a 	bl	80086dc <HAL_TIM_IC_CaptureCallback>
 80083c8:	e005      	b.n	80083d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f97c 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f98d 	bl	80086f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d122      	bne.n	8008430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d11b      	bne.n	8008430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0204 	mvn.w	r2, #4
 8008400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f960 	bl	80086dc <HAL_TIM_IC_CaptureCallback>
 800841c:	e005      	b.n	800842a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f952 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f963 	bl	80086f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b08      	cmp	r3, #8
 800843c:	d122      	bne.n	8008484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b08      	cmp	r3, #8
 800844a:	d11b      	bne.n	8008484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0208 	mvn.w	r2, #8
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2204      	movs	r2, #4
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f936 	bl	80086dc <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f928 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f939 	bl	80086f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b10      	cmp	r3, #16
 8008490:	d122      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b10      	cmp	r3, #16
 800849e:	d11b      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0210 	mvn.w	r2, #16
 80084a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2208      	movs	r2, #8
 80084ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f90c 	bl	80086dc <HAL_TIM_IC_CaptureCallback>
 80084c4:	e005      	b.n	80084d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8fe 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f90f 	bl	80086f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d10e      	bne.n	8008504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d107      	bne.n	8008504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0201 	mvn.w	r2, #1
 80084fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8d8 	bl	80086b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	2b80      	cmp	r3, #128	; 0x80
 8008510:	d10e      	bne.n	8008530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d107      	bne.n	8008530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcec 	bl	8008f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d10e      	bne.n	800855e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854a:	2b80      	cmp	r3, #128	; 0x80
 800854c:	d107      	bne.n	800855e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fcdf 	bl	8008f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d10e      	bne.n	800858a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008576:	2b40      	cmp	r3, #64	; 0x40
 8008578:	d107      	bne.n	800858a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8bd 	bl	8008704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b20      	cmp	r3, #32
 8008596:	d10e      	bne.n	80085b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d107      	bne.n	80085b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f06f 0220 	mvn.w	r2, #32
 80085ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc9f 	bl	8008ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_TIM_OC_ConfigChannel+0x1e>
 80085da:	2302      	movs	r3, #2
 80085dc:	e066      	b.n	80086ac <HAL_TIM_OC_ConfigChannel+0xec>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b14      	cmp	r3, #20
 80085ea:	d857      	bhi.n	800869c <HAL_TIM_OC_ConfigChannel+0xdc>
 80085ec:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008649 	.word	0x08008649
 80085f8:	0800869d 	.word	0x0800869d
 80085fc:	0800869d 	.word	0x0800869d
 8008600:	0800869d 	.word	0x0800869d
 8008604:	08008657 	.word	0x08008657
 8008608:	0800869d 	.word	0x0800869d
 800860c:	0800869d 	.word	0x0800869d
 8008610:	0800869d 	.word	0x0800869d
 8008614:	08008665 	.word	0x08008665
 8008618:	0800869d 	.word	0x0800869d
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	08008673 	.word	0x08008673
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800869d 	.word	0x0800869d
 8008630:	0800869d 	.word	0x0800869d
 8008634:	08008681 	.word	0x08008681
 8008638:	0800869d 	.word	0x0800869d
 800863c:	0800869d 	.word	0x0800869d
 8008640:	0800869d 	.word	0x0800869d
 8008644:	0800868f 	.word	0x0800868f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f8fc 	bl	800884c <TIM_OC1_SetConfig>
      break;
 8008654:	e025      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f985 	bl	800896c <TIM_OC2_SetConfig>
      break;
 8008662:	e01e      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fa08 	bl	8008a80 <TIM_OC3_SetConfig>
      break;
 8008670:	e017      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fa89 	bl	8008b90 <TIM_OC4_SetConfig>
      break;
 800867e:	e010      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 faec 	bl	8008c64 <TIM_OC5_SetConfig>
      break;
 800868c:	e009      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fb49 	bl	8008d2c <TIM_OC6_SetConfig>
      break;
 800869a:	e002      	b.n	80086a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
      break;
 80086a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a40      	ldr	r2, [pc, #256]	; (800882c <TIM_Base_SetConfig+0x114>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d013      	beq.n	8008758 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008736:	d00f      	beq.n	8008758 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a3d      	ldr	r2, [pc, #244]	; (8008830 <TIM_Base_SetConfig+0x118>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00b      	beq.n	8008758 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a3c      	ldr	r2, [pc, #240]	; (8008834 <TIM_Base_SetConfig+0x11c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d007      	beq.n	8008758 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3b      	ldr	r2, [pc, #236]	; (8008838 <TIM_Base_SetConfig+0x120>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a3a      	ldr	r2, [pc, #232]	; (800883c <TIM_Base_SetConfig+0x124>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d108      	bne.n	800876a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2f      	ldr	r2, [pc, #188]	; (800882c <TIM_Base_SetConfig+0x114>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d01f      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008778:	d01b      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2c      	ldr	r2, [pc, #176]	; (8008830 <TIM_Base_SetConfig+0x118>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d017      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2b      	ldr	r2, [pc, #172]	; (8008834 <TIM_Base_SetConfig+0x11c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <TIM_Base_SetConfig+0x120>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00f      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a29      	ldr	r2, [pc, #164]	; (800883c <TIM_Base_SetConfig+0x124>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00b      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a28      	ldr	r2, [pc, #160]	; (8008840 <TIM_Base_SetConfig+0x128>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a27      	ldr	r2, [pc, #156]	; (8008844 <TIM_Base_SetConfig+0x12c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a26      	ldr	r2, [pc, #152]	; (8008848 <TIM_Base_SetConfig+0x130>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d108      	bne.n	80087c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a10      	ldr	r2, [pc, #64]	; (800882c <TIM_Base_SetConfig+0x114>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00f      	beq.n	8008810 <TIM_Base_SetConfig+0xf8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a12      	ldr	r2, [pc, #72]	; (800883c <TIM_Base_SetConfig+0x124>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00b      	beq.n	8008810 <TIM_Base_SetConfig+0xf8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a11      	ldr	r2, [pc, #68]	; (8008840 <TIM_Base_SetConfig+0x128>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <TIM_Base_SetConfig+0xf8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a10      	ldr	r2, [pc, #64]	; (8008844 <TIM_Base_SetConfig+0x12c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_Base_SetConfig+0xf8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a0f      	ldr	r2, [pc, #60]	; (8008848 <TIM_Base_SetConfig+0x130>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d103      	bne.n	8008818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	615a      	str	r2, [r3, #20]
}
 800881e:	bf00      	nop
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40000400 	.word	0x40000400
 8008834:	40000800 	.word	0x40000800
 8008838:	40000c00 	.word	0x40000c00
 800883c:	40013400 	.word	0x40013400
 8008840:	40014000 	.word	0x40014000
 8008844:	40014400 	.word	0x40014400
 8008848:	40014800 	.word	0x40014800

0800884c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f023 0302 	bic.w	r3, r3, #2
 8008898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a2c      	ldr	r2, [pc, #176]	; (8008958 <TIM_OC1_SetConfig+0x10c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00f      	beq.n	80088cc <TIM_OC1_SetConfig+0x80>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a2b      	ldr	r2, [pc, #172]	; (800895c <TIM_OC1_SetConfig+0x110>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00b      	beq.n	80088cc <TIM_OC1_SetConfig+0x80>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <TIM_OC1_SetConfig+0x114>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d007      	beq.n	80088cc <TIM_OC1_SetConfig+0x80>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a29      	ldr	r2, [pc, #164]	; (8008964 <TIM_OC1_SetConfig+0x118>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_OC1_SetConfig+0x80>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a28      	ldr	r2, [pc, #160]	; (8008968 <TIM_OC1_SetConfig+0x11c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d10c      	bne.n	80088e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f023 0308 	bic.w	r3, r3, #8
 80088d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0304 	bic.w	r3, r3, #4
 80088e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <TIM_OC1_SetConfig+0x10c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00f      	beq.n	800890e <TIM_OC1_SetConfig+0xc2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1a      	ldr	r2, [pc, #104]	; (800895c <TIM_OC1_SetConfig+0x110>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00b      	beq.n	800890e <TIM_OC1_SetConfig+0xc2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a19      	ldr	r2, [pc, #100]	; (8008960 <TIM_OC1_SetConfig+0x114>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d007      	beq.n	800890e <TIM_OC1_SetConfig+0xc2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a18      	ldr	r2, [pc, #96]	; (8008964 <TIM_OC1_SetConfig+0x118>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_OC1_SetConfig+0xc2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a17      	ldr	r2, [pc, #92]	; (8008968 <TIM_OC1_SetConfig+0x11c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d111      	bne.n	8008932 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800891c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	621a      	str	r2, [r3, #32]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0210 	bic.w	r2, r3, #16
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0320 	bic.w	r3, r3, #32
 80089ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a28      	ldr	r2, [pc, #160]	; (8008a6c <TIM_OC2_SetConfig+0x100>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC2_SetConfig+0x6c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a27      	ldr	r2, [pc, #156]	; (8008a70 <TIM_OC2_SetConfig+0x104>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d10d      	bne.n	80089f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <TIM_OC2_SetConfig+0x100>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00f      	beq.n	8008a1c <TIM_OC2_SetConfig+0xb0>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a1c      	ldr	r2, [pc, #112]	; (8008a70 <TIM_OC2_SetConfig+0x104>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00b      	beq.n	8008a1c <TIM_OC2_SetConfig+0xb0>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <TIM_OC2_SetConfig+0x108>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_OC2_SetConfig+0xb0>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <TIM_OC2_SetConfig+0x10c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_OC2_SetConfig+0xb0>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <TIM_OC2_SetConfig+0x110>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d113      	bne.n	8008a44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40013400 	.word	0x40013400
 8008a74:	40014000 	.word	0x40014000
 8008a78:	40014400 	.word	0x40014400
 8008a7c:	40014800 	.word	0x40014800

08008a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <TIM_OC3_SetConfig+0xfc>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_OC3_SetConfig+0x6a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <TIM_OC3_SetConfig+0x100>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d10d      	bne.n	8008b06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a1c      	ldr	r2, [pc, #112]	; (8008b7c <TIM_OC3_SetConfig+0xfc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00f      	beq.n	8008b2e <TIM_OC3_SetConfig+0xae>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <TIM_OC3_SetConfig+0x100>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00b      	beq.n	8008b2e <TIM_OC3_SetConfig+0xae>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a1a      	ldr	r2, [pc, #104]	; (8008b84 <TIM_OC3_SetConfig+0x104>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d007      	beq.n	8008b2e <TIM_OC3_SetConfig+0xae>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <TIM_OC3_SetConfig+0x108>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d003      	beq.n	8008b2e <TIM_OC3_SetConfig+0xae>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <TIM_OC3_SetConfig+0x10c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d113      	bne.n	8008b56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	621a      	str	r2, [r3, #32]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40013400 	.word	0x40013400
 8008b84:	40014000 	.word	0x40014000
 8008b88:	40014400 	.word	0x40014400
 8008b8c:	40014800 	.word	0x40014800

08008b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <TIM_OC4_SetConfig+0xc0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00f      	beq.n	8008c14 <TIM_OC4_SetConfig+0x84>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <TIM_OC4_SetConfig+0xc4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_OC4_SetConfig+0x84>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a16      	ldr	r2, [pc, #88]	; (8008c58 <TIM_OC4_SetConfig+0xc8>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_OC4_SetConfig+0x84>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC4_SetConfig+0xcc>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC4_SetConfig+0x84>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <TIM_OC4_SetConfig+0xd0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d109      	bne.n	8008c28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	019b      	lsls	r3, r3, #6
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	621a      	str	r2, [r3, #32]
}
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40012c00 	.word	0x40012c00
 8008c54:	40013400 	.word	0x40013400
 8008c58:	40014000 	.word	0x40014000
 8008c5c:	40014400 	.word	0x40014400
 8008c60:	40014800 	.word	0x40014800

08008c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <TIM_OC5_SetConfig+0xb4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00f      	beq.n	8008cde <TIM_OC5_SetConfig+0x7a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <TIM_OC5_SetConfig+0xb8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00b      	beq.n	8008cde <TIM_OC5_SetConfig+0x7a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <TIM_OC5_SetConfig+0xbc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d007      	beq.n	8008cde <TIM_OC5_SetConfig+0x7a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a14      	ldr	r2, [pc, #80]	; (8008d24 <TIM_OC5_SetConfig+0xc0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC5_SetConfig+0x7a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <TIM_OC5_SetConfig+0xc4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d109      	bne.n	8008cf2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	621a      	str	r2, [r3, #32]
}
 8008d0c:	bf00      	nop
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40013400 	.word	0x40013400
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800

08008d2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	051b      	lsls	r3, r3, #20
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a18      	ldr	r2, [pc, #96]	; (8008de4 <TIM_OC6_SetConfig+0xb8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00f      	beq.n	8008da8 <TIM_OC6_SetConfig+0x7c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <TIM_OC6_SetConfig+0xbc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00b      	beq.n	8008da8 <TIM_OC6_SetConfig+0x7c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a16      	ldr	r2, [pc, #88]	; (8008dec <TIM_OC6_SetConfig+0xc0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_OC6_SetConfig+0x7c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a15      	ldr	r2, [pc, #84]	; (8008df0 <TIM_OC6_SetConfig+0xc4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_OC6_SetConfig+0x7c>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <TIM_OC6_SetConfig+0xc8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d109      	bne.n	8008dbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	029b      	lsls	r3, r3, #10
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	621a      	str	r2, [r3, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	40012c00 	.word	0x40012c00
 8008de8:	40013400 	.word	0x40013400
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800

08008df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e065      	b.n	8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	041b      	lsls	r3, r3, #16
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a16      	ldr	r2, [pc, #88]	; (8008eec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d004      	beq.n	8008ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d115      	bne.n	8008ece <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	051b      	lsls	r3, r3, #20
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40012c00 	.word	0x40012c00
 8008ef0:	40013400 	.word	0x40013400

08008ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e042      	b.n	8008fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7f8 fe85 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2224      	movs	r2, #36	; 0x24
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0201 	bic.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fcd0 	bl	8009918 <UART_SetConfig>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d101      	bne.n	8008f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e022      	b.n	8008fc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ffc0 	bl	8009f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0201 	orr.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f847 	bl	800a054 <UART_CheckIdleState>
 8008fc6:	4603      	mov	r3, r0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	f040 8084 	bne.w	80090f4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_UART_Transmit+0x28>
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e07c      	b.n	80090f6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_UART_Transmit+0x3a>
 8009006:	2302      	movs	r3, #2
 8009008:	e075      	b.n	80090f6 <HAL_UART_Transmit+0x126>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2221      	movs	r2, #33	; 0x21
 800901e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009022:	f7f9 f817 	bl	8002054 <HAL_GetTick>
 8009026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009040:	d108      	bne.n	8009054 <HAL_UART_Transmit+0x84>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e003      	b.n	800905c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009064:	e02d      	b.n	80090c2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2200      	movs	r2, #0
 800906e:	2180      	movs	r1, #128	; 0x80
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f001 f83a 	bl	800a0ea <UART_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e03a      	b.n	80090f6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	881a      	ldrh	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009092:	b292      	uxth	r2, r2
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	3302      	adds	r3, #2
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	e008      	b.n	80090b0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	b292      	uxth	r2, r2
 80090a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	3301      	adds	r3, #1
 80090ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1cb      	bne.n	8009066 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2140      	movs	r1, #64	; 0x40
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f001 f806 	bl	800a0ea <UART_WaitOnFlagUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e006      	b.n	80090f6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	e000      	b.n	80090f6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80090f4:	2302      	movs	r3, #2
  }
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b08a      	sub	sp, #40	; 0x28
 8009102:	af02      	add	r7, sp, #8
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009114:	2b20      	cmp	r3, #32
 8009116:	f040 80c1 	bne.w	800929c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_UART_Receive+0x28>
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e0b9      	b.n	800929e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_UART_Receive+0x3a>
 8009134:	2302      	movs	r3, #2
 8009136:	e0b2      	b.n	800929e <HAL_UART_Receive+0x1a0>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2222      	movs	r2, #34	; 0x22
 800914c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009156:	f7f8 ff7d 	bl	8002054 <HAL_GetTick>
 800915a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	88fa      	ldrh	r2, [r7, #6]
 8009160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009174:	d10e      	bne.n	8009194 <HAL_UART_Receive+0x96>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <HAL_UART_Receive+0x8c>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009188:	e02d      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009192:	e028      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10d      	bne.n	80091b8 <HAL_UART_Receive+0xba>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <HAL_UART_Receive+0xb0>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	22ff      	movs	r2, #255	; 0xff
 80091a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091ac:	e01b      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	227f      	movs	r2, #127	; 0x7f
 80091b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091b6:	e016      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091c0:	d10d      	bne.n	80091de <HAL_UART_Receive+0xe0>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <HAL_UART_Receive+0xd6>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	227f      	movs	r2, #127	; 0x7f
 80091ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091d2:	e008      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	223f      	movs	r2, #63	; 0x3f
 80091d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091dc:	e003      	b.n	80091e6 <HAL_UART_Receive+0xe8>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f6:	d108      	bne.n	800920a <HAL_UART_Receive+0x10c>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e003      	b.n	8009212 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800921a:	e033      	b.n	8009284 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	2120      	movs	r1, #32
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 ff5f 	bl	800a0ea <UART_WaitOnFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e033      	b.n	800929e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10c      	bne.n	8009256 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009242:	b29a      	uxth	r2, r3
 8009244:	8a7b      	ldrh	r3, [r7, #18]
 8009246:	4013      	ands	r3, r2
 8009248:	b29a      	uxth	r2, r3
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	3302      	adds	r3, #2
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	e00d      	b.n	8009272 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800925c:	b29b      	uxth	r3, r3
 800925e:	b2da      	uxtb	r2, r3
 8009260:	8a7b      	ldrh	r3, [r7, #18]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	4013      	ands	r3, r2
 8009266:	b2da      	uxtb	r2, r3
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	3301      	adds	r3, #1
 8009270:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009278:	b29b      	uxth	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800928a:	b29b      	uxth	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1c5      	bne.n	800921c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b0ba      	sub	sp, #232	; 0xe8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80092d6:	4013      	ands	r3, r2
 80092d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d11b      	bne.n	800931c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d015      	beq.n	800931c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 82d6 	beq.w	80098be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
      }
      return;
 800931a:	e2d0      	b.n	80098be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800931c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 811f 	beq.w	8009564 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009326:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800932a:	4b8b      	ldr	r3, [pc, #556]	; (8009558 <HAL_UART_IRQHandler+0x2b0>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d106      	bne.n	8009340 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009336:	4b89      	ldr	r3, [pc, #548]	; (800955c <HAL_UART_IRQHandler+0x2b4>)
 8009338:	4013      	ands	r3, r2
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8112 	beq.w	8009564 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d011      	beq.n	8009370 <HAL_UART_IRQHandler+0xc8>
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009366:	f043 0201 	orr.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d011      	beq.n	80093a0 <HAL_UART_IRQHandler+0xf8>
 800937c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2202      	movs	r2, #2
 800938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009396:	f043 0204 	orr.w	r2, r3, #4
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d011      	beq.n	80093d0 <HAL_UART_IRQHandler+0x128>
 80093ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2204      	movs	r2, #4
 80093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093c6:	f043 0202 	orr.w	r2, r3, #2
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d4:	f003 0308 	and.w	r3, r3, #8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d017      	beq.n	800940c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d105      	bne.n	80093f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80093ec:	4b5a      	ldr	r3, [pc, #360]	; (8009558 <HAL_UART_IRQHandler+0x2b0>)
 80093ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2208      	movs	r2, #8
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009402:	f043 0208 	orr.w	r2, r3, #8
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009414:	2b00      	cmp	r3, #0
 8009416:	d012      	beq.n	800943e <HAL_UART_IRQHandler+0x196>
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00c      	beq.n	800943e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800942c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009434:	f043 0220 	orr.w	r2, r3, #32
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 823c 	beq.w	80098c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d013      	beq.n	800947e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b00      	cmp	r3, #0
 8009460:	d105      	bne.n	800946e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009492:	2b40      	cmp	r3, #64	; 0x40
 8009494:	d005      	beq.n	80094a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800949a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d04f      	beq.n	8009542 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fee9 	bl	800a27a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b40      	cmp	r3, #64	; 0x40
 80094b4:	d141      	bne.n	800953a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1d9      	bne.n	80094b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d013      	beq.n	8009532 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950e:	4a14      	ldr	r2, [pc, #80]	; (8009560 <HAL_UART_IRQHandler+0x2b8>)
 8009510:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	4618      	mov	r0, r3
 8009518:	f7f8 ff39 	bl	800238e <HAL_DMA_Abort_IT>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d017      	beq.n	8009552 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	e00f      	b.n	8009552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9da 	bl	80098ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009538:	e00b      	b.n	8009552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9d6 	bl	80098ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	e007      	b.n	8009552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9d2 	bl	80098ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009550:	e1b7      	b.n	80098c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009552:	bf00      	nop
    return;
 8009554:	e1b5      	b.n	80098c2 <HAL_UART_IRQHandler+0x61a>
 8009556:	bf00      	nop
 8009558:	10000001 	.word	0x10000001
 800955c:	04000120 	.word	0x04000120
 8009560:	0800a347 	.word	0x0800a347

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	2b01      	cmp	r3, #1
 800956a:	f040 814a 	bne.w	8009802 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8143 	beq.w	8009802 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800957c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 813c 	beq.w	8009802 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	f040 80b5 	bne.w	800970c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8187 	beq.w	80098c6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f080 817f 	bcs.w	80098c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 8086 	bne.w	80096f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800960e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009612:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800961a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1da      	bne.n	80095e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800963e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800965a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800967a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800968e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e3      	bne.n	800966a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c0:	f023 0310 	bic.w	r3, r3, #16
 80096c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80096d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e4      	bne.n	80096b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f8 fdf3 	bl	80022d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8fb 	bl	8009900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800970a:	e0dc      	b.n	80098c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009718:	b29b      	uxth	r3, r3
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009726:	b29b      	uxth	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 80ce 	beq.w	80098ca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800972e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 80c9 	beq.w	80098ca <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800974c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800975a:	647b      	str	r3, [r7, #68]	; 0x44
 800975c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e4      	bne.n	8009738 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3308      	adds	r3, #8
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	623b      	str	r3, [r7, #32]
   return(result);
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009796:	633a      	str	r2, [r7, #48]	; 0x30
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e1      	bne.n	800976e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097e0:	61fb      	str	r3, [r7, #28]
 80097e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69b9      	ldr	r1, [r7, #24]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	617b      	str	r3, [r7, #20]
   return(result);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e4      	bne.n	80097be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f880 	bl	8009900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009800:	e063      	b.n	80098ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00e      	beq.n	800982c <HAL_UART_IRQHandler+0x584>
 800980e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d008      	beq.n	800982c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fdcf 	bl	800a3c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800982a:	e051      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800982c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009834:	2b00      	cmp	r3, #0
 8009836:	d014      	beq.n	8009862 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d008      	beq.n	8009862 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009854:	2b00      	cmp	r3, #0
 8009856:	d03a      	beq.n	80098ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
    }
    return;
 8009860:	e035      	b.n	80098ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <HAL_UART_IRQHandler+0x5da>
 800986e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fd79 	bl	800a372 <UART_EndTransmit_IT>
    return;
 8009880:	e026      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <HAL_UART_IRQHandler+0x5fa>
 800988e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fda8 	bl	800a3f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098a0:	e016      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d010      	beq.n	80098d0 <HAL_UART_IRQHandler+0x628>
 80098ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da0c      	bge.n	80098d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fd90 	bl	800a3dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098bc:	e008      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
      return;
 80098be:	bf00      	nop
 80098c0:	e006      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
    return;
 80098c2:	bf00      	nop
 80098c4:	e004      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
      return;
 80098c6:	bf00      	nop
 80098c8:	e002      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
      return;
 80098ca:	bf00      	nop
 80098cc:	e000      	b.n	80098d0 <HAL_UART_IRQHandler+0x628>
    return;
 80098ce:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80098d0:	37e8      	adds	r7, #232	; 0xe8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop

080098d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800991c:	b08c      	sub	sp, #48	; 0x30
 800991e:	af00      	add	r7, sp, #0
 8009920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	431a      	orrs	r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	431a      	orrs	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	4313      	orrs	r3, r2
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4baa      	ldr	r3, [pc, #680]	; (8009bf0 <UART_SetConfig+0x2d8>)
 8009948:	4013      	ands	r3, r2
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009950:	430b      	orrs	r3, r1
 8009952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a9f      	ldr	r2, [pc, #636]	; (8009bf4 <UART_SetConfig+0x2dc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d004      	beq.n	8009984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009980:	4313      	orrs	r3, r2
 8009982:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800998e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009998:	430b      	orrs	r3, r1
 800999a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	f023 010f 	bic.w	r1, r3, #15
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a90      	ldr	r2, [pc, #576]	; (8009bf8 <UART_SetConfig+0x2e0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d125      	bne.n	8009a08 <UART_SetConfig+0xf0>
 80099bc:	4b8f      	ldr	r3, [pc, #572]	; (8009bfc <UART_SetConfig+0x2e4>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d81a      	bhi.n	8009a00 <UART_SetConfig+0xe8>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <UART_SetConfig+0xb8>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	080099e1 	.word	0x080099e1
 80099d4:	080099f1 	.word	0x080099f1
 80099d8:	080099e9 	.word	0x080099e9
 80099dc:	080099f9 	.word	0x080099f9
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099e6:	e116      	b.n	8009c16 <UART_SetConfig+0x2fe>
 80099e8:	2302      	movs	r3, #2
 80099ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ee:	e112      	b.n	8009c16 <UART_SetConfig+0x2fe>
 80099f0:	2304      	movs	r3, #4
 80099f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f6:	e10e      	b.n	8009c16 <UART_SetConfig+0x2fe>
 80099f8:	2308      	movs	r3, #8
 80099fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099fe:	e10a      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a00:	2310      	movs	r3, #16
 8009a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a06:	e106      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a7c      	ldr	r2, [pc, #496]	; (8009c00 <UART_SetConfig+0x2e8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d138      	bne.n	8009a84 <UART_SetConfig+0x16c>
 8009a12:	4b7a      	ldr	r3, [pc, #488]	; (8009bfc <UART_SetConfig+0x2e4>)
 8009a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a18:	f003 030c 	and.w	r3, r3, #12
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d82d      	bhi.n	8009a7c <UART_SetConfig+0x164>
 8009a20:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <UART_SetConfig+0x110>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009a5d 	.word	0x08009a5d
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a6d 	.word	0x08009a6d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a7d 	.word	0x08009a7d
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	08009a7d 	.word	0x08009a7d
 8009a50:	08009a7d 	.word	0x08009a7d
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a75 	.word	0x08009a75
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a62:	e0d8      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a64:	2302      	movs	r3, #2
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a6a:	e0d4      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a72:	e0d0      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a74:	2308      	movs	r3, #8
 8009a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a7a:	e0cc      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a82:	e0c8      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a5e      	ldr	r2, [pc, #376]	; (8009c04 <UART_SetConfig+0x2ec>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d125      	bne.n	8009ada <UART_SetConfig+0x1c2>
 8009a8e:	4b5b      	ldr	r3, [pc, #364]	; (8009bfc <UART_SetConfig+0x2e4>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a98:	2b30      	cmp	r3, #48	; 0x30
 8009a9a:	d016      	beq.n	8009aca <UART_SetConfig+0x1b2>
 8009a9c:	2b30      	cmp	r3, #48	; 0x30
 8009a9e:	d818      	bhi.n	8009ad2 <UART_SetConfig+0x1ba>
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	d00a      	beq.n	8009aba <UART_SetConfig+0x1a2>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d814      	bhi.n	8009ad2 <UART_SetConfig+0x1ba>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <UART_SetConfig+0x19a>
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d008      	beq.n	8009ac2 <UART_SetConfig+0x1aa>
 8009ab0:	e00f      	b.n	8009ad2 <UART_SetConfig+0x1ba>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ab8:	e0ad      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009aba:	2302      	movs	r3, #2
 8009abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac0:	e0a9      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac8:	e0a5      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009aca:	2308      	movs	r3, #8
 8009acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad0:	e0a1      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009ad2:	2310      	movs	r3, #16
 8009ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad8:	e09d      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a4a      	ldr	r2, [pc, #296]	; (8009c08 <UART_SetConfig+0x2f0>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d125      	bne.n	8009b30 <UART_SetConfig+0x218>
 8009ae4:	4b45      	ldr	r3, [pc, #276]	; (8009bfc <UART_SetConfig+0x2e4>)
 8009ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009aee:	2bc0      	cmp	r3, #192	; 0xc0
 8009af0:	d016      	beq.n	8009b20 <UART_SetConfig+0x208>
 8009af2:	2bc0      	cmp	r3, #192	; 0xc0
 8009af4:	d818      	bhi.n	8009b28 <UART_SetConfig+0x210>
 8009af6:	2b80      	cmp	r3, #128	; 0x80
 8009af8:	d00a      	beq.n	8009b10 <UART_SetConfig+0x1f8>
 8009afa:	2b80      	cmp	r3, #128	; 0x80
 8009afc:	d814      	bhi.n	8009b28 <UART_SetConfig+0x210>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <UART_SetConfig+0x1f0>
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d008      	beq.n	8009b18 <UART_SetConfig+0x200>
 8009b06:	e00f      	b.n	8009b28 <UART_SetConfig+0x210>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b0e:	e082      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b10:	2302      	movs	r3, #2
 8009b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b16:	e07e      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b1e:	e07a      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b20:	2308      	movs	r3, #8
 8009b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b26:	e076      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b2e:	e072      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a35      	ldr	r2, [pc, #212]	; (8009c0c <UART_SetConfig+0x2f4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d12a      	bne.n	8009b90 <UART_SetConfig+0x278>
 8009b3a:	4b30      	ldr	r3, [pc, #192]	; (8009bfc <UART_SetConfig+0x2e4>)
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b48:	d01a      	beq.n	8009b80 <UART_SetConfig+0x268>
 8009b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b4e:	d81b      	bhi.n	8009b88 <UART_SetConfig+0x270>
 8009b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b54:	d00c      	beq.n	8009b70 <UART_SetConfig+0x258>
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b5a:	d815      	bhi.n	8009b88 <UART_SetConfig+0x270>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <UART_SetConfig+0x250>
 8009b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b64:	d008      	beq.n	8009b78 <UART_SetConfig+0x260>
 8009b66:	e00f      	b.n	8009b88 <UART_SetConfig+0x270>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b6e:	e052      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b70:	2302      	movs	r3, #2
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b76:	e04e      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b7e:	e04a      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b86:	e046      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b8e:	e042      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a17      	ldr	r2, [pc, #92]	; (8009bf4 <UART_SetConfig+0x2dc>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d13a      	bne.n	8009c10 <UART_SetConfig+0x2f8>
 8009b9a:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <UART_SetConfig+0x2e4>)
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ba8:	d01a      	beq.n	8009be0 <UART_SetConfig+0x2c8>
 8009baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bae:	d81b      	bhi.n	8009be8 <UART_SetConfig+0x2d0>
 8009bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb4:	d00c      	beq.n	8009bd0 <UART_SetConfig+0x2b8>
 8009bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bba:	d815      	bhi.n	8009be8 <UART_SetConfig+0x2d0>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <UART_SetConfig+0x2b0>
 8009bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc4:	d008      	beq.n	8009bd8 <UART_SetConfig+0x2c0>
 8009bc6:	e00f      	b.n	8009be8 <UART_SetConfig+0x2d0>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bce:	e022      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bd6:	e01e      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bde:	e01a      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be6:	e016      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bee:	e012      	b.n	8009c16 <UART_SetConfig+0x2fe>
 8009bf0:	cfff69f3 	.word	0xcfff69f3
 8009bf4:	40008000 	.word	0x40008000
 8009bf8:	40013800 	.word	0x40013800
 8009bfc:	40021000 	.word	0x40021000
 8009c00:	40004400 	.word	0x40004400
 8009c04:	40004800 	.word	0x40004800
 8009c08:	40004c00 	.word	0x40004c00
 8009c0c:	40005000 	.word	0x40005000
 8009c10:	2310      	movs	r3, #16
 8009c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4aae      	ldr	r2, [pc, #696]	; (8009ed4 <UART_SetConfig+0x5bc>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	f040 8097 	bne.w	8009d50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d823      	bhi.n	8009c72 <UART_SetConfig+0x35a>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <UART_SetConfig+0x318>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c73 	.word	0x08009c73
 8009c38:	08009c5d 	.word	0x08009c5d
 8009c3c:	08009c73 	.word	0x08009c73
 8009c40:	08009c63 	.word	0x08009c63
 8009c44:	08009c73 	.word	0x08009c73
 8009c48:	08009c73 	.word	0x08009c73
 8009c4c:	08009c73 	.word	0x08009c73
 8009c50:	08009c6b 	.word	0x08009c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c54:	f7fa ff96 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8009c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c5a:	e010      	b.n	8009c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c5c:	4b9e      	ldr	r3, [pc, #632]	; (8009ed8 <UART_SetConfig+0x5c0>)
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c60:	e00d      	b.n	8009c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c62:	f7fa fef7 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c68:	e009      	b.n	8009c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c70:	e005      	b.n	8009c7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8130 	beq.w	8009ee6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	4a94      	ldr	r2, [pc, #592]	; (8009edc <UART_SetConfig+0x5c4>)
 8009c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d305      	bcc.n	8009cb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d903      	bls.n	8009cbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cbc:	e113      	b.n	8009ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60bb      	str	r3, [r7, #8]
 8009cc4:	60fa      	str	r2, [r7, #12]
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	4a84      	ldr	r2, [pc, #528]	; (8009edc <UART_SetConfig+0x5c4>)
 8009ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	603b      	str	r3, [r7, #0]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ce0:	f7f6 ff7a 	bl	8000bd8 <__aeabi_uldivmod>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4619      	mov	r1, r3
 8009cec:	f04f 0200 	mov.w	r2, #0
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	020b      	lsls	r3, r1, #8
 8009cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cfa:	0202      	lsls	r2, r0, #8
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	6849      	ldr	r1, [r1, #4]
 8009d00:	0849      	lsrs	r1, r1, #1
 8009d02:	2000      	movs	r0, #0
 8009d04:	460c      	mov	r4, r1
 8009d06:	4605      	mov	r5, r0
 8009d08:	eb12 0804 	adds.w	r8, r2, r4
 8009d0c:	eb43 0905 	adc.w	r9, r3, r5
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	469a      	mov	sl, r3
 8009d18:	4693      	mov	fp, r2
 8009d1a:	4652      	mov	r2, sl
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 ff59 	bl	8000bd8 <__aeabi_uldivmod>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d34:	d308      	bcc.n	8009d48 <UART_SetConfig+0x430>
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d3c:	d204      	bcs.n	8009d48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	60da      	str	r2, [r3, #12]
 8009d46:	e0ce      	b.n	8009ee6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d4e:	e0ca      	b.n	8009ee6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d58:	d166      	bne.n	8009e28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d5e:	2b08      	cmp	r3, #8
 8009d60:	d827      	bhi.n	8009db2 <UART_SetConfig+0x49a>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <UART_SetConfig+0x450>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	08009db3 	.word	0x08009db3
 8009d78:	08009da3 	.word	0x08009da3
 8009d7c:	08009db3 	.word	0x08009db3
 8009d80:	08009db3 	.word	0x08009db3
 8009d84:	08009db3 	.word	0x08009db3
 8009d88:	08009dab 	.word	0x08009dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d8c:	f7fa fefa 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d92:	e014      	b.n	8009dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d94:	f7fa ff0c 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8009d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d9a:	e010      	b.n	8009dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d9c:	4b4e      	ldr	r3, [pc, #312]	; (8009ed8 <UART_SetConfig+0x5c0>)
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009da0:	e00d      	b.n	8009dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009da2:	f7fa fe57 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8009da6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009da8:	e009      	b.n	8009dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009db0:	e005      	b.n	8009dbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 8090 	beq.w	8009ee6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	4a44      	ldr	r2, [pc, #272]	; (8009edc <UART_SetConfig+0x5c4>)
 8009dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd8:	005a      	lsls	r2, r3, #1
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	085b      	lsrs	r3, r3, #1
 8009de0:	441a      	add	r2, r3
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	2b0f      	cmp	r3, #15
 8009df0:	d916      	bls.n	8009e20 <UART_SetConfig+0x508>
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df8:	d212      	bcs.n	8009e20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f023 030f 	bic.w	r3, r3, #15
 8009e02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	8bfb      	ldrh	r3, [r7, #30]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	8bfa      	ldrh	r2, [r7, #30]
 8009e1c:	60da      	str	r2, [r3, #12]
 8009e1e:	e062      	b.n	8009ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e26:	e05e      	b.n	8009ee6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d828      	bhi.n	8009e82 <UART_SetConfig+0x56a>
 8009e30:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <UART_SetConfig+0x520>)
 8009e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e36:	bf00      	nop
 8009e38:	08009e5d 	.word	0x08009e5d
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	08009e83 	.word	0x08009e83
 8009e48:	08009e73 	.word	0x08009e73
 8009e4c:	08009e83 	.word	0x08009e83
 8009e50:	08009e83 	.word	0x08009e83
 8009e54:	08009e83 	.word	0x08009e83
 8009e58:	08009e7b 	.word	0x08009e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e5c:	f7fa fe92 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e62:	e014      	b.n	8009e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e64:	f7fa fea4 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8009e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e6a:	e010      	b.n	8009e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ed8 <UART_SetConfig+0x5c0>)
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e70:	e00d      	b.n	8009e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e72:	f7fa fdef 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8009e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e78:	e009      	b.n	8009e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e80:	e005      	b.n	8009e8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d028      	beq.n	8009ee6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	4a10      	ldr	r2, [pc, #64]	; (8009edc <UART_SetConfig+0x5c4>)
 8009e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	441a      	add	r2, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	2b0f      	cmp	r3, #15
 8009ebc:	d910      	bls.n	8009ee0 <UART_SetConfig+0x5c8>
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec4:	d20c      	bcs.n	8009ee0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60da      	str	r2, [r3, #12]
 8009ed0:	e009      	b.n	8009ee6 <UART_SetConfig+0x5ce>
 8009ed2:	bf00      	nop
 8009ed4:	40008000 	.word	0x40008000
 8009ed8:	00f42400 	.word	0x00f42400
 8009edc:	08011edc 	.word	0x08011edc
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2200      	movs	r2, #0
 8009f00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009f02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3730      	adds	r7, #48	; 0x30
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01a      	beq.n	800a026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00e:	d10a      	bne.n	800a026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af02      	add	r7, sp, #8
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a064:	f7f7 fff6 	bl	8002054 <HAL_GetTick>
 800a068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b08      	cmp	r3, #8
 800a076:	d10e      	bne.n	800a096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f82f 	bl	800a0ea <UART_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e025      	b.n	800a0e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d10e      	bne.n	800a0c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f819 	bl	800a0ea <UART_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e00f      	b.n	800a0e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b09c      	sub	sp, #112	; 0x70
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0fa:	e0a9      	b.n	800a250 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a102:	f000 80a5 	beq.w	800a250 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a106:	f7f7 ffa5 	bl	8002054 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <UART_WaitOnFlagUntilTimeout+0x32>
 800a116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d140      	bne.n	800a19e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a130:	667b      	str	r3, [r7, #100]	; 0x64
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a13c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e6      	bne.n	800a11c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3308      	adds	r3, #8
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	f023 0301 	bic.w	r3, r3, #1
 800a164:	663b      	str	r3, [r7, #96]	; 0x60
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a16e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e5      	bne.n	800a14e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e069      	b.n	800a272 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d051      	beq.n	800a250 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ba:	d149      	bne.n	800a250 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e6      	bne.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	613b      	str	r3, [r7, #16]
   return(result);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f023 0301 	bic.w	r3, r3, #1
 800a20e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a218:	623a      	str	r2, [r7, #32]
 800a21a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	69f9      	ldr	r1, [r7, #28]
 800a21e:	6a3a      	ldr	r2, [r7, #32]
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	61bb      	str	r3, [r7, #24]
   return(result);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e5      	bne.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2220      	movs	r2, #32
 800a238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e010      	b.n	800a272 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	69da      	ldr	r2, [r3, #28]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	4013      	ands	r3, r2
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	461a      	mov	r2, r3
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	f43f af46 	beq.w	800a0fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3770      	adds	r7, #112	; 0x70
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b095      	sub	sp, #84	; 0x54
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28a:	e853 3f00 	ldrex	r3, [r3]
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	461a      	mov	r2, r3
 800a29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a8:	e841 2300 	strex	r3, r2, [r1]
 800a2ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1e6      	bne.n	800a282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e3      	bne.n	800a2b4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d118      	bne.n	800a326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	60bb      	str	r3, [r7, #8]
   return(result);
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f023 0310 	bic.w	r3, r3, #16
 800a308:	647b      	str	r3, [r7, #68]	; 0x44
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a312:	61bb      	str	r3, [r7, #24]
 800a314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	6979      	ldr	r1, [r7, #20]
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	613b      	str	r3, [r7, #16]
   return(result);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e6      	bne.n	800a2f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a33a:	bf00      	nop
 800a33c:	3754      	adds	r7, #84	; 0x54
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fac1 	bl	80098ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b088      	sub	sp, #32
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	60bb      	str	r3, [r7, #8]
   return(result);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6979      	ldr	r1, [r7, #20]
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e6      	bne.n	800a37a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fa8c 	bl	80098d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3c0:	bf00      	nop
 800a3c2:	3720      	adds	r7, #32
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_UARTEx_DisableFifoMode+0x16>
 800a416:	2302      	movs	r3, #2
 800a418:	e027      	b.n	800a46a <HAL_UARTEx_DisableFifoMode+0x66>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2224      	movs	r2, #36	; 0x24
 800a426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0201 	bic.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a48a:	2302      	movs	r3, #2
 800a48c:	e02d      	b.n	800a4ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2224      	movs	r2, #36	; 0x24
 800a49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f850 	bl	800a570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a506:	2302      	movs	r3, #2
 800a508:	e02d      	b.n	800a566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2224      	movs	r2, #36	; 0x24
 800a516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0201 	bic.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f812 	bl	800a570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d108      	bne.n	800a592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a590:	e031      	b.n	800a5f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a592:	2308      	movs	r3, #8
 800a594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a596:	2308      	movs	r3, #8
 800a598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	0e5b      	lsrs	r3, r3, #25
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0307 	and.w	r3, r3, #7
 800a5a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	0f5b      	lsrs	r3, r3, #29
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0307 	and.w	r3, r3, #7
 800a5b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	7b3a      	ldrb	r2, [r7, #12]
 800a5be:	4911      	ldr	r1, [pc, #68]	; (800a604 <UARTEx_SetNbDataToProcess+0x94>)
 800a5c0:	5c8a      	ldrb	r2, [r1, r2]
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5c6:	7b3a      	ldrb	r2, [r7, #12]
 800a5c8:	490f      	ldr	r1, [pc, #60]	; (800a608 <UARTEx_SetNbDataToProcess+0x98>)
 800a5ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	7b7a      	ldrb	r2, [r7, #13]
 800a5dc:	4909      	ldr	r1, [pc, #36]	; (800a604 <UARTEx_SetNbDataToProcess+0x94>)
 800a5de:	5c8a      	ldrb	r2, [r1, r2]
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5e4:	7b7a      	ldrb	r2, [r7, #13]
 800a5e6:	4908      	ldr	r1, [pc, #32]	; (800a608 <UARTEx_SetNbDataToProcess+0x98>)
 800a5e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5f6:	bf00      	nop
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	08011ef4 	.word	0x08011ef4
 800a608:	08011efc 	.word	0x08011efc

0800a60c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a60c:	b084      	sub	sp, #16
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	f107 001c 	add.w	r0, r7, #28
 800a61a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a622:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a624:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a626:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a62a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a62e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a632:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <SDMMC_Init+0x50>)
 800a640:	4013      	ands	r3, r2
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	431a      	orrs	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	b004      	add	sp, #16
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	ffc02c00 	.word	0xffc02c00

0800a660 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f043 0203 	orr.w	r2, r3, #3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a6b0:	2002      	movs	r0, #2
 800a6b2:	f7f7 fcdb 	bl	800206c <HAL_Delay>

  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a6fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a700:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a706:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	4b06      	ldr	r3, [pc, #24]	; (800a72c <SDMMC_SendCommand+0x50>)
 800a714:	4013      	ands	r3, r2
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	fffee0c0 	.word	0xfffee0c0

0800a730 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	b2db      	uxtb	r3, r3
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3314      	adds	r3, #20
 800a758:	461a      	mov	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	4413      	add	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a796:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a79c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a7a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0

}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ff73 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fa:	2110      	movs	r1, #16
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fa7b 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a804:	69fb      	ldr	r3, [r7, #28]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b088      	sub	sp, #32
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a81c:	2311      	movs	r3, #17
 800a81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a820:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a82a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff ff50 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a840:	2111      	movs	r1, #17
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa58 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84a:	69fb      	ldr	r3, [r7, #28]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a862:	2312      	movs	r3, #18
 800a864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff ff2d 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a882:	f241 3288 	movw	r2, #5000	; 0x1388
 800a886:	2112      	movs	r1, #18
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa35 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a890:	69fb      	ldr	r3, [r7, #28]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3720      	adds	r7, #32
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b088      	sub	sp, #32
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a8a8:	2318      	movs	r3, #24
 800a8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8bc:	f107 0308 	add.w	r3, r7, #8
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7ff ff0a 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8cc:	2118      	movs	r1, #24
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa12 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a8d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d6:	69fb      	ldr	r3, [r7, #28]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3720      	adds	r7, #32
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a8ee:	2319      	movs	r3, #25
 800a8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff fee7 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a90e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a912:	2119      	movs	r1, #25
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f9ef 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a91a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a91c:	69fb      	ldr	r3, [r7, #28]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3720      	adds	r7, #32
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a934:	230c      	movs	r3, #12
 800a936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a93c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a946:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a960:	f107 0308 	add.w	r3, r7, #8
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff feb8 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a96c:	4a08      	ldr	r2, [pc, #32]	; (800a990 <SDMMC_CmdStopTransfer+0x68>)
 800a96e:	210c      	movs	r1, #12
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f9c1 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a976:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a984:	69fb      	ldr	r3, [r7, #28]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3720      	adds	r7, #32
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	05f5e100 	.word	0x05f5e100

0800a994 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08a      	sub	sp, #40	; 0x28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a9a4:	2307      	movs	r3, #7
 800a9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ac:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9b6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9b8:	f107 0310 	add.w	r3, r7, #16
 800a9bc:	4619      	mov	r1, r3
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff fe8c 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c8:	2107      	movs	r1, #7
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f994 	bl	800acf8 <SDMMC_GetCmdResp1>
 800a9d0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3728      	adds	r7, #40	; 0x28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff fe6b 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fbb8 	bl	800b17c <SDMMC_GetCmdError>
 800aa0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa20:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aa24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa26:	2308      	movs	r3, #8
 800aa28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa3a:	f107 0308 	add.w	r3, r7, #8
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff fe4b 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fb4a 	bl	800b0e0 <SDMMC_GetCmdResp7>
 800aa4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa66:	2337      	movs	r3, #55	; 0x37
 800aa68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa7a:	f107 0308 	add.w	r3, r7, #8
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff fe2b 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aa86:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa8a:	2137      	movs	r1, #55	; 0x37
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f933 	bl	800acf8 <SDMMC_GetCmdResp1>
 800aa92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa94:	69fb      	ldr	r3, [r7, #28]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3720      	adds	r7, #32
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b088      	sub	sp, #32
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aaac:	2329      	movs	r3, #41	; 0x29
 800aaae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aab6:	2300      	movs	r3, #0
 800aab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aabe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aac0:	f107 0308 	add.w	r3, r7, #8
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fe08 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fa4f 	bl	800af70 <SDMMC_GetCmdResp3>
 800aad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad4:	69fb      	ldr	r3, [r7, #28]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b088      	sub	sp, #32
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aaec:	2306      	movs	r3, #6
 800aaee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff fde8 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ab0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab10:	2106      	movs	r1, #6
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8f0 	bl	800acf8 <SDMMC_GetCmdResp1>
 800ab18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab30:	2333      	movs	r3, #51	; 0x33
 800ab32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fdc6 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ab50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab54:	2133      	movs	r1, #51	; 0x33
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f8ce 	bl	800acf8 <SDMMC_GetCmdResp1>
 800ab5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3720      	adds	r7, #32
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab74:	2302      	movs	r3, #2
 800ab76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab78:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab88:	f107 0308 	add.w	r3, r7, #8
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff fda4 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f9a1 	bl	800aedc <SDMMC_GetCmdResp2>
 800ab9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3720      	adds	r7, #32
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800abb4:	2309      	movs	r3, #9
 800abb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800abb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff fd84 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f981 	bl	800aedc <SDMMC_GetCmdResp2>
 800abda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abdc:	69fb      	ldr	r3, [r7, #28]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3720      	adds	r7, #32
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b088      	sub	sp, #32
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800abf4:	2303      	movs	r3, #3
 800abf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac08:	f107 0308 	add.w	r3, r7, #8
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fd64 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	2103      	movs	r1, #3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9e9 	bl	800aff0 <SDMMC_GetCmdResp6>
 800ac1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac20:	69fb      	ldr	r3, [r7, #28]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b088      	sub	sp, #32
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac38:	230d      	movs	r3, #13
 800ac3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff fd42 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ac58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5c:	210d      	movs	r1, #13
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f84a 	bl	800acf8 <SDMMC_GetCmdResp1>
 800ac64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac66:	69fb      	ldr	r3, [r7, #28]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ac7c:	230d      	movs	r3, #13
 800ac7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fd20 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ac9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca0:	210d      	movs	r1, #13
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f828 	bl	800acf8 <SDMMC_GetCmdResp1>
 800aca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acaa:	69fb      	ldr	r3, [r7, #28]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3720      	adds	r7, #32
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800acc0:	230b      	movs	r3, #11
 800acc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd4:	f107 0308 	add.w	r3, r7, #8
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff fcfe 	bl	800a6dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800ace0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace4:	210b      	movs	r1, #11
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f806 	bl	800acf8 <SDMMC_GetCmdResp1>
 800acec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acee:	69fb      	ldr	r3, [r7, #28]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	460b      	mov	r3, r1
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ad06:	4b70      	ldr	r3, [pc, #448]	; (800aec8 <SDMMC_GetCmdResp1+0x1d0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a70      	ldr	r2, [pc, #448]	; (800aecc <SDMMC_GetCmdResp1+0x1d4>)
 800ad0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad10:	0a5a      	lsrs	r2, r3, #9
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	fb02 f303 	mul.w	r3, r2, r3
 800ad18:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	1e5a      	subs	r2, r3, #1
 800ad1e:	61fa      	str	r2, [r7, #28]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad28:	e0c9      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	4b67      	ldr	r3, [pc, #412]	; (800aed0 <SDMMC_GetCmdResp1+0x1d8>)
 800ad34:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0ef      	beq.n	800ad1a <SDMMC_GetCmdResp1+0x22>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1ea      	bne.n	800ad1a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2204      	movs	r2, #4
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad56:	2304      	movs	r3, #4
 800ad58:	e0b1      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d004      	beq.n	800ad70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0a6      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a58      	ldr	r2, [pc, #352]	; (800aed4 <SDMMC_GetCmdResp1+0x1dc>)
 800ad74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fcda 	bl	800a730 <SDMMC_GetCommandResponse>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d001      	beq.n	800ad8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e099      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7ff fcdc 	bl	800a74a <SDMMC_GetResponse>
 800ad92:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <SDMMC_GetCmdResp1+0x1e0>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e08d      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da02      	bge.n	800adae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ada8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adac:	e087      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800adb8:	2340      	movs	r3, #64	; 0x40
 800adba:	e080      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800adc6:	2380      	movs	r3, #128	; 0x80
 800adc8:	e079      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800add4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800add8:	e071      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ade4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade8:	e069      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800adf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf8:	e061      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae08:	e059      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae18:	e051      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae28:	e049      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae38:	e041      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae48:	e039      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae58:	e031      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae68:	e029      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae78:	e021      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae88:	e019      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae98:	e011      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aea4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aea8:	e009      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aeb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aeb8:	e001      	b.n	800aebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aeba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3720      	adds	r7, #32
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20000004 	.word	0x20000004
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	00200045 	.word	0x00200045
 800aed4:	002000c5 	.word	0x002000c5
 800aed8:	fdffe008 	.word	0xfdffe008

0800aedc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aee4:	4b1f      	ldr	r3, [pc, #124]	; (800af64 <SDMMC_GetCmdResp2+0x88>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a1f      	ldr	r2, [pc, #124]	; (800af68 <SDMMC_GetCmdResp2+0x8c>)
 800aeea:	fba2 2303 	umull	r2, r3, r2, r3
 800aeee:	0a5b      	lsrs	r3, r3, #9
 800aef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef4:	fb02 f303 	mul.w	r3, r2, r3
 800aef8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	1e5a      	subs	r2, r3, #1
 800aefe:	60fa      	str	r2, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d102      	bne.n	800af0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af08:	e026      	b.n	800af58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0ef      	beq.n	800aefa <SDMMC_GetCmdResp2+0x1e>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1ea      	bne.n	800aefa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2204      	movs	r2, #4
 800af34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af36:	2304      	movs	r3, #4
 800af38:	e00e      	b.n	800af58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d004      	beq.n	800af50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e003      	b.n	800af58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a06      	ldr	r2, [pc, #24]	; (800af6c <SDMMC_GetCmdResp2+0x90>)
 800af54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	20000004 	.word	0x20000004
 800af68:	10624dd3 	.word	0x10624dd3
 800af6c:	002000c5 	.word	0x002000c5

0800af70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af78:	4b1a      	ldr	r3, [pc, #104]	; (800afe4 <SDMMC_GetCmdResp3+0x74>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a1a      	ldr	r2, [pc, #104]	; (800afe8 <SDMMC_GetCmdResp3+0x78>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0a5b      	lsrs	r3, r3, #9
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	fb02 f303 	mul.w	r3, r2, r3
 800af8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	60fa      	str	r2, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af9c:	e01b      	b.n	800afd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0ef      	beq.n	800af8e <SDMMC_GetCmdResp3+0x1e>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1ea      	bne.n	800af8e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2204      	movs	r2, #4
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afca:	2304      	movs	r3, #4
 800afcc:	e003      	b.n	800afd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a06      	ldr	r2, [pc, #24]	; (800afec <SDMMC_GetCmdResp3+0x7c>)
 800afd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20000004 	.word	0x20000004
 800afe8:	10624dd3 	.word	0x10624dd3
 800afec:	002000c5 	.word	0x002000c5

0800aff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	460b      	mov	r3, r1
 800affa:	607a      	str	r2, [r7, #4]
 800affc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800affe:	4b35      	ldr	r3, [pc, #212]	; (800b0d4 <SDMMC_GetCmdResp6+0xe4>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a35      	ldr	r2, [pc, #212]	; (800b0d8 <SDMMC_GetCmdResp6+0xe8>)
 800b004:	fba2 2303 	umull	r2, r3, r2, r3
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00e:	fb02 f303 	mul.w	r3, r2, r3
 800b012:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	1e5a      	subs	r2, r3, #1
 800b018:	61fa      	str	r2, [r7, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b01e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b022:	e052      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0ef      	beq.n	800b014 <SDMMC_GetCmdResp6+0x24>
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1ea      	bne.n	800b014 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d004      	beq.n	800b054 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2204      	movs	r2, #4
 800b04e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b050:	2304      	movs	r3, #4
 800b052:	e03a      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2201      	movs	r2, #1
 800b064:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b066:	2301      	movs	r3, #1
 800b068:	e02f      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fb60 	bl	800a730 <SDMMC_GetCommandResponse>
 800b070:	4603      	mov	r3, r0
 800b072:	461a      	mov	r2, r3
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	4293      	cmp	r3, r2
 800b078:	d001      	beq.n	800b07e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e025      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a16      	ldr	r2, [pc, #88]	; (800b0dc <SDMMC_GetCmdResp6+0xec>)
 800b082:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b084:	2100      	movs	r1, #0
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff fb5f 	bl	800a74a <SDMMC_GetResponse>
 800b08c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	0c1b      	lsrs	r3, r3, #16
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e011      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0b4:	e009      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c4:	e001      	b.n	800b0ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000004 	.word	0x20000004
 800b0d8:	10624dd3 	.word	0x10624dd3
 800b0dc:	002000c5 	.word	0x002000c5

0800b0e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0e8:	4b22      	ldr	r3, [pc, #136]	; (800b174 <SDMMC_GetCmdResp7+0x94>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a22      	ldr	r2, [pc, #136]	; (800b178 <SDMMC_GetCmdResp7+0x98>)
 800b0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f2:	0a5b      	lsrs	r3, r3, #9
 800b0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f8:	fb02 f303 	mul.w	r3, r2, r3
 800b0fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	1e5a      	subs	r2, r3, #1
 800b102:	60fa      	str	r2, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b10c:	e02c      	b.n	800b168 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b112:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0ef      	beq.n	800b0fe <SDMMC_GetCmdResp7+0x1e>
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1ea      	bne.n	800b0fe <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2204      	movs	r2, #4
 800b138:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b13a:	2304      	movs	r3, #4
 800b13c:	e014      	b.n	800b168 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d004      	beq.n	800b154 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b150:	2301      	movs	r3, #1
 800b152:	e009      	b.n	800b168 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2240      	movs	r2, #64	; 0x40
 800b164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b166:	2300      	movs	r3, #0

}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	20000004 	.word	0x20000004
 800b178:	10624dd3 	.word	0x10624dd3

0800b17c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b184:	4b11      	ldr	r3, [pc, #68]	; (800b1cc <SDMMC_GetCmdError+0x50>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a11      	ldr	r2, [pc, #68]	; (800b1d0 <SDMMC_GetCmdError+0x54>)
 800b18a:	fba2 2303 	umull	r2, r3, r2, r3
 800b18e:	0a5b      	lsrs	r3, r3, #9
 800b190:	f241 3288 	movw	r2, #5000	; 0x1388
 800b194:	fb02 f303 	mul.w	r3, r2, r3
 800b198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	60fa      	str	r2, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1a8:	e009      	b.n	800b1be <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0f1      	beq.n	800b19a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a06      	ldr	r2, [pc, #24]	; (800b1d4 <SDMMC_GetCmdError+0x58>)
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20000004 	.word	0x20000004
 800b1d0:	10624dd3 	.word	0x10624dd3
 800b1d4:	002000c5 	.word	0x002000c5

0800b1d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1d8:	b084      	sub	sp, #16
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	f107 001c 	add.w	r0, r7, #28
 800b1e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 faf6 	bl	800c7e8 <USB_CoreReset>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	639a      	str	r2, [r3, #56]	; 0x38
 800b212:	e005      	b.n	800b220 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b220:	7bfb      	ldrb	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b22c:	b004      	add	sp, #16
 800b22e:	4770      	bx	lr

0800b230 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	4613      	mov	r3, r2
 800b23c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d165      	bne.n	800b310 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4a3e      	ldr	r2, [pc, #248]	; (800b340 <USB_SetTurnaroundTime+0x110>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d906      	bls.n	800b25a <USB_SetTurnaroundTime+0x2a>
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	4a3d      	ldr	r2, [pc, #244]	; (800b344 <USB_SetTurnaroundTime+0x114>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d202      	bcs.n	800b25a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b254:	230f      	movs	r3, #15
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e05c      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4a39      	ldr	r2, [pc, #228]	; (800b344 <USB_SetTurnaroundTime+0x114>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d306      	bcc.n	800b270 <USB_SetTurnaroundTime+0x40>
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	4a38      	ldr	r2, [pc, #224]	; (800b348 <USB_SetTurnaroundTime+0x118>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d202      	bcs.n	800b270 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b26a:	230e      	movs	r3, #14
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e051      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4a35      	ldr	r2, [pc, #212]	; (800b348 <USB_SetTurnaroundTime+0x118>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d306      	bcc.n	800b286 <USB_SetTurnaroundTime+0x56>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	4a34      	ldr	r2, [pc, #208]	; (800b34c <USB_SetTurnaroundTime+0x11c>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d202      	bcs.n	800b286 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b280:	230d      	movs	r3, #13
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e046      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	4a30      	ldr	r2, [pc, #192]	; (800b34c <USB_SetTurnaroundTime+0x11c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d306      	bcc.n	800b29c <USB_SetTurnaroundTime+0x6c>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	4a2f      	ldr	r2, [pc, #188]	; (800b350 <USB_SetTurnaroundTime+0x120>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d802      	bhi.n	800b29c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b296:	230c      	movs	r3, #12
 800b298:	617b      	str	r3, [r7, #20]
 800b29a:	e03b      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4a2c      	ldr	r2, [pc, #176]	; (800b350 <USB_SetTurnaroundTime+0x120>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d906      	bls.n	800b2b2 <USB_SetTurnaroundTime+0x82>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	4a2b      	ldr	r2, [pc, #172]	; (800b354 <USB_SetTurnaroundTime+0x124>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d802      	bhi.n	800b2b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b2ac:	230b      	movs	r3, #11
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e030      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	4a27      	ldr	r2, [pc, #156]	; (800b354 <USB_SetTurnaroundTime+0x124>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d906      	bls.n	800b2c8 <USB_SetTurnaroundTime+0x98>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	4a26      	ldr	r2, [pc, #152]	; (800b358 <USB_SetTurnaroundTime+0x128>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d802      	bhi.n	800b2c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	e025      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4a23      	ldr	r2, [pc, #140]	; (800b358 <USB_SetTurnaroundTime+0x128>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d906      	bls.n	800b2de <USB_SetTurnaroundTime+0xae>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	4a22      	ldr	r2, [pc, #136]	; (800b35c <USB_SetTurnaroundTime+0x12c>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d202      	bcs.n	800b2de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2d8:	2309      	movs	r3, #9
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	e01a      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	4a1e      	ldr	r2, [pc, #120]	; (800b35c <USB_SetTurnaroundTime+0x12c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d306      	bcc.n	800b2f4 <USB_SetTurnaroundTime+0xc4>
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	4a1d      	ldr	r2, [pc, #116]	; (800b360 <USB_SetTurnaroundTime+0x130>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d802      	bhi.n	800b2f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2ee:	2308      	movs	r3, #8
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e00f      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4a1a      	ldr	r2, [pc, #104]	; (800b360 <USB_SetTurnaroundTime+0x130>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d906      	bls.n	800b30a <USB_SetTurnaroundTime+0xda>
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4a19      	ldr	r2, [pc, #100]	; (800b364 <USB_SetTurnaroundTime+0x134>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d202      	bcs.n	800b30a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b304:	2307      	movs	r3, #7
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e004      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b30a:	2306      	movs	r3, #6
 800b30c:	617b      	str	r3, [r7, #20]
 800b30e:	e001      	b.n	800b314 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b310:	2309      	movs	r3, #9
 800b312:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	029b      	lsls	r3, r3, #10
 800b328:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b32c:	431a      	orrs	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	00d8acbf 	.word	0x00d8acbf
 800b344:	00e4e1c0 	.word	0x00e4e1c0
 800b348:	00f42400 	.word	0x00f42400
 800b34c:	01067380 	.word	0x01067380
 800b350:	011a499f 	.word	0x011a499f
 800b354:	01312cff 	.word	0x01312cff
 800b358:	014ca43f 	.word	0x014ca43f
 800b35c:	016e3600 	.word	0x016e3600
 800b360:	01a6ab1f 	.word	0x01a6ab1f
 800b364:	01e84800 	.word	0x01e84800

0800b368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f043 0201 	orr.w	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f023 0201 	bic.w	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d115      	bne.n	800b3fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3da:	2001      	movs	r0, #1
 800b3dc:	f7f6 fe46 	bl	800206c <HAL_Delay>
      ms++;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f001 f985 	bl	800c6f6 <USB_GetMode>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d01e      	beq.n	800b430 <USB_SetCurrentMode+0x84>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b31      	cmp	r3, #49	; 0x31
 800b3f6:	d9f0      	bls.n	800b3da <USB_SetCurrentMode+0x2e>
 800b3f8:	e01a      	b.n	800b430 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d115      	bne.n	800b42c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b40c:	2001      	movs	r0, #1
 800b40e:	f7f6 fe2d 	bl	800206c <HAL_Delay>
      ms++;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3301      	adds	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 f96c 	bl	800c6f6 <USB_GetMode>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <USB_SetCurrentMode+0x84>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b31      	cmp	r3, #49	; 0x31
 800b428:	d9f0      	bls.n	800b40c <USB_SetCurrentMode+0x60>
 800b42a:	e001      	b.n	800b430 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e005      	b.n	800b43c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b32      	cmp	r3, #50	; 0x32
 800b434:	d101      	bne.n	800b43a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e000      	b.n	800b43c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b444:	b084      	sub	sp, #16
 800b446:	b580      	push	{r7, lr}
 800b448:	b086      	sub	sp, #24
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	e009      	b.n	800b478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3340      	adds	r3, #64	; 0x40
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	3301      	adds	r3, #1
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2b0e      	cmp	r3, #14
 800b47c:	d9f2      	bls.n	800b464 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d11c      	bne.n	800b4be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b492:	f043 0302 	orr.w	r3, r3, #2
 800b496:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e005      	b.n	800b4ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	680b      	ldr	r3, [r1, #0]
 800b4e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4ea:	2103      	movs	r1, #3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f959 	bl	800b7a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4f2:	2110      	movs	r1, #16
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f8f1 	bl	800b6dc <USB_FlushTxFifo>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f91d 	bl	800b744 <USB_FlushRxFifo>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51a:	461a      	mov	r2, r3
 800b51c:	2300      	movs	r3, #0
 800b51e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b526:	461a      	mov	r2, r3
 800b528:	2300      	movs	r3, #0
 800b52a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b532:	461a      	mov	r2, r3
 800b534:	2300      	movs	r3, #0
 800b536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b538:	2300      	movs	r3, #0
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	e043      	b.n	800b5c6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b554:	d118      	bne.n	800b588 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b568:	461a      	mov	r2, r3
 800b56a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	e013      	b.n	800b59a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	015a      	lsls	r2, r3, #5
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4413      	add	r3, r2
 800b57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57e:	461a      	mov	r2, r3
 800b580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	e008      	b.n	800b59a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b594:	461a      	mov	r2, r3
 800b596:	2300      	movs	r3, #0
 800b598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d3b7      	bcc.n	800b53e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	e043      	b.n	800b65c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5ea:	d118      	bne.n	800b61e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10a      	bne.n	800b608 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fe:	461a      	mov	r2, r3
 800b600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	e013      	b.n	800b630 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b614:	461a      	mov	r2, r3
 800b616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	e008      	b.n	800b630 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62a:	461a      	mov	r2, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63c:	461a      	mov	r2, r3
 800b63e:	2300      	movs	r3, #0
 800b640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64e:	461a      	mov	r2, r3
 800b650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3301      	adds	r3, #1
 800b65a:	613b      	str	r3, [r7, #16]
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	429a      	cmp	r2, r3
 800b662:	d3b7      	bcc.n	800b5d4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	f043 0210 	orr.w	r2, r3, #16
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699a      	ldr	r2, [r3, #24]
 800b696:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <USB_DevInit+0x294>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	f043 0208 	orr.w	r2, r3, #8
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d107      	bne.n	800b6c6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6be:	f043 0304 	orr.w	r3, r3, #4
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6d2:	b004      	add	sp, #16
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	803c3800 	.word	0x803c3800

0800b6dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4a13      	ldr	r2, [pc, #76]	; (800b740 <USB_FlushTxFifo+0x64>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d901      	bls.n	800b6fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e01b      	b.n	800b734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	daf2      	bge.n	800b6ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	019b      	lsls	r3, r3, #6
 800b70c:	f043 0220 	orr.w	r2, r3, #32
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4a08      	ldr	r2, [pc, #32]	; (800b740 <USB_FlushTxFifo+0x64>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d901      	bls.n	800b726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e006      	b.n	800b734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b20      	cmp	r3, #32
 800b730:	d0f0      	beq.n	800b714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	00030d40 	.word	0x00030d40

0800b744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3301      	adds	r3, #1
 800b754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4a11      	ldr	r2, [pc, #68]	; (800b7a0 <USB_FlushRxFifo+0x5c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d901      	bls.n	800b762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	e018      	b.n	800b794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	2b00      	cmp	r3, #0
 800b768:	daf2      	bge.n	800b750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2210      	movs	r2, #16
 800b772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <USB_FlushRxFifo+0x5c>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d901      	bls.n	800b786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b782:	2303      	movs	r3, #3
 800b784:	e006      	b.n	800b794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 0310 	and.w	r3, r3, #16
 800b78e:	2b10      	cmp	r3, #16
 800b790:	d0f0      	beq.n	800b774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	00030d40 	.word	0x00030d40

0800b7a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f003 0306 	and.w	r3, r3, #6
 800b7ee:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d002      	beq.n	800b7fc <USB_GetDevSpeed+0x26>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b06      	cmp	r3, #6
 800b7fa:	d102      	bne.n	800b802 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	75fb      	strb	r3, [r7, #23]
 800b800:	e001      	b.n	800b806 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b802:	230f      	movs	r3, #15
 800b804:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b806:	7dfb      	ldrb	r3, [r7, #23]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	785b      	ldrb	r3, [r3, #1]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d13a      	bne.n	800b8a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	f003 030f 	and.w	r3, r3, #15
 800b840:	2101      	movs	r1, #1
 800b842:	fa01 f303 	lsl.w	r3, r1, r3
 800b846:	b29b      	uxth	r3, r3
 800b848:	68f9      	ldr	r1, [r7, #12]
 800b84a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b84e:	4313      	orrs	r3, r2
 800b850:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d155      	bne.n	800b914 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	791b      	ldrb	r3, [r3, #4]
 800b882:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b884:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	059b      	lsls	r3, r3, #22
 800b88a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b88c:	4313      	orrs	r3, r2
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	0151      	lsls	r1, r2, #5
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	440a      	add	r2, r1
 800b896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b89e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	e036      	b.n	800b914 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ac:	69da      	ldr	r2, [r3, #28]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8bc:	041b      	lsls	r3, r3, #16
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d11a      	bne.n	800b914 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	791b      	ldrb	r3, [r3, #4]
 800b8f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	0151      	lsls	r1, r2, #5
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	440a      	add	r2, r1
 800b906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b90a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b90e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b912:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d161      	bne.n	800ba04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b956:	d11f      	bne.n	800b998 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	0151      	lsls	r1, r2, #5
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	440a      	add	r2, r1
 800b96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b972:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b976:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b996:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	f003 030f 	and.w	r3, r3, #15
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	43db      	mvns	r3, r3
 800b9b2:	68f9      	ldr	r1, [r7, #12]
 800b9b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c2:	69da      	ldr	r2, [r3, #28]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	f003 030f 	and.w	r3, r3, #15
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	43db      	mvns	r3, r3
 800b9d6:	68f9      	ldr	r1, [r7, #12]
 800b9d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9dc:	4013      	ands	r3, r2
 800b9de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	0159      	lsls	r1, r3, #5
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	440b      	add	r3, r1
 800b9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4b35      	ldr	r3, [pc, #212]	; (800bad4 <USB_DeactivateEndpoint+0x1b0>)
 800b9fe:	4013      	ands	r3, r2
 800ba00:	600b      	str	r3, [r1, #0]
 800ba02:	e060      	b.n	800bac6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba1a:	d11f      	bne.n	800ba5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	0151      	lsls	r1, r2, #5
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	440a      	add	r2, r1
 800ba32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	0151      	lsls	r1, r2, #5
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	440a      	add	r2, r1
 800ba52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	f003 030f 	and.w	r3, r3, #15
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba72:	041b      	lsls	r3, r3, #16
 800ba74:	43db      	mvns	r3, r3
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba86:	69da      	ldr	r2, [r3, #28]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	f003 030f 	and.w	r3, r3, #15
 800ba90:	2101      	movs	r1, #1
 800ba92:	fa01 f303 	lsl.w	r3, r1, r3
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	43db      	mvns	r3, r3
 800ba9a:	68f9      	ldr	r1, [r7, #12]
 800ba9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baa0:	4013      	ands	r3, r2
 800baa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	0159      	lsls	r1, r3, #5
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	440b      	add	r3, r1
 800baba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babe:	4619      	mov	r1, r3
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <USB_DeactivateEndpoint+0x1b4>)
 800bac2:	4013      	ands	r3, r2
 800bac4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	ec337800 	.word	0xec337800
 800bad8:	eff37800 	.word	0xeff37800

0800badc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	785b      	ldrb	r3, [r3, #1]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	f040 810a 	bne.w	800bd0e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d132      	bne.n	800bb68 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	0151      	lsls	r1, r2, #5
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	440a      	add	r2, r1
 800bb3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb60:	0cdb      	lsrs	r3, r3, #19
 800bb62:	04db      	lsls	r3, r3, #19
 800bb64:	6113      	str	r3, [r2, #16]
 800bb66:	e074      	b.n	800bc52 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	0151      	lsls	r1, r2, #5
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	440a      	add	r2, r1
 800bb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb82:	0cdb      	lsrs	r3, r3, #19
 800bb84:	04db      	lsls	r3, r3, #19
 800bb86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	0151      	lsls	r1, r2, #5
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	440a      	add	r2, r1
 800bb9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	6999      	ldr	r1, [r3, #24]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	440b      	add	r3, r1
 800bbc4:	1e59      	subs	r1, r3, #1
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	fbb1 f3f3 	udiv	r3, r1, r3
 800bbce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bbd0:	4b9e      	ldr	r3, [pc, #632]	; (800be4c <USB_EPStartXfer+0x370>)
 800bbd2:	400b      	ands	r3, r1
 800bbd4:	6939      	ldr	r1, [r7, #16]
 800bbd6:	0148      	lsls	r0, r1, #5
 800bbd8:	6979      	ldr	r1, [r7, #20]
 800bbda:	4401      	add	r1, r0
 800bbdc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbfa:	6939      	ldr	r1, [r7, #16]
 800bbfc:	0148      	lsls	r0, r1, #5
 800bbfe:	6979      	ldr	r1, [r7, #20]
 800bc00:	4401      	add	r1, r0
 800bc02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc06:	4313      	orrs	r3, r2
 800bc08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	791b      	ldrb	r3, [r3, #4]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d11f      	bne.n	800bc52 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bc30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	0151      	lsls	r1, r2, #5
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	440a      	add	r2, r1
 800bc48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc50:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	0151      	lsls	r1, r2, #5
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	440a      	add	r2, r1
 800bc68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc70:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	791b      	ldrb	r3, [r3, #4]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d015      	beq.n	800bca6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 8106 	beq.w	800be90 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	2101      	movs	r1, #1
 800bc96:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bca0:	4313      	orrs	r3, r2
 800bca2:	634b      	str	r3, [r1, #52]	; 0x34
 800bca4:	e0f4      	b.n	800be90 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d110      	bne.n	800bcd8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	015a      	lsls	r2, r3, #5
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	0151      	lsls	r1, r2, #5
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	440a      	add	r2, r1
 800bccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	e00f      	b.n	800bcf8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	015a      	lsls	r2, r3, #5
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	4413      	add	r3, r2
 800bce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	0151      	lsls	r1, r2, #5
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	440a      	add	r2, r1
 800bcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	6919      	ldr	r1, [r3, #16]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781a      	ldrb	r2, [r3, #0]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa94 	bl	800c234 <USB_WritePacket>
 800bd0c:	e0c0      	b.n	800be90 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	0151      	lsls	r1, r2, #5
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	440a      	add	r2, r1
 800bd24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd28:	0cdb      	lsrs	r3, r3, #19
 800bd2a:	04db      	lsls	r3, r3, #19
 800bd2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	0151      	lsls	r1, r2, #5
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	440a      	add	r2, r1
 800bd44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d123      	bne.n	800bda2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd66:	691a      	ldr	r2, [r3, #16]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd70:	6939      	ldr	r1, [r7, #16]
 800bd72:	0148      	lsls	r0, r1, #5
 800bd74:	6979      	ldr	r1, [r7, #20]
 800bd76:	4401      	add	r1, r0
 800bd78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	0151      	lsls	r1, r2, #5
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	440a      	add	r2, r1
 800bd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd9e:	6113      	str	r3, [r2, #16]
 800bda0:	e037      	b.n	800be12 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	4413      	add	r3, r2
 800bdac:	1e5a      	subs	r2, r3, #1
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	89fa      	ldrh	r2, [r7, #14]
 800bdbe:	fb03 f202 	mul.w	r2, r3, r2
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd2:	691a      	ldr	r2, [r3, #16]
 800bdd4:	89fb      	ldrh	r3, [r7, #14]
 800bdd6:	04d9      	lsls	r1, r3, #19
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <USB_EPStartXfer+0x370>)
 800bdda:	400b      	ands	r3, r1
 800bddc:	6939      	ldr	r1, [r7, #16]
 800bdde:	0148      	lsls	r0, r1, #5
 800bde0:	6979      	ldr	r1, [r7, #20]
 800bde2:	4401      	add	r1, r0
 800bde4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bde8:	4313      	orrs	r3, r2
 800bdea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be02:	6939      	ldr	r1, [r7, #16]
 800be04:	0148      	lsls	r0, r1, #5
 800be06:	6979      	ldr	r1, [r7, #20]
 800be08:	4401      	add	r1, r0
 800be0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be0e:	4313      	orrs	r3, r2
 800be10:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	791b      	ldrb	r3, [r3, #4]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d12a      	bne.n	800be70 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be26:	2b00      	cmp	r3, #0
 800be28:	d112      	bne.n	800be50 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	4413      	add	r3, r2
 800be32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	0151      	lsls	r1, r2, #5
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	440a      	add	r2, r1
 800be40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e011      	b.n	800be70 <USB_EPStartXfer+0x394>
 800be4c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	0151      	lsls	r1, r2, #5
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	440a      	add	r2, r1
 800be66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	015a      	lsls	r2, r3, #5
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	4413      	add	r3, r2
 800be78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	0151      	lsls	r1, r2, #5
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	440a      	add	r2, r1
 800be86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785b      	ldrb	r3, [r3, #1]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	f040 80ab 	bne.w	800c010 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d132      	bne.n	800bf28 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bedc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	0151      	lsls	r1, r2, #5
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	440a      	add	r2, r1
 800befc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	0151      	lsls	r1, r2, #5
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	440a      	add	r2, r1
 800bf1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf20:	0cdb      	lsrs	r3, r3, #19
 800bf22:	04db      	lsls	r3, r3, #19
 800bf24:	6113      	str	r3, [r2, #16]
 800bf26:	e04e      	b.n	800bfc6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	0151      	lsls	r1, r2, #5
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf42:	0cdb      	lsrs	r3, r3, #19
 800bf44:	04db      	lsls	r3, r3, #19
 800bf46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	699a      	ldr	r2, [r3, #24]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d903      	bls.n	800bf80 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	0151      	lsls	r1, r2, #5
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	440a      	add	r2, r1
 800bf96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	015a      	lsls	r2, r3, #5
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfac:	691a      	ldr	r2, [r3, #16]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	0148      	lsls	r0, r1, #5
 800bfba:	68f9      	ldr	r1, [r7, #12]
 800bfbc:	4401      	add	r1, r0
 800bfbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	015a      	lsls	r2, r3, #5
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	4413      	add	r3, r2
 800bfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	0151      	lsls	r1, r2, #5
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	440a      	add	r2, r1
 800bfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfe4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d071      	beq.n	800c0d2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	2101      	movs	r1, #1
 800c000:	fa01 f303 	lsl.w	r3, r1, r3
 800c004:	68f9      	ldr	r1, [r7, #12]
 800c006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c00a:	4313      	orrs	r3, r2
 800c00c:	634b      	str	r3, [r1, #52]	; 0x34
 800c00e:	e060      	b.n	800c0d2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	015a      	lsls	r2, r3, #5
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	4413      	add	r3, r2
 800c018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	0151      	lsls	r1, r2, #5
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	440a      	add	r2, r1
 800c026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c02a:	0cdb      	lsrs	r3, r3, #19
 800c02c:	04db      	lsls	r3, r3, #19
 800c02e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	015a      	lsls	r2, r3, #5
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	0151      	lsls	r1, r2, #5
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	440a      	add	r2, r1
 800c046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c04a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c04e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c052:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	699b      	ldr	r3, [r3, #24]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68da      	ldr	r2, [r3, #12]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	0151      	lsls	r1, r2, #5
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	440a      	add	r2, r1
 800c082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c08a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c098:	691a      	ldr	r2, [r3, #16]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	0148      	lsls	r0, r1, #5
 800c0a6:	68f9      	ldr	r1, [r7, #12]
 800c0a8:	4401      	add	r1, r0
 800c0aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d14a      	bne.n	800c194 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c116:	f040 8086 	bne.w	800c226 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	7812      	ldrb	r2, [r2, #0]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	440a      	add	r2, r1
 800c134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c13c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c16e:	4293      	cmp	r3, r2
 800c170:	d902      	bls.n	800c178 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	75fb      	strb	r3, [r7, #23]
          break;
 800c176:	e056      	b.n	800c226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c18c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c190:	d0e7      	beq.n	800c162 <USB_EPStopXfer+0x82>
 800c192:	e048      	b.n	800c226 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	015a      	lsls	r2, r3, #5
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	4413      	add	r3, r2
 800c19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1ac:	d13b      	bne.n	800c226 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	015a      	lsls	r2, r3, #5
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	7812      	ldrb	r2, [r2, #0]
 800c1c2:	0151      	lsls	r1, r2, #5
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	440a      	add	r2, r1
 800c1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	7812      	ldrb	r2, [r2, #0]
 800c1e6:	0151      	lsls	r1, r2, #5
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	440a      	add	r2, r1
 800c1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800c202:	4293      	cmp	r3, r2
 800c204:	d902      	bls.n	800c20c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	75fb      	strb	r3, [r7, #23]
          break;
 800c20a:	e00c      	b.n	800c226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c224:	d0e7      	beq.n	800c1f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	371c      	adds	r7, #28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c234:	b480      	push	{r7}
 800c236:	b089      	sub	sp, #36	; 0x24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	4611      	mov	r1, r2
 800c240:	461a      	mov	r2, r3
 800c242:	460b      	mov	r3, r1
 800c244:	71fb      	strb	r3, [r7, #7]
 800c246:	4613      	mov	r3, r2
 800c248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c252:	88bb      	ldrh	r3, [r7, #4]
 800c254:	3303      	adds	r3, #3
 800c256:	089b      	lsrs	r3, r3, #2
 800c258:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c25a:	2300      	movs	r3, #0
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	e018      	b.n	800c292 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c260:	79fb      	ldrb	r3, [r7, #7]
 800c262:	031a      	lsls	r2, r3, #12
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	4413      	add	r3, r2
 800c268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26c:	461a      	mov	r2, r3
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3301      	adds	r3, #1
 800c278:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	3301      	adds	r3, #1
 800c27e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	3301      	adds	r3, #1
 800c284:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	3301      	adds	r3, #1
 800c28a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	3301      	adds	r3, #1
 800c290:	61bb      	str	r3, [r7, #24]
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	429a      	cmp	r2, r3
 800c298:	d3e2      	bcc.n	800c260 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3724      	adds	r7, #36	; 0x24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b08b      	sub	sp, #44	; 0x2c
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c2be:	88fb      	ldrh	r3, [r7, #6]
 800c2c0:	089b      	lsrs	r3, r3, #2
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	623b      	str	r3, [r7, #32]
 800c2d2:	e014      	b.n	800c2fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	601a      	str	r2, [r3, #0]
    pDest++;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	623b      	str	r3, [r7, #32]
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	429a      	cmp	r2, r3
 800c304:	d3e6      	bcc.n	800c2d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c306:	8bfb      	ldrh	r3, [r7, #30]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d01e      	beq.n	800c34a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c30c:	2300      	movs	r3, #0
 800c30e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c316:	461a      	mov	r2, r3
 800c318:	f107 0310 	add.w	r3, r7, #16
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	fa22 f303 	lsr.w	r3, r2, r3
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	701a      	strb	r2, [r3, #0]
      i++;
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	3301      	adds	r3, #1
 800c336:	623b      	str	r3, [r7, #32]
      pDest++;
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	3301      	adds	r3, #1
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c33e:	8bfb      	ldrh	r3, [r7, #30]
 800c340:	3b01      	subs	r3, #1
 800c342:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c344:	8bfb      	ldrh	r3, [r7, #30]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1ea      	bne.n	800c320 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	372c      	adds	r7, #44	; 0x2c
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d12c      	bne.n	800c3ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	db12      	blt.n	800c3ac <USB_EPSetStall+0x54>
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00f      	beq.n	800c3ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	015a      	lsls	r2, r3, #5
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	4413      	add	r3, r2
 800c394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	0151      	lsls	r1, r2, #5
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	440a      	add	r2, r1
 800c3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	0151      	lsls	r1, r2, #5
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	440a      	add	r2, r1
 800c3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	e02b      	b.n	800c426 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	db12      	blt.n	800c406 <USB_EPSetStall+0xae>
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	0151      	lsls	r1, r2, #5
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	440a      	add	r2, r1
 800c3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c400:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c404:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	0151      	lsls	r1, r2, #5
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	440a      	add	r2, r1
 800c41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c424:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	785b      	ldrb	r3, [r3, #1]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d128      	bne.n	800c4a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	0151      	lsls	r1, r2, #5
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	440a      	add	r2, r1
 800c466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c46e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	791b      	ldrb	r3, [r3, #4]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d003      	beq.n	800c480 <USB_EPClearStall+0x4c>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	791b      	ldrb	r3, [r3, #4]
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d138      	bne.n	800c4f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	0151      	lsls	r1, r2, #5
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	440a      	add	r2, r1
 800c496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c49a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	e027      	b.n	800c4f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	0151      	lsls	r1, r2, #5
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	440a      	add	r2, r1
 800c4b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	791b      	ldrb	r3, [r3, #4]
 800c4c6:	2b03      	cmp	r3, #3
 800c4c8:	d003      	beq.n	800c4d2 <USB_EPClearStall+0x9e>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	791b      	ldrb	r3, [r3, #4]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d10f      	bne.n	800c4f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	0151      	lsls	r1, r2, #5
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	440a      	add	r2, r1
 800c4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c51e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c522:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c534:	68f9      	ldr	r1, [r7, #12]
 800c536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c53a:	4313      	orrs	r3, r2
 800c53c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c566:	f023 0303 	bic.w	r3, r3, #3
 800c56a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c57a:	f023 0302 	bic.w	r3, r3, #2
 800c57e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5a8:	f023 0303 	bic.w	r3, r3, #3
 800c5ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5bc:	f043 0302 	orr.w	r3, r3, #2
 800c5c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c612:	69db      	ldr	r3, [r3, #28]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	4013      	ands	r3, r2
 800c618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	0c1b      	lsrs	r3, r3, #16
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b085      	sub	sp, #20
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	69db      	ldr	r3, [r3, #28]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	4013      	ands	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	b29b      	uxth	r3, r3
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr

0800c65e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c65e:	b480      	push	{r7}
 800c660:	b085      	sub	sp, #20
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	460b      	mov	r3, r1
 800c668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	4013      	ands	r3, r2
 800c68a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c68c:	68bb      	ldr	r3, [r7, #8]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b087      	sub	sp, #28
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c6be:	78fb      	ldrb	r3, [r7, #3]
 800c6c0:	f003 030f 	and.w	r3, r3, #15
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ca:	01db      	lsls	r3, r3, #7
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c6d4:	78fb      	ldrb	r3, [r7, #3]
 800c6d6:	015a      	lsls	r2, r3, #5
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	371c      	adds	r7, #28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	f003 0301 	and.w	r3, r3, #1
}
 800c706:	4618      	mov	r0, r3
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c712:	b480      	push	{r7}
 800c714:	b085      	sub	sp, #20
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c730:	f023 0307 	bic.w	r3, r3, #7
 800c734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	333c      	adds	r3, #60	; 0x3c
 800c76a:	3304      	adds	r3, #4
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	4a1c      	ldr	r2, [pc, #112]	; (800c7e4 <USB_EP0_OutStart+0x8c>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d90a      	bls.n	800c78e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c788:	d101      	bne.n	800c78e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e024      	b.n	800c7d8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c794:	461a      	mov	r2, r3
 800c796:	2300      	movs	r3, #0
 800c798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7bc:	f043 0318 	orr.w	r3, r3, #24
 800c7c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c7d4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	4f54300a 	.word	0x4f54300a

0800c7e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	4a13      	ldr	r2, [pc, #76]	; (800c84c <USB_CoreReset+0x64>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d901      	bls.n	800c806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e01b      	b.n	800c83e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	daf2      	bge.n	800c7f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	f043 0201 	orr.w	r2, r3, #1
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3301      	adds	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4a09      	ldr	r2, [pc, #36]	; (800c84c <USB_CoreReset+0x64>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d901      	bls.n	800c830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e006      	b.n	800c83e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d0f0      	beq.n	800c81e <USB_CoreReset+0x36>

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	00030d40 	.word	0x00030d40

0800c850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c854:	4904      	ldr	r1, [pc, #16]	; (800c868 <MX_FATFS_Init+0x18>)
 800c856:	4805      	ldr	r0, [pc, #20]	; (800c86c <MX_FATFS_Init+0x1c>)
 800c858:	f001 fe44 	bl	800e4e4 <FATFS_LinkDriver>
 800c85c:	4603      	mov	r3, r0
 800c85e:	461a      	mov	r2, r3
 800c860:	4b03      	ldr	r3, [pc, #12]	; (800c870 <MX_FATFS_Init+0x20>)
 800c862:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c864:	bf00      	nop
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20000cc4 	.word	0x20000cc4
 800c86c:	08011f04 	.word	0x08011f04
 800c870:	20000cc0 	.word	0x20000cc0

0800c874 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c87e:	f000 f879 	bl	800c974 <BSP_SD_IsDetected>
 800c882:	4603      	mov	r3, r0
 800c884:	2b01      	cmp	r3, #1
 800c886:	d001      	beq.n	800c88c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c888:	2302      	movs	r3, #2
 800c88a:	e012      	b.n	800c8b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c88c:	480b      	ldr	r0, [pc, #44]	; (800c8bc <BSP_SD_Init+0x48>)
 800c88e:	f7f9 ffdd 	bl	800684c <HAL_SD_Init>
 800c892:	4603      	mov	r3, r0
 800c894:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d109      	bne.n	800c8b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c89c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c8a0:	4806      	ldr	r0, [pc, #24]	; (800c8bc <BSP_SD_Init+0x48>)
 800c8a2:	f7fa fea9 	bl	80075f8 <HAL_SD_ConfigWideBusOperation>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	2000041c 	.word	0x2000041c

0800c8c0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b088      	sub	sp, #32
 800c8c4:	af02      	add	r7, sp, #8
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	68f9      	ldr	r1, [r7, #12]
 800c8dc:	4806      	ldr	r0, [pc, #24]	; (800c8f8 <BSP_SD_ReadBlocks+0x38>)
 800c8de:	f7fa f8dd 	bl	8006a9c <HAL_SD_ReadBlocks>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	2000041c 	.word	0x2000041c

0800c8fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b088      	sub	sp, #32
 800c900:	af02      	add	r7, sp, #8
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	68f9      	ldr	r1, [r7, #12]
 800c918:	4806      	ldr	r0, [pc, #24]	; (800c934 <BSP_SD_WriteBlocks+0x38>)
 800c91a:	f7fa fa51 	bl	8006dc0 <HAL_SD_WriteBlocks>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	2000041c 	.word	0x2000041c

0800c938 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c93c:	4805      	ldr	r0, [pc, #20]	; (800c954 <BSP_SD_GetCardState+0x1c>)
 800c93e:	f7fa ff6f 	bl	8007820 <HAL_SD_GetCardState>
 800c942:	4603      	mov	r3, r0
 800c944:	2b04      	cmp	r3, #4
 800c946:	bf14      	ite	ne
 800c948:	2301      	movne	r3, #1
 800c94a:	2300      	moveq	r3, #0
 800c94c:	b2db      	uxtb	r3, r3
}
 800c94e:	4618      	mov	r0, r3
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	2000041c 	.word	0x2000041c

0800c958 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4803      	ldr	r0, [pc, #12]	; (800c970 <BSP_SD_GetCardInfo+0x18>)
 800c964:	f7fa fe1c 	bl	80075a0 <HAL_SD_GetCardInfo>
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	2000041c 	.word	0x2000041c

0800c974 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c97a:	2301      	movs	r3, #1
 800c97c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c97e:	f000 f80b 	bl	800c998 <BSP_PlatformIsDetected>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c988:	2300      	movs	r3, #0
 800c98a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	b2db      	uxtb	r3, r3
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c9a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c9a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c9aa:	f7f5 fee1 	bl	8002770 <HAL_GPIO_ReadPin>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
	...

0800c9c4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9ce:	4b0b      	ldr	r3, [pc, #44]	; (800c9fc <SD_CheckStatus+0x38>)
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9d4:	f7ff ffb0 	bl	800c938 <BSP_SD_GetCardState>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d107      	bne.n	800c9ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9de:	4b07      	ldr	r3, [pc, #28]	; (800c9fc <SD_CheckStatus+0x38>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f023 0301 	bic.w	r3, r3, #1
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <SD_CheckStatus+0x38>)
 800c9ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9ee:	4b03      	ldr	r3, [pc, #12]	; (800c9fc <SD_CheckStatus+0x38>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b2db      	uxtb	r3, r3
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	2000000d 	.word	0x2000000d

0800ca00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <SD_initialize+0x38>)
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca10:	f7ff ff30 	bl	800c874 <BSP_SD_Init>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d107      	bne.n	800ca2a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7ff ffd1 	bl	800c9c4 <SD_CheckStatus>
 800ca22:	4603      	mov	r3, r0
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <SD_initialize+0x38>)
 800ca28:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca2a:	4b03      	ldr	r3, [pc, #12]	; (800ca38 <SD_initialize+0x38>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	b2db      	uxtb	r3, r3
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	2000000d 	.word	0x2000000d

0800ca3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4603      	mov	r3, r0
 800ca44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff ffbb 	bl	800c9c4 <SD_CheckStatus>
 800ca4e:	4603      	mov	r3, r0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60b9      	str	r1, [r7, #8]
 800ca60:	607a      	str	r2, [r7, #4]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4603      	mov	r3, r0
 800ca66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ca6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	68b8      	ldr	r0, [r7, #8]
 800ca76:	f7ff ff23 	bl	800c8c0 <BSP_SD_ReadBlocks>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d107      	bne.n	800ca90 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ca80:	bf00      	nop
 800ca82:	f7ff ff59 	bl	800c938 <BSP_SD_GetCardState>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1fa      	bne.n	800ca82 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ca90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b086      	sub	sp, #24
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
 800caa6:	4603      	mov	r3, r0
 800caa8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800caae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	6879      	ldr	r1, [r7, #4]
 800cab6:	68b8      	ldr	r0, [r7, #8]
 800cab8:	f7ff ff20 	bl	800c8fc <BSP_SD_WriteBlocks>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d107      	bne.n	800cad2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cac2:	bf00      	nop
 800cac4:	f7ff ff38 	bl	800c938 <BSP_SD_GetCardState>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1fa      	bne.n	800cac4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08c      	sub	sp, #48	; 0x30
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	603a      	str	r2, [r7, #0]
 800cae6:	71fb      	strb	r3, [r7, #7]
 800cae8:	460b      	mov	r3, r1
 800caea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800caf2:	4b25      	ldr	r3, [pc, #148]	; (800cb88 <SD_ioctl+0xac>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <SD_ioctl+0x28>
 800cb00:	2303      	movs	r3, #3
 800cb02:	e03c      	b.n	800cb7e <SD_ioctl+0xa2>

  switch (cmd)
 800cb04:	79bb      	ldrb	r3, [r7, #6]
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	d834      	bhi.n	800cb74 <SD_ioctl+0x98>
 800cb0a:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <SD_ioctl+0x34>)
 800cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb10:	0800cb21 	.word	0x0800cb21
 800cb14:	0800cb29 	.word	0x0800cb29
 800cb18:	0800cb41 	.word	0x0800cb41
 800cb1c:	0800cb5b 	.word	0x0800cb5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb26:	e028      	b.n	800cb7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb28:	f107 0308 	add.w	r3, r7, #8
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff ff13 	bl	800c958 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb32:	6a3a      	ldr	r2, [r7, #32]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb3e:	e01c      	b.n	800cb7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb40:	f107 0308 	add.w	r3, r7, #8
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff ff07 	bl	800c958 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb58:	e00f      	b.n	800cb7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb5a:	f107 0308 	add.w	r3, r7, #8
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff fefa 	bl	800c958 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	0a5a      	lsrs	r2, r3, #9
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb72:	e002      	b.n	800cb7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cb74:	2304      	movs	r3, #4
 800cb76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cb7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3730      	adds	r7, #48	; 0x30
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	2000000d 	.word	0x2000000d

0800cb8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cb9c:	f002 fa58 	bl	800f050 <USBD_static_malloc>
 800cba0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d105      	bne.n	800cbb4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e066      	b.n	800cc82 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d119      	bne.n	800cbf8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbc8:	2202      	movs	r2, #2
 800cbca:	2181      	movs	r1, #129	; 0x81
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f002 f879 	bl	800ecc4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbdc:	2202      	movs	r2, #2
 800cbde:	2101      	movs	r1, #1
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f002 f86f 	bl	800ecc4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2210      	movs	r2, #16
 800cbf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cbf6:	e016      	b.n	800cc26 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cbf8:	2340      	movs	r3, #64	; 0x40
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	2181      	movs	r1, #129	; 0x81
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f002 f860 	bl	800ecc4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc0a:	2340      	movs	r3, #64	; 0x40
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	2101      	movs	r1, #1
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f002 f857 	bl	800ecc4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2210      	movs	r2, #16
 800cc22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc26:	2308      	movs	r3, #8
 800cc28:	2203      	movs	r2, #3
 800cc2a:	2182      	movs	r1, #130	; 0x82
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f002 f849 	bl	800ecc4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7c1b      	ldrb	r3, [r3, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d109      	bne.n	800cc70 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc66:	2101      	movs	r1, #1
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f002 f9a5 	bl	800efb8 <USBD_LL_PrepareReceive>
 800cc6e:	e007      	b.n	800cc80 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc76:	2340      	movs	r3, #64	; 0x40
 800cc78:	2101      	movs	r1, #1
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f002 f99c 	bl	800efb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cc96:	2181      	movs	r1, #129	; 0x81
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f002 f851 	bl	800ed40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cca4:	2101      	movs	r1, #1
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f002 f84a 	bl	800ed40 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ccb4:	2182      	movs	r1, #130	; 0x82
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f002 f842 	bl	800ed40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00e      	beq.n	800ccf4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cce6:	4618      	mov	r0, r3
 800cce8:	f002 f9c0 	bl	800f06c <USBD_static_free>
    pdev->pClassData = NULL;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
	...

0800cd00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd12:	2300      	movs	r3, #0
 800cd14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d101      	bne.n	800cd28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e0af      	b.n	800ce88 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d03f      	beq.n	800cdb4 <USBD_CDC_Setup+0xb4>
 800cd34:	2b20      	cmp	r3, #32
 800cd36:	f040 809f 	bne.w	800ce78 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	88db      	ldrh	r3, [r3, #6]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d02e      	beq.n	800cda0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	b25b      	sxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	da16      	bge.n	800cd7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cd58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	88d2      	ldrh	r2, [r2, #6]
 800cd5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	88db      	ldrh	r3, [r3, #6]
 800cd64:	2b07      	cmp	r3, #7
 800cd66:	bf28      	it	cs
 800cd68:	2307      	movcs	r3, #7
 800cd6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	89fa      	ldrh	r2, [r7, #14]
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f001 fae9 	bl	800e34a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cd78:	e085      	b.n	800ce86 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	785a      	ldrb	r2, [r3, #1]
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	88db      	ldrh	r3, [r3, #6]
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cd90:	6939      	ldr	r1, [r7, #16]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	88db      	ldrh	r3, [r3, #6]
 800cd96:	461a      	mov	r2, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f001 fb02 	bl	800e3a2 <USBD_CtlPrepareRx>
      break;
 800cd9e:	e072      	b.n	800ce86 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	7850      	ldrb	r0, [r2, #1]
 800cdac:	2200      	movs	r2, #0
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	4798      	blx	r3
      break;
 800cdb2:	e068      	b.n	800ce86 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	2b0b      	cmp	r3, #11
 800cdba:	d852      	bhi.n	800ce62 <USBD_CDC_Setup+0x162>
 800cdbc:	a201      	add	r2, pc, #4	; (adr r2, 800cdc4 <USBD_CDC_Setup+0xc4>)
 800cdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc2:	bf00      	nop
 800cdc4:	0800cdf5 	.word	0x0800cdf5
 800cdc8:	0800ce71 	.word	0x0800ce71
 800cdcc:	0800ce63 	.word	0x0800ce63
 800cdd0:	0800ce63 	.word	0x0800ce63
 800cdd4:	0800ce63 	.word	0x0800ce63
 800cdd8:	0800ce63 	.word	0x0800ce63
 800cddc:	0800ce63 	.word	0x0800ce63
 800cde0:	0800ce63 	.word	0x0800ce63
 800cde4:	0800ce63 	.word	0x0800ce63
 800cde8:	0800ce63 	.word	0x0800ce63
 800cdec:	0800ce1f 	.word	0x0800ce1f
 800cdf0:	0800ce49 	.word	0x0800ce49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d107      	bne.n	800ce10 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce00:	f107 030a 	add.w	r3, r7, #10
 800ce04:	2202      	movs	r2, #2
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f001 fa9e 	bl	800e34a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce0e:	e032      	b.n	800ce76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f001 fa28 	bl	800e268 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	75fb      	strb	r3, [r7, #23]
          break;
 800ce1c:	e02b      	b.n	800ce76 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d107      	bne.n	800ce3a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce2a:	f107 030d 	add.w	r3, r7, #13
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f001 fa89 	bl	800e34a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce38:	e01d      	b.n	800ce76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f001 fa13 	bl	800e268 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce42:	2303      	movs	r3, #3
 800ce44:	75fb      	strb	r3, [r7, #23]
          break;
 800ce46:	e016      	b.n	800ce76 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d00f      	beq.n	800ce74 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f001 fa06 	bl	800e268 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce60:	e008      	b.n	800ce74 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 f9ff 	bl	800e268 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ce6e:	e002      	b.n	800ce76 <USBD_CDC_Setup+0x176>
          break;
 800ce70:	bf00      	nop
 800ce72:	e008      	b.n	800ce86 <USBD_CDC_Setup+0x186>
          break;
 800ce74:	bf00      	nop
      }
      break;
 800ce76:	e006      	b.n	800ce86 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 f9f4 	bl	800e268 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce80:	2303      	movs	r3, #3
 800ce82:	75fb      	strb	r3, [r7, #23]
      break;
 800ce84:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3718      	adds	r7, #24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d101      	bne.n	800ceb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e04f      	b.n	800cf52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ceba:	78fa      	ldrb	r2, [r7, #3]
 800cebc:	6879      	ldr	r1, [r7, #4]
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	440b      	add	r3, r1
 800cec8:	3318      	adds	r3, #24
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d029      	beq.n	800cf24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ced0:	78fa      	ldrb	r2, [r7, #3]
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	3318      	adds	r3, #24
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	78f9      	ldrb	r1, [r7, #3]
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	460b      	mov	r3, r1
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	440b      	add	r3, r1
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4403      	add	r3, r0
 800cef0:	3348      	adds	r3, #72	; 0x48
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	fbb2 f1f3 	udiv	r1, r2, r3
 800cef8:	fb01 f303 	mul.w	r3, r1, r3
 800cefc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d110      	bne.n	800cf24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	440b      	add	r3, r1
 800cf10:	3318      	adds	r3, #24
 800cf12:	2200      	movs	r2, #0
 800cf14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf16:	78f9      	ldrb	r1, [r7, #3]
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f002 f813 	bl	800ef48 <USBD_LL_Transmit>
 800cf22:	e015      	b.n	800cf50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00b      	beq.n	800cf50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf4c:	78fa      	ldrb	r2, [r7, #3]
 800cf4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e015      	b.n	800cfa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f002 f851 	bl	800f028 <USBD_LL_GetRxDataSize>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e01b      	b.n	800d002 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d015      	beq.n	800d000 <USBD_CDC_EP0_RxReady+0x50>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfda:	2bff      	cmp	r3, #255	; 0xff
 800cfdc:	d010      	beq.n	800d000 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cfec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cff4:	b292      	uxth	r2, r2
 800cff6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	22ff      	movs	r2, #255	; 0xff
 800cffc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2243      	movs	r2, #67	; 0x43
 800d018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d01a:	4b03      	ldr	r3, [pc, #12]	; (800d028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	20000098 	.word	0x20000098

0800d02c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2243      	movs	r2, #67	; 0x43
 800d038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d03a:	4b03      	ldr	r3, [pc, #12]	; (800d048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr
 800d048:	20000054 	.word	0x20000054

0800d04c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2243      	movs	r2, #67	; 0x43
 800d058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d05a:	4b03      	ldr	r3, [pc, #12]	; (800d068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	200000dc 	.word	0x200000dc

0800d06c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	220a      	movs	r2, #10
 800d078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d07a:	4b03      	ldr	r3, [pc, #12]	; (800d088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	20000010 	.word	0x20000010

0800d08c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e004      	b.n	800d0aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b087      	sub	sp, #28
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60f8      	str	r0, [r7, #12]
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d0d0:	2303      	movs	r3, #3
 800d0d2:	e008      	b.n	800d0e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	371c      	adds	r7, #28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d102:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d10a:	2303      	movs	r3, #3
 800d10c:	e004      	b.n	800d118 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d13e:	2303      	movs	r3, #3
 800d140:	e016      	b.n	800d170 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	7c1b      	ldrb	r3, [r3, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d109      	bne.n	800d15e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d154:	2101      	movs	r1, #1
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 ff2e 	bl	800efb8 <USBD_LL_PrepareReceive>
 800d15c:	e007      	b.n	800d16e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d164:	2340      	movs	r3, #64	; 0x40
 800d166:	2101      	movs	r1, #1
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f001 ff25 	bl	800efb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4613      	mov	r3, r2
 800d184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d18c:	2303      	movs	r3, #3
 800d18e:	e01f      	b.n	800d1d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	79fa      	ldrb	r2, [r7, #7]
 800d1c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f001 fd01 	bl	800ebcc <USBD_LL_Init>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	e016      	b.n	800d21e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	f107 020e 	add.w	r2, r7, #14
 800d210:	4610      	mov	r0, r2
 800d212:	4798      	blx	r3
 800d214:	4602      	mov	r2, r0
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b082      	sub	sp, #8
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f001 fd16 	bl	800ec60 <USBD_LL_Start>
 800d234:	4603      	mov	r3, r0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d260:	2303      	movs	r3, #3
 800d262:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	78fa      	ldrb	r2, [r7, #3]
 800d278:	4611      	mov	r1, r2
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	4798      	blx	r3
 800d27e:	4603      	mov	r3, r0
 800d280:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d282:	7bfb      	ldrb	r3, [r7, #15]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d007      	beq.n	800d2b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	78fa      	ldrb	r2, [r7, #3]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	4798      	blx	r3
  }

  return USBD_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 ff90 	bl	800e1f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2f0:	f003 031f 	and.w	r3, r3, #31
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d01a      	beq.n	800d32e <USBD_LL_SetupStage+0x72>
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d822      	bhi.n	800d342 <USBD_LL_SetupStage+0x86>
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <USBD_LL_SetupStage+0x4a>
 800d300:	2b01      	cmp	r3, #1
 800d302:	d00a      	beq.n	800d31a <USBD_LL_SetupStage+0x5e>
 800d304:	e01d      	b.n	800d342 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fa62 	bl	800d7d8 <USBD_StdDevReq>
 800d314:	4603      	mov	r3, r0
 800d316:	73fb      	strb	r3, [r7, #15]
      break;
 800d318:	e020      	b.n	800d35c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 fac6 	bl	800d8b4 <USBD_StdItfReq>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]
      break;
 800d32c:	e016      	b.n	800d35c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fb05 	bl	800d946 <USBD_StdEPReq>
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
      break;
 800d340:	e00c      	b.n	800d35c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f001 fd2b 	bl	800edac <USBD_LL_StallEP>
 800d356:	4603      	mov	r3, r0
 800d358:	73fb      	strb	r3, [r7, #15]
      break;
 800d35a:	bf00      	nop
  }

  return ret;
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b086      	sub	sp, #24
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	60f8      	str	r0, [r7, #12]
 800d36e:	460b      	mov	r3, r1
 800d370:	607a      	str	r2, [r7, #4]
 800d372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d374:	7afb      	ldrb	r3, [r7, #11]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d138      	bne.n	800d3ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d380:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d388:	2b03      	cmp	r3, #3
 800d38a:	d14a      	bne.n	800d422 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	429a      	cmp	r2, r3
 800d396:	d913      	bls.n	800d3c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	689a      	ldr	r2, [r3, #8]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	1ad2      	subs	r2, r2, r3
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	bf28      	it	cs
 800d3b2:	4613      	movcs	r3, r2
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6879      	ldr	r1, [r7, #4]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f001 f80f 	bl	800e3dc <USBD_CtlContinueRx>
 800d3be:	e030      	b.n	800d422 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d10b      	bne.n	800d3e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f001 f80a 	bl	800e3fe <USBD_CtlSendStatus>
 800d3ea:	e01a      	b.n	800d422 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d114      	bne.n	800d422 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00e      	beq.n	800d422 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	7afa      	ldrb	r2, [r7, #11]
 800d40e:	4611      	mov	r1, r2
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	4798      	blx	r3
 800d414:	4603      	mov	r3, r0
 800d416:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	e000      	b.n	800d424 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	460b      	mov	r3, r1
 800d436:	607a      	str	r2, [r7, #4]
 800d438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d43a:	7afb      	ldrb	r3, [r7, #11]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d16b      	bne.n	800d518 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	3314      	adds	r3, #20
 800d444:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d156      	bne.n	800d4fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	689a      	ldr	r2, [r3, #8]
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d914      	bls.n	800d486 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	689a      	ldr	r2, [r3, #8]
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	1ad2      	subs	r2, r2, r3
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	461a      	mov	r2, r3
 800d470:	6879      	ldr	r1, [r7, #4]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f000 ff84 	bl	800e380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f001 fd9a 	bl	800efb8 <USBD_LL_PrepareReceive>
 800d484:	e03b      	b.n	800d4fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	68da      	ldr	r2, [r3, #12]
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d11c      	bne.n	800d4cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d316      	bcc.n	800d4cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d20f      	bcs.n	800d4cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 ff65 	bl	800e380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f001 fd77 	bl	800efb8 <USBD_LL_PrepareReceive>
 800d4ca:	e018      	b.n	800d4fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	d10b      	bne.n	800d4f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d005      	beq.n	800d4f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4f0:	2180      	movs	r1, #128	; 0x80
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f001 fc5a 	bl	800edac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 ff93 	bl	800e424 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d504:	2b01      	cmp	r3, #1
 800d506:	d122      	bne.n	800d54e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7ff fe98 	bl	800d23e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d516:	e01a      	b.n	800d54e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b03      	cmp	r3, #3
 800d522:	d114      	bne.n	800d54e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00e      	beq.n	800d54e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	7afa      	ldrb	r2, [r7, #11]
 800d53a:	4611      	mov	r1, r2
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	4798      	blx	r3
 800d540:	4603      	mov	r3, r0
 800d542:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d544:	7dfb      	ldrb	r3, [r7, #23]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	e000      	b.n	800d550 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d588:	2303      	movs	r3, #3
 800d58a:	e02f      	b.n	800d5ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00f      	beq.n	800d5b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d009      	beq.n	800d5b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6852      	ldr	r2, [r2, #4]
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5b6:	2340      	movs	r3, #64	; 0x40
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 fb81 	bl	800ecc4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2240      	movs	r2, #64	; 0x40
 800d5ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5d2:	2340      	movs	r3, #64	; 0x40
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	2180      	movs	r1, #128	; 0x80
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f001 fb73 	bl	800ecc4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2240      	movs	r2, #64	; 0x40
 800d5e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d622:	b2da      	uxtb	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2204      	movs	r2, #4
 800d62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b04      	cmp	r3, #4
 800d652:	d106      	bne.n	800d662 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d682:	2303      	movs	r3, #3
 800d684:	e012      	b.n	800d6ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d10b      	bne.n	800d6aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d005      	beq.n	800d6aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a4:	69db      	ldr	r3, [r3, #28]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e014      	b.n	800d6f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d10d      	bne.n	800d6f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d007      	beq.n	800d6f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	78fa      	ldrb	r2, [r7, #3]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d716:	2303      	movs	r3, #3
 800d718:	e014      	b.n	800d744 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b03      	cmp	r3, #3
 800d724:	d10d      	bne.n	800d742 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d007      	beq.n	800d742 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73a:	78fa      	ldrb	r2, [r7, #3]
 800d73c:	4611      	mov	r1, r2
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d009      	beq.n	800d790 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	6852      	ldr	r2, [r2, #4]
 800d788:	b2d2      	uxtb	r2, r2
 800d78a:	4611      	mov	r1, r2
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4798      	blx	r3
  }

  return USBD_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b087      	sub	sp, #28
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d7b8:	8a3b      	ldrh	r3, [r7, #16]
 800d7ba:	021b      	lsls	r3, r3, #8
 800d7bc:	b21a      	sxth	r2, r3
 800d7be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	b21b      	sxth	r3, r3
 800d7c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d7c8:	89fb      	ldrh	r3, [r7, #14]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	371c      	adds	r7, #28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
	...

0800d7d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7ee:	2b40      	cmp	r3, #64	; 0x40
 800d7f0:	d005      	beq.n	800d7fe <USBD_StdDevReq+0x26>
 800d7f2:	2b40      	cmp	r3, #64	; 0x40
 800d7f4:	d853      	bhi.n	800d89e <USBD_StdDevReq+0xc6>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00b      	beq.n	800d812 <USBD_StdDevReq+0x3a>
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d14f      	bne.n	800d89e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	4798      	blx	r3
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
      break;
 800d810:	e04a      	b.n	800d8a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	785b      	ldrb	r3, [r3, #1]
 800d816:	2b09      	cmp	r3, #9
 800d818:	d83b      	bhi.n	800d892 <USBD_StdDevReq+0xba>
 800d81a:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <USBD_StdDevReq+0x48>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d875 	.word	0x0800d875
 800d824:	0800d889 	.word	0x0800d889
 800d828:	0800d893 	.word	0x0800d893
 800d82c:	0800d87f 	.word	0x0800d87f
 800d830:	0800d893 	.word	0x0800d893
 800d834:	0800d853 	.word	0x0800d853
 800d838:	0800d849 	.word	0x0800d849
 800d83c:	0800d893 	.word	0x0800d893
 800d840:	0800d86b 	.word	0x0800d86b
 800d844:	0800d85d 	.word	0x0800d85d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f9de 	bl	800dc0c <USBD_GetDescriptor>
          break;
 800d850:	e024      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fb43 	bl	800dee0 <USBD_SetAddress>
          break;
 800d85a:	e01f      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 fb82 	bl	800df68 <USBD_SetConfig>
 800d864:	4603      	mov	r3, r0
 800d866:	73fb      	strb	r3, [r7, #15]
          break;
 800d868:	e018      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 fc21 	bl	800e0b4 <USBD_GetConfig>
          break;
 800d872:	e013      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fc52 	bl	800e120 <USBD_GetStatus>
          break;
 800d87c:	e00e      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fc81 	bl	800e188 <USBD_SetFeature>
          break;
 800d886:	e009      	b.n	800d89c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fc90 	bl	800e1b0 <USBD_ClrFeature>
          break;
 800d890:	e004      	b.n	800d89c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d892:	6839      	ldr	r1, [r7, #0]
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fce7 	bl	800e268 <USBD_CtlError>
          break;
 800d89a:	bf00      	nop
      }
      break;
 800d89c:	e004      	b.n	800d8a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fce1 	bl	800e268 <USBD_CtlError>
      break;
 800d8a6:	bf00      	nop
  }

  return ret;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop

0800d8b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ca:	2b40      	cmp	r3, #64	; 0x40
 800d8cc:	d005      	beq.n	800d8da <USBD_StdItfReq+0x26>
 800d8ce:	2b40      	cmp	r3, #64	; 0x40
 800d8d0:	d82f      	bhi.n	800d932 <USBD_StdItfReq+0x7e>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <USBD_StdItfReq+0x26>
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d12b      	bne.n	800d932 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d81d      	bhi.n	800d924 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	889b      	ldrh	r3, [r3, #4]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d813      	bhi.n	800d91a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	4798      	blx	r3
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	88db      	ldrh	r3, [r3, #6]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d110      	bne.n	800d92e <USBD_StdItfReq+0x7a>
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10d      	bne.n	800d92e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fd73 	bl	800e3fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d918:	e009      	b.n	800d92e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fca3 	bl	800e268 <USBD_CtlError>
          break;
 800d922:	e004      	b.n	800d92e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fc9e 	bl	800e268 <USBD_CtlError>
          break;
 800d92c:	e000      	b.n	800d930 <USBD_StdItfReq+0x7c>
          break;
 800d92e:	bf00      	nop
      }
      break;
 800d930:	e004      	b.n	800d93c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fc97 	bl	800e268 <USBD_CtlError>
      break;
 800d93a:	bf00      	nop
  }

  return ret;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	889b      	ldrh	r3, [r3, #4]
 800d958:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d962:	2b40      	cmp	r3, #64	; 0x40
 800d964:	d007      	beq.n	800d976 <USBD_StdEPReq+0x30>
 800d966:	2b40      	cmp	r3, #64	; 0x40
 800d968:	f200 8145 	bhi.w	800dbf6 <USBD_StdEPReq+0x2b0>
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <USBD_StdEPReq+0x44>
 800d970:	2b20      	cmp	r3, #32
 800d972:	f040 8140 	bne.w	800dbf6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	4798      	blx	r3
 800d984:	4603      	mov	r3, r0
 800d986:	73fb      	strb	r3, [r7, #15]
      break;
 800d988:	e13a      	b.n	800dc00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	785b      	ldrb	r3, [r3, #1]
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d007      	beq.n	800d9a2 <USBD_StdEPReq+0x5c>
 800d992:	2b03      	cmp	r3, #3
 800d994:	f300 8129 	bgt.w	800dbea <USBD_StdEPReq+0x2a4>
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d07f      	beq.n	800da9c <USBD_StdEPReq+0x156>
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d03c      	beq.n	800da1a <USBD_StdEPReq+0xd4>
 800d9a0:	e123      	b.n	800dbea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	d002      	beq.n	800d9b4 <USBD_StdEPReq+0x6e>
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d016      	beq.n	800d9e0 <USBD_StdEPReq+0x9a>
 800d9b2:	e02c      	b.n	800da0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00d      	beq.n	800d9d6 <USBD_StdEPReq+0x90>
 800d9ba:	7bbb      	ldrb	r3, [r7, #14]
 800d9bc:	2b80      	cmp	r3, #128	; 0x80
 800d9be:	d00a      	beq.n	800d9d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9c0:	7bbb      	ldrb	r3, [r7, #14]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 f9f1 	bl	800edac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f001 f9ed 	bl	800edac <USBD_LL_StallEP>
 800d9d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9d4:	e020      	b.n	800da18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fc45 	bl	800e268 <USBD_CtlError>
              break;
 800d9de:	e01b      	b.n	800da18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	885b      	ldrh	r3, [r3, #2]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10e      	bne.n	800da06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00b      	beq.n	800da06 <USBD_StdEPReq+0xc0>
 800d9ee:	7bbb      	ldrb	r3, [r7, #14]
 800d9f0:	2b80      	cmp	r3, #128	; 0x80
 800d9f2:	d008      	beq.n	800da06 <USBD_StdEPReq+0xc0>
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	88db      	ldrh	r3, [r3, #6]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f001 f9d3 	bl	800edac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fcf9 	bl	800e3fe <USBD_CtlSendStatus>

              break;
 800da0c:	e004      	b.n	800da18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fc29 	bl	800e268 <USBD_CtlError>
              break;
 800da16:	bf00      	nop
          }
          break;
 800da18:	e0ec      	b.n	800dbf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b02      	cmp	r3, #2
 800da24:	d002      	beq.n	800da2c <USBD_StdEPReq+0xe6>
 800da26:	2b03      	cmp	r3, #3
 800da28:	d016      	beq.n	800da58 <USBD_StdEPReq+0x112>
 800da2a:	e030      	b.n	800da8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00d      	beq.n	800da4e <USBD_StdEPReq+0x108>
 800da32:	7bbb      	ldrb	r3, [r7, #14]
 800da34:	2b80      	cmp	r3, #128	; 0x80
 800da36:	d00a      	beq.n	800da4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da38:	7bbb      	ldrb	r3, [r7, #14]
 800da3a:	4619      	mov	r1, r3
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f001 f9b5 	bl	800edac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da42:	2180      	movs	r1, #128	; 0x80
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f001 f9b1 	bl	800edac <USBD_LL_StallEP>
 800da4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da4c:	e025      	b.n	800da9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800da4e:	6839      	ldr	r1, [r7, #0]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fc09 	bl	800e268 <USBD_CtlError>
              break;
 800da56:	e020      	b.n	800da9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	885b      	ldrh	r3, [r3, #2]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11b      	bne.n	800da98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da60:	7bbb      	ldrb	r3, [r7, #14]
 800da62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da66:	2b00      	cmp	r3, #0
 800da68:	d004      	beq.n	800da74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f001 f9d2 	bl	800ee18 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fcc2 	bl	800e3fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	4798      	blx	r3
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800da8c:	e004      	b.n	800da98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800da8e:	6839      	ldr	r1, [r7, #0]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fbe9 	bl	800e268 <USBD_CtlError>
              break;
 800da96:	e000      	b.n	800da9a <USBD_StdEPReq+0x154>
              break;
 800da98:	bf00      	nop
          }
          break;
 800da9a:	e0ab      	b.n	800dbf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d002      	beq.n	800daae <USBD_StdEPReq+0x168>
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	d032      	beq.n	800db12 <USBD_StdEPReq+0x1cc>
 800daac:	e097      	b.n	800dbde <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d007      	beq.n	800dac4 <USBD_StdEPReq+0x17e>
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
 800dab6:	2b80      	cmp	r3, #128	; 0x80
 800dab8:	d004      	beq.n	800dac4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fbd3 	bl	800e268 <USBD_CtlError>
                break;
 800dac2:	e091      	b.n	800dbe8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	da0b      	bge.n	800dae4 <USBD_StdEPReq+0x19e>
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
 800dace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dad2:	4613      	mov	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	3310      	adds	r3, #16
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	4413      	add	r3, r2
 800dae0:	3304      	adds	r3, #4
 800dae2:	e00b      	b.n	800dafc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
 800dae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daea:	4613      	mov	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	4413      	add	r3, r2
 800dafa:	3304      	adds	r3, #4
 800dafc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2200      	movs	r2, #0
 800db02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2202      	movs	r2, #2
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fc1d 	bl	800e34a <USBD_CtlSendData>
              break;
 800db10:	e06a      	b.n	800dbe8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db16:	2b00      	cmp	r3, #0
 800db18:	da11      	bge.n	800db3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	f003 020f 	and.w	r2, r3, #15
 800db20:	6879      	ldr	r1, [r7, #4]
 800db22:	4613      	mov	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	440b      	add	r3, r1
 800db2c:	3324      	adds	r3, #36	; 0x24
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d117      	bne.n	800db64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fb96 	bl	800e268 <USBD_CtlError>
                  break;
 800db3c:	e054      	b.n	800dbe8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db3e:	7bbb      	ldrb	r3, [r7, #14]
 800db40:	f003 020f 	and.w	r2, r3, #15
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	440b      	add	r3, r1
 800db50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fb83 	bl	800e268 <USBD_CtlError>
                  break;
 800db62:	e041      	b.n	800dbe8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da0b      	bge.n	800db84 <USBD_StdEPReq+0x23e>
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
 800db6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db72:	4613      	mov	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	3310      	adds	r3, #16
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	4413      	add	r3, r2
 800db80:	3304      	adds	r3, #4
 800db82:	e00b      	b.n	800db9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db84:	7bbb      	ldrb	r3, [r7, #14]
 800db86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	4413      	add	r3, r2
 800db9a:	3304      	adds	r3, #4
 800db9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db9e:	7bbb      	ldrb	r3, [r7, #14]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <USBD_StdEPReq+0x264>
 800dba4:	7bbb      	ldrb	r3, [r7, #14]
 800dba6:	2b80      	cmp	r3, #128	; 0x80
 800dba8:	d103      	bne.n	800dbb2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	e00e      	b.n	800dbd0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f001 f964 	bl	800ee84 <USBD_LL_IsStallEP>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	e002      	b.n	800dbd0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fbb7 	bl	800e34a <USBD_CtlSendData>
              break;
 800dbdc:	e004      	b.n	800dbe8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dbde:	6839      	ldr	r1, [r7, #0]
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fb41 	bl	800e268 <USBD_CtlError>
              break;
 800dbe6:	bf00      	nop
          }
          break;
 800dbe8:	e004      	b.n	800dbf4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fb3b 	bl	800e268 <USBD_CtlError>
          break;
 800dbf2:	bf00      	nop
      }
      break;
 800dbf4:	e004      	b.n	800dc00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fb35 	bl	800e268 <USBD_CtlError>
      break;
 800dbfe:	bf00      	nop
  }

  return ret;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
	...

0800dc0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	885b      	ldrh	r3, [r3, #2]
 800dc26:	0a1b      	lsrs	r3, r3, #8
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	2b06      	cmp	r3, #6
 800dc2e:	f200 8128 	bhi.w	800de82 <USBD_GetDescriptor+0x276>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <USBD_GetDescriptor+0x2c>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc55 	.word	0x0800dc55
 800dc3c:	0800dc6d 	.word	0x0800dc6d
 800dc40:	0800dcad 	.word	0x0800dcad
 800dc44:	0800de83 	.word	0x0800de83
 800dc48:	0800de83 	.word	0x0800de83
 800dc4c:	0800de23 	.word	0x0800de23
 800dc50:	0800de4f 	.word	0x0800de4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	7c12      	ldrb	r2, [r2, #16]
 800dc60:	f107 0108 	add.w	r1, r7, #8
 800dc64:	4610      	mov	r0, r2
 800dc66:	4798      	blx	r3
 800dc68:	60f8      	str	r0, [r7, #12]
      break;
 800dc6a:	e112      	b.n	800de92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7c1b      	ldrb	r3, [r3, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10d      	bne.n	800dc90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7c:	f107 0208 	add.w	r2, r7, #8
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
 800dc84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc8e:	e100      	b.n	800de92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	f107 0208 	add.w	r2, r7, #8
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	4798      	blx	r3
 800dca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3301      	adds	r3, #1
 800dca6:	2202      	movs	r2, #2
 800dca8:	701a      	strb	r2, [r3, #0]
      break;
 800dcaa:	e0f2      	b.n	800de92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	885b      	ldrh	r3, [r3, #2]
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b05      	cmp	r3, #5
 800dcb4:	f200 80ac 	bhi.w	800de10 <USBD_GetDescriptor+0x204>
 800dcb8:	a201      	add	r2, pc, #4	; (adr r2, 800dcc0 <USBD_GetDescriptor+0xb4>)
 800dcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbe:	bf00      	nop
 800dcc0:	0800dcd9 	.word	0x0800dcd9
 800dcc4:	0800dd0d 	.word	0x0800dd0d
 800dcc8:	0800dd41 	.word	0x0800dd41
 800dccc:	0800dd75 	.word	0x0800dd75
 800dcd0:	0800dda9 	.word	0x0800dda9
 800dcd4:	0800dddd 	.word	0x0800dddd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00b      	beq.n	800dcfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	7c12      	ldrb	r2, [r2, #16]
 800dcf0:	f107 0108 	add.w	r1, r7, #8
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	4798      	blx	r3
 800dcf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcfa:	e091      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcfc:	6839      	ldr	r1, [r7, #0]
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fab2 	bl	800e268 <USBD_CtlError>
            err++;
 800dd04:	7afb      	ldrb	r3, [r7, #11]
 800dd06:	3301      	adds	r3, #1
 800dd08:	72fb      	strb	r3, [r7, #11]
          break;
 800dd0a:	e089      	b.n	800de20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00b      	beq.n	800dd30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	7c12      	ldrb	r2, [r2, #16]
 800dd24:	f107 0108 	add.w	r1, r7, #8
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd2e:	e077      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 fa98 	bl	800e268 <USBD_CtlError>
            err++;
 800dd38:	7afb      	ldrb	r3, [r7, #11]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd3e:	e06f      	b.n	800de20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	7c12      	ldrb	r2, [r2, #16]
 800dd58:	f107 0108 	add.w	r1, r7, #8
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	4798      	blx	r3
 800dd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd62:	e05d      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fa7e 	bl	800e268 <USBD_CtlError>
            err++;
 800dd6c:	7afb      	ldrb	r3, [r7, #11]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	72fb      	strb	r3, [r7, #11]
          break;
 800dd72:	e055      	b.n	800de20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00b      	beq.n	800dd98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	7c12      	ldrb	r2, [r2, #16]
 800dd8c:	f107 0108 	add.w	r1, r7, #8
 800dd90:	4610      	mov	r0, r2
 800dd92:	4798      	blx	r3
 800dd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd96:	e043      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fa64 	bl	800e268 <USBD_CtlError>
            err++;
 800dda0:	7afb      	ldrb	r3, [r7, #11]
 800dda2:	3301      	adds	r3, #1
 800dda4:	72fb      	strb	r3, [r7, #11]
          break;
 800dda6:	e03b      	b.n	800de20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00b      	beq.n	800ddcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	7c12      	ldrb	r2, [r2, #16]
 800ddc0:	f107 0108 	add.w	r1, r7, #8
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4798      	blx	r3
 800ddc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddca:	e029      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddcc:	6839      	ldr	r1, [r7, #0]
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 fa4a 	bl	800e268 <USBD_CtlError>
            err++;
 800ddd4:	7afb      	ldrb	r3, [r7, #11]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ddda:	e021      	b.n	800de20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00b      	beq.n	800de00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	7c12      	ldrb	r2, [r2, #16]
 800ddf4:	f107 0108 	add.w	r1, r7, #8
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	4798      	blx	r3
 800ddfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddfe:	e00f      	b.n	800de20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fa30 	bl	800e268 <USBD_CtlError>
            err++;
 800de08:	7afb      	ldrb	r3, [r7, #11]
 800de0a:	3301      	adds	r3, #1
 800de0c:	72fb      	strb	r3, [r7, #11]
          break;
 800de0e:	e007      	b.n	800de20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 fa28 	bl	800e268 <USBD_CtlError>
          err++;
 800de18:	7afb      	ldrb	r3, [r7, #11]
 800de1a:	3301      	adds	r3, #1
 800de1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800de1e:	bf00      	nop
      }
      break;
 800de20:	e037      	b.n	800de92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	7c1b      	ldrb	r3, [r3, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d109      	bne.n	800de3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de32:	f107 0208 	add.w	r2, r7, #8
 800de36:	4610      	mov	r0, r2
 800de38:	4798      	blx	r3
 800de3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de3c:	e029      	b.n	800de92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fa11 	bl	800e268 <USBD_CtlError>
        err++;
 800de46:	7afb      	ldrb	r3, [r7, #11]
 800de48:	3301      	adds	r3, #1
 800de4a:	72fb      	strb	r3, [r7, #11]
      break;
 800de4c:	e021      	b.n	800de92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	7c1b      	ldrb	r3, [r3, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10d      	bne.n	800de72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5e:	f107 0208 	add.w	r2, r7, #8
 800de62:	4610      	mov	r0, r2
 800de64:	4798      	blx	r3
 800de66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3301      	adds	r3, #1
 800de6c:	2207      	movs	r2, #7
 800de6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de70:	e00f      	b.n	800de92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f9f7 	bl	800e268 <USBD_CtlError>
        err++;
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	3301      	adds	r3, #1
 800de7e:	72fb      	strb	r3, [r7, #11]
      break;
 800de80:	e007      	b.n	800de92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 f9ef 	bl	800e268 <USBD_CtlError>
      err++;
 800de8a:	7afb      	ldrb	r3, [r7, #11]
 800de8c:	3301      	adds	r3, #1
 800de8e:	72fb      	strb	r3, [r7, #11]
      break;
 800de90:	bf00      	nop
  }

  if (err != 0U)
 800de92:	7afb      	ldrb	r3, [r7, #11]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d11e      	bne.n	800ded6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	88db      	ldrh	r3, [r3, #6]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d016      	beq.n	800dece <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dea0:	893b      	ldrh	r3, [r7, #8]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00e      	beq.n	800dec4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	88da      	ldrh	r2, [r3, #6]
 800deaa:	893b      	ldrh	r3, [r7, #8]
 800deac:	4293      	cmp	r3, r2
 800deae:	bf28      	it	cs
 800deb0:	4613      	movcs	r3, r2
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800deb6:	893b      	ldrh	r3, [r7, #8]
 800deb8:	461a      	mov	r2, r3
 800deba:	68f9      	ldr	r1, [r7, #12]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fa44 	bl	800e34a <USBD_CtlSendData>
 800dec2:	e009      	b.n	800ded8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f9ce 	bl	800e268 <USBD_CtlError>
 800decc:	e004      	b.n	800ded8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa95 	bl	800e3fe <USBD_CtlSendStatus>
 800ded4:	e000      	b.n	800ded8 <USBD_GetDescriptor+0x2cc>
    return;
 800ded6:	bf00      	nop
  }
}
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop

0800dee0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	889b      	ldrh	r3, [r3, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d131      	bne.n	800df56 <USBD_SetAddress+0x76>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	88db      	ldrh	r3, [r3, #6]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d12d      	bne.n	800df56 <USBD_SetAddress+0x76>
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	885b      	ldrh	r3, [r3, #2]
 800defe:	2b7f      	cmp	r3, #127	; 0x7f
 800df00:	d829      	bhi.n	800df56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	885b      	ldrh	r3, [r3, #2]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b03      	cmp	r3, #3
 800df18:	d104      	bne.n	800df24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f9a3 	bl	800e268 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df22:	e01d      	b.n	800df60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7bfa      	ldrb	r2, [r7, #15]
 800df28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 ffd3 	bl	800eedc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fa61 	bl	800e3fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d004      	beq.n	800df4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2202      	movs	r2, #2
 800df46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df4a:	e009      	b.n	800df60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df54:	e004      	b.n	800df60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f985 	bl	800e268 <USBD_CtlError>
  }
}
 800df5e:	bf00      	nop
 800df60:	bf00      	nop
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df72:	2300      	movs	r3, #0
 800df74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	885b      	ldrh	r3, [r3, #2]
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	4b4c      	ldr	r3, [pc, #304]	; (800e0b0 <USBD_SetConfig+0x148>)
 800df7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df80:	4b4b      	ldr	r3, [pc, #300]	; (800e0b0 <USBD_SetConfig+0x148>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d905      	bls.n	800df94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f96c 	bl	800e268 <USBD_CtlError>
    return USBD_FAIL;
 800df90:	2303      	movs	r3, #3
 800df92:	e088      	b.n	800e0a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d002      	beq.n	800dfa6 <USBD_SetConfig+0x3e>
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d025      	beq.n	800dff0 <USBD_SetConfig+0x88>
 800dfa4:	e071      	b.n	800e08a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dfa6:	4b42      	ldr	r3, [pc, #264]	; (800e0b0 <USBD_SetConfig+0x148>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d01c      	beq.n	800dfe8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dfae:	4b40      	ldr	r3, [pc, #256]	; (800e0b0 <USBD_SetConfig+0x148>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfb8:	4b3d      	ldr	r3, [pc, #244]	; (800e0b0 <USBD_SetConfig+0x148>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff f948 	bl	800d254 <USBD_SetClassConfig>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d004      	beq.n	800dfd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dfce:	6839      	ldr	r1, [r7, #0]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f949 	bl	800e268 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfd6:	e065      	b.n	800e0a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fa10 	bl	800e3fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dfe6:	e05d      	b.n	800e0a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fa08 	bl	800e3fe <USBD_CtlSendStatus>
      break;
 800dfee:	e059      	b.n	800e0a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dff0:	4b2f      	ldr	r3, [pc, #188]	; (800e0b0 <USBD_SetConfig+0x148>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d112      	bne.n	800e01e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e000:	4b2b      	ldr	r3, [pc, #172]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	461a      	mov	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e00a:	4b29      	ldr	r3, [pc, #164]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7ff f93b 	bl	800d28c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f9f1 	bl	800e3fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e01c:	e042      	b.n	800e0a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e01e:	4b24      	ldr	r3, [pc, #144]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d02a      	beq.n	800e082 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	b2db      	uxtb	r3, r3
 800e032:	4619      	mov	r1, r3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff f929 	bl	800d28c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e03a:	4b1d      	ldr	r3, [pc, #116]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	461a      	mov	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e044:	4b1a      	ldr	r3, [pc, #104]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff f902 	bl	800d254 <USBD_SetClassConfig>
 800e050:	4603      	mov	r3, r0
 800e052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e054:	7bfb      	ldrb	r3, [r7, #15]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00f      	beq.n	800e07a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 f903 	bl	800e268 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff f90e 	bl	800d28c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2202      	movs	r2, #2
 800e074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e078:	e014      	b.n	800e0a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f9bf 	bl	800e3fe <USBD_CtlSendStatus>
      break;
 800e080:	e010      	b.n	800e0a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f9bb 	bl	800e3fe <USBD_CtlSendStatus>
      break;
 800e088:	e00c      	b.n	800e0a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f8eb 	bl	800e268 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e092:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <USBD_SetConfig+0x148>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff f8f7 	bl	800d28c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e09e:	2303      	movs	r3, #3
 800e0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800e0a2:	bf00      	nop
  }

  return ret;
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20000cc8 	.word	0x20000cc8

0800e0b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	88db      	ldrh	r3, [r3, #6]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d004      	beq.n	800e0d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f8cd 	bl	800e268 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e0ce:	e023      	b.n	800e118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	dc02      	bgt.n	800e0e2 <USBD_GetConfig+0x2e>
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	dc03      	bgt.n	800e0e8 <USBD_GetConfig+0x34>
 800e0e0:	e015      	b.n	800e10e <USBD_GetConfig+0x5a>
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d00b      	beq.n	800e0fe <USBD_GetConfig+0x4a>
 800e0e6:	e012      	b.n	800e10e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3308      	adds	r3, #8
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f927 	bl	800e34a <USBD_CtlSendData>
        break;
 800e0fc:	e00c      	b.n	800e118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3304      	adds	r3, #4
 800e102:	2201      	movs	r2, #1
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f91f 	bl	800e34a <USBD_CtlSendData>
        break;
 800e10c:	e004      	b.n	800e118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e10e:	6839      	ldr	r1, [r7, #0]
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f8a9 	bl	800e268 <USBD_CtlError>
        break;
 800e116:	bf00      	nop
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e130:	b2db      	uxtb	r3, r3
 800e132:	3b01      	subs	r3, #1
 800e134:	2b02      	cmp	r3, #2
 800e136:	d81e      	bhi.n	800e176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	88db      	ldrh	r3, [r3, #6]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d004      	beq.n	800e14a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 f890 	bl	800e268 <USBD_CtlError>
        break;
 800e148:	e01a      	b.n	800e180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e156:	2b00      	cmp	r3, #0
 800e158:	d005      	beq.n	800e166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f043 0202 	orr.w	r2, r3, #2
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	330c      	adds	r3, #12
 800e16a:	2202      	movs	r2, #2
 800e16c:	4619      	mov	r1, r3
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 f8eb 	bl	800e34a <USBD_CtlSendData>
      break;
 800e174:	e004      	b.n	800e180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 f875 	bl	800e268 <USBD_CtlError>
      break;
 800e17e:	bf00      	nop
  }
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	885b      	ldrh	r3, [r3, #2]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d106      	bne.n	800e1a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 f92b 	bl	800e3fe <USBD_CtlSendStatus>
  }
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d80b      	bhi.n	800e1e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	885b      	ldrh	r3, [r3, #2]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d10c      	bne.n	800e1ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f910 	bl	800e3fe <USBD_CtlSendStatus>
      }
      break;
 800e1de:	e004      	b.n	800e1ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f840 	bl	800e268 <USBD_CtlError>
      break;
 800e1e8:	e000      	b.n	800e1ec <USBD_ClrFeature+0x3c>
      break;
 800e1ea:	bf00      	nop
  }
}
 800e1ec:	bf00      	nop
 800e1ee:	3708      	adds	r7, #8
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3301      	adds	r3, #1
 800e20e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	781a      	ldrb	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	3301      	adds	r3, #1
 800e21c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f7ff fabb 	bl	800d79a <SWAPBYTE>
 800e224:	4603      	mov	r3, r0
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3301      	adds	r3, #1
 800e230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3301      	adds	r3, #1
 800e236:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7ff faae 	bl	800d79a <SWAPBYTE>
 800e23e:	4603      	mov	r3, r0
 800e240:	461a      	mov	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3301      	adds	r3, #1
 800e250:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f7ff faa1 	bl	800d79a <SWAPBYTE>
 800e258:	4603      	mov	r3, r0
 800e25a:	461a      	mov	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	80da      	strh	r2, [r3, #6]
}
 800e260:	bf00      	nop
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e272:	2180      	movs	r1, #128	; 0x80
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fd99 	bl	800edac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e27a:	2100      	movs	r1, #0
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fd95 	bl	800edac <USBD_LL_StallEP>
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b086      	sub	sp, #24
 800e28e:	af00      	add	r7, sp, #0
 800e290:	60f8      	str	r0, [r7, #12]
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d036      	beq.n	800e30e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e2a4:	6938      	ldr	r0, [r7, #16]
 800e2a6:	f000 f836 	bl	800e316 <USBD_GetLen>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e2b8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	4413      	add	r3, r2
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2da:	e013      	b.n	800e304 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e2dc:	7dfb      	ldrb	r3, [r7, #23]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	693a      	ldr	r2, [r7, #16]
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	613b      	str	r3, [r7, #16]
    idx++;
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800e2fe:	7dfb      	ldrb	r3, [r7, #23]
 800e300:	3301      	adds	r3, #1
 800e302:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e7      	bne.n	800e2dc <USBD_GetString+0x52>
 800e30c:	e000      	b.n	800e310 <USBD_GetString+0x86>
    return;
 800e30e:	bf00      	nop
  }
}
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e316:	b480      	push	{r7}
 800e318:	b085      	sub	sp, #20
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e326:	e005      	b.n	800e334 <USBD_GetLen+0x1e>
  {
    len++;
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	3301      	adds	r3, #1
 800e32c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	3301      	adds	r3, #1
 800e332:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1f5      	bne.n	800e328 <USBD_GetLen+0x12>
  }

  return len;
 800e33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	60f8      	str	r0, [r7, #12]
 800e352:	60b9      	str	r1, [r7, #8]
 800e354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2202      	movs	r2, #2
 800e35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	2100      	movs	r1, #0
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fde9 	bl	800ef48 <USBD_LL_Transmit>

  return USBD_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	2100      	movs	r1, #0
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 fdd8 	bl	800ef48 <USBD_LL_Transmit>

  return USBD_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b084      	sub	sp, #16
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	60b9      	str	r1, [r7, #8]
 800e3ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2203      	movs	r2, #3
 800e3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f000 fdf3 	bl	800efb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68ba      	ldr	r2, [r7, #8]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 fde2 	bl	800efb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b082      	sub	sp, #8
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2204      	movs	r2, #4
 800e40a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e40e:	2300      	movs	r3, #0
 800e410:	2200      	movs	r2, #0
 800e412:	2100      	movs	r1, #0
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fd97 	bl	800ef48 <USBD_LL_Transmit>

  return USBD_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2205      	movs	r2, #5
 800e430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e434:	2300      	movs	r3, #0
 800e436:	2200      	movs	r2, #0
 800e438:	2100      	movs	r1, #0
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fdbc 	bl	800efb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	4613      	mov	r3, r2
 800e458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e45a:	2301      	movs	r3, #1
 800e45c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e462:	4b1f      	ldr	r3, [pc, #124]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e464:	7a5b      	ldrb	r3, [r3, #9]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d131      	bne.n	800e4d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e46c:	4b1c      	ldr	r3, [pc, #112]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e46e:	7a5b      	ldrb	r3, [r3, #9]
 800e470:	b2db      	uxtb	r3, r3
 800e472:	461a      	mov	r2, r3
 800e474:	4b1a      	ldr	r3, [pc, #104]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e476:	2100      	movs	r1, #0
 800e478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e47a:	4b19      	ldr	r3, [pc, #100]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e47c:	7a5b      	ldrb	r3, [r3, #9]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	4a17      	ldr	r2, [pc, #92]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e48a:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e48c:	7a5b      	ldrb	r3, [r3, #9]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	461a      	mov	r2, r3
 800e492:	4b13      	ldr	r3, [pc, #76]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e494:	4413      	add	r3, r2
 800e496:	79fa      	ldrb	r2, [r7, #7]
 800e498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e49a:	4b11      	ldr	r3, [pc, #68]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e49c:	7a5b      	ldrb	r3, [r3, #9]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	b2d1      	uxtb	r1, r2
 800e4a4:	4a0e      	ldr	r2, [pc, #56]	; (800e4e0 <FATFS_LinkDriverEx+0x94>)
 800e4a6:	7251      	strb	r1, [r2, #9]
 800e4a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4aa:	7dbb      	ldrb	r3, [r7, #22]
 800e4ac:	3330      	adds	r3, #48	; 0x30
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	223a      	movs	r2, #58	; 0x3a
 800e4ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	3302      	adds	r3, #2
 800e4c0:	222f      	movs	r2, #47	; 0x2f
 800e4c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3303      	adds	r3, #3
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	371c      	adds	r7, #28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	20000ccc 	.word	0x20000ccc

0800e4e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff ffaa 	bl	800e44c <FATFS_LinkDriverEx>
 800e4f8:	4603      	mov	r3, r0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e508:	2200      	movs	r2, #0
 800e50a:	4912      	ldr	r1, [pc, #72]	; (800e554 <MX_USB_DEVICE_Init+0x50>)
 800e50c:	4812      	ldr	r0, [pc, #72]	; (800e558 <MX_USB_DEVICE_Init+0x54>)
 800e50e:	f7fe fe33 	bl	800d178 <USBD_Init>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e518:	f7f3 f998 	bl	800184c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e51c:	490f      	ldr	r1, [pc, #60]	; (800e55c <MX_USB_DEVICE_Init+0x58>)
 800e51e:	480e      	ldr	r0, [pc, #56]	; (800e558 <MX_USB_DEVICE_Init+0x54>)
 800e520:	f7fe fe5a 	bl	800d1d8 <USBD_RegisterClass>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e52a:	f7f3 f98f 	bl	800184c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e52e:	490c      	ldr	r1, [pc, #48]	; (800e560 <MX_USB_DEVICE_Init+0x5c>)
 800e530:	4809      	ldr	r0, [pc, #36]	; (800e558 <MX_USB_DEVICE_Init+0x54>)
 800e532:	f7fe fdab 	bl	800d08c <USBD_CDC_RegisterInterface>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e53c:	f7f3 f986 	bl	800184c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e540:	4805      	ldr	r0, [pc, #20]	; (800e558 <MX_USB_DEVICE_Init+0x54>)
 800e542:	f7fe fe70 	bl	800d226 <USBD_Start>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e54c:	f7f3 f97e 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e550:	bf00      	nop
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20000134 	.word	0x20000134
 800e558:	20000cd8 	.word	0x20000cd8
 800e55c:	2000001c 	.word	0x2000001c
 800e560:	20000120 	.word	0x20000120

0800e564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e568:	2200      	movs	r2, #0
 800e56a:	4905      	ldr	r1, [pc, #20]	; (800e580 <CDC_Init_FS+0x1c>)
 800e56c:	4805      	ldr	r0, [pc, #20]	; (800e584 <CDC_Init_FS+0x20>)
 800e56e:	f7fe fda2 	bl	800d0b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e572:	4905      	ldr	r1, [pc, #20]	; (800e588 <CDC_Init_FS+0x24>)
 800e574:	4803      	ldr	r0, [pc, #12]	; (800e584 <CDC_Init_FS+0x20>)
 800e576:	f7fe fdbc 	bl	800d0f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e57a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	200017a8 	.word	0x200017a8
 800e584:	20000cd8 	.word	0x20000cd8
 800e588:	20000fa8 	.word	0x20000fa8

0800e58c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e58c:	b480      	push	{r7}
 800e58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e592:	4618      	mov	r0, r3
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	6039      	str	r1, [r7, #0]
 800e5a6:	71fb      	strb	r3, [r7, #7]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5ac:	79fb      	ldrb	r3, [r7, #7]
 800e5ae:	2b23      	cmp	r3, #35	; 0x23
 800e5b0:	d84a      	bhi.n	800e648 <CDC_Control_FS+0xac>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <CDC_Control_FS+0x1c>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e649 	.word	0x0800e649
 800e5bc:	0800e649 	.word	0x0800e649
 800e5c0:	0800e649 	.word	0x0800e649
 800e5c4:	0800e649 	.word	0x0800e649
 800e5c8:	0800e649 	.word	0x0800e649
 800e5cc:	0800e649 	.word	0x0800e649
 800e5d0:	0800e649 	.word	0x0800e649
 800e5d4:	0800e649 	.word	0x0800e649
 800e5d8:	0800e649 	.word	0x0800e649
 800e5dc:	0800e649 	.word	0x0800e649
 800e5e0:	0800e649 	.word	0x0800e649
 800e5e4:	0800e649 	.word	0x0800e649
 800e5e8:	0800e649 	.word	0x0800e649
 800e5ec:	0800e649 	.word	0x0800e649
 800e5f0:	0800e649 	.word	0x0800e649
 800e5f4:	0800e649 	.word	0x0800e649
 800e5f8:	0800e649 	.word	0x0800e649
 800e5fc:	0800e649 	.word	0x0800e649
 800e600:	0800e649 	.word	0x0800e649
 800e604:	0800e649 	.word	0x0800e649
 800e608:	0800e649 	.word	0x0800e649
 800e60c:	0800e649 	.word	0x0800e649
 800e610:	0800e649 	.word	0x0800e649
 800e614:	0800e649 	.word	0x0800e649
 800e618:	0800e649 	.word	0x0800e649
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	0800e649 	.word	0x0800e649
 800e624:	0800e649 	.word	0x0800e649
 800e628:	0800e649 	.word	0x0800e649
 800e62c:	0800e649 	.word	0x0800e649
 800e630:	0800e649 	.word	0x0800e649
 800e634:	0800e649 	.word	0x0800e649
 800e638:	0800e649 	.word	0x0800e649
 800e63c:	0800e649 	.word	0x0800e649
 800e640:	0800e649 	.word	0x0800e649
 800e644:	0800e649 	.word	0x0800e649
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e648:	bf00      	nop
  }

  return (USBD_OK);
 800e64a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e662:	6879      	ldr	r1, [r7, #4]
 800e664:	4805      	ldr	r0, [pc, #20]	; (800e67c <CDC_Receive_FS+0x24>)
 800e666:	f7fe fd44 	bl	800d0f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e66a:	4804      	ldr	r0, [pc, #16]	; (800e67c <CDC_Receive_FS+0x24>)
 800e66c:	f7fe fd5a 	bl	800d124 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e670:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e672:	4618      	mov	r0, r3
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000cd8 	.word	0x20000cd8

0800e680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e680:	b480      	push	{r7}
 800e682:	b087      	sub	sp, #28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	4613      	mov	r3, r2
 800e68c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2212      	movs	r2, #18
 800e6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6b6:	4b03      	ldr	r3, [pc, #12]	; (800e6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	20000150 	.word	0x20000150

0800e6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	6039      	str	r1, [r7, #0]
 800e6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6da:	4b03      	ldr	r3, [pc, #12]	; (800e6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	20000164 	.word	0x20000164

0800e6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	6039      	str	r1, [r7, #0]
 800e6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	4907      	ldr	r1, [pc, #28]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e702:	4808      	ldr	r0, [pc, #32]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e704:	f7ff fdc1 	bl	800e28a <USBD_GetString>
 800e708:	e004      	b.n	800e714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	4904      	ldr	r1, [pc, #16]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e70e:	4805      	ldr	r0, [pc, #20]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e710:	f7ff fdbb 	bl	800e28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e714:	4b02      	ldr	r3, [pc, #8]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20001fa8 	.word	0x20001fa8
 800e724:	08011c4c 	.word	0x08011c4c

0800e728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	6039      	str	r1, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	4904      	ldr	r1, [pc, #16]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e738:	4804      	ldr	r0, [pc, #16]	; (800e74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e73a:	f7ff fda6 	bl	800e28a <USBD_GetString>
  return USBD_StrDesc;
 800e73e:	4b02      	ldr	r3, [pc, #8]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20001fa8 	.word	0x20001fa8
 800e74c:	08011c64 	.word	0x08011c64

0800e750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	221a      	movs	r2, #26
 800e760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e762:	f000 f843 	bl	800e7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e766:	4b02      	ldr	r3, [pc, #8]	; (800e770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	20000168 	.word	0x20000168

0800e774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	6039      	str	r1, [r7, #0]
 800e77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d105      	bne.n	800e792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	4907      	ldr	r1, [pc, #28]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e78a:	4808      	ldr	r0, [pc, #32]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e78c:	f7ff fd7d 	bl	800e28a <USBD_GetString>
 800e790:	e004      	b.n	800e79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	4904      	ldr	r1, [pc, #16]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e796:	4805      	ldr	r0, [pc, #20]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e798:	f7ff fd77 	bl	800e28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e79c:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20001fa8 	.word	0x20001fa8
 800e7ac:	08011c78 	.word	0x08011c78

0800e7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	6039      	str	r1, [r7, #0]
 800e7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	4907      	ldr	r1, [pc, #28]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c6:	4808      	ldr	r0, [pc, #32]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c8:	f7ff fd5f 	bl	800e28a <USBD_GetString>
 800e7cc:	e004      	b.n	800e7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7ce:	683a      	ldr	r2, [r7, #0]
 800e7d0:	4904      	ldr	r1, [pc, #16]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7d2:	4805      	ldr	r0, [pc, #20]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d4:	f7ff fd59 	bl	800e28a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7d8:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20001fa8 	.word	0x20001fa8
 800e7e8:	08011c84 	.word	0x08011c84

0800e7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <Get_SerialNum+0x44>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7f8:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <Get_SerialNum+0x48>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <Get_SerialNum+0x4c>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d009      	beq.n	800e826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e812:	2208      	movs	r2, #8
 800e814:	4909      	ldr	r1, [pc, #36]	; (800e83c <Get_SerialNum+0x50>)
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 f814 	bl	800e844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e81c:	2204      	movs	r2, #4
 800e81e:	4908      	ldr	r1, [pc, #32]	; (800e840 <Get_SerialNum+0x54>)
 800e820:	68b8      	ldr	r0, [r7, #8]
 800e822:	f000 f80f 	bl	800e844 <IntToUnicode>
  }
}
 800e826:	bf00      	nop
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	1fff7590 	.word	0x1fff7590
 800e834:	1fff7594 	.word	0x1fff7594
 800e838:	1fff7598 	.word	0x1fff7598
 800e83c:	2000016a 	.word	0x2000016a
 800e840:	2000017a 	.word	0x2000017a

0800e844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e856:	2300      	movs	r3, #0
 800e858:	75fb      	strb	r3, [r7, #23]
 800e85a:	e027      	b.n	800e8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	0f1b      	lsrs	r3, r3, #28
 800e860:	2b09      	cmp	r3, #9
 800e862:	d80b      	bhi.n	800e87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	0f1b      	lsrs	r3, r3, #28
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4619      	mov	r1, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	440b      	add	r3, r1
 800e874:	3230      	adds	r2, #48	; 0x30
 800e876:	b2d2      	uxtb	r2, r2
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e00a      	b.n	800e892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	0f1b      	lsrs	r3, r3, #28
 800e880:	b2da      	uxtb	r2, r3
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	4619      	mov	r1, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	440b      	add	r3, r1
 800e88c:	3237      	adds	r2, #55	; 0x37
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	3301      	adds	r3, #1
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	75fb      	strb	r3, [r7, #23]
 800e8ac:	7dfa      	ldrb	r2, [r7, #23]
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d3d3      	bcc.n	800e85c <IntToUnicode+0x18>
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
	...

0800e8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b0b0      	sub	sp, #192	; 0xc0
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	605a      	str	r2, [r3, #4]
 800e8d6:	609a      	str	r2, [r3, #8]
 800e8d8:	60da      	str	r2, [r3, #12]
 800e8da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e8dc:	f107 0318 	add.w	r3, r7, #24
 800e8e0:	2294      	movs	r2, #148	; 0x94
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f000 fc0b 	bl	800f100 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8f2:	d163      	bne.n	800e9bc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e8f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e900:	f107 0318 	add.w	r3, r7, #24
 800e904:	4618      	mov	r0, r3
 800e906:	f7f6 fa55 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e910:	f7f2 ff9c 	bl	800184c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e914:	4b2b      	ldr	r3, [pc, #172]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e918:	4a2a      	ldr	r2, [pc, #168]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e91a:	f043 0301 	orr.w	r3, r3, #1
 800e91e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e920:	4b28      	ldr	r3, [pc, #160]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	617b      	str	r3, [r7, #20]
 800e92a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e92c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e934:	2302      	movs	r3, #2
 800e936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e93a:	2300      	movs	r3, #0
 800e93c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e940:	2303      	movs	r3, #3
 800e942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e946:	230a      	movs	r3, #10
 800e948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e94c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e950:	4619      	mov	r1, r3
 800e952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e956:	f7f3 fd79 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e95a:	4b1a      	ldr	r3, [pc, #104]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e95e:	4a19      	ldr	r2, [pc, #100]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e964:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e966:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e96a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e96e:	613b      	str	r3, [r7, #16]
 800e970:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e972:	4b14      	ldr	r3, [pc, #80]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d114      	bne.n	800e9a8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e97e:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e982:	4a10      	ldr	r2, [pc, #64]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e988:	6593      	str	r3, [r2, #88]	; 0x58
 800e98a:	4b0e      	ldr	r3, [pc, #56]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e992:	60fb      	str	r3, [r7, #12]
 800e994:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800e996:	f7f5 faf9 	bl	8003f8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e99a:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e99e:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <HAL_PCD_MspInit+0x100>)
 800e9a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9a4:	6593      	str	r3, [r2, #88]	; 0x58
 800e9a6:	e001      	b.n	800e9ac <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e9a8:	f7f5 faf0 	bl	8003f8c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	2043      	movs	r0, #67	; 0x43
 800e9b2:	f7f3 fc5a 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e9b6:	2043      	movs	r0, #67	; 0x43
 800e9b8:	f7f3 fc73 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e9bc:	bf00      	nop
 800e9be:	37c0      	adds	r7, #192	; 0xc0
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	40021000 	.word	0x40021000

0800e9c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4610      	mov	r0, r2
 800e9e0:	f7fe fc6c 	bl	800d2bc <USBD_LL_SetupStage>
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9fe:	78fa      	ldrb	r2, [r7, #3]
 800ea00:	6879      	ldr	r1, [r7, #4]
 800ea02:	4613      	mov	r3, r2
 800ea04:	00db      	lsls	r3, r3, #3
 800ea06:	4413      	add	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	440b      	add	r3, r1
 800ea0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	78fb      	ldrb	r3, [r7, #3]
 800ea14:	4619      	mov	r1, r3
 800ea16:	f7fe fca6 	bl	800d366 <USBD_LL_DataOutStage>
}
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b082      	sub	sp, #8
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ea34:	78fa      	ldrb	r2, [r7, #3]
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	4413      	add	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	440b      	add	r3, r1
 800ea42:	334c      	adds	r3, #76	; 0x4c
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	78fb      	ldrb	r3, [r7, #3]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f7fe fcef 	bl	800d42c <USBD_LL_DataInStage>
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fe03 	bl	800d670 <USBD_LL_SOF>
}
 800ea6a:	bf00      	nop
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d001      	beq.n	800ea8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea86:	f7f2 fee1 	bl	800184c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea90:	7bfa      	ldrb	r2, [r7, #15]
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fe fdad 	bl	800d5f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fe fd59 	bl	800d558 <USBD_LL_Reset>
}
 800eaa6:	bf00      	nop
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
	...

0800eab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	6812      	ldr	r2, [r2, #0]
 800eac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eaca:	f043 0301 	orr.w	r3, r3, #1
 800eace:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fe fd9c 	bl	800d614 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a1b      	ldr	r3, [r3, #32]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d005      	beq.n	800eaf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eae4:	4b04      	ldr	r3, [pc, #16]	; (800eaf8 <HAL_PCD_SuspendCallback+0x48>)
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	4a03      	ldr	r2, [pc, #12]	; (800eaf8 <HAL_PCD_SuspendCallback+0x48>)
 800eaea:	f043 0306 	orr.w	r3, r3, #6
 800eaee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaf0:	bf00      	nop
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	e000ed00 	.word	0xe000ed00

0800eafc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	6812      	ldr	r2, [r2, #0]
 800eb12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb16:	f023 0301 	bic.w	r3, r3, #1
 800eb1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d007      	beq.n	800eb34 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <HAL_PCD_ResumeCallback+0x4c>)
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	4a07      	ldr	r2, [pc, #28]	; (800eb48 <HAL_PCD_ResumeCallback+0x4c>)
 800eb2a:	f023 0306 	bic.w	r3, r3, #6
 800eb2e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eb30:	f000 faa6 	bl	800f080 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fe fd80 	bl	800d640 <USBD_LL_Resume>
}
 800eb40:	bf00      	nop
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	e000ed00 	.word	0xe000ed00

0800eb4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb5e:	78fa      	ldrb	r2, [r7, #3]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fdcc 	bl	800d700 <USBD_LL_IsoOUTIncomplete>
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb82:	78fa      	ldrb	r2, [r7, #3]
 800eb84:	4611      	mov	r1, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe fd94 	bl	800d6b4 <USBD_LL_IsoINIncomplete>
}
 800eb8c:	bf00      	nop
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fe fdd2 	bl	800d74c <USBD_LL_DevConnected>
}
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fe fdcf 	bl	800d762 <USBD_LL_DevDisconnected>
}
 800ebc4:	bf00      	nop
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d139      	bne.n	800ec50 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ebdc:	4a1f      	ldr	r2, [pc, #124]	; (800ec5c <USBD_LL_Init+0x90>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a1d      	ldr	r2, [pc, #116]	; (800ec5c <USBD_LL_Init+0x90>)
 800ebe8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ebec:	4b1b      	ldr	r3, [pc, #108]	; (800ec5c <USBD_LL_Init+0x90>)
 800ebee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ebf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ebf4:	4b19      	ldr	r3, [pc, #100]	; (800ec5c <USBD_LL_Init+0x90>)
 800ebf6:	2206      	movs	r2, #6
 800ebf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ebfa:	4b18      	ldr	r3, [pc, #96]	; (800ec5c <USBD_LL_Init+0x90>)
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ec00:	4b16      	ldr	r3, [pc, #88]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ec06:	4b15      	ldr	r3, [pc, #84]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ec0c:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ec12:	4b12      	ldr	r3, [pc, #72]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ec18:	4b10      	ldr	r3, [pc, #64]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ec1e:	4b0f      	ldr	r3, [pc, #60]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec20:	2200      	movs	r2, #0
 800ec22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ec24:	480d      	ldr	r0, [pc, #52]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec26:	f7f3 ff21 	bl	8002a6c <HAL_PCD_Init>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ec30:	f7f2 fe0c 	bl	800184c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ec34:	2180      	movs	r1, #128	; 0x80
 800ec36:	4809      	ldr	r0, [pc, #36]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec38:	f7f5 f8a3 	bl	8003d82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ec3c:	2240      	movs	r2, #64	; 0x40
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4806      	ldr	r0, [pc, #24]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec42:	f7f5 f857 	bl	8003cf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ec46:	2280      	movs	r2, #128	; 0x80
 800ec48:	2101      	movs	r1, #1
 800ec4a:	4804      	ldr	r0, [pc, #16]	; (800ec5c <USBD_LL_Init+0x90>)
 800ec4c:	f7f5 f852 	bl	8003cf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	200021a8 	.word	0x200021a8

0800ec60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f4 f81c 	bl	8002cb4 <HAL_PCD_Start>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec80:	7bbb      	ldrb	r3, [r7, #14]
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d816      	bhi.n	800ecb4 <USBD_LL_Start+0x54>
 800ec86:	a201      	add	r2, pc, #4	; (adr r2, 800ec8c <USBD_LL_Start+0x2c>)
 800ec88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8c:	0800ec9d 	.word	0x0800ec9d
 800ec90:	0800eca3 	.word	0x0800eca3
 800ec94:	0800eca9 	.word	0x0800eca9
 800ec98:	0800ecaf 	.word	0x0800ecaf
    case HAL_OK :
      usb_status = USBD_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eca0:	e00b      	b.n	800ecba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	73fb      	strb	r3, [r7, #15]
    break;
 800eca6:	e008      	b.n	800ecba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecac:	e005      	b.n	800ecba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb2:	e002      	b.n	800ecba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb8:	bf00      	nop
  }
  return usb_status;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	4608      	mov	r0, r1
 800ecce:	4611      	mov	r1, r2
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	70fb      	strb	r3, [r7, #3]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	70bb      	strb	r3, [r7, #2]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ecec:	78bb      	ldrb	r3, [r7, #2]
 800ecee:	883a      	ldrh	r2, [r7, #0]
 800ecf0:	78f9      	ldrb	r1, [r7, #3]
 800ecf2:	f7f4 fcc6 	bl	8003682 <HAL_PCD_EP_Open>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
 800ecfc:	2b03      	cmp	r3, #3
 800ecfe:	d817      	bhi.n	800ed30 <USBD_LL_OpenEP+0x6c>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <USBD_LL_OpenEP+0x44>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed19 	.word	0x0800ed19
 800ed0c:	0800ed1f 	.word	0x0800ed1f
 800ed10:	0800ed25 	.word	0x0800ed25
 800ed14:	0800ed2b 	.word	0x0800ed2b
    case HAL_OK :
      usb_status = USBD_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed1c:	e00b      	b.n	800ed36 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	73fb      	strb	r3, [r7, #15]
    break;
 800ed22:	e008      	b.n	800ed36 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed24:	2301      	movs	r3, #1
 800ed26:	73fb      	strb	r3, [r7, #15]
    break;
 800ed28:	e005      	b.n	800ed36 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed2e:	e002      	b.n	800ed36 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ed30:	2303      	movs	r3, #3
 800ed32:	73fb      	strb	r3, [r7, #15]
    break;
 800ed34:	bf00      	nop
  }
  return usb_status;
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed5a:	78fa      	ldrb	r2, [r7, #3]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f4 fcf7 	bl	8003752 <HAL_PCD_EP_Close>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed68:	7bbb      	ldrb	r3, [r7, #14]
 800ed6a:	2b03      	cmp	r3, #3
 800ed6c:	d816      	bhi.n	800ed9c <USBD_LL_CloseEP+0x5c>
 800ed6e:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <USBD_LL_CloseEP+0x34>)
 800ed70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed74:	0800ed85 	.word	0x0800ed85
 800ed78:	0800ed8b 	.word	0x0800ed8b
 800ed7c:	0800ed91 	.word	0x0800ed91
 800ed80:	0800ed97 	.word	0x0800ed97
    case HAL_OK :
      usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]
    break;
 800ed88:	e00b      	b.n	800eda2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed8e:	e008      	b.n	800eda2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed90:	2301      	movs	r3, #1
 800ed92:	73fb      	strb	r3, [r7, #15]
    break;
 800ed94:	e005      	b.n	800eda2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed96:	2303      	movs	r3, #3
 800ed98:	73fb      	strb	r3, [r7, #15]
    break;
 800ed9a:	e002      	b.n	800eda2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eda0:	bf00      	nop
  }
  return usb_status;
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edc6:	78fa      	ldrb	r2, [r7, #3]
 800edc8:	4611      	mov	r1, r2
 800edca:	4618      	mov	r0, r3
 800edcc:	f7f4 fd9e 	bl	800390c <HAL_PCD_EP_SetStall>
 800edd0:	4603      	mov	r3, r0
 800edd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800edd4:	7bbb      	ldrb	r3, [r7, #14]
 800edd6:	2b03      	cmp	r3, #3
 800edd8:	d816      	bhi.n	800ee08 <USBD_LL_StallEP+0x5c>
 800edda:	a201      	add	r2, pc, #4	; (adr r2, 800ede0 <USBD_LL_StallEP+0x34>)
 800eddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede0:	0800edf1 	.word	0x0800edf1
 800ede4:	0800edf7 	.word	0x0800edf7
 800ede8:	0800edfd 	.word	0x0800edfd
 800edec:	0800ee03 	.word	0x0800ee03
    case HAL_OK :
      usb_status = USBD_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
    break;
 800edf4:	e00b      	b.n	800ee0e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edf6:	2303      	movs	r3, #3
 800edf8:	73fb      	strb	r3, [r7, #15]
    break;
 800edfa:	e008      	b.n	800ee0e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edfc:	2301      	movs	r3, #1
 800edfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ee00:	e005      	b.n	800ee0e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee02:	2303      	movs	r3, #3
 800ee04:	73fb      	strb	r3, [r7, #15]
    break;
 800ee06:	e002      	b.n	800ee0e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee0c:	bf00      	nop
  }
  return usb_status;
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee24:	2300      	movs	r3, #0
 800ee26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee32:	78fa      	ldrb	r2, [r7, #3]
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f4 fdca 	bl	80039d0 <HAL_PCD_EP_ClrStall>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ee40:	7bbb      	ldrb	r3, [r7, #14]
 800ee42:	2b03      	cmp	r3, #3
 800ee44:	d816      	bhi.n	800ee74 <USBD_LL_ClearStallEP+0x5c>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <USBD_LL_ClearStallEP+0x34>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee5d 	.word	0x0800ee5d
 800ee50:	0800ee63 	.word	0x0800ee63
 800ee54:	0800ee69 	.word	0x0800ee69
 800ee58:	0800ee6f 	.word	0x0800ee6f
    case HAL_OK :
      usb_status = USBD_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee60:	e00b      	b.n	800ee7a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee62:	2303      	movs	r3, #3
 800ee64:	73fb      	strb	r3, [r7, #15]
    break;
 800ee66:	e008      	b.n	800ee7a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6c:	e005      	b.n	800ee7a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	73fb      	strb	r3, [r7, #15]
    break;
 800ee72:	e002      	b.n	800ee7a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ee74:	2303      	movs	r3, #3
 800ee76:	73fb      	strb	r3, [r7, #15]
    break;
 800ee78:	bf00      	nop
  }
  return usb_status;
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	da0b      	bge.n	800eeb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eea0:	78fb      	ldrb	r3, [r7, #3]
 800eea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eea6:	68f9      	ldr	r1, [r7, #12]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	440b      	add	r3, r1
 800eeb2:	333e      	adds	r3, #62	; 0x3e
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	e00b      	b.n	800eed0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eebe:	68f9      	ldr	r1, [r7, #12]
 800eec0:	4613      	mov	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	440b      	add	r3, r1
 800eeca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eece:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eef6:	78fa      	ldrb	r2, [r7, #3]
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7f4 fb9c 	bl	8003638 <HAL_PCD_SetAddress>
 800ef00:	4603      	mov	r3, r0
 800ef02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d816      	bhi.n	800ef38 <USBD_LL_SetUSBAddress+0x5c>
 800ef0a:	a201      	add	r2, pc, #4	; (adr r2, 800ef10 <USBD_LL_SetUSBAddress+0x34>)
 800ef0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef10:	0800ef21 	.word	0x0800ef21
 800ef14:	0800ef27 	.word	0x0800ef27
 800ef18:	0800ef2d 	.word	0x0800ef2d
 800ef1c:	0800ef33 	.word	0x0800ef33
    case HAL_OK :
      usb_status = USBD_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73fb      	strb	r3, [r7, #15]
    break;
 800ef24:	e00b      	b.n	800ef3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef26:	2303      	movs	r3, #3
 800ef28:	73fb      	strb	r3, [r7, #15]
    break;
 800ef2a:	e008      	b.n	800ef3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef30:	e005      	b.n	800ef3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef32:	2303      	movs	r3, #3
 800ef34:	73fb      	strb	r3, [r7, #15]
    break;
 800ef36:	e002      	b.n	800ef3e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef3c:	bf00      	nop
  }
  return usb_status;
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	607a      	str	r2, [r7, #4]
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	460b      	mov	r3, r1
 800ef56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef66:	7af9      	ldrb	r1, [r7, #11]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	f7f4 fc91 	bl	8003892 <HAL_PCD_EP_Transmit>
 800ef70:	4603      	mov	r3, r0
 800ef72:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ef74:	7dbb      	ldrb	r3, [r7, #22]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d816      	bhi.n	800efa8 <USBD_LL_Transmit+0x60>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <USBD_LL_Transmit+0x38>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef91 	.word	0x0800ef91
 800ef84:	0800ef97 	.word	0x0800ef97
 800ef88:	0800ef9d 	.word	0x0800ef9d
 800ef8c:	0800efa3 	.word	0x0800efa3
    case HAL_OK :
      usb_status = USBD_OK;
 800ef90:	2300      	movs	r3, #0
 800ef92:	75fb      	strb	r3, [r7, #23]
    break;
 800ef94:	e00b      	b.n	800efae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef96:	2303      	movs	r3, #3
 800ef98:	75fb      	strb	r3, [r7, #23]
    break;
 800ef9a:	e008      	b.n	800efae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	75fb      	strb	r3, [r7, #23]
    break;
 800efa0:	e005      	b.n	800efae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efa2:	2303      	movs	r3, #3
 800efa4:	75fb      	strb	r3, [r7, #23]
    break;
 800efa6:	e002      	b.n	800efae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800efa8:	2303      	movs	r3, #3
 800efaa:	75fb      	strb	r3, [r7, #23]
    break;
 800efac:	bf00      	nop
  }
  return usb_status;
 800efae:	7dfb      	ldrb	r3, [r7, #23]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3718      	adds	r7, #24
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	603b      	str	r3, [r7, #0]
 800efc4:	460b      	mov	r3, r1
 800efc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800efd6:	7af9      	ldrb	r1, [r7, #11]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	f7f4 fc03 	bl	80037e6 <HAL_PCD_EP_Receive>
 800efe0:	4603      	mov	r3, r0
 800efe2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800efe4:	7dbb      	ldrb	r3, [r7, #22]
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d816      	bhi.n	800f018 <USBD_LL_PrepareReceive+0x60>
 800efea:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <USBD_LL_PrepareReceive+0x38>)
 800efec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff0:	0800f001 	.word	0x0800f001
 800eff4:	0800f007 	.word	0x0800f007
 800eff8:	0800f00d 	.word	0x0800f00d
 800effc:	0800f013 	.word	0x0800f013
    case HAL_OK :
      usb_status = USBD_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	75fb      	strb	r3, [r7, #23]
    break;
 800f004:	e00b      	b.n	800f01e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f006:	2303      	movs	r3, #3
 800f008:	75fb      	strb	r3, [r7, #23]
    break;
 800f00a:	e008      	b.n	800f01e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f00c:	2301      	movs	r3, #1
 800f00e:	75fb      	strb	r3, [r7, #23]
    break;
 800f010:	e005      	b.n	800f01e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f012:	2303      	movs	r3, #3
 800f014:	75fb      	strb	r3, [r7, #23]
    break;
 800f016:	e002      	b.n	800f01e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f018:	2303      	movs	r3, #3
 800f01a:	75fb      	strb	r3, [r7, #23]
    break;
 800f01c:	bf00      	nop
  }
  return usb_status;
 800f01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3718      	adds	r7, #24
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f03a:	78fa      	ldrb	r2, [r7, #3]
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f4 fc0f 	bl	8003862 <HAL_PCD_EP_GetRxCount>
 800f044:	4603      	mov	r3, r0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
	...

0800f050 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f058:	4b03      	ldr	r3, [pc, #12]	; (800f068 <USBD_static_malloc+0x18>)
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	200026b4 	.word	0x200026b4

0800f06c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]

}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f084:	f7f2 f8f8 	bl	8001278 <SystemClock_Config>
}
 800f088:	bf00      	nop
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <__libc_init_array>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	4d0d      	ldr	r5, [pc, #52]	; (800f0c4 <__libc_init_array+0x38>)
 800f090:	4c0d      	ldr	r4, [pc, #52]	; (800f0c8 <__libc_init_array+0x3c>)
 800f092:	1b64      	subs	r4, r4, r5
 800f094:	10a4      	asrs	r4, r4, #2
 800f096:	2600      	movs	r6, #0
 800f098:	42a6      	cmp	r6, r4
 800f09a:	d109      	bne.n	800f0b0 <__libc_init_array+0x24>
 800f09c:	4d0b      	ldr	r5, [pc, #44]	; (800f0cc <__libc_init_array+0x40>)
 800f09e:	4c0c      	ldr	r4, [pc, #48]	; (800f0d0 <__libc_init_array+0x44>)
 800f0a0:	f002 fda0 	bl	8011be4 <_init>
 800f0a4:	1b64      	subs	r4, r4, r5
 800f0a6:	10a4      	asrs	r4, r4, #2
 800f0a8:	2600      	movs	r6, #0
 800f0aa:	42a6      	cmp	r6, r4
 800f0ac:	d105      	bne.n	800f0ba <__libc_init_array+0x2e>
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0b4:	4798      	blx	r3
 800f0b6:	3601      	adds	r6, #1
 800f0b8:	e7ee      	b.n	800f098 <__libc_init_array+0xc>
 800f0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0be:	4798      	blx	r3
 800f0c0:	3601      	adds	r6, #1
 800f0c2:	e7f2      	b.n	800f0aa <__libc_init_array+0x1e>
 800f0c4:	08012300 	.word	0x08012300
 800f0c8:	08012300 	.word	0x08012300
 800f0cc:	08012300 	.word	0x08012300
 800f0d0:	08012304 	.word	0x08012304

0800f0d4 <malloc>:
 800f0d4:	4b02      	ldr	r3, [pc, #8]	; (800f0e0 <malloc+0xc>)
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	f000 b885 	b.w	800f1e8 <_malloc_r>
 800f0de:	bf00      	nop
 800f0e0:	20000184 	.word	0x20000184

0800f0e4 <memcpy>:
 800f0e4:	440a      	add	r2, r1
 800f0e6:	4291      	cmp	r1, r2
 800f0e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f0ec:	d100      	bne.n	800f0f0 <memcpy+0xc>
 800f0ee:	4770      	bx	lr
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0fa:	4291      	cmp	r1, r2
 800f0fc:	d1f9      	bne.n	800f0f2 <memcpy+0xe>
 800f0fe:	bd10      	pop	{r4, pc}

0800f100 <memset>:
 800f100:	4402      	add	r2, r0
 800f102:	4603      	mov	r3, r0
 800f104:	4293      	cmp	r3, r2
 800f106:	d100      	bne.n	800f10a <memset+0xa>
 800f108:	4770      	bx	lr
 800f10a:	f803 1b01 	strb.w	r1, [r3], #1
 800f10e:	e7f9      	b.n	800f104 <memset+0x4>

0800f110 <_free_r>:
 800f110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f112:	2900      	cmp	r1, #0
 800f114:	d044      	beq.n	800f1a0 <_free_r+0x90>
 800f116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f11a:	9001      	str	r0, [sp, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f1a1 0404 	sub.w	r4, r1, #4
 800f122:	bfb8      	it	lt
 800f124:	18e4      	addlt	r4, r4, r3
 800f126:	f001 fd1f 	bl	8010b68 <__malloc_lock>
 800f12a:	4a1e      	ldr	r2, [pc, #120]	; (800f1a4 <_free_r+0x94>)
 800f12c:	9801      	ldr	r0, [sp, #4]
 800f12e:	6813      	ldr	r3, [r2, #0]
 800f130:	b933      	cbnz	r3, 800f140 <_free_r+0x30>
 800f132:	6063      	str	r3, [r4, #4]
 800f134:	6014      	str	r4, [r2, #0]
 800f136:	b003      	add	sp, #12
 800f138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f13c:	f001 bd1a 	b.w	8010b74 <__malloc_unlock>
 800f140:	42a3      	cmp	r3, r4
 800f142:	d908      	bls.n	800f156 <_free_r+0x46>
 800f144:	6825      	ldr	r5, [r4, #0]
 800f146:	1961      	adds	r1, r4, r5
 800f148:	428b      	cmp	r3, r1
 800f14a:	bf01      	itttt	eq
 800f14c:	6819      	ldreq	r1, [r3, #0]
 800f14e:	685b      	ldreq	r3, [r3, #4]
 800f150:	1949      	addeq	r1, r1, r5
 800f152:	6021      	streq	r1, [r4, #0]
 800f154:	e7ed      	b.n	800f132 <_free_r+0x22>
 800f156:	461a      	mov	r2, r3
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	b10b      	cbz	r3, 800f160 <_free_r+0x50>
 800f15c:	42a3      	cmp	r3, r4
 800f15e:	d9fa      	bls.n	800f156 <_free_r+0x46>
 800f160:	6811      	ldr	r1, [r2, #0]
 800f162:	1855      	adds	r5, r2, r1
 800f164:	42a5      	cmp	r5, r4
 800f166:	d10b      	bne.n	800f180 <_free_r+0x70>
 800f168:	6824      	ldr	r4, [r4, #0]
 800f16a:	4421      	add	r1, r4
 800f16c:	1854      	adds	r4, r2, r1
 800f16e:	42a3      	cmp	r3, r4
 800f170:	6011      	str	r1, [r2, #0]
 800f172:	d1e0      	bne.n	800f136 <_free_r+0x26>
 800f174:	681c      	ldr	r4, [r3, #0]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	6053      	str	r3, [r2, #4]
 800f17a:	4421      	add	r1, r4
 800f17c:	6011      	str	r1, [r2, #0]
 800f17e:	e7da      	b.n	800f136 <_free_r+0x26>
 800f180:	d902      	bls.n	800f188 <_free_r+0x78>
 800f182:	230c      	movs	r3, #12
 800f184:	6003      	str	r3, [r0, #0]
 800f186:	e7d6      	b.n	800f136 <_free_r+0x26>
 800f188:	6825      	ldr	r5, [r4, #0]
 800f18a:	1961      	adds	r1, r4, r5
 800f18c:	428b      	cmp	r3, r1
 800f18e:	bf04      	itt	eq
 800f190:	6819      	ldreq	r1, [r3, #0]
 800f192:	685b      	ldreq	r3, [r3, #4]
 800f194:	6063      	str	r3, [r4, #4]
 800f196:	bf04      	itt	eq
 800f198:	1949      	addeq	r1, r1, r5
 800f19a:	6021      	streq	r1, [r4, #0]
 800f19c:	6054      	str	r4, [r2, #4]
 800f19e:	e7ca      	b.n	800f136 <_free_r+0x26>
 800f1a0:	b003      	add	sp, #12
 800f1a2:	bd30      	pop	{r4, r5, pc}
 800f1a4:	200028d4 	.word	0x200028d4

0800f1a8 <sbrk_aligned>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	4e0e      	ldr	r6, [pc, #56]	; (800f1e4 <sbrk_aligned+0x3c>)
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	6831      	ldr	r1, [r6, #0]
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	b911      	cbnz	r1, 800f1ba <sbrk_aligned+0x12>
 800f1b4:	f000 fd0e 	bl	800fbd4 <_sbrk_r>
 800f1b8:	6030      	str	r0, [r6, #0]
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f000 fd09 	bl	800fbd4 <_sbrk_r>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	d00a      	beq.n	800f1dc <sbrk_aligned+0x34>
 800f1c6:	1cc4      	adds	r4, r0, #3
 800f1c8:	f024 0403 	bic.w	r4, r4, #3
 800f1cc:	42a0      	cmp	r0, r4
 800f1ce:	d007      	beq.n	800f1e0 <sbrk_aligned+0x38>
 800f1d0:	1a21      	subs	r1, r4, r0
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 fcfe 	bl	800fbd4 <_sbrk_r>
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d101      	bne.n	800f1e0 <sbrk_aligned+0x38>
 800f1dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	200028d8 	.word	0x200028d8

0800f1e8 <_malloc_r>:
 800f1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ec:	1ccd      	adds	r5, r1, #3
 800f1ee:	f025 0503 	bic.w	r5, r5, #3
 800f1f2:	3508      	adds	r5, #8
 800f1f4:	2d0c      	cmp	r5, #12
 800f1f6:	bf38      	it	cc
 800f1f8:	250c      	movcc	r5, #12
 800f1fa:	2d00      	cmp	r5, #0
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	db01      	blt.n	800f204 <_malloc_r+0x1c>
 800f200:	42a9      	cmp	r1, r5
 800f202:	d905      	bls.n	800f210 <_malloc_r+0x28>
 800f204:	230c      	movs	r3, #12
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	2600      	movs	r6, #0
 800f20a:	4630      	mov	r0, r6
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	4e2e      	ldr	r6, [pc, #184]	; (800f2cc <_malloc_r+0xe4>)
 800f212:	f001 fca9 	bl	8010b68 <__malloc_lock>
 800f216:	6833      	ldr	r3, [r6, #0]
 800f218:	461c      	mov	r4, r3
 800f21a:	bb34      	cbnz	r4, 800f26a <_malloc_r+0x82>
 800f21c:	4629      	mov	r1, r5
 800f21e:	4638      	mov	r0, r7
 800f220:	f7ff ffc2 	bl	800f1a8 <sbrk_aligned>
 800f224:	1c43      	adds	r3, r0, #1
 800f226:	4604      	mov	r4, r0
 800f228:	d14d      	bne.n	800f2c6 <_malloc_r+0xde>
 800f22a:	6834      	ldr	r4, [r6, #0]
 800f22c:	4626      	mov	r6, r4
 800f22e:	2e00      	cmp	r6, #0
 800f230:	d140      	bne.n	800f2b4 <_malloc_r+0xcc>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	4631      	mov	r1, r6
 800f236:	4638      	mov	r0, r7
 800f238:	eb04 0803 	add.w	r8, r4, r3
 800f23c:	f000 fcca 	bl	800fbd4 <_sbrk_r>
 800f240:	4580      	cmp	r8, r0
 800f242:	d13a      	bne.n	800f2ba <_malloc_r+0xd2>
 800f244:	6821      	ldr	r1, [r4, #0]
 800f246:	3503      	adds	r5, #3
 800f248:	1a6d      	subs	r5, r5, r1
 800f24a:	f025 0503 	bic.w	r5, r5, #3
 800f24e:	3508      	adds	r5, #8
 800f250:	2d0c      	cmp	r5, #12
 800f252:	bf38      	it	cc
 800f254:	250c      	movcc	r5, #12
 800f256:	4629      	mov	r1, r5
 800f258:	4638      	mov	r0, r7
 800f25a:	f7ff ffa5 	bl	800f1a8 <sbrk_aligned>
 800f25e:	3001      	adds	r0, #1
 800f260:	d02b      	beq.n	800f2ba <_malloc_r+0xd2>
 800f262:	6823      	ldr	r3, [r4, #0]
 800f264:	442b      	add	r3, r5
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	e00e      	b.n	800f288 <_malloc_r+0xa0>
 800f26a:	6822      	ldr	r2, [r4, #0]
 800f26c:	1b52      	subs	r2, r2, r5
 800f26e:	d41e      	bmi.n	800f2ae <_malloc_r+0xc6>
 800f270:	2a0b      	cmp	r2, #11
 800f272:	d916      	bls.n	800f2a2 <_malloc_r+0xba>
 800f274:	1961      	adds	r1, r4, r5
 800f276:	42a3      	cmp	r3, r4
 800f278:	6025      	str	r5, [r4, #0]
 800f27a:	bf18      	it	ne
 800f27c:	6059      	strne	r1, [r3, #4]
 800f27e:	6863      	ldr	r3, [r4, #4]
 800f280:	bf08      	it	eq
 800f282:	6031      	streq	r1, [r6, #0]
 800f284:	5162      	str	r2, [r4, r5]
 800f286:	604b      	str	r3, [r1, #4]
 800f288:	4638      	mov	r0, r7
 800f28a:	f104 060b 	add.w	r6, r4, #11
 800f28e:	f001 fc71 	bl	8010b74 <__malloc_unlock>
 800f292:	f026 0607 	bic.w	r6, r6, #7
 800f296:	1d23      	adds	r3, r4, #4
 800f298:	1af2      	subs	r2, r6, r3
 800f29a:	d0b6      	beq.n	800f20a <_malloc_r+0x22>
 800f29c:	1b9b      	subs	r3, r3, r6
 800f29e:	50a3      	str	r3, [r4, r2]
 800f2a0:	e7b3      	b.n	800f20a <_malloc_r+0x22>
 800f2a2:	6862      	ldr	r2, [r4, #4]
 800f2a4:	42a3      	cmp	r3, r4
 800f2a6:	bf0c      	ite	eq
 800f2a8:	6032      	streq	r2, [r6, #0]
 800f2aa:	605a      	strne	r2, [r3, #4]
 800f2ac:	e7ec      	b.n	800f288 <_malloc_r+0xa0>
 800f2ae:	4623      	mov	r3, r4
 800f2b0:	6864      	ldr	r4, [r4, #4]
 800f2b2:	e7b2      	b.n	800f21a <_malloc_r+0x32>
 800f2b4:	4634      	mov	r4, r6
 800f2b6:	6876      	ldr	r6, [r6, #4]
 800f2b8:	e7b9      	b.n	800f22e <_malloc_r+0x46>
 800f2ba:	230c      	movs	r3, #12
 800f2bc:	603b      	str	r3, [r7, #0]
 800f2be:	4638      	mov	r0, r7
 800f2c0:	f001 fc58 	bl	8010b74 <__malloc_unlock>
 800f2c4:	e7a1      	b.n	800f20a <_malloc_r+0x22>
 800f2c6:	6025      	str	r5, [r4, #0]
 800f2c8:	e7de      	b.n	800f288 <_malloc_r+0xa0>
 800f2ca:	bf00      	nop
 800f2cc:	200028d4 	.word	0x200028d4

0800f2d0 <__cvt>:
 800f2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	ec55 4b10 	vmov	r4, r5, d0
 800f2d8:	2d00      	cmp	r5, #0
 800f2da:	460e      	mov	r6, r1
 800f2dc:	4619      	mov	r1, r3
 800f2de:	462b      	mov	r3, r5
 800f2e0:	bfbb      	ittet	lt
 800f2e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f2e6:	461d      	movlt	r5, r3
 800f2e8:	2300      	movge	r3, #0
 800f2ea:	232d      	movlt	r3, #45	; 0x2d
 800f2ec:	700b      	strb	r3, [r1, #0]
 800f2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f2f4:	4691      	mov	r9, r2
 800f2f6:	f023 0820 	bic.w	r8, r3, #32
 800f2fa:	bfbc      	itt	lt
 800f2fc:	4622      	movlt	r2, r4
 800f2fe:	4614      	movlt	r4, r2
 800f300:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f304:	d005      	beq.n	800f312 <__cvt+0x42>
 800f306:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f30a:	d100      	bne.n	800f30e <__cvt+0x3e>
 800f30c:	3601      	adds	r6, #1
 800f30e:	2102      	movs	r1, #2
 800f310:	e000      	b.n	800f314 <__cvt+0x44>
 800f312:	2103      	movs	r1, #3
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	ab02      	add	r3, sp, #8
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	ec45 4b10 	vmov	d0, r4, r5
 800f320:	4653      	mov	r3, sl
 800f322:	4632      	mov	r2, r6
 800f324:	f000 fd10 	bl	800fd48 <_dtoa_r>
 800f328:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f32c:	4607      	mov	r7, r0
 800f32e:	d102      	bne.n	800f336 <__cvt+0x66>
 800f330:	f019 0f01 	tst.w	r9, #1
 800f334:	d022      	beq.n	800f37c <__cvt+0xac>
 800f336:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f33a:	eb07 0906 	add.w	r9, r7, r6
 800f33e:	d110      	bne.n	800f362 <__cvt+0x92>
 800f340:	783b      	ldrb	r3, [r7, #0]
 800f342:	2b30      	cmp	r3, #48	; 0x30
 800f344:	d10a      	bne.n	800f35c <__cvt+0x8c>
 800f346:	2200      	movs	r2, #0
 800f348:	2300      	movs	r3, #0
 800f34a:	4620      	mov	r0, r4
 800f34c:	4629      	mov	r1, r5
 800f34e:	f7f1 fbd3 	bl	8000af8 <__aeabi_dcmpeq>
 800f352:	b918      	cbnz	r0, 800f35c <__cvt+0x8c>
 800f354:	f1c6 0601 	rsb	r6, r6, #1
 800f358:	f8ca 6000 	str.w	r6, [sl]
 800f35c:	f8da 3000 	ldr.w	r3, [sl]
 800f360:	4499      	add	r9, r3
 800f362:	2200      	movs	r2, #0
 800f364:	2300      	movs	r3, #0
 800f366:	4620      	mov	r0, r4
 800f368:	4629      	mov	r1, r5
 800f36a:	f7f1 fbc5 	bl	8000af8 <__aeabi_dcmpeq>
 800f36e:	b108      	cbz	r0, 800f374 <__cvt+0xa4>
 800f370:	f8cd 900c 	str.w	r9, [sp, #12]
 800f374:	2230      	movs	r2, #48	; 0x30
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	454b      	cmp	r3, r9
 800f37a:	d307      	bcc.n	800f38c <__cvt+0xbc>
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f380:	1bdb      	subs	r3, r3, r7
 800f382:	4638      	mov	r0, r7
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	b004      	add	sp, #16
 800f388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38c:	1c59      	adds	r1, r3, #1
 800f38e:	9103      	str	r1, [sp, #12]
 800f390:	701a      	strb	r2, [r3, #0]
 800f392:	e7f0      	b.n	800f376 <__cvt+0xa6>

0800f394 <__exponent>:
 800f394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f396:	4603      	mov	r3, r0
 800f398:	2900      	cmp	r1, #0
 800f39a:	bfb8      	it	lt
 800f39c:	4249      	neglt	r1, r1
 800f39e:	f803 2b02 	strb.w	r2, [r3], #2
 800f3a2:	bfb4      	ite	lt
 800f3a4:	222d      	movlt	r2, #45	; 0x2d
 800f3a6:	222b      	movge	r2, #43	; 0x2b
 800f3a8:	2909      	cmp	r1, #9
 800f3aa:	7042      	strb	r2, [r0, #1]
 800f3ac:	dd2a      	ble.n	800f404 <__exponent+0x70>
 800f3ae:	f10d 0407 	add.w	r4, sp, #7
 800f3b2:	46a4      	mov	ip, r4
 800f3b4:	270a      	movs	r7, #10
 800f3b6:	46a6      	mov	lr, r4
 800f3b8:	460a      	mov	r2, r1
 800f3ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800f3be:	fb07 1516 	mls	r5, r7, r6, r1
 800f3c2:	3530      	adds	r5, #48	; 0x30
 800f3c4:	2a63      	cmp	r2, #99	; 0x63
 800f3c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f3ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	dcf1      	bgt.n	800f3b6 <__exponent+0x22>
 800f3d2:	3130      	adds	r1, #48	; 0x30
 800f3d4:	f1ae 0502 	sub.w	r5, lr, #2
 800f3d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f3dc:	1c44      	adds	r4, r0, #1
 800f3de:	4629      	mov	r1, r5
 800f3e0:	4561      	cmp	r1, ip
 800f3e2:	d30a      	bcc.n	800f3fa <__exponent+0x66>
 800f3e4:	f10d 0209 	add.w	r2, sp, #9
 800f3e8:	eba2 020e 	sub.w	r2, r2, lr
 800f3ec:	4565      	cmp	r5, ip
 800f3ee:	bf88      	it	hi
 800f3f0:	2200      	movhi	r2, #0
 800f3f2:	4413      	add	r3, r2
 800f3f4:	1a18      	subs	r0, r3, r0
 800f3f6:	b003      	add	sp, #12
 800f3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f402:	e7ed      	b.n	800f3e0 <__exponent+0x4c>
 800f404:	2330      	movs	r3, #48	; 0x30
 800f406:	3130      	adds	r1, #48	; 0x30
 800f408:	7083      	strb	r3, [r0, #2]
 800f40a:	70c1      	strb	r1, [r0, #3]
 800f40c:	1d03      	adds	r3, r0, #4
 800f40e:	e7f1      	b.n	800f3f4 <__exponent+0x60>

0800f410 <_printf_float>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	ed2d 8b02 	vpush	{d8}
 800f418:	b08d      	sub	sp, #52	; 0x34
 800f41a:	460c      	mov	r4, r1
 800f41c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f420:	4616      	mov	r6, r2
 800f422:	461f      	mov	r7, r3
 800f424:	4605      	mov	r5, r0
 800f426:	f001 fb85 	bl	8010b34 <_localeconv_r>
 800f42a:	f8d0 a000 	ldr.w	sl, [r0]
 800f42e:	4650      	mov	r0, sl
 800f430:	f7f0 fee6 	bl	8000200 <strlen>
 800f434:	2300      	movs	r3, #0
 800f436:	930a      	str	r3, [sp, #40]	; 0x28
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	9305      	str	r3, [sp, #20]
 800f43c:	f8d8 3000 	ldr.w	r3, [r8]
 800f440:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f444:	3307      	adds	r3, #7
 800f446:	f023 0307 	bic.w	r3, r3, #7
 800f44a:	f103 0208 	add.w	r2, r3, #8
 800f44e:	f8c8 2000 	str.w	r2, [r8]
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f45a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f45e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f462:	9307      	str	r3, [sp, #28]
 800f464:	f8cd 8018 	str.w	r8, [sp, #24]
 800f468:	ee08 0a10 	vmov	s16, r0
 800f46c:	4b9f      	ldr	r3, [pc, #636]	; (800f6ec <_printf_float+0x2dc>)
 800f46e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f476:	f7f1 fb71 	bl	8000b5c <__aeabi_dcmpun>
 800f47a:	bb88      	cbnz	r0, 800f4e0 <_printf_float+0xd0>
 800f47c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f480:	4b9a      	ldr	r3, [pc, #616]	; (800f6ec <_printf_float+0x2dc>)
 800f482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f486:	f7f1 fb4b 	bl	8000b20 <__aeabi_dcmple>
 800f48a:	bb48      	cbnz	r0, 800f4e0 <_printf_float+0xd0>
 800f48c:	2200      	movs	r2, #0
 800f48e:	2300      	movs	r3, #0
 800f490:	4640      	mov	r0, r8
 800f492:	4649      	mov	r1, r9
 800f494:	f7f1 fb3a 	bl	8000b0c <__aeabi_dcmplt>
 800f498:	b110      	cbz	r0, 800f4a0 <_printf_float+0x90>
 800f49a:	232d      	movs	r3, #45	; 0x2d
 800f49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4a0:	4b93      	ldr	r3, [pc, #588]	; (800f6f0 <_printf_float+0x2e0>)
 800f4a2:	4894      	ldr	r0, [pc, #592]	; (800f6f4 <_printf_float+0x2e4>)
 800f4a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f4a8:	bf94      	ite	ls
 800f4aa:	4698      	movls	r8, r3
 800f4ac:	4680      	movhi	r8, r0
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	6123      	str	r3, [r4, #16]
 800f4b2:	9b05      	ldr	r3, [sp, #20]
 800f4b4:	f023 0204 	bic.w	r2, r3, #4
 800f4b8:	6022      	str	r2, [r4, #0]
 800f4ba:	f04f 0900 	mov.w	r9, #0
 800f4be:	9700      	str	r7, [sp, #0]
 800f4c0:	4633      	mov	r3, r6
 800f4c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	f000 f9d8 	bl	800f87c <_printf_common>
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f040 8090 	bne.w	800f5f2 <_printf_float+0x1e2>
 800f4d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4d6:	b00d      	add	sp, #52	; 0x34
 800f4d8:	ecbd 8b02 	vpop	{d8}
 800f4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e0:	4642      	mov	r2, r8
 800f4e2:	464b      	mov	r3, r9
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	4649      	mov	r1, r9
 800f4e8:	f7f1 fb38 	bl	8000b5c <__aeabi_dcmpun>
 800f4ec:	b140      	cbz	r0, 800f500 <_printf_float+0xf0>
 800f4ee:	464b      	mov	r3, r9
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bfbc      	itt	lt
 800f4f4:	232d      	movlt	r3, #45	; 0x2d
 800f4f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4fa:	487f      	ldr	r0, [pc, #508]	; (800f6f8 <_printf_float+0x2e8>)
 800f4fc:	4b7f      	ldr	r3, [pc, #508]	; (800f6fc <_printf_float+0x2ec>)
 800f4fe:	e7d1      	b.n	800f4a4 <_printf_float+0x94>
 800f500:	6863      	ldr	r3, [r4, #4]
 800f502:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f506:	9206      	str	r2, [sp, #24]
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	d13f      	bne.n	800f58c <_printf_float+0x17c>
 800f50c:	2306      	movs	r3, #6
 800f50e:	6063      	str	r3, [r4, #4]
 800f510:	9b05      	ldr	r3, [sp, #20]
 800f512:	6861      	ldr	r1, [r4, #4]
 800f514:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f518:	2300      	movs	r3, #0
 800f51a:	9303      	str	r3, [sp, #12]
 800f51c:	ab0a      	add	r3, sp, #40	; 0x28
 800f51e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f522:	ab09      	add	r3, sp, #36	; 0x24
 800f524:	ec49 8b10 	vmov	d0, r8, r9
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	6022      	str	r2, [r4, #0]
 800f52c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f530:	4628      	mov	r0, r5
 800f532:	f7ff fecd 	bl	800f2d0 <__cvt>
 800f536:	9b06      	ldr	r3, [sp, #24]
 800f538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f53a:	2b47      	cmp	r3, #71	; 0x47
 800f53c:	4680      	mov	r8, r0
 800f53e:	d108      	bne.n	800f552 <_printf_float+0x142>
 800f540:	1cc8      	adds	r0, r1, #3
 800f542:	db02      	blt.n	800f54a <_printf_float+0x13a>
 800f544:	6863      	ldr	r3, [r4, #4]
 800f546:	4299      	cmp	r1, r3
 800f548:	dd41      	ble.n	800f5ce <_printf_float+0x1be>
 800f54a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f54e:	fa5f fb8b 	uxtb.w	fp, fp
 800f552:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f556:	d820      	bhi.n	800f59a <_printf_float+0x18a>
 800f558:	3901      	subs	r1, #1
 800f55a:	465a      	mov	r2, fp
 800f55c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f560:	9109      	str	r1, [sp, #36]	; 0x24
 800f562:	f7ff ff17 	bl	800f394 <__exponent>
 800f566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f568:	1813      	adds	r3, r2, r0
 800f56a:	2a01      	cmp	r2, #1
 800f56c:	4681      	mov	r9, r0
 800f56e:	6123      	str	r3, [r4, #16]
 800f570:	dc02      	bgt.n	800f578 <_printf_float+0x168>
 800f572:	6822      	ldr	r2, [r4, #0]
 800f574:	07d2      	lsls	r2, r2, #31
 800f576:	d501      	bpl.n	800f57c <_printf_float+0x16c>
 800f578:	3301      	adds	r3, #1
 800f57a:	6123      	str	r3, [r4, #16]
 800f57c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f580:	2b00      	cmp	r3, #0
 800f582:	d09c      	beq.n	800f4be <_printf_float+0xae>
 800f584:	232d      	movs	r3, #45	; 0x2d
 800f586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f58a:	e798      	b.n	800f4be <_printf_float+0xae>
 800f58c:	9a06      	ldr	r2, [sp, #24]
 800f58e:	2a47      	cmp	r2, #71	; 0x47
 800f590:	d1be      	bne.n	800f510 <_printf_float+0x100>
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1bc      	bne.n	800f510 <_printf_float+0x100>
 800f596:	2301      	movs	r3, #1
 800f598:	e7b9      	b.n	800f50e <_printf_float+0xfe>
 800f59a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f59e:	d118      	bne.n	800f5d2 <_printf_float+0x1c2>
 800f5a0:	2900      	cmp	r1, #0
 800f5a2:	6863      	ldr	r3, [r4, #4]
 800f5a4:	dd0b      	ble.n	800f5be <_printf_float+0x1ae>
 800f5a6:	6121      	str	r1, [r4, #16]
 800f5a8:	b913      	cbnz	r3, 800f5b0 <_printf_float+0x1a0>
 800f5aa:	6822      	ldr	r2, [r4, #0]
 800f5ac:	07d0      	lsls	r0, r2, #31
 800f5ae:	d502      	bpl.n	800f5b6 <_printf_float+0x1a6>
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	440b      	add	r3, r1
 800f5b4:	6123      	str	r3, [r4, #16]
 800f5b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5b8:	f04f 0900 	mov.w	r9, #0
 800f5bc:	e7de      	b.n	800f57c <_printf_float+0x16c>
 800f5be:	b913      	cbnz	r3, 800f5c6 <_printf_float+0x1b6>
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	07d2      	lsls	r2, r2, #31
 800f5c4:	d501      	bpl.n	800f5ca <_printf_float+0x1ba>
 800f5c6:	3302      	adds	r3, #2
 800f5c8:	e7f4      	b.n	800f5b4 <_printf_float+0x1a4>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e7f2      	b.n	800f5b4 <_printf_float+0x1a4>
 800f5ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5d4:	4299      	cmp	r1, r3
 800f5d6:	db05      	blt.n	800f5e4 <_printf_float+0x1d4>
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	6121      	str	r1, [r4, #16]
 800f5dc:	07d8      	lsls	r0, r3, #31
 800f5de:	d5ea      	bpl.n	800f5b6 <_printf_float+0x1a6>
 800f5e0:	1c4b      	adds	r3, r1, #1
 800f5e2:	e7e7      	b.n	800f5b4 <_printf_float+0x1a4>
 800f5e4:	2900      	cmp	r1, #0
 800f5e6:	bfd4      	ite	le
 800f5e8:	f1c1 0202 	rsble	r2, r1, #2
 800f5ec:	2201      	movgt	r2, #1
 800f5ee:	4413      	add	r3, r2
 800f5f0:	e7e0      	b.n	800f5b4 <_printf_float+0x1a4>
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	055a      	lsls	r2, r3, #21
 800f5f6:	d407      	bmi.n	800f608 <_printf_float+0x1f8>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	4642      	mov	r2, r8
 800f5fc:	4631      	mov	r1, r6
 800f5fe:	4628      	mov	r0, r5
 800f600:	47b8      	blx	r7
 800f602:	3001      	adds	r0, #1
 800f604:	d12c      	bne.n	800f660 <_printf_float+0x250>
 800f606:	e764      	b.n	800f4d2 <_printf_float+0xc2>
 800f608:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f60c:	f240 80e0 	bls.w	800f7d0 <_printf_float+0x3c0>
 800f610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f614:	2200      	movs	r2, #0
 800f616:	2300      	movs	r3, #0
 800f618:	f7f1 fa6e 	bl	8000af8 <__aeabi_dcmpeq>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d034      	beq.n	800f68a <_printf_float+0x27a>
 800f620:	4a37      	ldr	r2, [pc, #220]	; (800f700 <_printf_float+0x2f0>)
 800f622:	2301      	movs	r3, #1
 800f624:	4631      	mov	r1, r6
 800f626:	4628      	mov	r0, r5
 800f628:	47b8      	blx	r7
 800f62a:	3001      	adds	r0, #1
 800f62c:	f43f af51 	beq.w	800f4d2 <_printf_float+0xc2>
 800f630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f634:	429a      	cmp	r2, r3
 800f636:	db02      	blt.n	800f63e <_printf_float+0x22e>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	07d8      	lsls	r0, r3, #31
 800f63c:	d510      	bpl.n	800f660 <_printf_float+0x250>
 800f63e:	ee18 3a10 	vmov	r3, s16
 800f642:	4652      	mov	r2, sl
 800f644:	4631      	mov	r1, r6
 800f646:	4628      	mov	r0, r5
 800f648:	47b8      	blx	r7
 800f64a:	3001      	adds	r0, #1
 800f64c:	f43f af41 	beq.w	800f4d2 <_printf_float+0xc2>
 800f650:	f04f 0800 	mov.w	r8, #0
 800f654:	f104 091a 	add.w	r9, r4, #26
 800f658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f65a:	3b01      	subs	r3, #1
 800f65c:	4543      	cmp	r3, r8
 800f65e:	dc09      	bgt.n	800f674 <_printf_float+0x264>
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	079b      	lsls	r3, r3, #30
 800f664:	f100 8105 	bmi.w	800f872 <_printf_float+0x462>
 800f668:	68e0      	ldr	r0, [r4, #12]
 800f66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f66c:	4298      	cmp	r0, r3
 800f66e:	bfb8      	it	lt
 800f670:	4618      	movlt	r0, r3
 800f672:	e730      	b.n	800f4d6 <_printf_float+0xc6>
 800f674:	2301      	movs	r3, #1
 800f676:	464a      	mov	r2, r9
 800f678:	4631      	mov	r1, r6
 800f67a:	4628      	mov	r0, r5
 800f67c:	47b8      	blx	r7
 800f67e:	3001      	adds	r0, #1
 800f680:	f43f af27 	beq.w	800f4d2 <_printf_float+0xc2>
 800f684:	f108 0801 	add.w	r8, r8, #1
 800f688:	e7e6      	b.n	800f658 <_printf_float+0x248>
 800f68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	dc39      	bgt.n	800f704 <_printf_float+0x2f4>
 800f690:	4a1b      	ldr	r2, [pc, #108]	; (800f700 <_printf_float+0x2f0>)
 800f692:	2301      	movs	r3, #1
 800f694:	4631      	mov	r1, r6
 800f696:	4628      	mov	r0, r5
 800f698:	47b8      	blx	r7
 800f69a:	3001      	adds	r0, #1
 800f69c:	f43f af19 	beq.w	800f4d2 <_printf_float+0xc2>
 800f6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	d102      	bne.n	800f6ae <_printf_float+0x29e>
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	07d9      	lsls	r1, r3, #31
 800f6ac:	d5d8      	bpl.n	800f660 <_printf_float+0x250>
 800f6ae:	ee18 3a10 	vmov	r3, s16
 800f6b2:	4652      	mov	r2, sl
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	47b8      	blx	r7
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	f43f af09 	beq.w	800f4d2 <_printf_float+0xc2>
 800f6c0:	f04f 0900 	mov.w	r9, #0
 800f6c4:	f104 0a1a 	add.w	sl, r4, #26
 800f6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ca:	425b      	negs	r3, r3
 800f6cc:	454b      	cmp	r3, r9
 800f6ce:	dc01      	bgt.n	800f6d4 <_printf_float+0x2c4>
 800f6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6d2:	e792      	b.n	800f5fa <_printf_float+0x1ea>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	4652      	mov	r2, sl
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4628      	mov	r0, r5
 800f6dc:	47b8      	blx	r7
 800f6de:	3001      	adds	r0, #1
 800f6e0:	f43f aef7 	beq.w	800f4d2 <_printf_float+0xc2>
 800f6e4:	f109 0901 	add.w	r9, r9, #1
 800f6e8:	e7ee      	b.n	800f6c8 <_printf_float+0x2b8>
 800f6ea:	bf00      	nop
 800f6ec:	7fefffff 	.word	0x7fefffff
 800f6f0:	08011f1c 	.word	0x08011f1c
 800f6f4:	08011f20 	.word	0x08011f20
 800f6f8:	08011f28 	.word	0x08011f28
 800f6fc:	08011f24 	.word	0x08011f24
 800f700:	08011f2c 	.word	0x08011f2c
 800f704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f708:	429a      	cmp	r2, r3
 800f70a:	bfa8      	it	ge
 800f70c:	461a      	movge	r2, r3
 800f70e:	2a00      	cmp	r2, #0
 800f710:	4691      	mov	r9, r2
 800f712:	dc37      	bgt.n	800f784 <_printf_float+0x374>
 800f714:	f04f 0b00 	mov.w	fp, #0
 800f718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f71c:	f104 021a 	add.w	r2, r4, #26
 800f720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f722:	9305      	str	r3, [sp, #20]
 800f724:	eba3 0309 	sub.w	r3, r3, r9
 800f728:	455b      	cmp	r3, fp
 800f72a:	dc33      	bgt.n	800f794 <_printf_float+0x384>
 800f72c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f730:	429a      	cmp	r2, r3
 800f732:	db3b      	blt.n	800f7ac <_printf_float+0x39c>
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	07da      	lsls	r2, r3, #31
 800f738:	d438      	bmi.n	800f7ac <_printf_float+0x39c>
 800f73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f73c:	9a05      	ldr	r2, [sp, #20]
 800f73e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f740:	1a9a      	subs	r2, r3, r2
 800f742:	eba3 0901 	sub.w	r9, r3, r1
 800f746:	4591      	cmp	r9, r2
 800f748:	bfa8      	it	ge
 800f74a:	4691      	movge	r9, r2
 800f74c:	f1b9 0f00 	cmp.w	r9, #0
 800f750:	dc35      	bgt.n	800f7be <_printf_float+0x3ae>
 800f752:	f04f 0800 	mov.w	r8, #0
 800f756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f75a:	f104 0a1a 	add.w	sl, r4, #26
 800f75e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f762:	1a9b      	subs	r3, r3, r2
 800f764:	eba3 0309 	sub.w	r3, r3, r9
 800f768:	4543      	cmp	r3, r8
 800f76a:	f77f af79 	ble.w	800f660 <_printf_float+0x250>
 800f76e:	2301      	movs	r3, #1
 800f770:	4652      	mov	r2, sl
 800f772:	4631      	mov	r1, r6
 800f774:	4628      	mov	r0, r5
 800f776:	47b8      	blx	r7
 800f778:	3001      	adds	r0, #1
 800f77a:	f43f aeaa 	beq.w	800f4d2 <_printf_float+0xc2>
 800f77e:	f108 0801 	add.w	r8, r8, #1
 800f782:	e7ec      	b.n	800f75e <_printf_float+0x34e>
 800f784:	4613      	mov	r3, r2
 800f786:	4631      	mov	r1, r6
 800f788:	4642      	mov	r2, r8
 800f78a:	4628      	mov	r0, r5
 800f78c:	47b8      	blx	r7
 800f78e:	3001      	adds	r0, #1
 800f790:	d1c0      	bne.n	800f714 <_printf_float+0x304>
 800f792:	e69e      	b.n	800f4d2 <_printf_float+0xc2>
 800f794:	2301      	movs	r3, #1
 800f796:	4631      	mov	r1, r6
 800f798:	4628      	mov	r0, r5
 800f79a:	9205      	str	r2, [sp, #20]
 800f79c:	47b8      	blx	r7
 800f79e:	3001      	adds	r0, #1
 800f7a0:	f43f ae97 	beq.w	800f4d2 <_printf_float+0xc2>
 800f7a4:	9a05      	ldr	r2, [sp, #20]
 800f7a6:	f10b 0b01 	add.w	fp, fp, #1
 800f7aa:	e7b9      	b.n	800f720 <_printf_float+0x310>
 800f7ac:	ee18 3a10 	vmov	r3, s16
 800f7b0:	4652      	mov	r2, sl
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	47b8      	blx	r7
 800f7b8:	3001      	adds	r0, #1
 800f7ba:	d1be      	bne.n	800f73a <_printf_float+0x32a>
 800f7bc:	e689      	b.n	800f4d2 <_printf_float+0xc2>
 800f7be:	9a05      	ldr	r2, [sp, #20]
 800f7c0:	464b      	mov	r3, r9
 800f7c2:	4442      	add	r2, r8
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	47b8      	blx	r7
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	d1c1      	bne.n	800f752 <_printf_float+0x342>
 800f7ce:	e680      	b.n	800f4d2 <_printf_float+0xc2>
 800f7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7d2:	2a01      	cmp	r2, #1
 800f7d4:	dc01      	bgt.n	800f7da <_printf_float+0x3ca>
 800f7d6:	07db      	lsls	r3, r3, #31
 800f7d8:	d538      	bpl.n	800f84c <_printf_float+0x43c>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	4642      	mov	r2, r8
 800f7de:	4631      	mov	r1, r6
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	47b8      	blx	r7
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	f43f ae74 	beq.w	800f4d2 <_printf_float+0xc2>
 800f7ea:	ee18 3a10 	vmov	r3, s16
 800f7ee:	4652      	mov	r2, sl
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f ae6b 	beq.w	800f4d2 <_printf_float+0xc2>
 800f7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f800:	2200      	movs	r2, #0
 800f802:	2300      	movs	r3, #0
 800f804:	f7f1 f978 	bl	8000af8 <__aeabi_dcmpeq>
 800f808:	b9d8      	cbnz	r0, 800f842 <_printf_float+0x432>
 800f80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f80c:	f108 0201 	add.w	r2, r8, #1
 800f810:	3b01      	subs	r3, #1
 800f812:	4631      	mov	r1, r6
 800f814:	4628      	mov	r0, r5
 800f816:	47b8      	blx	r7
 800f818:	3001      	adds	r0, #1
 800f81a:	d10e      	bne.n	800f83a <_printf_float+0x42a>
 800f81c:	e659      	b.n	800f4d2 <_printf_float+0xc2>
 800f81e:	2301      	movs	r3, #1
 800f820:	4652      	mov	r2, sl
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	47b8      	blx	r7
 800f828:	3001      	adds	r0, #1
 800f82a:	f43f ae52 	beq.w	800f4d2 <_printf_float+0xc2>
 800f82e:	f108 0801 	add.w	r8, r8, #1
 800f832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f834:	3b01      	subs	r3, #1
 800f836:	4543      	cmp	r3, r8
 800f838:	dcf1      	bgt.n	800f81e <_printf_float+0x40e>
 800f83a:	464b      	mov	r3, r9
 800f83c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f840:	e6dc      	b.n	800f5fc <_printf_float+0x1ec>
 800f842:	f04f 0800 	mov.w	r8, #0
 800f846:	f104 0a1a 	add.w	sl, r4, #26
 800f84a:	e7f2      	b.n	800f832 <_printf_float+0x422>
 800f84c:	2301      	movs	r3, #1
 800f84e:	4642      	mov	r2, r8
 800f850:	e7df      	b.n	800f812 <_printf_float+0x402>
 800f852:	2301      	movs	r3, #1
 800f854:	464a      	mov	r2, r9
 800f856:	4631      	mov	r1, r6
 800f858:	4628      	mov	r0, r5
 800f85a:	47b8      	blx	r7
 800f85c:	3001      	adds	r0, #1
 800f85e:	f43f ae38 	beq.w	800f4d2 <_printf_float+0xc2>
 800f862:	f108 0801 	add.w	r8, r8, #1
 800f866:	68e3      	ldr	r3, [r4, #12]
 800f868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f86a:	1a5b      	subs	r3, r3, r1
 800f86c:	4543      	cmp	r3, r8
 800f86e:	dcf0      	bgt.n	800f852 <_printf_float+0x442>
 800f870:	e6fa      	b.n	800f668 <_printf_float+0x258>
 800f872:	f04f 0800 	mov.w	r8, #0
 800f876:	f104 0919 	add.w	r9, r4, #25
 800f87a:	e7f4      	b.n	800f866 <_printf_float+0x456>

0800f87c <_printf_common>:
 800f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f880:	4616      	mov	r6, r2
 800f882:	4699      	mov	r9, r3
 800f884:	688a      	ldr	r2, [r1, #8]
 800f886:	690b      	ldr	r3, [r1, #16]
 800f888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f88c:	4293      	cmp	r3, r2
 800f88e:	bfb8      	it	lt
 800f890:	4613      	movlt	r3, r2
 800f892:	6033      	str	r3, [r6, #0]
 800f894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f898:	4607      	mov	r7, r0
 800f89a:	460c      	mov	r4, r1
 800f89c:	b10a      	cbz	r2, 800f8a2 <_printf_common+0x26>
 800f89e:	3301      	adds	r3, #1
 800f8a0:	6033      	str	r3, [r6, #0]
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	0699      	lsls	r1, r3, #26
 800f8a6:	bf42      	ittt	mi
 800f8a8:	6833      	ldrmi	r3, [r6, #0]
 800f8aa:	3302      	addmi	r3, #2
 800f8ac:	6033      	strmi	r3, [r6, #0]
 800f8ae:	6825      	ldr	r5, [r4, #0]
 800f8b0:	f015 0506 	ands.w	r5, r5, #6
 800f8b4:	d106      	bne.n	800f8c4 <_printf_common+0x48>
 800f8b6:	f104 0a19 	add.w	sl, r4, #25
 800f8ba:	68e3      	ldr	r3, [r4, #12]
 800f8bc:	6832      	ldr	r2, [r6, #0]
 800f8be:	1a9b      	subs	r3, r3, r2
 800f8c0:	42ab      	cmp	r3, r5
 800f8c2:	dc26      	bgt.n	800f912 <_printf_common+0x96>
 800f8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8c8:	1e13      	subs	r3, r2, #0
 800f8ca:	6822      	ldr	r2, [r4, #0]
 800f8cc:	bf18      	it	ne
 800f8ce:	2301      	movne	r3, #1
 800f8d0:	0692      	lsls	r2, r2, #26
 800f8d2:	d42b      	bmi.n	800f92c <_printf_common+0xb0>
 800f8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8d8:	4649      	mov	r1, r9
 800f8da:	4638      	mov	r0, r7
 800f8dc:	47c0      	blx	r8
 800f8de:	3001      	adds	r0, #1
 800f8e0:	d01e      	beq.n	800f920 <_printf_common+0xa4>
 800f8e2:	6823      	ldr	r3, [r4, #0]
 800f8e4:	68e5      	ldr	r5, [r4, #12]
 800f8e6:	6832      	ldr	r2, [r6, #0]
 800f8e8:	f003 0306 	and.w	r3, r3, #6
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	bf08      	it	eq
 800f8f0:	1aad      	subeq	r5, r5, r2
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	6922      	ldr	r2, [r4, #16]
 800f8f6:	bf0c      	ite	eq
 800f8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8fc:	2500      	movne	r5, #0
 800f8fe:	4293      	cmp	r3, r2
 800f900:	bfc4      	itt	gt
 800f902:	1a9b      	subgt	r3, r3, r2
 800f904:	18ed      	addgt	r5, r5, r3
 800f906:	2600      	movs	r6, #0
 800f908:	341a      	adds	r4, #26
 800f90a:	42b5      	cmp	r5, r6
 800f90c:	d11a      	bne.n	800f944 <_printf_common+0xc8>
 800f90e:	2000      	movs	r0, #0
 800f910:	e008      	b.n	800f924 <_printf_common+0xa8>
 800f912:	2301      	movs	r3, #1
 800f914:	4652      	mov	r2, sl
 800f916:	4649      	mov	r1, r9
 800f918:	4638      	mov	r0, r7
 800f91a:	47c0      	blx	r8
 800f91c:	3001      	adds	r0, #1
 800f91e:	d103      	bne.n	800f928 <_printf_common+0xac>
 800f920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f928:	3501      	adds	r5, #1
 800f92a:	e7c6      	b.n	800f8ba <_printf_common+0x3e>
 800f92c:	18e1      	adds	r1, r4, r3
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	2030      	movs	r0, #48	; 0x30
 800f932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f936:	4422      	add	r2, r4
 800f938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f940:	3302      	adds	r3, #2
 800f942:	e7c7      	b.n	800f8d4 <_printf_common+0x58>
 800f944:	2301      	movs	r3, #1
 800f946:	4622      	mov	r2, r4
 800f948:	4649      	mov	r1, r9
 800f94a:	4638      	mov	r0, r7
 800f94c:	47c0      	blx	r8
 800f94e:	3001      	adds	r0, #1
 800f950:	d0e6      	beq.n	800f920 <_printf_common+0xa4>
 800f952:	3601      	adds	r6, #1
 800f954:	e7d9      	b.n	800f90a <_printf_common+0x8e>
	...

0800f958 <_printf_i>:
 800f958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f95c:	7e0f      	ldrb	r7, [r1, #24]
 800f95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f960:	2f78      	cmp	r7, #120	; 0x78
 800f962:	4691      	mov	r9, r2
 800f964:	4680      	mov	r8, r0
 800f966:	460c      	mov	r4, r1
 800f968:	469a      	mov	sl, r3
 800f96a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f96e:	d807      	bhi.n	800f980 <_printf_i+0x28>
 800f970:	2f62      	cmp	r7, #98	; 0x62
 800f972:	d80a      	bhi.n	800f98a <_printf_i+0x32>
 800f974:	2f00      	cmp	r7, #0
 800f976:	f000 80d8 	beq.w	800fb2a <_printf_i+0x1d2>
 800f97a:	2f58      	cmp	r7, #88	; 0x58
 800f97c:	f000 80a3 	beq.w	800fac6 <_printf_i+0x16e>
 800f980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f988:	e03a      	b.n	800fa00 <_printf_i+0xa8>
 800f98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f98e:	2b15      	cmp	r3, #21
 800f990:	d8f6      	bhi.n	800f980 <_printf_i+0x28>
 800f992:	a101      	add	r1, pc, #4	; (adr r1, 800f998 <_printf_i+0x40>)
 800f994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f998:	0800f9f1 	.word	0x0800f9f1
 800f99c:	0800fa05 	.word	0x0800fa05
 800f9a0:	0800f981 	.word	0x0800f981
 800f9a4:	0800f981 	.word	0x0800f981
 800f9a8:	0800f981 	.word	0x0800f981
 800f9ac:	0800f981 	.word	0x0800f981
 800f9b0:	0800fa05 	.word	0x0800fa05
 800f9b4:	0800f981 	.word	0x0800f981
 800f9b8:	0800f981 	.word	0x0800f981
 800f9bc:	0800f981 	.word	0x0800f981
 800f9c0:	0800f981 	.word	0x0800f981
 800f9c4:	0800fb11 	.word	0x0800fb11
 800f9c8:	0800fa35 	.word	0x0800fa35
 800f9cc:	0800faf3 	.word	0x0800faf3
 800f9d0:	0800f981 	.word	0x0800f981
 800f9d4:	0800f981 	.word	0x0800f981
 800f9d8:	0800fb33 	.word	0x0800fb33
 800f9dc:	0800f981 	.word	0x0800f981
 800f9e0:	0800fa35 	.word	0x0800fa35
 800f9e4:	0800f981 	.word	0x0800f981
 800f9e8:	0800f981 	.word	0x0800f981
 800f9ec:	0800fafb 	.word	0x0800fafb
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	1d1a      	adds	r2, r3, #4
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	602a      	str	r2, [r5, #0]
 800f9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa00:	2301      	movs	r3, #1
 800fa02:	e0a3      	b.n	800fb4c <_printf_i+0x1f4>
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	6829      	ldr	r1, [r5, #0]
 800fa08:	0606      	lsls	r6, r0, #24
 800fa0a:	f101 0304 	add.w	r3, r1, #4
 800fa0e:	d50a      	bpl.n	800fa26 <_printf_i+0xce>
 800fa10:	680e      	ldr	r6, [r1, #0]
 800fa12:	602b      	str	r3, [r5, #0]
 800fa14:	2e00      	cmp	r6, #0
 800fa16:	da03      	bge.n	800fa20 <_printf_i+0xc8>
 800fa18:	232d      	movs	r3, #45	; 0x2d
 800fa1a:	4276      	negs	r6, r6
 800fa1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa20:	485e      	ldr	r0, [pc, #376]	; (800fb9c <_printf_i+0x244>)
 800fa22:	230a      	movs	r3, #10
 800fa24:	e019      	b.n	800fa5a <_printf_i+0x102>
 800fa26:	680e      	ldr	r6, [r1, #0]
 800fa28:	602b      	str	r3, [r5, #0]
 800fa2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa2e:	bf18      	it	ne
 800fa30:	b236      	sxthne	r6, r6
 800fa32:	e7ef      	b.n	800fa14 <_printf_i+0xbc>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	6820      	ldr	r0, [r4, #0]
 800fa38:	1d19      	adds	r1, r3, #4
 800fa3a:	6029      	str	r1, [r5, #0]
 800fa3c:	0601      	lsls	r1, r0, #24
 800fa3e:	d501      	bpl.n	800fa44 <_printf_i+0xec>
 800fa40:	681e      	ldr	r6, [r3, #0]
 800fa42:	e002      	b.n	800fa4a <_printf_i+0xf2>
 800fa44:	0646      	lsls	r6, r0, #25
 800fa46:	d5fb      	bpl.n	800fa40 <_printf_i+0xe8>
 800fa48:	881e      	ldrh	r6, [r3, #0]
 800fa4a:	4854      	ldr	r0, [pc, #336]	; (800fb9c <_printf_i+0x244>)
 800fa4c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa4e:	bf0c      	ite	eq
 800fa50:	2308      	moveq	r3, #8
 800fa52:	230a      	movne	r3, #10
 800fa54:	2100      	movs	r1, #0
 800fa56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa5a:	6865      	ldr	r5, [r4, #4]
 800fa5c:	60a5      	str	r5, [r4, #8]
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	bfa2      	ittt	ge
 800fa62:	6821      	ldrge	r1, [r4, #0]
 800fa64:	f021 0104 	bicge.w	r1, r1, #4
 800fa68:	6021      	strge	r1, [r4, #0]
 800fa6a:	b90e      	cbnz	r6, 800fa70 <_printf_i+0x118>
 800fa6c:	2d00      	cmp	r5, #0
 800fa6e:	d04d      	beq.n	800fb0c <_printf_i+0x1b4>
 800fa70:	4615      	mov	r5, r2
 800fa72:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa76:	fb03 6711 	mls	r7, r3, r1, r6
 800fa7a:	5dc7      	ldrb	r7, [r0, r7]
 800fa7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa80:	4637      	mov	r7, r6
 800fa82:	42bb      	cmp	r3, r7
 800fa84:	460e      	mov	r6, r1
 800fa86:	d9f4      	bls.n	800fa72 <_printf_i+0x11a>
 800fa88:	2b08      	cmp	r3, #8
 800fa8a:	d10b      	bne.n	800faa4 <_printf_i+0x14c>
 800fa8c:	6823      	ldr	r3, [r4, #0]
 800fa8e:	07de      	lsls	r6, r3, #31
 800fa90:	d508      	bpl.n	800faa4 <_printf_i+0x14c>
 800fa92:	6923      	ldr	r3, [r4, #16]
 800fa94:	6861      	ldr	r1, [r4, #4]
 800fa96:	4299      	cmp	r1, r3
 800fa98:	bfde      	ittt	le
 800fa9a:	2330      	movle	r3, #48	; 0x30
 800fa9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800faa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800faa4:	1b52      	subs	r2, r2, r5
 800faa6:	6122      	str	r2, [r4, #16]
 800faa8:	f8cd a000 	str.w	sl, [sp]
 800faac:	464b      	mov	r3, r9
 800faae:	aa03      	add	r2, sp, #12
 800fab0:	4621      	mov	r1, r4
 800fab2:	4640      	mov	r0, r8
 800fab4:	f7ff fee2 	bl	800f87c <_printf_common>
 800fab8:	3001      	adds	r0, #1
 800faba:	d14c      	bne.n	800fb56 <_printf_i+0x1fe>
 800fabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac0:	b004      	add	sp, #16
 800fac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac6:	4835      	ldr	r0, [pc, #212]	; (800fb9c <_printf_i+0x244>)
 800fac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800facc:	6829      	ldr	r1, [r5, #0]
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fad4:	6029      	str	r1, [r5, #0]
 800fad6:	061d      	lsls	r5, r3, #24
 800fad8:	d514      	bpl.n	800fb04 <_printf_i+0x1ac>
 800fada:	07df      	lsls	r7, r3, #31
 800fadc:	bf44      	itt	mi
 800fade:	f043 0320 	orrmi.w	r3, r3, #32
 800fae2:	6023      	strmi	r3, [r4, #0]
 800fae4:	b91e      	cbnz	r6, 800faee <_printf_i+0x196>
 800fae6:	6823      	ldr	r3, [r4, #0]
 800fae8:	f023 0320 	bic.w	r3, r3, #32
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	2310      	movs	r3, #16
 800faf0:	e7b0      	b.n	800fa54 <_printf_i+0xfc>
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	f043 0320 	orr.w	r3, r3, #32
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	2378      	movs	r3, #120	; 0x78
 800fafc:	4828      	ldr	r0, [pc, #160]	; (800fba0 <_printf_i+0x248>)
 800fafe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb02:	e7e3      	b.n	800facc <_printf_i+0x174>
 800fb04:	0659      	lsls	r1, r3, #25
 800fb06:	bf48      	it	mi
 800fb08:	b2b6      	uxthmi	r6, r6
 800fb0a:	e7e6      	b.n	800fada <_printf_i+0x182>
 800fb0c:	4615      	mov	r5, r2
 800fb0e:	e7bb      	b.n	800fa88 <_printf_i+0x130>
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	6826      	ldr	r6, [r4, #0]
 800fb14:	6961      	ldr	r1, [r4, #20]
 800fb16:	1d18      	adds	r0, r3, #4
 800fb18:	6028      	str	r0, [r5, #0]
 800fb1a:	0635      	lsls	r5, r6, #24
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	d501      	bpl.n	800fb24 <_printf_i+0x1cc>
 800fb20:	6019      	str	r1, [r3, #0]
 800fb22:	e002      	b.n	800fb2a <_printf_i+0x1d2>
 800fb24:	0670      	lsls	r0, r6, #25
 800fb26:	d5fb      	bpl.n	800fb20 <_printf_i+0x1c8>
 800fb28:	8019      	strh	r1, [r3, #0]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	6123      	str	r3, [r4, #16]
 800fb2e:	4615      	mov	r5, r2
 800fb30:	e7ba      	b.n	800faa8 <_printf_i+0x150>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	1d1a      	adds	r2, r3, #4
 800fb36:	602a      	str	r2, [r5, #0]
 800fb38:	681d      	ldr	r5, [r3, #0]
 800fb3a:	6862      	ldr	r2, [r4, #4]
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	4628      	mov	r0, r5
 800fb40:	f7f0 fb66 	bl	8000210 <memchr>
 800fb44:	b108      	cbz	r0, 800fb4a <_printf_i+0x1f2>
 800fb46:	1b40      	subs	r0, r0, r5
 800fb48:	6060      	str	r0, [r4, #4]
 800fb4a:	6863      	ldr	r3, [r4, #4]
 800fb4c:	6123      	str	r3, [r4, #16]
 800fb4e:	2300      	movs	r3, #0
 800fb50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb54:	e7a8      	b.n	800faa8 <_printf_i+0x150>
 800fb56:	6923      	ldr	r3, [r4, #16]
 800fb58:	462a      	mov	r2, r5
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	47d0      	blx	sl
 800fb60:	3001      	adds	r0, #1
 800fb62:	d0ab      	beq.n	800fabc <_printf_i+0x164>
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	079b      	lsls	r3, r3, #30
 800fb68:	d413      	bmi.n	800fb92 <_printf_i+0x23a>
 800fb6a:	68e0      	ldr	r0, [r4, #12]
 800fb6c:	9b03      	ldr	r3, [sp, #12]
 800fb6e:	4298      	cmp	r0, r3
 800fb70:	bfb8      	it	lt
 800fb72:	4618      	movlt	r0, r3
 800fb74:	e7a4      	b.n	800fac0 <_printf_i+0x168>
 800fb76:	2301      	movs	r3, #1
 800fb78:	4632      	mov	r2, r6
 800fb7a:	4649      	mov	r1, r9
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	47d0      	blx	sl
 800fb80:	3001      	adds	r0, #1
 800fb82:	d09b      	beq.n	800fabc <_printf_i+0x164>
 800fb84:	3501      	adds	r5, #1
 800fb86:	68e3      	ldr	r3, [r4, #12]
 800fb88:	9903      	ldr	r1, [sp, #12]
 800fb8a:	1a5b      	subs	r3, r3, r1
 800fb8c:	42ab      	cmp	r3, r5
 800fb8e:	dcf2      	bgt.n	800fb76 <_printf_i+0x21e>
 800fb90:	e7eb      	b.n	800fb6a <_printf_i+0x212>
 800fb92:	2500      	movs	r5, #0
 800fb94:	f104 0619 	add.w	r6, r4, #25
 800fb98:	e7f5      	b.n	800fb86 <_printf_i+0x22e>
 800fb9a:	bf00      	nop
 800fb9c:	08011f2e 	.word	0x08011f2e
 800fba0:	08011f3f 	.word	0x08011f3f

0800fba4 <iprintf>:
 800fba4:	b40f      	push	{r0, r1, r2, r3}
 800fba6:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <iprintf+0x2c>)
 800fba8:	b513      	push	{r0, r1, r4, lr}
 800fbaa:	681c      	ldr	r4, [r3, #0]
 800fbac:	b124      	cbz	r4, 800fbb8 <iprintf+0x14>
 800fbae:	69a3      	ldr	r3, [r4, #24]
 800fbb0:	b913      	cbnz	r3, 800fbb8 <iprintf+0x14>
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f000 ff0e 	bl	80109d4 <__sinit>
 800fbb8:	ab05      	add	r3, sp, #20
 800fbba:	9a04      	ldr	r2, [sp, #16]
 800fbbc:	68a1      	ldr	r1, [r4, #8]
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f001 fba1 	bl	8011308 <_vfiprintf_r>
 800fbc6:	b002      	add	sp, #8
 800fbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbcc:	b004      	add	sp, #16
 800fbce:	4770      	bx	lr
 800fbd0:	20000184 	.word	0x20000184

0800fbd4 <_sbrk_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d06      	ldr	r5, [pc, #24]	; (800fbf0 <_sbrk_r+0x1c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	f001 ffe8 	bl	8011bb4 <_sbrk>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_sbrk_r+0x1a>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_sbrk_r+0x1a>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	200028e0 	.word	0x200028e0

0800fbf4 <__assert_func>:
 800fbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbf6:	4614      	mov	r4, r2
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	4b09      	ldr	r3, [pc, #36]	; (800fc20 <__assert_func+0x2c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4605      	mov	r5, r0
 800fc00:	68d8      	ldr	r0, [r3, #12]
 800fc02:	b14c      	cbz	r4, 800fc18 <__assert_func+0x24>
 800fc04:	4b07      	ldr	r3, [pc, #28]	; (800fc24 <__assert_func+0x30>)
 800fc06:	9100      	str	r1, [sp, #0]
 800fc08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc0c:	4906      	ldr	r1, [pc, #24]	; (800fc28 <__assert_func+0x34>)
 800fc0e:	462b      	mov	r3, r5
 800fc10:	f000 ff5e 	bl	8010ad0 <fiprintf>
 800fc14:	f001 fdcc 	bl	80117b0 <abort>
 800fc18:	4b04      	ldr	r3, [pc, #16]	; (800fc2c <__assert_func+0x38>)
 800fc1a:	461c      	mov	r4, r3
 800fc1c:	e7f3      	b.n	800fc06 <__assert_func+0x12>
 800fc1e:	bf00      	nop
 800fc20:	20000184 	.word	0x20000184
 800fc24:	08011f50 	.word	0x08011f50
 800fc28:	08011f5d 	.word	0x08011f5d
 800fc2c:	08011f8b 	.word	0x08011f8b

0800fc30 <quorem>:
 800fc30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	6903      	ldr	r3, [r0, #16]
 800fc36:	690c      	ldr	r4, [r1, #16]
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	4607      	mov	r7, r0
 800fc3c:	f2c0 8081 	blt.w	800fd42 <quorem+0x112>
 800fc40:	3c01      	subs	r4, #1
 800fc42:	f101 0814 	add.w	r8, r1, #20
 800fc46:	f100 0514 	add.w	r5, r0, #20
 800fc4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc4e:	9301      	str	r3, [sp, #4]
 800fc50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc64:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc68:	d331      	bcc.n	800fcce <quorem+0x9e>
 800fc6a:	f04f 0e00 	mov.w	lr, #0
 800fc6e:	4640      	mov	r0, r8
 800fc70:	46ac      	mov	ip, r5
 800fc72:	46f2      	mov	sl, lr
 800fc74:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc78:	b293      	uxth	r3, r2
 800fc7a:	fb06 e303 	mla	r3, r6, r3, lr
 800fc7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	ebaa 0303 	sub.w	r3, sl, r3
 800fc88:	f8dc a000 	ldr.w	sl, [ip]
 800fc8c:	0c12      	lsrs	r2, r2, #16
 800fc8e:	fa13 f38a 	uxtah	r3, r3, sl
 800fc92:	fb06 e202 	mla	r2, r6, r2, lr
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	9b00      	ldr	r3, [sp, #0]
 800fc9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc9e:	b292      	uxth	r2, r2
 800fca0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fca8:	f8bd 3000 	ldrh.w	r3, [sp]
 800fcac:	4581      	cmp	r9, r0
 800fcae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcb2:	f84c 3b04 	str.w	r3, [ip], #4
 800fcb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fcba:	d2db      	bcs.n	800fc74 <quorem+0x44>
 800fcbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcc0:	b92b      	cbnz	r3, 800fcce <quorem+0x9e>
 800fcc2:	9b01      	ldr	r3, [sp, #4]
 800fcc4:	3b04      	subs	r3, #4
 800fcc6:	429d      	cmp	r5, r3
 800fcc8:	461a      	mov	r2, r3
 800fcca:	d32e      	bcc.n	800fd2a <quorem+0xfa>
 800fccc:	613c      	str	r4, [r7, #16]
 800fcce:	4638      	mov	r0, r7
 800fcd0:	f001 f9d8 	bl	8011084 <__mcmp>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	db24      	blt.n	800fd22 <quorem+0xf2>
 800fcd8:	3601      	adds	r6, #1
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f04f 0c00 	mov.w	ip, #0
 800fce0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fce4:	f8d0 e000 	ldr.w	lr, [r0]
 800fce8:	b293      	uxth	r3, r2
 800fcea:	ebac 0303 	sub.w	r3, ip, r3
 800fcee:	0c12      	lsrs	r2, r2, #16
 800fcf0:	fa13 f38e 	uxtah	r3, r3, lr
 800fcf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fcf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd02:	45c1      	cmp	r9, r8
 800fd04:	f840 3b04 	str.w	r3, [r0], #4
 800fd08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fd0c:	d2e8      	bcs.n	800fce0 <quorem+0xb0>
 800fd0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd16:	b922      	cbnz	r2, 800fd22 <quorem+0xf2>
 800fd18:	3b04      	subs	r3, #4
 800fd1a:	429d      	cmp	r5, r3
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	d30a      	bcc.n	800fd36 <quorem+0x106>
 800fd20:	613c      	str	r4, [r7, #16]
 800fd22:	4630      	mov	r0, r6
 800fd24:	b003      	add	sp, #12
 800fd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2a:	6812      	ldr	r2, [r2, #0]
 800fd2c:	3b04      	subs	r3, #4
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	d1cc      	bne.n	800fccc <quorem+0x9c>
 800fd32:	3c01      	subs	r4, #1
 800fd34:	e7c7      	b.n	800fcc6 <quorem+0x96>
 800fd36:	6812      	ldr	r2, [r2, #0]
 800fd38:	3b04      	subs	r3, #4
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	d1f0      	bne.n	800fd20 <quorem+0xf0>
 800fd3e:	3c01      	subs	r4, #1
 800fd40:	e7eb      	b.n	800fd1a <quorem+0xea>
 800fd42:	2000      	movs	r0, #0
 800fd44:	e7ee      	b.n	800fd24 <quorem+0xf4>
	...

0800fd48 <_dtoa_r>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	ed2d 8b04 	vpush	{d8-d9}
 800fd50:	ec57 6b10 	vmov	r6, r7, d0
 800fd54:	b093      	sub	sp, #76	; 0x4c
 800fd56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd5c:	9106      	str	r1, [sp, #24]
 800fd5e:	ee10 aa10 	vmov	sl, s0
 800fd62:	4604      	mov	r4, r0
 800fd64:	9209      	str	r2, [sp, #36]	; 0x24
 800fd66:	930c      	str	r3, [sp, #48]	; 0x30
 800fd68:	46bb      	mov	fp, r7
 800fd6a:	b975      	cbnz	r5, 800fd8a <_dtoa_r+0x42>
 800fd6c:	2010      	movs	r0, #16
 800fd6e:	f7ff f9b1 	bl	800f0d4 <malloc>
 800fd72:	4602      	mov	r2, r0
 800fd74:	6260      	str	r0, [r4, #36]	; 0x24
 800fd76:	b920      	cbnz	r0, 800fd82 <_dtoa_r+0x3a>
 800fd78:	4ba7      	ldr	r3, [pc, #668]	; (8010018 <_dtoa_r+0x2d0>)
 800fd7a:	21ea      	movs	r1, #234	; 0xea
 800fd7c:	48a7      	ldr	r0, [pc, #668]	; (801001c <_dtoa_r+0x2d4>)
 800fd7e:	f7ff ff39 	bl	800fbf4 <__assert_func>
 800fd82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd86:	6005      	str	r5, [r0, #0]
 800fd88:	60c5      	str	r5, [r0, #12]
 800fd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd8c:	6819      	ldr	r1, [r3, #0]
 800fd8e:	b151      	cbz	r1, 800fda6 <_dtoa_r+0x5e>
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	604a      	str	r2, [r1, #4]
 800fd94:	2301      	movs	r3, #1
 800fd96:	4093      	lsls	r3, r2
 800fd98:	608b      	str	r3, [r1, #8]
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 ff30 	bl	8010c00 <_Bfree>
 800fda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fda2:	2200      	movs	r2, #0
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	1e3b      	subs	r3, r7, #0
 800fda8:	bfaa      	itet	ge
 800fdaa:	2300      	movge	r3, #0
 800fdac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fdb0:	f8c8 3000 	strge.w	r3, [r8]
 800fdb4:	4b9a      	ldr	r3, [pc, #616]	; (8010020 <_dtoa_r+0x2d8>)
 800fdb6:	bfbc      	itt	lt
 800fdb8:	2201      	movlt	r2, #1
 800fdba:	f8c8 2000 	strlt.w	r2, [r8]
 800fdbe:	ea33 030b 	bics.w	r3, r3, fp
 800fdc2:	d11b      	bne.n	800fdfc <_dtoa_r+0xb4>
 800fdc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdd0:	4333      	orrs	r3, r6
 800fdd2:	f000 8592 	beq.w	80108fa <_dtoa_r+0xbb2>
 800fdd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdd8:	b963      	cbnz	r3, 800fdf4 <_dtoa_r+0xac>
 800fdda:	4b92      	ldr	r3, [pc, #584]	; (8010024 <_dtoa_r+0x2dc>)
 800fddc:	e022      	b.n	800fe24 <_dtoa_r+0xdc>
 800fdde:	4b92      	ldr	r3, [pc, #584]	; (8010028 <_dtoa_r+0x2e0>)
 800fde0:	9301      	str	r3, [sp, #4]
 800fde2:	3308      	adds	r3, #8
 800fde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	9801      	ldr	r0, [sp, #4]
 800fdea:	b013      	add	sp, #76	; 0x4c
 800fdec:	ecbd 8b04 	vpop	{d8-d9}
 800fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf4:	4b8b      	ldr	r3, [pc, #556]	; (8010024 <_dtoa_r+0x2dc>)
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	3303      	adds	r3, #3
 800fdfa:	e7f3      	b.n	800fde4 <_dtoa_r+0x9c>
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	2300      	movs	r3, #0
 800fe00:	4650      	mov	r0, sl
 800fe02:	4659      	mov	r1, fp
 800fe04:	f7f0 fe78 	bl	8000af8 <__aeabi_dcmpeq>
 800fe08:	ec4b ab19 	vmov	d9, sl, fp
 800fe0c:	4680      	mov	r8, r0
 800fe0e:	b158      	cbz	r0, 800fe28 <_dtoa_r+0xe0>
 800fe10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe12:	2301      	movs	r3, #1
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 856b 	beq.w	80108f4 <_dtoa_r+0xbac>
 800fe1e:	4883      	ldr	r0, [pc, #524]	; (801002c <_dtoa_r+0x2e4>)
 800fe20:	6018      	str	r0, [r3, #0]
 800fe22:	1e43      	subs	r3, r0, #1
 800fe24:	9301      	str	r3, [sp, #4]
 800fe26:	e7df      	b.n	800fde8 <_dtoa_r+0xa0>
 800fe28:	ec4b ab10 	vmov	d0, sl, fp
 800fe2c:	aa10      	add	r2, sp, #64	; 0x40
 800fe2e:	a911      	add	r1, sp, #68	; 0x44
 800fe30:	4620      	mov	r0, r4
 800fe32:	f001 f9cd 	bl	80111d0 <__d2b>
 800fe36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fe3a:	ee08 0a10 	vmov	s16, r0
 800fe3e:	2d00      	cmp	r5, #0
 800fe40:	f000 8084 	beq.w	800ff4c <_dtoa_r+0x204>
 800fe44:	ee19 3a90 	vmov	r3, s19
 800fe48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fe50:	4656      	mov	r6, sl
 800fe52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fe56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fe5e:	4b74      	ldr	r3, [pc, #464]	; (8010030 <_dtoa_r+0x2e8>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	4630      	mov	r0, r6
 800fe64:	4639      	mov	r1, r7
 800fe66:	f7f0 fa27 	bl	80002b8 <__aeabi_dsub>
 800fe6a:	a365      	add	r3, pc, #404	; (adr r3, 8010000 <_dtoa_r+0x2b8>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	f7f0 fbda 	bl	8000628 <__aeabi_dmul>
 800fe74:	a364      	add	r3, pc, #400	; (adr r3, 8010008 <_dtoa_r+0x2c0>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	f7f0 fa1f 	bl	80002bc <__adddf3>
 800fe7e:	4606      	mov	r6, r0
 800fe80:	4628      	mov	r0, r5
 800fe82:	460f      	mov	r7, r1
 800fe84:	f7f0 fb66 	bl	8000554 <__aeabi_i2d>
 800fe88:	a361      	add	r3, pc, #388	; (adr r3, 8010010 <_dtoa_r+0x2c8>)
 800fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8e:	f7f0 fbcb 	bl	8000628 <__aeabi_dmul>
 800fe92:	4602      	mov	r2, r0
 800fe94:	460b      	mov	r3, r1
 800fe96:	4630      	mov	r0, r6
 800fe98:	4639      	mov	r1, r7
 800fe9a:	f7f0 fa0f 	bl	80002bc <__adddf3>
 800fe9e:	4606      	mov	r6, r0
 800fea0:	460f      	mov	r7, r1
 800fea2:	f7f0 fe71 	bl	8000b88 <__aeabi_d2iz>
 800fea6:	2200      	movs	r2, #0
 800fea8:	9000      	str	r0, [sp, #0]
 800feaa:	2300      	movs	r3, #0
 800feac:	4630      	mov	r0, r6
 800feae:	4639      	mov	r1, r7
 800feb0:	f7f0 fe2c 	bl	8000b0c <__aeabi_dcmplt>
 800feb4:	b150      	cbz	r0, 800fecc <_dtoa_r+0x184>
 800feb6:	9800      	ldr	r0, [sp, #0]
 800feb8:	f7f0 fb4c 	bl	8000554 <__aeabi_i2d>
 800febc:	4632      	mov	r2, r6
 800febe:	463b      	mov	r3, r7
 800fec0:	f7f0 fe1a 	bl	8000af8 <__aeabi_dcmpeq>
 800fec4:	b910      	cbnz	r0, 800fecc <_dtoa_r+0x184>
 800fec6:	9b00      	ldr	r3, [sp, #0]
 800fec8:	3b01      	subs	r3, #1
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	9b00      	ldr	r3, [sp, #0]
 800fece:	2b16      	cmp	r3, #22
 800fed0:	d85a      	bhi.n	800ff88 <_dtoa_r+0x240>
 800fed2:	9a00      	ldr	r2, [sp, #0]
 800fed4:	4b57      	ldr	r3, [pc, #348]	; (8010034 <_dtoa_r+0x2ec>)
 800fed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	ec51 0b19 	vmov	r0, r1, d9
 800fee2:	f7f0 fe13 	bl	8000b0c <__aeabi_dcmplt>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d050      	beq.n	800ff8c <_dtoa_r+0x244>
 800feea:	9b00      	ldr	r3, [sp, #0]
 800feec:	3b01      	subs	r3, #1
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	2300      	movs	r3, #0
 800fef2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fef6:	1b5d      	subs	r5, r3, r5
 800fef8:	1e6b      	subs	r3, r5, #1
 800fefa:	9305      	str	r3, [sp, #20]
 800fefc:	bf45      	ittet	mi
 800fefe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ff02:	9304      	strmi	r3, [sp, #16]
 800ff04:	2300      	movpl	r3, #0
 800ff06:	2300      	movmi	r3, #0
 800ff08:	bf4c      	ite	mi
 800ff0a:	9305      	strmi	r3, [sp, #20]
 800ff0c:	9304      	strpl	r3, [sp, #16]
 800ff0e:	9b00      	ldr	r3, [sp, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	db3d      	blt.n	800ff90 <_dtoa_r+0x248>
 800ff14:	9b05      	ldr	r3, [sp, #20]
 800ff16:	9a00      	ldr	r2, [sp, #0]
 800ff18:	920a      	str	r2, [sp, #40]	; 0x28
 800ff1a:	4413      	add	r3, r2
 800ff1c:	9305      	str	r3, [sp, #20]
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9307      	str	r3, [sp, #28]
 800ff22:	9b06      	ldr	r3, [sp, #24]
 800ff24:	2b09      	cmp	r3, #9
 800ff26:	f200 8089 	bhi.w	801003c <_dtoa_r+0x2f4>
 800ff2a:	2b05      	cmp	r3, #5
 800ff2c:	bfc4      	itt	gt
 800ff2e:	3b04      	subgt	r3, #4
 800ff30:	9306      	strgt	r3, [sp, #24]
 800ff32:	9b06      	ldr	r3, [sp, #24]
 800ff34:	f1a3 0302 	sub.w	r3, r3, #2
 800ff38:	bfcc      	ite	gt
 800ff3a:	2500      	movgt	r5, #0
 800ff3c:	2501      	movle	r5, #1
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	f200 8087 	bhi.w	8010052 <_dtoa_r+0x30a>
 800ff44:	e8df f003 	tbb	[pc, r3]
 800ff48:	59383a2d 	.word	0x59383a2d
 800ff4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff50:	441d      	add	r5, r3
 800ff52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff56:	2b20      	cmp	r3, #32
 800ff58:	bfc1      	itttt	gt
 800ff5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ff62:	fa0b f303 	lslgt.w	r3, fp, r3
 800ff66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ff6a:	bfda      	itte	le
 800ff6c:	f1c3 0320 	rsble	r3, r3, #32
 800ff70:	fa06 f003 	lslle.w	r0, r6, r3
 800ff74:	4318      	orrgt	r0, r3
 800ff76:	f7f0 fadd 	bl	8000534 <__aeabi_ui2d>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	4606      	mov	r6, r0
 800ff7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff82:	3d01      	subs	r5, #1
 800ff84:	930e      	str	r3, [sp, #56]	; 0x38
 800ff86:	e76a      	b.n	800fe5e <_dtoa_r+0x116>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e7b2      	b.n	800fef2 <_dtoa_r+0x1aa>
 800ff8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff8e:	e7b1      	b.n	800fef4 <_dtoa_r+0x1ac>
 800ff90:	9b04      	ldr	r3, [sp, #16]
 800ff92:	9a00      	ldr	r2, [sp, #0]
 800ff94:	1a9b      	subs	r3, r3, r2
 800ff96:	9304      	str	r3, [sp, #16]
 800ff98:	4253      	negs	r3, r2
 800ff9a:	9307      	str	r3, [sp, #28]
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	930a      	str	r3, [sp, #40]	; 0x28
 800ffa0:	e7bf      	b.n	800ff22 <_dtoa_r+0x1da>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	9308      	str	r3, [sp, #32]
 800ffa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dc55      	bgt.n	8010058 <_dtoa_r+0x310>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	9209      	str	r2, [sp, #36]	; 0x24
 800ffb6:	e00c      	b.n	800ffd2 <_dtoa_r+0x28a>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e7f3      	b.n	800ffa4 <_dtoa_r+0x25c>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffc0:	9308      	str	r3, [sp, #32]
 800ffc2:	9b00      	ldr	r3, [sp, #0]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	9302      	str	r3, [sp, #8]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	9303      	str	r3, [sp, #12]
 800ffce:	bfb8      	it	lt
 800ffd0:	2301      	movlt	r3, #1
 800ffd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	6042      	str	r2, [r0, #4]
 800ffd8:	2204      	movs	r2, #4
 800ffda:	f102 0614 	add.w	r6, r2, #20
 800ffde:	429e      	cmp	r6, r3
 800ffe0:	6841      	ldr	r1, [r0, #4]
 800ffe2:	d93d      	bls.n	8010060 <_dtoa_r+0x318>
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f000 fdcb 	bl	8010b80 <_Balloc>
 800ffea:	9001      	str	r0, [sp, #4]
 800ffec:	2800      	cmp	r0, #0
 800ffee:	d13b      	bne.n	8010068 <_dtoa_r+0x320>
 800fff0:	4b11      	ldr	r3, [pc, #68]	; (8010038 <_dtoa_r+0x2f0>)
 800fff2:	4602      	mov	r2, r0
 800fff4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fff8:	e6c0      	b.n	800fd7c <_dtoa_r+0x34>
 800fffa:	2301      	movs	r3, #1
 800fffc:	e7df      	b.n	800ffbe <_dtoa_r+0x276>
 800fffe:	bf00      	nop
 8010000:	636f4361 	.word	0x636f4361
 8010004:	3fd287a7 	.word	0x3fd287a7
 8010008:	8b60c8b3 	.word	0x8b60c8b3
 801000c:	3fc68a28 	.word	0x3fc68a28
 8010010:	509f79fb 	.word	0x509f79fb
 8010014:	3fd34413 	.word	0x3fd34413
 8010018:	0801209a 	.word	0x0801209a
 801001c:	080120b1 	.word	0x080120b1
 8010020:	7ff00000 	.word	0x7ff00000
 8010024:	08012096 	.word	0x08012096
 8010028:	0801208d 	.word	0x0801208d
 801002c:	08011f2d 	.word	0x08011f2d
 8010030:	3ff80000 	.word	0x3ff80000
 8010034:	08012210 	.word	0x08012210
 8010038:	0801210c 	.word	0x0801210c
 801003c:	2501      	movs	r5, #1
 801003e:	2300      	movs	r3, #0
 8010040:	9306      	str	r3, [sp, #24]
 8010042:	9508      	str	r5, [sp, #32]
 8010044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010048:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801004c:	2200      	movs	r2, #0
 801004e:	2312      	movs	r3, #18
 8010050:	e7b0      	b.n	800ffb4 <_dtoa_r+0x26c>
 8010052:	2301      	movs	r3, #1
 8010054:	9308      	str	r3, [sp, #32]
 8010056:	e7f5      	b.n	8010044 <_dtoa_r+0x2fc>
 8010058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801005e:	e7b8      	b.n	800ffd2 <_dtoa_r+0x28a>
 8010060:	3101      	adds	r1, #1
 8010062:	6041      	str	r1, [r0, #4]
 8010064:	0052      	lsls	r2, r2, #1
 8010066:	e7b8      	b.n	800ffda <_dtoa_r+0x292>
 8010068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801006a:	9a01      	ldr	r2, [sp, #4]
 801006c:	601a      	str	r2, [r3, #0]
 801006e:	9b03      	ldr	r3, [sp, #12]
 8010070:	2b0e      	cmp	r3, #14
 8010072:	f200 809d 	bhi.w	80101b0 <_dtoa_r+0x468>
 8010076:	2d00      	cmp	r5, #0
 8010078:	f000 809a 	beq.w	80101b0 <_dtoa_r+0x468>
 801007c:	9b00      	ldr	r3, [sp, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	dd32      	ble.n	80100e8 <_dtoa_r+0x3a0>
 8010082:	4ab7      	ldr	r2, [pc, #732]	; (8010360 <_dtoa_r+0x618>)
 8010084:	f003 030f 	and.w	r3, r3, #15
 8010088:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801008c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010090:	9b00      	ldr	r3, [sp, #0]
 8010092:	05d8      	lsls	r0, r3, #23
 8010094:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010098:	d516      	bpl.n	80100c8 <_dtoa_r+0x380>
 801009a:	4bb2      	ldr	r3, [pc, #712]	; (8010364 <_dtoa_r+0x61c>)
 801009c:	ec51 0b19 	vmov	r0, r1, d9
 80100a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100a4:	f7f0 fbea 	bl	800087c <__aeabi_ddiv>
 80100a8:	f007 070f 	and.w	r7, r7, #15
 80100ac:	4682      	mov	sl, r0
 80100ae:	468b      	mov	fp, r1
 80100b0:	2503      	movs	r5, #3
 80100b2:	4eac      	ldr	r6, [pc, #688]	; (8010364 <_dtoa_r+0x61c>)
 80100b4:	b957      	cbnz	r7, 80100cc <_dtoa_r+0x384>
 80100b6:	4642      	mov	r2, r8
 80100b8:	464b      	mov	r3, r9
 80100ba:	4650      	mov	r0, sl
 80100bc:	4659      	mov	r1, fp
 80100be:	f7f0 fbdd 	bl	800087c <__aeabi_ddiv>
 80100c2:	4682      	mov	sl, r0
 80100c4:	468b      	mov	fp, r1
 80100c6:	e028      	b.n	801011a <_dtoa_r+0x3d2>
 80100c8:	2502      	movs	r5, #2
 80100ca:	e7f2      	b.n	80100b2 <_dtoa_r+0x36a>
 80100cc:	07f9      	lsls	r1, r7, #31
 80100ce:	d508      	bpl.n	80100e2 <_dtoa_r+0x39a>
 80100d0:	4640      	mov	r0, r8
 80100d2:	4649      	mov	r1, r9
 80100d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100d8:	f7f0 faa6 	bl	8000628 <__aeabi_dmul>
 80100dc:	3501      	adds	r5, #1
 80100de:	4680      	mov	r8, r0
 80100e0:	4689      	mov	r9, r1
 80100e2:	107f      	asrs	r7, r7, #1
 80100e4:	3608      	adds	r6, #8
 80100e6:	e7e5      	b.n	80100b4 <_dtoa_r+0x36c>
 80100e8:	f000 809b 	beq.w	8010222 <_dtoa_r+0x4da>
 80100ec:	9b00      	ldr	r3, [sp, #0]
 80100ee:	4f9d      	ldr	r7, [pc, #628]	; (8010364 <_dtoa_r+0x61c>)
 80100f0:	425e      	negs	r6, r3
 80100f2:	4b9b      	ldr	r3, [pc, #620]	; (8010360 <_dtoa_r+0x618>)
 80100f4:	f006 020f 	and.w	r2, r6, #15
 80100f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	ec51 0b19 	vmov	r0, r1, d9
 8010104:	f7f0 fa90 	bl	8000628 <__aeabi_dmul>
 8010108:	1136      	asrs	r6, r6, #4
 801010a:	4682      	mov	sl, r0
 801010c:	468b      	mov	fp, r1
 801010e:	2300      	movs	r3, #0
 8010110:	2502      	movs	r5, #2
 8010112:	2e00      	cmp	r6, #0
 8010114:	d17a      	bne.n	801020c <_dtoa_r+0x4c4>
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1d3      	bne.n	80100c2 <_dtoa_r+0x37a>
 801011a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 8082 	beq.w	8010226 <_dtoa_r+0x4de>
 8010122:	4b91      	ldr	r3, [pc, #580]	; (8010368 <_dtoa_r+0x620>)
 8010124:	2200      	movs	r2, #0
 8010126:	4650      	mov	r0, sl
 8010128:	4659      	mov	r1, fp
 801012a:	f7f0 fcef 	bl	8000b0c <__aeabi_dcmplt>
 801012e:	2800      	cmp	r0, #0
 8010130:	d079      	beq.n	8010226 <_dtoa_r+0x4de>
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d076      	beq.n	8010226 <_dtoa_r+0x4de>
 8010138:	9b02      	ldr	r3, [sp, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	dd36      	ble.n	80101ac <_dtoa_r+0x464>
 801013e:	9b00      	ldr	r3, [sp, #0]
 8010140:	4650      	mov	r0, sl
 8010142:	4659      	mov	r1, fp
 8010144:	1e5f      	subs	r7, r3, #1
 8010146:	2200      	movs	r2, #0
 8010148:	4b88      	ldr	r3, [pc, #544]	; (801036c <_dtoa_r+0x624>)
 801014a:	f7f0 fa6d 	bl	8000628 <__aeabi_dmul>
 801014e:	9e02      	ldr	r6, [sp, #8]
 8010150:	4682      	mov	sl, r0
 8010152:	468b      	mov	fp, r1
 8010154:	3501      	adds	r5, #1
 8010156:	4628      	mov	r0, r5
 8010158:	f7f0 f9fc 	bl	8000554 <__aeabi_i2d>
 801015c:	4652      	mov	r2, sl
 801015e:	465b      	mov	r3, fp
 8010160:	f7f0 fa62 	bl	8000628 <__aeabi_dmul>
 8010164:	4b82      	ldr	r3, [pc, #520]	; (8010370 <_dtoa_r+0x628>)
 8010166:	2200      	movs	r2, #0
 8010168:	f7f0 f8a8 	bl	80002bc <__adddf3>
 801016c:	46d0      	mov	r8, sl
 801016e:	46d9      	mov	r9, fp
 8010170:	4682      	mov	sl, r0
 8010172:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010176:	2e00      	cmp	r6, #0
 8010178:	d158      	bne.n	801022c <_dtoa_r+0x4e4>
 801017a:	4b7e      	ldr	r3, [pc, #504]	; (8010374 <_dtoa_r+0x62c>)
 801017c:	2200      	movs	r2, #0
 801017e:	4640      	mov	r0, r8
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 f899 	bl	80002b8 <__aeabi_dsub>
 8010186:	4652      	mov	r2, sl
 8010188:	465b      	mov	r3, fp
 801018a:	4680      	mov	r8, r0
 801018c:	4689      	mov	r9, r1
 801018e:	f7f0 fcdb 	bl	8000b48 <__aeabi_dcmpgt>
 8010192:	2800      	cmp	r0, #0
 8010194:	f040 8295 	bne.w	80106c2 <_dtoa_r+0x97a>
 8010198:	4652      	mov	r2, sl
 801019a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801019e:	4640      	mov	r0, r8
 80101a0:	4649      	mov	r1, r9
 80101a2:	f7f0 fcb3 	bl	8000b0c <__aeabi_dcmplt>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	f040 8289 	bne.w	80106be <_dtoa_r+0x976>
 80101ac:	ec5b ab19 	vmov	sl, fp, d9
 80101b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f2c0 8148 	blt.w	8010448 <_dtoa_r+0x700>
 80101b8:	9a00      	ldr	r2, [sp, #0]
 80101ba:	2a0e      	cmp	r2, #14
 80101bc:	f300 8144 	bgt.w	8010448 <_dtoa_r+0x700>
 80101c0:	4b67      	ldr	r3, [pc, #412]	; (8010360 <_dtoa_r+0x618>)
 80101c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f280 80d5 	bge.w	801037c <_dtoa_r+0x634>
 80101d2:	9b03      	ldr	r3, [sp, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f300 80d1 	bgt.w	801037c <_dtoa_r+0x634>
 80101da:	f040 826f 	bne.w	80106bc <_dtoa_r+0x974>
 80101de:	4b65      	ldr	r3, [pc, #404]	; (8010374 <_dtoa_r+0x62c>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	4640      	mov	r0, r8
 80101e4:	4649      	mov	r1, r9
 80101e6:	f7f0 fa1f 	bl	8000628 <__aeabi_dmul>
 80101ea:	4652      	mov	r2, sl
 80101ec:	465b      	mov	r3, fp
 80101ee:	f7f0 fca1 	bl	8000b34 <__aeabi_dcmpge>
 80101f2:	9e03      	ldr	r6, [sp, #12]
 80101f4:	4637      	mov	r7, r6
 80101f6:	2800      	cmp	r0, #0
 80101f8:	f040 8245 	bne.w	8010686 <_dtoa_r+0x93e>
 80101fc:	9d01      	ldr	r5, [sp, #4]
 80101fe:	2331      	movs	r3, #49	; 0x31
 8010200:	f805 3b01 	strb.w	r3, [r5], #1
 8010204:	9b00      	ldr	r3, [sp, #0]
 8010206:	3301      	adds	r3, #1
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	e240      	b.n	801068e <_dtoa_r+0x946>
 801020c:	07f2      	lsls	r2, r6, #31
 801020e:	d505      	bpl.n	801021c <_dtoa_r+0x4d4>
 8010210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010214:	f7f0 fa08 	bl	8000628 <__aeabi_dmul>
 8010218:	3501      	adds	r5, #1
 801021a:	2301      	movs	r3, #1
 801021c:	1076      	asrs	r6, r6, #1
 801021e:	3708      	adds	r7, #8
 8010220:	e777      	b.n	8010112 <_dtoa_r+0x3ca>
 8010222:	2502      	movs	r5, #2
 8010224:	e779      	b.n	801011a <_dtoa_r+0x3d2>
 8010226:	9f00      	ldr	r7, [sp, #0]
 8010228:	9e03      	ldr	r6, [sp, #12]
 801022a:	e794      	b.n	8010156 <_dtoa_r+0x40e>
 801022c:	9901      	ldr	r1, [sp, #4]
 801022e:	4b4c      	ldr	r3, [pc, #304]	; (8010360 <_dtoa_r+0x618>)
 8010230:	4431      	add	r1, r6
 8010232:	910d      	str	r1, [sp, #52]	; 0x34
 8010234:	9908      	ldr	r1, [sp, #32]
 8010236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801023a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801023e:	2900      	cmp	r1, #0
 8010240:	d043      	beq.n	80102ca <_dtoa_r+0x582>
 8010242:	494d      	ldr	r1, [pc, #308]	; (8010378 <_dtoa_r+0x630>)
 8010244:	2000      	movs	r0, #0
 8010246:	f7f0 fb19 	bl	800087c <__aeabi_ddiv>
 801024a:	4652      	mov	r2, sl
 801024c:	465b      	mov	r3, fp
 801024e:	f7f0 f833 	bl	80002b8 <__aeabi_dsub>
 8010252:	9d01      	ldr	r5, [sp, #4]
 8010254:	4682      	mov	sl, r0
 8010256:	468b      	mov	fp, r1
 8010258:	4649      	mov	r1, r9
 801025a:	4640      	mov	r0, r8
 801025c:	f7f0 fc94 	bl	8000b88 <__aeabi_d2iz>
 8010260:	4606      	mov	r6, r0
 8010262:	f7f0 f977 	bl	8000554 <__aeabi_i2d>
 8010266:	4602      	mov	r2, r0
 8010268:	460b      	mov	r3, r1
 801026a:	4640      	mov	r0, r8
 801026c:	4649      	mov	r1, r9
 801026e:	f7f0 f823 	bl	80002b8 <__aeabi_dsub>
 8010272:	3630      	adds	r6, #48	; 0x30
 8010274:	f805 6b01 	strb.w	r6, [r5], #1
 8010278:	4652      	mov	r2, sl
 801027a:	465b      	mov	r3, fp
 801027c:	4680      	mov	r8, r0
 801027e:	4689      	mov	r9, r1
 8010280:	f7f0 fc44 	bl	8000b0c <__aeabi_dcmplt>
 8010284:	2800      	cmp	r0, #0
 8010286:	d163      	bne.n	8010350 <_dtoa_r+0x608>
 8010288:	4642      	mov	r2, r8
 801028a:	464b      	mov	r3, r9
 801028c:	4936      	ldr	r1, [pc, #216]	; (8010368 <_dtoa_r+0x620>)
 801028e:	2000      	movs	r0, #0
 8010290:	f7f0 f812 	bl	80002b8 <__aeabi_dsub>
 8010294:	4652      	mov	r2, sl
 8010296:	465b      	mov	r3, fp
 8010298:	f7f0 fc38 	bl	8000b0c <__aeabi_dcmplt>
 801029c:	2800      	cmp	r0, #0
 801029e:	f040 80b5 	bne.w	801040c <_dtoa_r+0x6c4>
 80102a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102a4:	429d      	cmp	r5, r3
 80102a6:	d081      	beq.n	80101ac <_dtoa_r+0x464>
 80102a8:	4b30      	ldr	r3, [pc, #192]	; (801036c <_dtoa_r+0x624>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	4650      	mov	r0, sl
 80102ae:	4659      	mov	r1, fp
 80102b0:	f7f0 f9ba 	bl	8000628 <__aeabi_dmul>
 80102b4:	4b2d      	ldr	r3, [pc, #180]	; (801036c <_dtoa_r+0x624>)
 80102b6:	4682      	mov	sl, r0
 80102b8:	468b      	mov	fp, r1
 80102ba:	4640      	mov	r0, r8
 80102bc:	4649      	mov	r1, r9
 80102be:	2200      	movs	r2, #0
 80102c0:	f7f0 f9b2 	bl	8000628 <__aeabi_dmul>
 80102c4:	4680      	mov	r8, r0
 80102c6:	4689      	mov	r9, r1
 80102c8:	e7c6      	b.n	8010258 <_dtoa_r+0x510>
 80102ca:	4650      	mov	r0, sl
 80102cc:	4659      	mov	r1, fp
 80102ce:	f7f0 f9ab 	bl	8000628 <__aeabi_dmul>
 80102d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102d4:	9d01      	ldr	r5, [sp, #4]
 80102d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80102d8:	4682      	mov	sl, r0
 80102da:	468b      	mov	fp, r1
 80102dc:	4649      	mov	r1, r9
 80102de:	4640      	mov	r0, r8
 80102e0:	f7f0 fc52 	bl	8000b88 <__aeabi_d2iz>
 80102e4:	4606      	mov	r6, r0
 80102e6:	f7f0 f935 	bl	8000554 <__aeabi_i2d>
 80102ea:	3630      	adds	r6, #48	; 0x30
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7ef ffe0 	bl	80002b8 <__aeabi_dsub>
 80102f8:	f805 6b01 	strb.w	r6, [r5], #1
 80102fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102fe:	429d      	cmp	r5, r3
 8010300:	4680      	mov	r8, r0
 8010302:	4689      	mov	r9, r1
 8010304:	f04f 0200 	mov.w	r2, #0
 8010308:	d124      	bne.n	8010354 <_dtoa_r+0x60c>
 801030a:	4b1b      	ldr	r3, [pc, #108]	; (8010378 <_dtoa_r+0x630>)
 801030c:	4650      	mov	r0, sl
 801030e:	4659      	mov	r1, fp
 8010310:	f7ef ffd4 	bl	80002bc <__adddf3>
 8010314:	4602      	mov	r2, r0
 8010316:	460b      	mov	r3, r1
 8010318:	4640      	mov	r0, r8
 801031a:	4649      	mov	r1, r9
 801031c:	f7f0 fc14 	bl	8000b48 <__aeabi_dcmpgt>
 8010320:	2800      	cmp	r0, #0
 8010322:	d173      	bne.n	801040c <_dtoa_r+0x6c4>
 8010324:	4652      	mov	r2, sl
 8010326:	465b      	mov	r3, fp
 8010328:	4913      	ldr	r1, [pc, #76]	; (8010378 <_dtoa_r+0x630>)
 801032a:	2000      	movs	r0, #0
 801032c:	f7ef ffc4 	bl	80002b8 <__aeabi_dsub>
 8010330:	4602      	mov	r2, r0
 8010332:	460b      	mov	r3, r1
 8010334:	4640      	mov	r0, r8
 8010336:	4649      	mov	r1, r9
 8010338:	f7f0 fbe8 	bl	8000b0c <__aeabi_dcmplt>
 801033c:	2800      	cmp	r0, #0
 801033e:	f43f af35 	beq.w	80101ac <_dtoa_r+0x464>
 8010342:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010344:	1e6b      	subs	r3, r5, #1
 8010346:	930f      	str	r3, [sp, #60]	; 0x3c
 8010348:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801034c:	2b30      	cmp	r3, #48	; 0x30
 801034e:	d0f8      	beq.n	8010342 <_dtoa_r+0x5fa>
 8010350:	9700      	str	r7, [sp, #0]
 8010352:	e049      	b.n	80103e8 <_dtoa_r+0x6a0>
 8010354:	4b05      	ldr	r3, [pc, #20]	; (801036c <_dtoa_r+0x624>)
 8010356:	f7f0 f967 	bl	8000628 <__aeabi_dmul>
 801035a:	4680      	mov	r8, r0
 801035c:	4689      	mov	r9, r1
 801035e:	e7bd      	b.n	80102dc <_dtoa_r+0x594>
 8010360:	08012210 	.word	0x08012210
 8010364:	080121e8 	.word	0x080121e8
 8010368:	3ff00000 	.word	0x3ff00000
 801036c:	40240000 	.word	0x40240000
 8010370:	401c0000 	.word	0x401c0000
 8010374:	40140000 	.word	0x40140000
 8010378:	3fe00000 	.word	0x3fe00000
 801037c:	9d01      	ldr	r5, [sp, #4]
 801037e:	4656      	mov	r6, sl
 8010380:	465f      	mov	r7, fp
 8010382:	4642      	mov	r2, r8
 8010384:	464b      	mov	r3, r9
 8010386:	4630      	mov	r0, r6
 8010388:	4639      	mov	r1, r7
 801038a:	f7f0 fa77 	bl	800087c <__aeabi_ddiv>
 801038e:	f7f0 fbfb 	bl	8000b88 <__aeabi_d2iz>
 8010392:	4682      	mov	sl, r0
 8010394:	f7f0 f8de 	bl	8000554 <__aeabi_i2d>
 8010398:	4642      	mov	r2, r8
 801039a:	464b      	mov	r3, r9
 801039c:	f7f0 f944 	bl	8000628 <__aeabi_dmul>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4630      	mov	r0, r6
 80103a6:	4639      	mov	r1, r7
 80103a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80103ac:	f7ef ff84 	bl	80002b8 <__aeabi_dsub>
 80103b0:	f805 6b01 	strb.w	r6, [r5], #1
 80103b4:	9e01      	ldr	r6, [sp, #4]
 80103b6:	9f03      	ldr	r7, [sp, #12]
 80103b8:	1bae      	subs	r6, r5, r6
 80103ba:	42b7      	cmp	r7, r6
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	d135      	bne.n	801042e <_dtoa_r+0x6e6>
 80103c2:	f7ef ff7b 	bl	80002bc <__adddf3>
 80103c6:	4642      	mov	r2, r8
 80103c8:	464b      	mov	r3, r9
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	f7f0 fbbb 	bl	8000b48 <__aeabi_dcmpgt>
 80103d2:	b9d0      	cbnz	r0, 801040a <_dtoa_r+0x6c2>
 80103d4:	4642      	mov	r2, r8
 80103d6:	464b      	mov	r3, r9
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7f0 fb8c 	bl	8000af8 <__aeabi_dcmpeq>
 80103e0:	b110      	cbz	r0, 80103e8 <_dtoa_r+0x6a0>
 80103e2:	f01a 0f01 	tst.w	sl, #1
 80103e6:	d110      	bne.n	801040a <_dtoa_r+0x6c2>
 80103e8:	4620      	mov	r0, r4
 80103ea:	ee18 1a10 	vmov	r1, s16
 80103ee:	f000 fc07 	bl	8010c00 <_Bfree>
 80103f2:	2300      	movs	r3, #0
 80103f4:	9800      	ldr	r0, [sp, #0]
 80103f6:	702b      	strb	r3, [r5, #0]
 80103f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103fa:	3001      	adds	r0, #1
 80103fc:	6018      	str	r0, [r3, #0]
 80103fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010400:	2b00      	cmp	r3, #0
 8010402:	f43f acf1 	beq.w	800fde8 <_dtoa_r+0xa0>
 8010406:	601d      	str	r5, [r3, #0]
 8010408:	e4ee      	b.n	800fde8 <_dtoa_r+0xa0>
 801040a:	9f00      	ldr	r7, [sp, #0]
 801040c:	462b      	mov	r3, r5
 801040e:	461d      	mov	r5, r3
 8010410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010414:	2a39      	cmp	r2, #57	; 0x39
 8010416:	d106      	bne.n	8010426 <_dtoa_r+0x6de>
 8010418:	9a01      	ldr	r2, [sp, #4]
 801041a:	429a      	cmp	r2, r3
 801041c:	d1f7      	bne.n	801040e <_dtoa_r+0x6c6>
 801041e:	9901      	ldr	r1, [sp, #4]
 8010420:	2230      	movs	r2, #48	; 0x30
 8010422:	3701      	adds	r7, #1
 8010424:	700a      	strb	r2, [r1, #0]
 8010426:	781a      	ldrb	r2, [r3, #0]
 8010428:	3201      	adds	r2, #1
 801042a:	701a      	strb	r2, [r3, #0]
 801042c:	e790      	b.n	8010350 <_dtoa_r+0x608>
 801042e:	4ba6      	ldr	r3, [pc, #664]	; (80106c8 <_dtoa_r+0x980>)
 8010430:	2200      	movs	r2, #0
 8010432:	f7f0 f8f9 	bl	8000628 <__aeabi_dmul>
 8010436:	2200      	movs	r2, #0
 8010438:	2300      	movs	r3, #0
 801043a:	4606      	mov	r6, r0
 801043c:	460f      	mov	r7, r1
 801043e:	f7f0 fb5b 	bl	8000af8 <__aeabi_dcmpeq>
 8010442:	2800      	cmp	r0, #0
 8010444:	d09d      	beq.n	8010382 <_dtoa_r+0x63a>
 8010446:	e7cf      	b.n	80103e8 <_dtoa_r+0x6a0>
 8010448:	9a08      	ldr	r2, [sp, #32]
 801044a:	2a00      	cmp	r2, #0
 801044c:	f000 80d7 	beq.w	80105fe <_dtoa_r+0x8b6>
 8010450:	9a06      	ldr	r2, [sp, #24]
 8010452:	2a01      	cmp	r2, #1
 8010454:	f300 80ba 	bgt.w	80105cc <_dtoa_r+0x884>
 8010458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801045a:	2a00      	cmp	r2, #0
 801045c:	f000 80b2 	beq.w	80105c4 <_dtoa_r+0x87c>
 8010460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010464:	9e07      	ldr	r6, [sp, #28]
 8010466:	9d04      	ldr	r5, [sp, #16]
 8010468:	9a04      	ldr	r2, [sp, #16]
 801046a:	441a      	add	r2, r3
 801046c:	9204      	str	r2, [sp, #16]
 801046e:	9a05      	ldr	r2, [sp, #20]
 8010470:	2101      	movs	r1, #1
 8010472:	441a      	add	r2, r3
 8010474:	4620      	mov	r0, r4
 8010476:	9205      	str	r2, [sp, #20]
 8010478:	f000 fc7a 	bl	8010d70 <__i2b>
 801047c:	4607      	mov	r7, r0
 801047e:	2d00      	cmp	r5, #0
 8010480:	dd0c      	ble.n	801049c <_dtoa_r+0x754>
 8010482:	9b05      	ldr	r3, [sp, #20]
 8010484:	2b00      	cmp	r3, #0
 8010486:	dd09      	ble.n	801049c <_dtoa_r+0x754>
 8010488:	42ab      	cmp	r3, r5
 801048a:	9a04      	ldr	r2, [sp, #16]
 801048c:	bfa8      	it	ge
 801048e:	462b      	movge	r3, r5
 8010490:	1ad2      	subs	r2, r2, r3
 8010492:	9204      	str	r2, [sp, #16]
 8010494:	9a05      	ldr	r2, [sp, #20]
 8010496:	1aed      	subs	r5, r5, r3
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	9b07      	ldr	r3, [sp, #28]
 801049e:	b31b      	cbz	r3, 80104e8 <_dtoa_r+0x7a0>
 80104a0:	9b08      	ldr	r3, [sp, #32]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 80af 	beq.w	8010606 <_dtoa_r+0x8be>
 80104a8:	2e00      	cmp	r6, #0
 80104aa:	dd13      	ble.n	80104d4 <_dtoa_r+0x78c>
 80104ac:	4639      	mov	r1, r7
 80104ae:	4632      	mov	r2, r6
 80104b0:	4620      	mov	r0, r4
 80104b2:	f000 fd1d 	bl	8010ef0 <__pow5mult>
 80104b6:	ee18 2a10 	vmov	r2, s16
 80104ba:	4601      	mov	r1, r0
 80104bc:	4607      	mov	r7, r0
 80104be:	4620      	mov	r0, r4
 80104c0:	f000 fc6c 	bl	8010d9c <__multiply>
 80104c4:	ee18 1a10 	vmov	r1, s16
 80104c8:	4680      	mov	r8, r0
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fb98 	bl	8010c00 <_Bfree>
 80104d0:	ee08 8a10 	vmov	s16, r8
 80104d4:	9b07      	ldr	r3, [sp, #28]
 80104d6:	1b9a      	subs	r2, r3, r6
 80104d8:	d006      	beq.n	80104e8 <_dtoa_r+0x7a0>
 80104da:	ee18 1a10 	vmov	r1, s16
 80104de:	4620      	mov	r0, r4
 80104e0:	f000 fd06 	bl	8010ef0 <__pow5mult>
 80104e4:	ee08 0a10 	vmov	s16, r0
 80104e8:	2101      	movs	r1, #1
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 fc40 	bl	8010d70 <__i2b>
 80104f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	4606      	mov	r6, r0
 80104f6:	f340 8088 	ble.w	801060a <_dtoa_r+0x8c2>
 80104fa:	461a      	mov	r2, r3
 80104fc:	4601      	mov	r1, r0
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 fcf6 	bl	8010ef0 <__pow5mult>
 8010504:	9b06      	ldr	r3, [sp, #24]
 8010506:	2b01      	cmp	r3, #1
 8010508:	4606      	mov	r6, r0
 801050a:	f340 8081 	ble.w	8010610 <_dtoa_r+0x8c8>
 801050e:	f04f 0800 	mov.w	r8, #0
 8010512:	6933      	ldr	r3, [r6, #16]
 8010514:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010518:	6918      	ldr	r0, [r3, #16]
 801051a:	f000 fbd9 	bl	8010cd0 <__hi0bits>
 801051e:	f1c0 0020 	rsb	r0, r0, #32
 8010522:	9b05      	ldr	r3, [sp, #20]
 8010524:	4418      	add	r0, r3
 8010526:	f010 001f 	ands.w	r0, r0, #31
 801052a:	f000 8092 	beq.w	8010652 <_dtoa_r+0x90a>
 801052e:	f1c0 0320 	rsb	r3, r0, #32
 8010532:	2b04      	cmp	r3, #4
 8010534:	f340 808a 	ble.w	801064c <_dtoa_r+0x904>
 8010538:	f1c0 001c 	rsb	r0, r0, #28
 801053c:	9b04      	ldr	r3, [sp, #16]
 801053e:	4403      	add	r3, r0
 8010540:	9304      	str	r3, [sp, #16]
 8010542:	9b05      	ldr	r3, [sp, #20]
 8010544:	4403      	add	r3, r0
 8010546:	4405      	add	r5, r0
 8010548:	9305      	str	r3, [sp, #20]
 801054a:	9b04      	ldr	r3, [sp, #16]
 801054c:	2b00      	cmp	r3, #0
 801054e:	dd07      	ble.n	8010560 <_dtoa_r+0x818>
 8010550:	ee18 1a10 	vmov	r1, s16
 8010554:	461a      	mov	r2, r3
 8010556:	4620      	mov	r0, r4
 8010558:	f000 fd24 	bl	8010fa4 <__lshift>
 801055c:	ee08 0a10 	vmov	s16, r0
 8010560:	9b05      	ldr	r3, [sp, #20]
 8010562:	2b00      	cmp	r3, #0
 8010564:	dd05      	ble.n	8010572 <_dtoa_r+0x82a>
 8010566:	4631      	mov	r1, r6
 8010568:	461a      	mov	r2, r3
 801056a:	4620      	mov	r0, r4
 801056c:	f000 fd1a 	bl	8010fa4 <__lshift>
 8010570:	4606      	mov	r6, r0
 8010572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010574:	2b00      	cmp	r3, #0
 8010576:	d06e      	beq.n	8010656 <_dtoa_r+0x90e>
 8010578:	ee18 0a10 	vmov	r0, s16
 801057c:	4631      	mov	r1, r6
 801057e:	f000 fd81 	bl	8011084 <__mcmp>
 8010582:	2800      	cmp	r0, #0
 8010584:	da67      	bge.n	8010656 <_dtoa_r+0x90e>
 8010586:	9b00      	ldr	r3, [sp, #0]
 8010588:	3b01      	subs	r3, #1
 801058a:	ee18 1a10 	vmov	r1, s16
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	220a      	movs	r2, #10
 8010592:	2300      	movs	r3, #0
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fb55 	bl	8010c44 <__multadd>
 801059a:	9b08      	ldr	r3, [sp, #32]
 801059c:	ee08 0a10 	vmov	s16, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 81b1 	beq.w	8010908 <_dtoa_r+0xbc0>
 80105a6:	2300      	movs	r3, #0
 80105a8:	4639      	mov	r1, r7
 80105aa:	220a      	movs	r2, #10
 80105ac:	4620      	mov	r0, r4
 80105ae:	f000 fb49 	bl	8010c44 <__multadd>
 80105b2:	9b02      	ldr	r3, [sp, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	4607      	mov	r7, r0
 80105b8:	f300 808e 	bgt.w	80106d8 <_dtoa_r+0x990>
 80105bc:	9b06      	ldr	r3, [sp, #24]
 80105be:	2b02      	cmp	r3, #2
 80105c0:	dc51      	bgt.n	8010666 <_dtoa_r+0x91e>
 80105c2:	e089      	b.n	80106d8 <_dtoa_r+0x990>
 80105c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105ca:	e74b      	b.n	8010464 <_dtoa_r+0x71c>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	1e5e      	subs	r6, r3, #1
 80105d0:	9b07      	ldr	r3, [sp, #28]
 80105d2:	42b3      	cmp	r3, r6
 80105d4:	bfbf      	itttt	lt
 80105d6:	9b07      	ldrlt	r3, [sp, #28]
 80105d8:	9607      	strlt	r6, [sp, #28]
 80105da:	1af2      	sublt	r2, r6, r3
 80105dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80105de:	bfb6      	itet	lt
 80105e0:	189b      	addlt	r3, r3, r2
 80105e2:	1b9e      	subge	r6, r3, r6
 80105e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80105e6:	9b03      	ldr	r3, [sp, #12]
 80105e8:	bfb8      	it	lt
 80105ea:	2600      	movlt	r6, #0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	bfb7      	itett	lt
 80105f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80105f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80105f8:	1a9d      	sublt	r5, r3, r2
 80105fa:	2300      	movlt	r3, #0
 80105fc:	e734      	b.n	8010468 <_dtoa_r+0x720>
 80105fe:	9e07      	ldr	r6, [sp, #28]
 8010600:	9d04      	ldr	r5, [sp, #16]
 8010602:	9f08      	ldr	r7, [sp, #32]
 8010604:	e73b      	b.n	801047e <_dtoa_r+0x736>
 8010606:	9a07      	ldr	r2, [sp, #28]
 8010608:	e767      	b.n	80104da <_dtoa_r+0x792>
 801060a:	9b06      	ldr	r3, [sp, #24]
 801060c:	2b01      	cmp	r3, #1
 801060e:	dc18      	bgt.n	8010642 <_dtoa_r+0x8fa>
 8010610:	f1ba 0f00 	cmp.w	sl, #0
 8010614:	d115      	bne.n	8010642 <_dtoa_r+0x8fa>
 8010616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801061a:	b993      	cbnz	r3, 8010642 <_dtoa_r+0x8fa>
 801061c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010620:	0d1b      	lsrs	r3, r3, #20
 8010622:	051b      	lsls	r3, r3, #20
 8010624:	b183      	cbz	r3, 8010648 <_dtoa_r+0x900>
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	3301      	adds	r3, #1
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	9b05      	ldr	r3, [sp, #20]
 801062e:	3301      	adds	r3, #1
 8010630:	9305      	str	r3, [sp, #20]
 8010632:	f04f 0801 	mov.w	r8, #1
 8010636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010638:	2b00      	cmp	r3, #0
 801063a:	f47f af6a 	bne.w	8010512 <_dtoa_r+0x7ca>
 801063e:	2001      	movs	r0, #1
 8010640:	e76f      	b.n	8010522 <_dtoa_r+0x7da>
 8010642:	f04f 0800 	mov.w	r8, #0
 8010646:	e7f6      	b.n	8010636 <_dtoa_r+0x8ee>
 8010648:	4698      	mov	r8, r3
 801064a:	e7f4      	b.n	8010636 <_dtoa_r+0x8ee>
 801064c:	f43f af7d 	beq.w	801054a <_dtoa_r+0x802>
 8010650:	4618      	mov	r0, r3
 8010652:	301c      	adds	r0, #28
 8010654:	e772      	b.n	801053c <_dtoa_r+0x7f4>
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	dc37      	bgt.n	80106cc <_dtoa_r+0x984>
 801065c:	9b06      	ldr	r3, [sp, #24]
 801065e:	2b02      	cmp	r3, #2
 8010660:	dd34      	ble.n	80106cc <_dtoa_r+0x984>
 8010662:	9b03      	ldr	r3, [sp, #12]
 8010664:	9302      	str	r3, [sp, #8]
 8010666:	9b02      	ldr	r3, [sp, #8]
 8010668:	b96b      	cbnz	r3, 8010686 <_dtoa_r+0x93e>
 801066a:	4631      	mov	r1, r6
 801066c:	2205      	movs	r2, #5
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fae8 	bl	8010c44 <__multadd>
 8010674:	4601      	mov	r1, r0
 8010676:	4606      	mov	r6, r0
 8010678:	ee18 0a10 	vmov	r0, s16
 801067c:	f000 fd02 	bl	8011084 <__mcmp>
 8010680:	2800      	cmp	r0, #0
 8010682:	f73f adbb 	bgt.w	80101fc <_dtoa_r+0x4b4>
 8010686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010688:	9d01      	ldr	r5, [sp, #4]
 801068a:	43db      	mvns	r3, r3
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	f04f 0800 	mov.w	r8, #0
 8010692:	4631      	mov	r1, r6
 8010694:	4620      	mov	r0, r4
 8010696:	f000 fab3 	bl	8010c00 <_Bfree>
 801069a:	2f00      	cmp	r7, #0
 801069c:	f43f aea4 	beq.w	80103e8 <_dtoa_r+0x6a0>
 80106a0:	f1b8 0f00 	cmp.w	r8, #0
 80106a4:	d005      	beq.n	80106b2 <_dtoa_r+0x96a>
 80106a6:	45b8      	cmp	r8, r7
 80106a8:	d003      	beq.n	80106b2 <_dtoa_r+0x96a>
 80106aa:	4641      	mov	r1, r8
 80106ac:	4620      	mov	r0, r4
 80106ae:	f000 faa7 	bl	8010c00 <_Bfree>
 80106b2:	4639      	mov	r1, r7
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 faa3 	bl	8010c00 <_Bfree>
 80106ba:	e695      	b.n	80103e8 <_dtoa_r+0x6a0>
 80106bc:	2600      	movs	r6, #0
 80106be:	4637      	mov	r7, r6
 80106c0:	e7e1      	b.n	8010686 <_dtoa_r+0x93e>
 80106c2:	9700      	str	r7, [sp, #0]
 80106c4:	4637      	mov	r7, r6
 80106c6:	e599      	b.n	80101fc <_dtoa_r+0x4b4>
 80106c8:	40240000 	.word	0x40240000
 80106cc:	9b08      	ldr	r3, [sp, #32]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 80ca 	beq.w	8010868 <_dtoa_r+0xb20>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	9302      	str	r3, [sp, #8]
 80106d8:	2d00      	cmp	r5, #0
 80106da:	dd05      	ble.n	80106e8 <_dtoa_r+0x9a0>
 80106dc:	4639      	mov	r1, r7
 80106de:	462a      	mov	r2, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	f000 fc5f 	bl	8010fa4 <__lshift>
 80106e6:	4607      	mov	r7, r0
 80106e8:	f1b8 0f00 	cmp.w	r8, #0
 80106ec:	d05b      	beq.n	80107a6 <_dtoa_r+0xa5e>
 80106ee:	6879      	ldr	r1, [r7, #4]
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fa45 	bl	8010b80 <_Balloc>
 80106f6:	4605      	mov	r5, r0
 80106f8:	b928      	cbnz	r0, 8010706 <_dtoa_r+0x9be>
 80106fa:	4b87      	ldr	r3, [pc, #540]	; (8010918 <_dtoa_r+0xbd0>)
 80106fc:	4602      	mov	r2, r0
 80106fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010702:	f7ff bb3b 	b.w	800fd7c <_dtoa_r+0x34>
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	3202      	adds	r2, #2
 801070a:	0092      	lsls	r2, r2, #2
 801070c:	f107 010c 	add.w	r1, r7, #12
 8010710:	300c      	adds	r0, #12
 8010712:	f7fe fce7 	bl	800f0e4 <memcpy>
 8010716:	2201      	movs	r2, #1
 8010718:	4629      	mov	r1, r5
 801071a:	4620      	mov	r0, r4
 801071c:	f000 fc42 	bl	8010fa4 <__lshift>
 8010720:	9b01      	ldr	r3, [sp, #4]
 8010722:	f103 0901 	add.w	r9, r3, #1
 8010726:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801072a:	4413      	add	r3, r2
 801072c:	9305      	str	r3, [sp, #20]
 801072e:	f00a 0301 	and.w	r3, sl, #1
 8010732:	46b8      	mov	r8, r7
 8010734:	9304      	str	r3, [sp, #16]
 8010736:	4607      	mov	r7, r0
 8010738:	4631      	mov	r1, r6
 801073a:	ee18 0a10 	vmov	r0, s16
 801073e:	f7ff fa77 	bl	800fc30 <quorem>
 8010742:	4641      	mov	r1, r8
 8010744:	9002      	str	r0, [sp, #8]
 8010746:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801074a:	ee18 0a10 	vmov	r0, s16
 801074e:	f000 fc99 	bl	8011084 <__mcmp>
 8010752:	463a      	mov	r2, r7
 8010754:	9003      	str	r0, [sp, #12]
 8010756:	4631      	mov	r1, r6
 8010758:	4620      	mov	r0, r4
 801075a:	f000 fcaf 	bl	80110bc <__mdiff>
 801075e:	68c2      	ldr	r2, [r0, #12]
 8010760:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010764:	4605      	mov	r5, r0
 8010766:	bb02      	cbnz	r2, 80107aa <_dtoa_r+0xa62>
 8010768:	4601      	mov	r1, r0
 801076a:	ee18 0a10 	vmov	r0, s16
 801076e:	f000 fc89 	bl	8011084 <__mcmp>
 8010772:	4602      	mov	r2, r0
 8010774:	4629      	mov	r1, r5
 8010776:	4620      	mov	r0, r4
 8010778:	9207      	str	r2, [sp, #28]
 801077a:	f000 fa41 	bl	8010c00 <_Bfree>
 801077e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010782:	ea43 0102 	orr.w	r1, r3, r2
 8010786:	9b04      	ldr	r3, [sp, #16]
 8010788:	430b      	orrs	r3, r1
 801078a:	464d      	mov	r5, r9
 801078c:	d10f      	bne.n	80107ae <_dtoa_r+0xa66>
 801078e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010792:	d02a      	beq.n	80107ea <_dtoa_r+0xaa2>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	dd02      	ble.n	80107a0 <_dtoa_r+0xa58>
 801079a:	9b02      	ldr	r3, [sp, #8]
 801079c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80107a0:	f88b a000 	strb.w	sl, [fp]
 80107a4:	e775      	b.n	8010692 <_dtoa_r+0x94a>
 80107a6:	4638      	mov	r0, r7
 80107a8:	e7ba      	b.n	8010720 <_dtoa_r+0x9d8>
 80107aa:	2201      	movs	r2, #1
 80107ac:	e7e2      	b.n	8010774 <_dtoa_r+0xa2c>
 80107ae:	9b03      	ldr	r3, [sp, #12]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	db04      	blt.n	80107be <_dtoa_r+0xa76>
 80107b4:	9906      	ldr	r1, [sp, #24]
 80107b6:	430b      	orrs	r3, r1
 80107b8:	9904      	ldr	r1, [sp, #16]
 80107ba:	430b      	orrs	r3, r1
 80107bc:	d122      	bne.n	8010804 <_dtoa_r+0xabc>
 80107be:	2a00      	cmp	r2, #0
 80107c0:	ddee      	ble.n	80107a0 <_dtoa_r+0xa58>
 80107c2:	ee18 1a10 	vmov	r1, s16
 80107c6:	2201      	movs	r2, #1
 80107c8:	4620      	mov	r0, r4
 80107ca:	f000 fbeb 	bl	8010fa4 <__lshift>
 80107ce:	4631      	mov	r1, r6
 80107d0:	ee08 0a10 	vmov	s16, r0
 80107d4:	f000 fc56 	bl	8011084 <__mcmp>
 80107d8:	2800      	cmp	r0, #0
 80107da:	dc03      	bgt.n	80107e4 <_dtoa_r+0xa9c>
 80107dc:	d1e0      	bne.n	80107a0 <_dtoa_r+0xa58>
 80107de:	f01a 0f01 	tst.w	sl, #1
 80107e2:	d0dd      	beq.n	80107a0 <_dtoa_r+0xa58>
 80107e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80107e8:	d1d7      	bne.n	801079a <_dtoa_r+0xa52>
 80107ea:	2339      	movs	r3, #57	; 0x39
 80107ec:	f88b 3000 	strb.w	r3, [fp]
 80107f0:	462b      	mov	r3, r5
 80107f2:	461d      	mov	r5, r3
 80107f4:	3b01      	subs	r3, #1
 80107f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107fa:	2a39      	cmp	r2, #57	; 0x39
 80107fc:	d071      	beq.n	80108e2 <_dtoa_r+0xb9a>
 80107fe:	3201      	adds	r2, #1
 8010800:	701a      	strb	r2, [r3, #0]
 8010802:	e746      	b.n	8010692 <_dtoa_r+0x94a>
 8010804:	2a00      	cmp	r2, #0
 8010806:	dd07      	ble.n	8010818 <_dtoa_r+0xad0>
 8010808:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801080c:	d0ed      	beq.n	80107ea <_dtoa_r+0xaa2>
 801080e:	f10a 0301 	add.w	r3, sl, #1
 8010812:	f88b 3000 	strb.w	r3, [fp]
 8010816:	e73c      	b.n	8010692 <_dtoa_r+0x94a>
 8010818:	9b05      	ldr	r3, [sp, #20]
 801081a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801081e:	4599      	cmp	r9, r3
 8010820:	d047      	beq.n	80108b2 <_dtoa_r+0xb6a>
 8010822:	ee18 1a10 	vmov	r1, s16
 8010826:	2300      	movs	r3, #0
 8010828:	220a      	movs	r2, #10
 801082a:	4620      	mov	r0, r4
 801082c:	f000 fa0a 	bl	8010c44 <__multadd>
 8010830:	45b8      	cmp	r8, r7
 8010832:	ee08 0a10 	vmov	s16, r0
 8010836:	f04f 0300 	mov.w	r3, #0
 801083a:	f04f 020a 	mov.w	r2, #10
 801083e:	4641      	mov	r1, r8
 8010840:	4620      	mov	r0, r4
 8010842:	d106      	bne.n	8010852 <_dtoa_r+0xb0a>
 8010844:	f000 f9fe 	bl	8010c44 <__multadd>
 8010848:	4680      	mov	r8, r0
 801084a:	4607      	mov	r7, r0
 801084c:	f109 0901 	add.w	r9, r9, #1
 8010850:	e772      	b.n	8010738 <_dtoa_r+0x9f0>
 8010852:	f000 f9f7 	bl	8010c44 <__multadd>
 8010856:	4639      	mov	r1, r7
 8010858:	4680      	mov	r8, r0
 801085a:	2300      	movs	r3, #0
 801085c:	220a      	movs	r2, #10
 801085e:	4620      	mov	r0, r4
 8010860:	f000 f9f0 	bl	8010c44 <__multadd>
 8010864:	4607      	mov	r7, r0
 8010866:	e7f1      	b.n	801084c <_dtoa_r+0xb04>
 8010868:	9b03      	ldr	r3, [sp, #12]
 801086a:	9302      	str	r3, [sp, #8]
 801086c:	9d01      	ldr	r5, [sp, #4]
 801086e:	ee18 0a10 	vmov	r0, s16
 8010872:	4631      	mov	r1, r6
 8010874:	f7ff f9dc 	bl	800fc30 <quorem>
 8010878:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	f805 ab01 	strb.w	sl, [r5], #1
 8010882:	1aea      	subs	r2, r5, r3
 8010884:	9b02      	ldr	r3, [sp, #8]
 8010886:	4293      	cmp	r3, r2
 8010888:	dd09      	ble.n	801089e <_dtoa_r+0xb56>
 801088a:	ee18 1a10 	vmov	r1, s16
 801088e:	2300      	movs	r3, #0
 8010890:	220a      	movs	r2, #10
 8010892:	4620      	mov	r0, r4
 8010894:	f000 f9d6 	bl	8010c44 <__multadd>
 8010898:	ee08 0a10 	vmov	s16, r0
 801089c:	e7e7      	b.n	801086e <_dtoa_r+0xb26>
 801089e:	9b02      	ldr	r3, [sp, #8]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	bfc8      	it	gt
 80108a4:	461d      	movgt	r5, r3
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	bfd8      	it	le
 80108aa:	2501      	movle	r5, #1
 80108ac:	441d      	add	r5, r3
 80108ae:	f04f 0800 	mov.w	r8, #0
 80108b2:	ee18 1a10 	vmov	r1, s16
 80108b6:	2201      	movs	r2, #1
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 fb73 	bl	8010fa4 <__lshift>
 80108be:	4631      	mov	r1, r6
 80108c0:	ee08 0a10 	vmov	s16, r0
 80108c4:	f000 fbde 	bl	8011084 <__mcmp>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	dc91      	bgt.n	80107f0 <_dtoa_r+0xaa8>
 80108cc:	d102      	bne.n	80108d4 <_dtoa_r+0xb8c>
 80108ce:	f01a 0f01 	tst.w	sl, #1
 80108d2:	d18d      	bne.n	80107f0 <_dtoa_r+0xaa8>
 80108d4:	462b      	mov	r3, r5
 80108d6:	461d      	mov	r5, r3
 80108d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108dc:	2a30      	cmp	r2, #48	; 0x30
 80108de:	d0fa      	beq.n	80108d6 <_dtoa_r+0xb8e>
 80108e0:	e6d7      	b.n	8010692 <_dtoa_r+0x94a>
 80108e2:	9a01      	ldr	r2, [sp, #4]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d184      	bne.n	80107f2 <_dtoa_r+0xaaa>
 80108e8:	9b00      	ldr	r3, [sp, #0]
 80108ea:	3301      	adds	r3, #1
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	2331      	movs	r3, #49	; 0x31
 80108f0:	7013      	strb	r3, [r2, #0]
 80108f2:	e6ce      	b.n	8010692 <_dtoa_r+0x94a>
 80108f4:	4b09      	ldr	r3, [pc, #36]	; (801091c <_dtoa_r+0xbd4>)
 80108f6:	f7ff ba95 	b.w	800fe24 <_dtoa_r+0xdc>
 80108fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	f47f aa6e 	bne.w	800fdde <_dtoa_r+0x96>
 8010902:	4b07      	ldr	r3, [pc, #28]	; (8010920 <_dtoa_r+0xbd8>)
 8010904:	f7ff ba8e 	b.w	800fe24 <_dtoa_r+0xdc>
 8010908:	9b02      	ldr	r3, [sp, #8]
 801090a:	2b00      	cmp	r3, #0
 801090c:	dcae      	bgt.n	801086c <_dtoa_r+0xb24>
 801090e:	9b06      	ldr	r3, [sp, #24]
 8010910:	2b02      	cmp	r3, #2
 8010912:	f73f aea8 	bgt.w	8010666 <_dtoa_r+0x91e>
 8010916:	e7a9      	b.n	801086c <_dtoa_r+0xb24>
 8010918:	0801210c 	.word	0x0801210c
 801091c:	08011f2c 	.word	0x08011f2c
 8010920:	0801208d 	.word	0x0801208d

08010924 <std>:
 8010924:	2300      	movs	r3, #0
 8010926:	b510      	push	{r4, lr}
 8010928:	4604      	mov	r4, r0
 801092a:	e9c0 3300 	strd	r3, r3, [r0]
 801092e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010932:	6083      	str	r3, [r0, #8]
 8010934:	8181      	strh	r1, [r0, #12]
 8010936:	6643      	str	r3, [r0, #100]	; 0x64
 8010938:	81c2      	strh	r2, [r0, #14]
 801093a:	6183      	str	r3, [r0, #24]
 801093c:	4619      	mov	r1, r3
 801093e:	2208      	movs	r2, #8
 8010940:	305c      	adds	r0, #92	; 0x5c
 8010942:	f7fe fbdd 	bl	800f100 <memset>
 8010946:	4b05      	ldr	r3, [pc, #20]	; (801095c <std+0x38>)
 8010948:	6263      	str	r3, [r4, #36]	; 0x24
 801094a:	4b05      	ldr	r3, [pc, #20]	; (8010960 <std+0x3c>)
 801094c:	62a3      	str	r3, [r4, #40]	; 0x28
 801094e:	4b05      	ldr	r3, [pc, #20]	; (8010964 <std+0x40>)
 8010950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010952:	4b05      	ldr	r3, [pc, #20]	; (8010968 <std+0x44>)
 8010954:	6224      	str	r4, [r4, #32]
 8010956:	6323      	str	r3, [r4, #48]	; 0x30
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop
 801095c:	08011569 	.word	0x08011569
 8010960:	0801158b 	.word	0x0801158b
 8010964:	080115c3 	.word	0x080115c3
 8010968:	080115e7 	.word	0x080115e7

0801096c <_cleanup_r>:
 801096c:	4901      	ldr	r1, [pc, #4]	; (8010974 <_cleanup_r+0x8>)
 801096e:	f000 b8c1 	b.w	8010af4 <_fwalk_reent>
 8010972:	bf00      	nop
 8010974:	080118ed 	.word	0x080118ed

08010978 <__sfmoreglue>:
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	2268      	movs	r2, #104	; 0x68
 801097c:	1e4d      	subs	r5, r1, #1
 801097e:	4355      	muls	r5, r2
 8010980:	460e      	mov	r6, r1
 8010982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010986:	f7fe fc2f 	bl	800f1e8 <_malloc_r>
 801098a:	4604      	mov	r4, r0
 801098c:	b140      	cbz	r0, 80109a0 <__sfmoreglue+0x28>
 801098e:	2100      	movs	r1, #0
 8010990:	e9c0 1600 	strd	r1, r6, [r0]
 8010994:	300c      	adds	r0, #12
 8010996:	60a0      	str	r0, [r4, #8]
 8010998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801099c:	f7fe fbb0 	bl	800f100 <memset>
 80109a0:	4620      	mov	r0, r4
 80109a2:	bd70      	pop	{r4, r5, r6, pc}

080109a4 <__sfp_lock_acquire>:
 80109a4:	4801      	ldr	r0, [pc, #4]	; (80109ac <__sfp_lock_acquire+0x8>)
 80109a6:	f000 b8ca 	b.w	8010b3e <__retarget_lock_acquire_recursive>
 80109aa:	bf00      	nop
 80109ac:	200028dd 	.word	0x200028dd

080109b0 <__sfp_lock_release>:
 80109b0:	4801      	ldr	r0, [pc, #4]	; (80109b8 <__sfp_lock_release+0x8>)
 80109b2:	f000 b8c5 	b.w	8010b40 <__retarget_lock_release_recursive>
 80109b6:	bf00      	nop
 80109b8:	200028dd 	.word	0x200028dd

080109bc <__sinit_lock_acquire>:
 80109bc:	4801      	ldr	r0, [pc, #4]	; (80109c4 <__sinit_lock_acquire+0x8>)
 80109be:	f000 b8be 	b.w	8010b3e <__retarget_lock_acquire_recursive>
 80109c2:	bf00      	nop
 80109c4:	200028de 	.word	0x200028de

080109c8 <__sinit_lock_release>:
 80109c8:	4801      	ldr	r0, [pc, #4]	; (80109d0 <__sinit_lock_release+0x8>)
 80109ca:	f000 b8b9 	b.w	8010b40 <__retarget_lock_release_recursive>
 80109ce:	bf00      	nop
 80109d0:	200028de 	.word	0x200028de

080109d4 <__sinit>:
 80109d4:	b510      	push	{r4, lr}
 80109d6:	4604      	mov	r4, r0
 80109d8:	f7ff fff0 	bl	80109bc <__sinit_lock_acquire>
 80109dc:	69a3      	ldr	r3, [r4, #24]
 80109de:	b11b      	cbz	r3, 80109e8 <__sinit+0x14>
 80109e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e4:	f7ff bff0 	b.w	80109c8 <__sinit_lock_release>
 80109e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109ec:	6523      	str	r3, [r4, #80]	; 0x50
 80109ee:	4b13      	ldr	r3, [pc, #76]	; (8010a3c <__sinit+0x68>)
 80109f0:	4a13      	ldr	r2, [pc, #76]	; (8010a40 <__sinit+0x6c>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80109f6:	42a3      	cmp	r3, r4
 80109f8:	bf04      	itt	eq
 80109fa:	2301      	moveq	r3, #1
 80109fc:	61a3      	streq	r3, [r4, #24]
 80109fe:	4620      	mov	r0, r4
 8010a00:	f000 f820 	bl	8010a44 <__sfp>
 8010a04:	6060      	str	r0, [r4, #4]
 8010a06:	4620      	mov	r0, r4
 8010a08:	f000 f81c 	bl	8010a44 <__sfp>
 8010a0c:	60a0      	str	r0, [r4, #8]
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 f818 	bl	8010a44 <__sfp>
 8010a14:	2200      	movs	r2, #0
 8010a16:	60e0      	str	r0, [r4, #12]
 8010a18:	2104      	movs	r1, #4
 8010a1a:	6860      	ldr	r0, [r4, #4]
 8010a1c:	f7ff ff82 	bl	8010924 <std>
 8010a20:	68a0      	ldr	r0, [r4, #8]
 8010a22:	2201      	movs	r2, #1
 8010a24:	2109      	movs	r1, #9
 8010a26:	f7ff ff7d 	bl	8010924 <std>
 8010a2a:	68e0      	ldr	r0, [r4, #12]
 8010a2c:	2202      	movs	r2, #2
 8010a2e:	2112      	movs	r1, #18
 8010a30:	f7ff ff78 	bl	8010924 <std>
 8010a34:	2301      	movs	r3, #1
 8010a36:	61a3      	str	r3, [r4, #24]
 8010a38:	e7d2      	b.n	80109e0 <__sinit+0xc>
 8010a3a:	bf00      	nop
 8010a3c:	08011f18 	.word	0x08011f18
 8010a40:	0801096d 	.word	0x0801096d

08010a44 <__sfp>:
 8010a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a46:	4607      	mov	r7, r0
 8010a48:	f7ff ffac 	bl	80109a4 <__sfp_lock_acquire>
 8010a4c:	4b1e      	ldr	r3, [pc, #120]	; (8010ac8 <__sfp+0x84>)
 8010a4e:	681e      	ldr	r6, [r3, #0]
 8010a50:	69b3      	ldr	r3, [r6, #24]
 8010a52:	b913      	cbnz	r3, 8010a5a <__sfp+0x16>
 8010a54:	4630      	mov	r0, r6
 8010a56:	f7ff ffbd 	bl	80109d4 <__sinit>
 8010a5a:	3648      	adds	r6, #72	; 0x48
 8010a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	d503      	bpl.n	8010a6c <__sfp+0x28>
 8010a64:	6833      	ldr	r3, [r6, #0]
 8010a66:	b30b      	cbz	r3, 8010aac <__sfp+0x68>
 8010a68:	6836      	ldr	r6, [r6, #0]
 8010a6a:	e7f7      	b.n	8010a5c <__sfp+0x18>
 8010a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a70:	b9d5      	cbnz	r5, 8010aa8 <__sfp+0x64>
 8010a72:	4b16      	ldr	r3, [pc, #88]	; (8010acc <__sfp+0x88>)
 8010a74:	60e3      	str	r3, [r4, #12]
 8010a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8010a7c:	f000 f85e 	bl	8010b3c <__retarget_lock_init_recursive>
 8010a80:	f7ff ff96 	bl	80109b0 <__sfp_lock_release>
 8010a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a8c:	6025      	str	r5, [r4, #0]
 8010a8e:	61a5      	str	r5, [r4, #24]
 8010a90:	2208      	movs	r2, #8
 8010a92:	4629      	mov	r1, r5
 8010a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a98:	f7fe fb32 	bl	800f100 <memset>
 8010a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aa8:	3468      	adds	r4, #104	; 0x68
 8010aaa:	e7d9      	b.n	8010a60 <__sfp+0x1c>
 8010aac:	2104      	movs	r1, #4
 8010aae:	4638      	mov	r0, r7
 8010ab0:	f7ff ff62 	bl	8010978 <__sfmoreglue>
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	6030      	str	r0, [r6, #0]
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d1d5      	bne.n	8010a68 <__sfp+0x24>
 8010abc:	f7ff ff78 	bl	80109b0 <__sfp_lock_release>
 8010ac0:	230c      	movs	r3, #12
 8010ac2:	603b      	str	r3, [r7, #0]
 8010ac4:	e7ee      	b.n	8010aa4 <__sfp+0x60>
 8010ac6:	bf00      	nop
 8010ac8:	08011f18 	.word	0x08011f18
 8010acc:	ffff0001 	.word	0xffff0001

08010ad0 <fiprintf>:
 8010ad0:	b40e      	push	{r1, r2, r3}
 8010ad2:	b503      	push	{r0, r1, lr}
 8010ad4:	4601      	mov	r1, r0
 8010ad6:	ab03      	add	r3, sp, #12
 8010ad8:	4805      	ldr	r0, [pc, #20]	; (8010af0 <fiprintf+0x20>)
 8010ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	f000 fc11 	bl	8011308 <_vfiprintf_r>
 8010ae6:	b002      	add	sp, #8
 8010ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010aec:	b003      	add	sp, #12
 8010aee:	4770      	bx	lr
 8010af0:	20000184 	.word	0x20000184

08010af4 <_fwalk_reent>:
 8010af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010af8:	4606      	mov	r6, r0
 8010afa:	4688      	mov	r8, r1
 8010afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b00:	2700      	movs	r7, #0
 8010b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b06:	f1b9 0901 	subs.w	r9, r9, #1
 8010b0a:	d505      	bpl.n	8010b18 <_fwalk_reent+0x24>
 8010b0c:	6824      	ldr	r4, [r4, #0]
 8010b0e:	2c00      	cmp	r4, #0
 8010b10:	d1f7      	bne.n	8010b02 <_fwalk_reent+0xe>
 8010b12:	4638      	mov	r0, r7
 8010b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b18:	89ab      	ldrh	r3, [r5, #12]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d907      	bls.n	8010b2e <_fwalk_reent+0x3a>
 8010b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b22:	3301      	adds	r3, #1
 8010b24:	d003      	beq.n	8010b2e <_fwalk_reent+0x3a>
 8010b26:	4629      	mov	r1, r5
 8010b28:	4630      	mov	r0, r6
 8010b2a:	47c0      	blx	r8
 8010b2c:	4307      	orrs	r7, r0
 8010b2e:	3568      	adds	r5, #104	; 0x68
 8010b30:	e7e9      	b.n	8010b06 <_fwalk_reent+0x12>
	...

08010b34 <_localeconv_r>:
 8010b34:	4800      	ldr	r0, [pc, #0]	; (8010b38 <_localeconv_r+0x4>)
 8010b36:	4770      	bx	lr
 8010b38:	200002d8 	.word	0x200002d8

08010b3c <__retarget_lock_init_recursive>:
 8010b3c:	4770      	bx	lr

08010b3e <__retarget_lock_acquire_recursive>:
 8010b3e:	4770      	bx	lr

08010b40 <__retarget_lock_release_recursive>:
 8010b40:	4770      	bx	lr

08010b42 <__ascii_mbtowc>:
 8010b42:	b082      	sub	sp, #8
 8010b44:	b901      	cbnz	r1, 8010b48 <__ascii_mbtowc+0x6>
 8010b46:	a901      	add	r1, sp, #4
 8010b48:	b142      	cbz	r2, 8010b5c <__ascii_mbtowc+0x1a>
 8010b4a:	b14b      	cbz	r3, 8010b60 <__ascii_mbtowc+0x1e>
 8010b4c:	7813      	ldrb	r3, [r2, #0]
 8010b4e:	600b      	str	r3, [r1, #0]
 8010b50:	7812      	ldrb	r2, [r2, #0]
 8010b52:	1e10      	subs	r0, r2, #0
 8010b54:	bf18      	it	ne
 8010b56:	2001      	movne	r0, #1
 8010b58:	b002      	add	sp, #8
 8010b5a:	4770      	bx	lr
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	e7fb      	b.n	8010b58 <__ascii_mbtowc+0x16>
 8010b60:	f06f 0001 	mvn.w	r0, #1
 8010b64:	e7f8      	b.n	8010b58 <__ascii_mbtowc+0x16>
	...

08010b68 <__malloc_lock>:
 8010b68:	4801      	ldr	r0, [pc, #4]	; (8010b70 <__malloc_lock+0x8>)
 8010b6a:	f7ff bfe8 	b.w	8010b3e <__retarget_lock_acquire_recursive>
 8010b6e:	bf00      	nop
 8010b70:	200028dc 	.word	0x200028dc

08010b74 <__malloc_unlock>:
 8010b74:	4801      	ldr	r0, [pc, #4]	; (8010b7c <__malloc_unlock+0x8>)
 8010b76:	f7ff bfe3 	b.w	8010b40 <__retarget_lock_release_recursive>
 8010b7a:	bf00      	nop
 8010b7c:	200028dc 	.word	0x200028dc

08010b80 <_Balloc>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b84:	4604      	mov	r4, r0
 8010b86:	460d      	mov	r5, r1
 8010b88:	b976      	cbnz	r6, 8010ba8 <_Balloc+0x28>
 8010b8a:	2010      	movs	r0, #16
 8010b8c:	f7fe faa2 	bl	800f0d4 <malloc>
 8010b90:	4602      	mov	r2, r0
 8010b92:	6260      	str	r0, [r4, #36]	; 0x24
 8010b94:	b920      	cbnz	r0, 8010ba0 <_Balloc+0x20>
 8010b96:	4b18      	ldr	r3, [pc, #96]	; (8010bf8 <_Balloc+0x78>)
 8010b98:	4818      	ldr	r0, [pc, #96]	; (8010bfc <_Balloc+0x7c>)
 8010b9a:	2166      	movs	r1, #102	; 0x66
 8010b9c:	f7ff f82a 	bl	800fbf4 <__assert_func>
 8010ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ba4:	6006      	str	r6, [r0, #0]
 8010ba6:	60c6      	str	r6, [r0, #12]
 8010ba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010baa:	68f3      	ldr	r3, [r6, #12]
 8010bac:	b183      	cbz	r3, 8010bd0 <_Balloc+0x50>
 8010bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bb6:	b9b8      	cbnz	r0, 8010be8 <_Balloc+0x68>
 8010bb8:	2101      	movs	r1, #1
 8010bba:	fa01 f605 	lsl.w	r6, r1, r5
 8010bbe:	1d72      	adds	r2, r6, #5
 8010bc0:	0092      	lsls	r2, r2, #2
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f000 fb60 	bl	8011288 <_calloc_r>
 8010bc8:	b160      	cbz	r0, 8010be4 <_Balloc+0x64>
 8010bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bce:	e00e      	b.n	8010bee <_Balloc+0x6e>
 8010bd0:	2221      	movs	r2, #33	; 0x21
 8010bd2:	2104      	movs	r1, #4
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f000 fb57 	bl	8011288 <_calloc_r>
 8010bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bdc:	60f0      	str	r0, [r6, #12]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1e4      	bne.n	8010bae <_Balloc+0x2e>
 8010be4:	2000      	movs	r0, #0
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	6802      	ldr	r2, [r0, #0]
 8010bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bf4:	e7f7      	b.n	8010be6 <_Balloc+0x66>
 8010bf6:	bf00      	nop
 8010bf8:	0801209a 	.word	0x0801209a
 8010bfc:	0801218a 	.word	0x0801218a

08010c00 <_Bfree>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c04:	4605      	mov	r5, r0
 8010c06:	460c      	mov	r4, r1
 8010c08:	b976      	cbnz	r6, 8010c28 <_Bfree+0x28>
 8010c0a:	2010      	movs	r0, #16
 8010c0c:	f7fe fa62 	bl	800f0d4 <malloc>
 8010c10:	4602      	mov	r2, r0
 8010c12:	6268      	str	r0, [r5, #36]	; 0x24
 8010c14:	b920      	cbnz	r0, 8010c20 <_Bfree+0x20>
 8010c16:	4b09      	ldr	r3, [pc, #36]	; (8010c3c <_Bfree+0x3c>)
 8010c18:	4809      	ldr	r0, [pc, #36]	; (8010c40 <_Bfree+0x40>)
 8010c1a:	218a      	movs	r1, #138	; 0x8a
 8010c1c:	f7fe ffea 	bl	800fbf4 <__assert_func>
 8010c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c24:	6006      	str	r6, [r0, #0]
 8010c26:	60c6      	str	r6, [r0, #12]
 8010c28:	b13c      	cbz	r4, 8010c3a <_Bfree+0x3a>
 8010c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c2c:	6862      	ldr	r2, [r4, #4]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c34:	6021      	str	r1, [r4, #0]
 8010c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c3a:	bd70      	pop	{r4, r5, r6, pc}
 8010c3c:	0801209a 	.word	0x0801209a
 8010c40:	0801218a 	.word	0x0801218a

08010c44 <__multadd>:
 8010c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c48:	690d      	ldr	r5, [r1, #16]
 8010c4a:	4607      	mov	r7, r0
 8010c4c:	460c      	mov	r4, r1
 8010c4e:	461e      	mov	r6, r3
 8010c50:	f101 0c14 	add.w	ip, r1, #20
 8010c54:	2000      	movs	r0, #0
 8010c56:	f8dc 3000 	ldr.w	r3, [ip]
 8010c5a:	b299      	uxth	r1, r3
 8010c5c:	fb02 6101 	mla	r1, r2, r1, r6
 8010c60:	0c1e      	lsrs	r6, r3, #16
 8010c62:	0c0b      	lsrs	r3, r1, #16
 8010c64:	fb02 3306 	mla	r3, r2, r6, r3
 8010c68:	b289      	uxth	r1, r1
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c70:	4285      	cmp	r5, r0
 8010c72:	f84c 1b04 	str.w	r1, [ip], #4
 8010c76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c7a:	dcec      	bgt.n	8010c56 <__multadd+0x12>
 8010c7c:	b30e      	cbz	r6, 8010cc2 <__multadd+0x7e>
 8010c7e:	68a3      	ldr	r3, [r4, #8]
 8010c80:	42ab      	cmp	r3, r5
 8010c82:	dc19      	bgt.n	8010cb8 <__multadd+0x74>
 8010c84:	6861      	ldr	r1, [r4, #4]
 8010c86:	4638      	mov	r0, r7
 8010c88:	3101      	adds	r1, #1
 8010c8a:	f7ff ff79 	bl	8010b80 <_Balloc>
 8010c8e:	4680      	mov	r8, r0
 8010c90:	b928      	cbnz	r0, 8010c9e <__multadd+0x5a>
 8010c92:	4602      	mov	r2, r0
 8010c94:	4b0c      	ldr	r3, [pc, #48]	; (8010cc8 <__multadd+0x84>)
 8010c96:	480d      	ldr	r0, [pc, #52]	; (8010ccc <__multadd+0x88>)
 8010c98:	21b5      	movs	r1, #181	; 0xb5
 8010c9a:	f7fe ffab 	bl	800fbf4 <__assert_func>
 8010c9e:	6922      	ldr	r2, [r4, #16]
 8010ca0:	3202      	adds	r2, #2
 8010ca2:	f104 010c 	add.w	r1, r4, #12
 8010ca6:	0092      	lsls	r2, r2, #2
 8010ca8:	300c      	adds	r0, #12
 8010caa:	f7fe fa1b 	bl	800f0e4 <memcpy>
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	f7ff ffa5 	bl	8010c00 <_Bfree>
 8010cb6:	4644      	mov	r4, r8
 8010cb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cbc:	3501      	adds	r5, #1
 8010cbe:	615e      	str	r6, [r3, #20]
 8010cc0:	6125      	str	r5, [r4, #16]
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc8:	0801210c 	.word	0x0801210c
 8010ccc:	0801218a 	.word	0x0801218a

08010cd0 <__hi0bits>:
 8010cd0:	0c03      	lsrs	r3, r0, #16
 8010cd2:	041b      	lsls	r3, r3, #16
 8010cd4:	b9d3      	cbnz	r3, 8010d0c <__hi0bits+0x3c>
 8010cd6:	0400      	lsls	r0, r0, #16
 8010cd8:	2310      	movs	r3, #16
 8010cda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010cde:	bf04      	itt	eq
 8010ce0:	0200      	lsleq	r0, r0, #8
 8010ce2:	3308      	addeq	r3, #8
 8010ce4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ce8:	bf04      	itt	eq
 8010cea:	0100      	lsleq	r0, r0, #4
 8010cec:	3304      	addeq	r3, #4
 8010cee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cf2:	bf04      	itt	eq
 8010cf4:	0080      	lsleq	r0, r0, #2
 8010cf6:	3302      	addeq	r3, #2
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	db05      	blt.n	8010d08 <__hi0bits+0x38>
 8010cfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d00:	f103 0301 	add.w	r3, r3, #1
 8010d04:	bf08      	it	eq
 8010d06:	2320      	moveq	r3, #32
 8010d08:	4618      	mov	r0, r3
 8010d0a:	4770      	bx	lr
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e7e4      	b.n	8010cda <__hi0bits+0xa>

08010d10 <__lo0bits>:
 8010d10:	6803      	ldr	r3, [r0, #0]
 8010d12:	f013 0207 	ands.w	r2, r3, #7
 8010d16:	4601      	mov	r1, r0
 8010d18:	d00b      	beq.n	8010d32 <__lo0bits+0x22>
 8010d1a:	07da      	lsls	r2, r3, #31
 8010d1c:	d423      	bmi.n	8010d66 <__lo0bits+0x56>
 8010d1e:	0798      	lsls	r0, r3, #30
 8010d20:	bf49      	itett	mi
 8010d22:	085b      	lsrmi	r3, r3, #1
 8010d24:	089b      	lsrpl	r3, r3, #2
 8010d26:	2001      	movmi	r0, #1
 8010d28:	600b      	strmi	r3, [r1, #0]
 8010d2a:	bf5c      	itt	pl
 8010d2c:	600b      	strpl	r3, [r1, #0]
 8010d2e:	2002      	movpl	r0, #2
 8010d30:	4770      	bx	lr
 8010d32:	b298      	uxth	r0, r3
 8010d34:	b9a8      	cbnz	r0, 8010d62 <__lo0bits+0x52>
 8010d36:	0c1b      	lsrs	r3, r3, #16
 8010d38:	2010      	movs	r0, #16
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	b90a      	cbnz	r2, 8010d42 <__lo0bits+0x32>
 8010d3e:	3008      	adds	r0, #8
 8010d40:	0a1b      	lsrs	r3, r3, #8
 8010d42:	071a      	lsls	r2, r3, #28
 8010d44:	bf04      	itt	eq
 8010d46:	091b      	lsreq	r3, r3, #4
 8010d48:	3004      	addeq	r0, #4
 8010d4a:	079a      	lsls	r2, r3, #30
 8010d4c:	bf04      	itt	eq
 8010d4e:	089b      	lsreq	r3, r3, #2
 8010d50:	3002      	addeq	r0, #2
 8010d52:	07da      	lsls	r2, r3, #31
 8010d54:	d403      	bmi.n	8010d5e <__lo0bits+0x4e>
 8010d56:	085b      	lsrs	r3, r3, #1
 8010d58:	f100 0001 	add.w	r0, r0, #1
 8010d5c:	d005      	beq.n	8010d6a <__lo0bits+0x5a>
 8010d5e:	600b      	str	r3, [r1, #0]
 8010d60:	4770      	bx	lr
 8010d62:	4610      	mov	r0, r2
 8010d64:	e7e9      	b.n	8010d3a <__lo0bits+0x2a>
 8010d66:	2000      	movs	r0, #0
 8010d68:	4770      	bx	lr
 8010d6a:	2020      	movs	r0, #32
 8010d6c:	4770      	bx	lr
	...

08010d70 <__i2b>:
 8010d70:	b510      	push	{r4, lr}
 8010d72:	460c      	mov	r4, r1
 8010d74:	2101      	movs	r1, #1
 8010d76:	f7ff ff03 	bl	8010b80 <_Balloc>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	b928      	cbnz	r0, 8010d8a <__i2b+0x1a>
 8010d7e:	4b05      	ldr	r3, [pc, #20]	; (8010d94 <__i2b+0x24>)
 8010d80:	4805      	ldr	r0, [pc, #20]	; (8010d98 <__i2b+0x28>)
 8010d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d86:	f7fe ff35 	bl	800fbf4 <__assert_func>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	6144      	str	r4, [r0, #20]
 8010d8e:	6103      	str	r3, [r0, #16]
 8010d90:	bd10      	pop	{r4, pc}
 8010d92:	bf00      	nop
 8010d94:	0801210c 	.word	0x0801210c
 8010d98:	0801218a 	.word	0x0801218a

08010d9c <__multiply>:
 8010d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	4691      	mov	r9, r2
 8010da2:	690a      	ldr	r2, [r1, #16]
 8010da4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	bfb8      	it	lt
 8010dac:	460b      	movlt	r3, r1
 8010dae:	460c      	mov	r4, r1
 8010db0:	bfbc      	itt	lt
 8010db2:	464c      	movlt	r4, r9
 8010db4:	4699      	movlt	r9, r3
 8010db6:	6927      	ldr	r7, [r4, #16]
 8010db8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010dbc:	68a3      	ldr	r3, [r4, #8]
 8010dbe:	6861      	ldr	r1, [r4, #4]
 8010dc0:	eb07 060a 	add.w	r6, r7, sl
 8010dc4:	42b3      	cmp	r3, r6
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	bfb8      	it	lt
 8010dca:	3101      	addlt	r1, #1
 8010dcc:	f7ff fed8 	bl	8010b80 <_Balloc>
 8010dd0:	b930      	cbnz	r0, 8010de0 <__multiply+0x44>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	4b44      	ldr	r3, [pc, #272]	; (8010ee8 <__multiply+0x14c>)
 8010dd6:	4845      	ldr	r0, [pc, #276]	; (8010eec <__multiply+0x150>)
 8010dd8:	f240 115d 	movw	r1, #349	; 0x15d
 8010ddc:	f7fe ff0a 	bl	800fbf4 <__assert_func>
 8010de0:	f100 0514 	add.w	r5, r0, #20
 8010de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010de8:	462b      	mov	r3, r5
 8010dea:	2200      	movs	r2, #0
 8010dec:	4543      	cmp	r3, r8
 8010dee:	d321      	bcc.n	8010e34 <__multiply+0x98>
 8010df0:	f104 0314 	add.w	r3, r4, #20
 8010df4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010df8:	f109 0314 	add.w	r3, r9, #20
 8010dfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010e00:	9202      	str	r2, [sp, #8]
 8010e02:	1b3a      	subs	r2, r7, r4
 8010e04:	3a15      	subs	r2, #21
 8010e06:	f022 0203 	bic.w	r2, r2, #3
 8010e0a:	3204      	adds	r2, #4
 8010e0c:	f104 0115 	add.w	r1, r4, #21
 8010e10:	428f      	cmp	r7, r1
 8010e12:	bf38      	it	cc
 8010e14:	2204      	movcc	r2, #4
 8010e16:	9201      	str	r2, [sp, #4]
 8010e18:	9a02      	ldr	r2, [sp, #8]
 8010e1a:	9303      	str	r3, [sp, #12]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d80c      	bhi.n	8010e3a <__multiply+0x9e>
 8010e20:	2e00      	cmp	r6, #0
 8010e22:	dd03      	ble.n	8010e2c <__multiply+0x90>
 8010e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d05a      	beq.n	8010ee2 <__multiply+0x146>
 8010e2c:	6106      	str	r6, [r0, #16]
 8010e2e:	b005      	add	sp, #20
 8010e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e34:	f843 2b04 	str.w	r2, [r3], #4
 8010e38:	e7d8      	b.n	8010dec <__multiply+0x50>
 8010e3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e3e:	f1ba 0f00 	cmp.w	sl, #0
 8010e42:	d024      	beq.n	8010e8e <__multiply+0xf2>
 8010e44:	f104 0e14 	add.w	lr, r4, #20
 8010e48:	46a9      	mov	r9, r5
 8010e4a:	f04f 0c00 	mov.w	ip, #0
 8010e4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e52:	f8d9 1000 	ldr.w	r1, [r9]
 8010e56:	fa1f fb82 	uxth.w	fp, r2
 8010e5a:	b289      	uxth	r1, r1
 8010e5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e64:	f8d9 2000 	ldr.w	r2, [r9]
 8010e68:	4461      	add	r1, ip
 8010e6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e76:	b289      	uxth	r1, r1
 8010e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e7c:	4577      	cmp	r7, lr
 8010e7e:	f849 1b04 	str.w	r1, [r9], #4
 8010e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e86:	d8e2      	bhi.n	8010e4e <__multiply+0xb2>
 8010e88:	9a01      	ldr	r2, [sp, #4]
 8010e8a:	f845 c002 	str.w	ip, [r5, r2]
 8010e8e:	9a03      	ldr	r2, [sp, #12]
 8010e90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e94:	3304      	adds	r3, #4
 8010e96:	f1b9 0f00 	cmp.w	r9, #0
 8010e9a:	d020      	beq.n	8010ede <__multiply+0x142>
 8010e9c:	6829      	ldr	r1, [r5, #0]
 8010e9e:	f104 0c14 	add.w	ip, r4, #20
 8010ea2:	46ae      	mov	lr, r5
 8010ea4:	f04f 0a00 	mov.w	sl, #0
 8010ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8010eac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010eb0:	fb09 220b 	mla	r2, r9, fp, r2
 8010eb4:	4492      	add	sl, r2
 8010eb6:	b289      	uxth	r1, r1
 8010eb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010ebc:	f84e 1b04 	str.w	r1, [lr], #4
 8010ec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ec4:	f8be 1000 	ldrh.w	r1, [lr]
 8010ec8:	0c12      	lsrs	r2, r2, #16
 8010eca:	fb09 1102 	mla	r1, r9, r2, r1
 8010ece:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010ed2:	4567      	cmp	r7, ip
 8010ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ed8:	d8e6      	bhi.n	8010ea8 <__multiply+0x10c>
 8010eda:	9a01      	ldr	r2, [sp, #4]
 8010edc:	50a9      	str	r1, [r5, r2]
 8010ede:	3504      	adds	r5, #4
 8010ee0:	e79a      	b.n	8010e18 <__multiply+0x7c>
 8010ee2:	3e01      	subs	r6, #1
 8010ee4:	e79c      	b.n	8010e20 <__multiply+0x84>
 8010ee6:	bf00      	nop
 8010ee8:	0801210c 	.word	0x0801210c
 8010eec:	0801218a 	.word	0x0801218a

08010ef0 <__pow5mult>:
 8010ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ef4:	4615      	mov	r5, r2
 8010ef6:	f012 0203 	ands.w	r2, r2, #3
 8010efa:	4606      	mov	r6, r0
 8010efc:	460f      	mov	r7, r1
 8010efe:	d007      	beq.n	8010f10 <__pow5mult+0x20>
 8010f00:	4c25      	ldr	r4, [pc, #148]	; (8010f98 <__pow5mult+0xa8>)
 8010f02:	3a01      	subs	r2, #1
 8010f04:	2300      	movs	r3, #0
 8010f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f0a:	f7ff fe9b 	bl	8010c44 <__multadd>
 8010f0e:	4607      	mov	r7, r0
 8010f10:	10ad      	asrs	r5, r5, #2
 8010f12:	d03d      	beq.n	8010f90 <__pow5mult+0xa0>
 8010f14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010f16:	b97c      	cbnz	r4, 8010f38 <__pow5mult+0x48>
 8010f18:	2010      	movs	r0, #16
 8010f1a:	f7fe f8db 	bl	800f0d4 <malloc>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	6270      	str	r0, [r6, #36]	; 0x24
 8010f22:	b928      	cbnz	r0, 8010f30 <__pow5mult+0x40>
 8010f24:	4b1d      	ldr	r3, [pc, #116]	; (8010f9c <__pow5mult+0xac>)
 8010f26:	481e      	ldr	r0, [pc, #120]	; (8010fa0 <__pow5mult+0xb0>)
 8010f28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010f2c:	f7fe fe62 	bl	800fbf4 <__assert_func>
 8010f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f34:	6004      	str	r4, [r0, #0]
 8010f36:	60c4      	str	r4, [r0, #12]
 8010f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f40:	b94c      	cbnz	r4, 8010f56 <__pow5mult+0x66>
 8010f42:	f240 2171 	movw	r1, #625	; 0x271
 8010f46:	4630      	mov	r0, r6
 8010f48:	f7ff ff12 	bl	8010d70 <__i2b>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f52:	4604      	mov	r4, r0
 8010f54:	6003      	str	r3, [r0, #0]
 8010f56:	f04f 0900 	mov.w	r9, #0
 8010f5a:	07eb      	lsls	r3, r5, #31
 8010f5c:	d50a      	bpl.n	8010f74 <__pow5mult+0x84>
 8010f5e:	4639      	mov	r1, r7
 8010f60:	4622      	mov	r2, r4
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7ff ff1a 	bl	8010d9c <__multiply>
 8010f68:	4639      	mov	r1, r7
 8010f6a:	4680      	mov	r8, r0
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	f7ff fe47 	bl	8010c00 <_Bfree>
 8010f72:	4647      	mov	r7, r8
 8010f74:	106d      	asrs	r5, r5, #1
 8010f76:	d00b      	beq.n	8010f90 <__pow5mult+0xa0>
 8010f78:	6820      	ldr	r0, [r4, #0]
 8010f7a:	b938      	cbnz	r0, 8010f8c <__pow5mult+0x9c>
 8010f7c:	4622      	mov	r2, r4
 8010f7e:	4621      	mov	r1, r4
 8010f80:	4630      	mov	r0, r6
 8010f82:	f7ff ff0b 	bl	8010d9c <__multiply>
 8010f86:	6020      	str	r0, [r4, #0]
 8010f88:	f8c0 9000 	str.w	r9, [r0]
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	e7e4      	b.n	8010f5a <__pow5mult+0x6a>
 8010f90:	4638      	mov	r0, r7
 8010f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f96:	bf00      	nop
 8010f98:	080122d8 	.word	0x080122d8
 8010f9c:	0801209a 	.word	0x0801209a
 8010fa0:	0801218a 	.word	0x0801218a

08010fa4 <__lshift>:
 8010fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa8:	460c      	mov	r4, r1
 8010faa:	6849      	ldr	r1, [r1, #4]
 8010fac:	6923      	ldr	r3, [r4, #16]
 8010fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010fb2:	68a3      	ldr	r3, [r4, #8]
 8010fb4:	4607      	mov	r7, r0
 8010fb6:	4691      	mov	r9, r2
 8010fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010fbc:	f108 0601 	add.w	r6, r8, #1
 8010fc0:	42b3      	cmp	r3, r6
 8010fc2:	db0b      	blt.n	8010fdc <__lshift+0x38>
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f7ff fddb 	bl	8010b80 <_Balloc>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	b948      	cbnz	r0, 8010fe2 <__lshift+0x3e>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	4b2a      	ldr	r3, [pc, #168]	; (801107c <__lshift+0xd8>)
 8010fd2:	482b      	ldr	r0, [pc, #172]	; (8011080 <__lshift+0xdc>)
 8010fd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010fd8:	f7fe fe0c 	bl	800fbf4 <__assert_func>
 8010fdc:	3101      	adds	r1, #1
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	e7ee      	b.n	8010fc0 <__lshift+0x1c>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	f100 0114 	add.w	r1, r0, #20
 8010fe8:	f100 0210 	add.w	r2, r0, #16
 8010fec:	4618      	mov	r0, r3
 8010fee:	4553      	cmp	r3, sl
 8010ff0:	db37      	blt.n	8011062 <__lshift+0xbe>
 8010ff2:	6920      	ldr	r0, [r4, #16]
 8010ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ff8:	f104 0314 	add.w	r3, r4, #20
 8010ffc:	f019 091f 	ands.w	r9, r9, #31
 8011000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011008:	d02f      	beq.n	801106a <__lshift+0xc6>
 801100a:	f1c9 0e20 	rsb	lr, r9, #32
 801100e:	468a      	mov	sl, r1
 8011010:	f04f 0c00 	mov.w	ip, #0
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	fa02 f209 	lsl.w	r2, r2, r9
 801101a:	ea42 020c 	orr.w	r2, r2, ip
 801101e:	f84a 2b04 	str.w	r2, [sl], #4
 8011022:	f853 2b04 	ldr.w	r2, [r3], #4
 8011026:	4298      	cmp	r0, r3
 8011028:	fa22 fc0e 	lsr.w	ip, r2, lr
 801102c:	d8f2      	bhi.n	8011014 <__lshift+0x70>
 801102e:	1b03      	subs	r3, r0, r4
 8011030:	3b15      	subs	r3, #21
 8011032:	f023 0303 	bic.w	r3, r3, #3
 8011036:	3304      	adds	r3, #4
 8011038:	f104 0215 	add.w	r2, r4, #21
 801103c:	4290      	cmp	r0, r2
 801103e:	bf38      	it	cc
 8011040:	2304      	movcc	r3, #4
 8011042:	f841 c003 	str.w	ip, [r1, r3]
 8011046:	f1bc 0f00 	cmp.w	ip, #0
 801104a:	d001      	beq.n	8011050 <__lshift+0xac>
 801104c:	f108 0602 	add.w	r6, r8, #2
 8011050:	3e01      	subs	r6, #1
 8011052:	4638      	mov	r0, r7
 8011054:	612e      	str	r6, [r5, #16]
 8011056:	4621      	mov	r1, r4
 8011058:	f7ff fdd2 	bl	8010c00 <_Bfree>
 801105c:	4628      	mov	r0, r5
 801105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011062:	f842 0f04 	str.w	r0, [r2, #4]!
 8011066:	3301      	adds	r3, #1
 8011068:	e7c1      	b.n	8010fee <__lshift+0x4a>
 801106a:	3904      	subs	r1, #4
 801106c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011070:	f841 2f04 	str.w	r2, [r1, #4]!
 8011074:	4298      	cmp	r0, r3
 8011076:	d8f9      	bhi.n	801106c <__lshift+0xc8>
 8011078:	e7ea      	b.n	8011050 <__lshift+0xac>
 801107a:	bf00      	nop
 801107c:	0801210c 	.word	0x0801210c
 8011080:	0801218a 	.word	0x0801218a

08011084 <__mcmp>:
 8011084:	b530      	push	{r4, r5, lr}
 8011086:	6902      	ldr	r2, [r0, #16]
 8011088:	690c      	ldr	r4, [r1, #16]
 801108a:	1b12      	subs	r2, r2, r4
 801108c:	d10e      	bne.n	80110ac <__mcmp+0x28>
 801108e:	f100 0314 	add.w	r3, r0, #20
 8011092:	3114      	adds	r1, #20
 8011094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801109c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80110a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80110a4:	42a5      	cmp	r5, r4
 80110a6:	d003      	beq.n	80110b0 <__mcmp+0x2c>
 80110a8:	d305      	bcc.n	80110b6 <__mcmp+0x32>
 80110aa:	2201      	movs	r2, #1
 80110ac:	4610      	mov	r0, r2
 80110ae:	bd30      	pop	{r4, r5, pc}
 80110b0:	4283      	cmp	r3, r0
 80110b2:	d3f3      	bcc.n	801109c <__mcmp+0x18>
 80110b4:	e7fa      	b.n	80110ac <__mcmp+0x28>
 80110b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110ba:	e7f7      	b.n	80110ac <__mcmp+0x28>

080110bc <__mdiff>:
 80110bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	460c      	mov	r4, r1
 80110c2:	4606      	mov	r6, r0
 80110c4:	4611      	mov	r1, r2
 80110c6:	4620      	mov	r0, r4
 80110c8:	4690      	mov	r8, r2
 80110ca:	f7ff ffdb 	bl	8011084 <__mcmp>
 80110ce:	1e05      	subs	r5, r0, #0
 80110d0:	d110      	bne.n	80110f4 <__mdiff+0x38>
 80110d2:	4629      	mov	r1, r5
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7ff fd53 	bl	8010b80 <_Balloc>
 80110da:	b930      	cbnz	r0, 80110ea <__mdiff+0x2e>
 80110dc:	4b3a      	ldr	r3, [pc, #232]	; (80111c8 <__mdiff+0x10c>)
 80110de:	4602      	mov	r2, r0
 80110e0:	f240 2132 	movw	r1, #562	; 0x232
 80110e4:	4839      	ldr	r0, [pc, #228]	; (80111cc <__mdiff+0x110>)
 80110e6:	f7fe fd85 	bl	800fbf4 <__assert_func>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f4:	bfa4      	itt	ge
 80110f6:	4643      	movge	r3, r8
 80110f8:	46a0      	movge	r8, r4
 80110fa:	4630      	mov	r0, r6
 80110fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011100:	bfa6      	itte	ge
 8011102:	461c      	movge	r4, r3
 8011104:	2500      	movge	r5, #0
 8011106:	2501      	movlt	r5, #1
 8011108:	f7ff fd3a 	bl	8010b80 <_Balloc>
 801110c:	b920      	cbnz	r0, 8011118 <__mdiff+0x5c>
 801110e:	4b2e      	ldr	r3, [pc, #184]	; (80111c8 <__mdiff+0x10c>)
 8011110:	4602      	mov	r2, r0
 8011112:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011116:	e7e5      	b.n	80110e4 <__mdiff+0x28>
 8011118:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801111c:	6926      	ldr	r6, [r4, #16]
 801111e:	60c5      	str	r5, [r0, #12]
 8011120:	f104 0914 	add.w	r9, r4, #20
 8011124:	f108 0514 	add.w	r5, r8, #20
 8011128:	f100 0e14 	add.w	lr, r0, #20
 801112c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011134:	f108 0210 	add.w	r2, r8, #16
 8011138:	46f2      	mov	sl, lr
 801113a:	2100      	movs	r1, #0
 801113c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011144:	fa1f f883 	uxth.w	r8, r3
 8011148:	fa11 f18b 	uxtah	r1, r1, fp
 801114c:	0c1b      	lsrs	r3, r3, #16
 801114e:	eba1 0808 	sub.w	r8, r1, r8
 8011152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011156:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801115a:	fa1f f888 	uxth.w	r8, r8
 801115e:	1419      	asrs	r1, r3, #16
 8011160:	454e      	cmp	r6, r9
 8011162:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011166:	f84a 3b04 	str.w	r3, [sl], #4
 801116a:	d8e7      	bhi.n	801113c <__mdiff+0x80>
 801116c:	1b33      	subs	r3, r6, r4
 801116e:	3b15      	subs	r3, #21
 8011170:	f023 0303 	bic.w	r3, r3, #3
 8011174:	3304      	adds	r3, #4
 8011176:	3415      	adds	r4, #21
 8011178:	42a6      	cmp	r6, r4
 801117a:	bf38      	it	cc
 801117c:	2304      	movcc	r3, #4
 801117e:	441d      	add	r5, r3
 8011180:	4473      	add	r3, lr
 8011182:	469e      	mov	lr, r3
 8011184:	462e      	mov	r6, r5
 8011186:	4566      	cmp	r6, ip
 8011188:	d30e      	bcc.n	80111a8 <__mdiff+0xec>
 801118a:	f10c 0203 	add.w	r2, ip, #3
 801118e:	1b52      	subs	r2, r2, r5
 8011190:	f022 0203 	bic.w	r2, r2, #3
 8011194:	3d03      	subs	r5, #3
 8011196:	45ac      	cmp	ip, r5
 8011198:	bf38      	it	cc
 801119a:	2200      	movcc	r2, #0
 801119c:	441a      	add	r2, r3
 801119e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80111a2:	b17b      	cbz	r3, 80111c4 <__mdiff+0x108>
 80111a4:	6107      	str	r7, [r0, #16]
 80111a6:	e7a3      	b.n	80110f0 <__mdiff+0x34>
 80111a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80111ac:	fa11 f288 	uxtah	r2, r1, r8
 80111b0:	1414      	asrs	r4, r2, #16
 80111b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80111b6:	b292      	uxth	r2, r2
 80111b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80111bc:	f84e 2b04 	str.w	r2, [lr], #4
 80111c0:	1421      	asrs	r1, r4, #16
 80111c2:	e7e0      	b.n	8011186 <__mdiff+0xca>
 80111c4:	3f01      	subs	r7, #1
 80111c6:	e7ea      	b.n	801119e <__mdiff+0xe2>
 80111c8:	0801210c 	.word	0x0801210c
 80111cc:	0801218a 	.word	0x0801218a

080111d0 <__d2b>:
 80111d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111d4:	4689      	mov	r9, r1
 80111d6:	2101      	movs	r1, #1
 80111d8:	ec57 6b10 	vmov	r6, r7, d0
 80111dc:	4690      	mov	r8, r2
 80111de:	f7ff fccf 	bl	8010b80 <_Balloc>
 80111e2:	4604      	mov	r4, r0
 80111e4:	b930      	cbnz	r0, 80111f4 <__d2b+0x24>
 80111e6:	4602      	mov	r2, r0
 80111e8:	4b25      	ldr	r3, [pc, #148]	; (8011280 <__d2b+0xb0>)
 80111ea:	4826      	ldr	r0, [pc, #152]	; (8011284 <__d2b+0xb4>)
 80111ec:	f240 310a 	movw	r1, #778	; 0x30a
 80111f0:	f7fe fd00 	bl	800fbf4 <__assert_func>
 80111f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80111f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80111fc:	bb35      	cbnz	r5, 801124c <__d2b+0x7c>
 80111fe:	2e00      	cmp	r6, #0
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	d028      	beq.n	8011256 <__d2b+0x86>
 8011204:	4668      	mov	r0, sp
 8011206:	9600      	str	r6, [sp, #0]
 8011208:	f7ff fd82 	bl	8010d10 <__lo0bits>
 801120c:	9900      	ldr	r1, [sp, #0]
 801120e:	b300      	cbz	r0, 8011252 <__d2b+0x82>
 8011210:	9a01      	ldr	r2, [sp, #4]
 8011212:	f1c0 0320 	rsb	r3, r0, #32
 8011216:	fa02 f303 	lsl.w	r3, r2, r3
 801121a:	430b      	orrs	r3, r1
 801121c:	40c2      	lsrs	r2, r0
 801121e:	6163      	str	r3, [r4, #20]
 8011220:	9201      	str	r2, [sp, #4]
 8011222:	9b01      	ldr	r3, [sp, #4]
 8011224:	61a3      	str	r3, [r4, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	bf14      	ite	ne
 801122a:	2202      	movne	r2, #2
 801122c:	2201      	moveq	r2, #1
 801122e:	6122      	str	r2, [r4, #16]
 8011230:	b1d5      	cbz	r5, 8011268 <__d2b+0x98>
 8011232:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011236:	4405      	add	r5, r0
 8011238:	f8c9 5000 	str.w	r5, [r9]
 801123c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011240:	f8c8 0000 	str.w	r0, [r8]
 8011244:	4620      	mov	r0, r4
 8011246:	b003      	add	sp, #12
 8011248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801124c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011250:	e7d5      	b.n	80111fe <__d2b+0x2e>
 8011252:	6161      	str	r1, [r4, #20]
 8011254:	e7e5      	b.n	8011222 <__d2b+0x52>
 8011256:	a801      	add	r0, sp, #4
 8011258:	f7ff fd5a 	bl	8010d10 <__lo0bits>
 801125c:	9b01      	ldr	r3, [sp, #4]
 801125e:	6163      	str	r3, [r4, #20]
 8011260:	2201      	movs	r2, #1
 8011262:	6122      	str	r2, [r4, #16]
 8011264:	3020      	adds	r0, #32
 8011266:	e7e3      	b.n	8011230 <__d2b+0x60>
 8011268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801126c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011270:	f8c9 0000 	str.w	r0, [r9]
 8011274:	6918      	ldr	r0, [r3, #16]
 8011276:	f7ff fd2b 	bl	8010cd0 <__hi0bits>
 801127a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801127e:	e7df      	b.n	8011240 <__d2b+0x70>
 8011280:	0801210c 	.word	0x0801210c
 8011284:	0801218a 	.word	0x0801218a

08011288 <_calloc_r>:
 8011288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801128a:	fba1 2402 	umull	r2, r4, r1, r2
 801128e:	b94c      	cbnz	r4, 80112a4 <_calloc_r+0x1c>
 8011290:	4611      	mov	r1, r2
 8011292:	9201      	str	r2, [sp, #4]
 8011294:	f7fd ffa8 	bl	800f1e8 <_malloc_r>
 8011298:	9a01      	ldr	r2, [sp, #4]
 801129a:	4605      	mov	r5, r0
 801129c:	b930      	cbnz	r0, 80112ac <_calloc_r+0x24>
 801129e:	4628      	mov	r0, r5
 80112a0:	b003      	add	sp, #12
 80112a2:	bd30      	pop	{r4, r5, pc}
 80112a4:	220c      	movs	r2, #12
 80112a6:	6002      	str	r2, [r0, #0]
 80112a8:	2500      	movs	r5, #0
 80112aa:	e7f8      	b.n	801129e <_calloc_r+0x16>
 80112ac:	4621      	mov	r1, r4
 80112ae:	f7fd ff27 	bl	800f100 <memset>
 80112b2:	e7f4      	b.n	801129e <_calloc_r+0x16>

080112b4 <__sfputc_r>:
 80112b4:	6893      	ldr	r3, [r2, #8]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	b410      	push	{r4}
 80112bc:	6093      	str	r3, [r2, #8]
 80112be:	da08      	bge.n	80112d2 <__sfputc_r+0x1e>
 80112c0:	6994      	ldr	r4, [r2, #24]
 80112c2:	42a3      	cmp	r3, r4
 80112c4:	db01      	blt.n	80112ca <__sfputc_r+0x16>
 80112c6:	290a      	cmp	r1, #10
 80112c8:	d103      	bne.n	80112d2 <__sfputc_r+0x1e>
 80112ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112ce:	f000 b98f 	b.w	80115f0 <__swbuf_r>
 80112d2:	6813      	ldr	r3, [r2, #0]
 80112d4:	1c58      	adds	r0, r3, #1
 80112d6:	6010      	str	r0, [r2, #0]
 80112d8:	7019      	strb	r1, [r3, #0]
 80112da:	4608      	mov	r0, r1
 80112dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <__sfputs_r>:
 80112e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e4:	4606      	mov	r6, r0
 80112e6:	460f      	mov	r7, r1
 80112e8:	4614      	mov	r4, r2
 80112ea:	18d5      	adds	r5, r2, r3
 80112ec:	42ac      	cmp	r4, r5
 80112ee:	d101      	bne.n	80112f4 <__sfputs_r+0x12>
 80112f0:	2000      	movs	r0, #0
 80112f2:	e007      	b.n	8011304 <__sfputs_r+0x22>
 80112f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f8:	463a      	mov	r2, r7
 80112fa:	4630      	mov	r0, r6
 80112fc:	f7ff ffda 	bl	80112b4 <__sfputc_r>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d1f3      	bne.n	80112ec <__sfputs_r+0xa>
 8011304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011308 <_vfiprintf_r>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	460d      	mov	r5, r1
 801130e:	b09d      	sub	sp, #116	; 0x74
 8011310:	4614      	mov	r4, r2
 8011312:	4698      	mov	r8, r3
 8011314:	4606      	mov	r6, r0
 8011316:	b118      	cbz	r0, 8011320 <_vfiprintf_r+0x18>
 8011318:	6983      	ldr	r3, [r0, #24]
 801131a:	b90b      	cbnz	r3, 8011320 <_vfiprintf_r+0x18>
 801131c:	f7ff fb5a 	bl	80109d4 <__sinit>
 8011320:	4b89      	ldr	r3, [pc, #548]	; (8011548 <_vfiprintf_r+0x240>)
 8011322:	429d      	cmp	r5, r3
 8011324:	d11b      	bne.n	801135e <_vfiprintf_r+0x56>
 8011326:	6875      	ldr	r5, [r6, #4]
 8011328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801132a:	07d9      	lsls	r1, r3, #31
 801132c:	d405      	bmi.n	801133a <_vfiprintf_r+0x32>
 801132e:	89ab      	ldrh	r3, [r5, #12]
 8011330:	059a      	lsls	r2, r3, #22
 8011332:	d402      	bmi.n	801133a <_vfiprintf_r+0x32>
 8011334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011336:	f7ff fc02 	bl	8010b3e <__retarget_lock_acquire_recursive>
 801133a:	89ab      	ldrh	r3, [r5, #12]
 801133c:	071b      	lsls	r3, r3, #28
 801133e:	d501      	bpl.n	8011344 <_vfiprintf_r+0x3c>
 8011340:	692b      	ldr	r3, [r5, #16]
 8011342:	b9eb      	cbnz	r3, 8011380 <_vfiprintf_r+0x78>
 8011344:	4629      	mov	r1, r5
 8011346:	4630      	mov	r0, r6
 8011348:	f000 f9c4 	bl	80116d4 <__swsetup_r>
 801134c:	b1c0      	cbz	r0, 8011380 <_vfiprintf_r+0x78>
 801134e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011350:	07dc      	lsls	r4, r3, #31
 8011352:	d50e      	bpl.n	8011372 <_vfiprintf_r+0x6a>
 8011354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011358:	b01d      	add	sp, #116	; 0x74
 801135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135e:	4b7b      	ldr	r3, [pc, #492]	; (801154c <_vfiprintf_r+0x244>)
 8011360:	429d      	cmp	r5, r3
 8011362:	d101      	bne.n	8011368 <_vfiprintf_r+0x60>
 8011364:	68b5      	ldr	r5, [r6, #8]
 8011366:	e7df      	b.n	8011328 <_vfiprintf_r+0x20>
 8011368:	4b79      	ldr	r3, [pc, #484]	; (8011550 <_vfiprintf_r+0x248>)
 801136a:	429d      	cmp	r5, r3
 801136c:	bf08      	it	eq
 801136e:	68f5      	ldreq	r5, [r6, #12]
 8011370:	e7da      	b.n	8011328 <_vfiprintf_r+0x20>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	0598      	lsls	r0, r3, #22
 8011376:	d4ed      	bmi.n	8011354 <_vfiprintf_r+0x4c>
 8011378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137a:	f7ff fbe1 	bl	8010b40 <__retarget_lock_release_recursive>
 801137e:	e7e9      	b.n	8011354 <_vfiprintf_r+0x4c>
 8011380:	2300      	movs	r3, #0
 8011382:	9309      	str	r3, [sp, #36]	; 0x24
 8011384:	2320      	movs	r3, #32
 8011386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801138a:	f8cd 800c 	str.w	r8, [sp, #12]
 801138e:	2330      	movs	r3, #48	; 0x30
 8011390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011554 <_vfiprintf_r+0x24c>
 8011394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011398:	f04f 0901 	mov.w	r9, #1
 801139c:	4623      	mov	r3, r4
 801139e:	469a      	mov	sl, r3
 80113a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113a4:	b10a      	cbz	r2, 80113aa <_vfiprintf_r+0xa2>
 80113a6:	2a25      	cmp	r2, #37	; 0x25
 80113a8:	d1f9      	bne.n	801139e <_vfiprintf_r+0x96>
 80113aa:	ebba 0b04 	subs.w	fp, sl, r4
 80113ae:	d00b      	beq.n	80113c8 <_vfiprintf_r+0xc0>
 80113b0:	465b      	mov	r3, fp
 80113b2:	4622      	mov	r2, r4
 80113b4:	4629      	mov	r1, r5
 80113b6:	4630      	mov	r0, r6
 80113b8:	f7ff ff93 	bl	80112e2 <__sfputs_r>
 80113bc:	3001      	adds	r0, #1
 80113be:	f000 80aa 	beq.w	8011516 <_vfiprintf_r+0x20e>
 80113c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113c4:	445a      	add	r2, fp
 80113c6:	9209      	str	r2, [sp, #36]	; 0x24
 80113c8:	f89a 3000 	ldrb.w	r3, [sl]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	f000 80a2 	beq.w	8011516 <_vfiprintf_r+0x20e>
 80113d2:	2300      	movs	r3, #0
 80113d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113dc:	f10a 0a01 	add.w	sl, sl, #1
 80113e0:	9304      	str	r3, [sp, #16]
 80113e2:	9307      	str	r3, [sp, #28]
 80113e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113e8:	931a      	str	r3, [sp, #104]	; 0x68
 80113ea:	4654      	mov	r4, sl
 80113ec:	2205      	movs	r2, #5
 80113ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f2:	4858      	ldr	r0, [pc, #352]	; (8011554 <_vfiprintf_r+0x24c>)
 80113f4:	f7ee ff0c 	bl	8000210 <memchr>
 80113f8:	9a04      	ldr	r2, [sp, #16]
 80113fa:	b9d8      	cbnz	r0, 8011434 <_vfiprintf_r+0x12c>
 80113fc:	06d1      	lsls	r1, r2, #27
 80113fe:	bf44      	itt	mi
 8011400:	2320      	movmi	r3, #32
 8011402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011406:	0713      	lsls	r3, r2, #28
 8011408:	bf44      	itt	mi
 801140a:	232b      	movmi	r3, #43	; 0x2b
 801140c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011410:	f89a 3000 	ldrb.w	r3, [sl]
 8011414:	2b2a      	cmp	r3, #42	; 0x2a
 8011416:	d015      	beq.n	8011444 <_vfiprintf_r+0x13c>
 8011418:	9a07      	ldr	r2, [sp, #28]
 801141a:	4654      	mov	r4, sl
 801141c:	2000      	movs	r0, #0
 801141e:	f04f 0c0a 	mov.w	ip, #10
 8011422:	4621      	mov	r1, r4
 8011424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011428:	3b30      	subs	r3, #48	; 0x30
 801142a:	2b09      	cmp	r3, #9
 801142c:	d94e      	bls.n	80114cc <_vfiprintf_r+0x1c4>
 801142e:	b1b0      	cbz	r0, 801145e <_vfiprintf_r+0x156>
 8011430:	9207      	str	r2, [sp, #28]
 8011432:	e014      	b.n	801145e <_vfiprintf_r+0x156>
 8011434:	eba0 0308 	sub.w	r3, r0, r8
 8011438:	fa09 f303 	lsl.w	r3, r9, r3
 801143c:	4313      	orrs	r3, r2
 801143e:	9304      	str	r3, [sp, #16]
 8011440:	46a2      	mov	sl, r4
 8011442:	e7d2      	b.n	80113ea <_vfiprintf_r+0xe2>
 8011444:	9b03      	ldr	r3, [sp, #12]
 8011446:	1d19      	adds	r1, r3, #4
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	9103      	str	r1, [sp, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	bfbb      	ittet	lt
 8011450:	425b      	neglt	r3, r3
 8011452:	f042 0202 	orrlt.w	r2, r2, #2
 8011456:	9307      	strge	r3, [sp, #28]
 8011458:	9307      	strlt	r3, [sp, #28]
 801145a:	bfb8      	it	lt
 801145c:	9204      	strlt	r2, [sp, #16]
 801145e:	7823      	ldrb	r3, [r4, #0]
 8011460:	2b2e      	cmp	r3, #46	; 0x2e
 8011462:	d10c      	bne.n	801147e <_vfiprintf_r+0x176>
 8011464:	7863      	ldrb	r3, [r4, #1]
 8011466:	2b2a      	cmp	r3, #42	; 0x2a
 8011468:	d135      	bne.n	80114d6 <_vfiprintf_r+0x1ce>
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	1d1a      	adds	r2, r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	9203      	str	r2, [sp, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	bfb8      	it	lt
 8011476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801147a:	3402      	adds	r4, #2
 801147c:	9305      	str	r3, [sp, #20]
 801147e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011564 <_vfiprintf_r+0x25c>
 8011482:	7821      	ldrb	r1, [r4, #0]
 8011484:	2203      	movs	r2, #3
 8011486:	4650      	mov	r0, sl
 8011488:	f7ee fec2 	bl	8000210 <memchr>
 801148c:	b140      	cbz	r0, 80114a0 <_vfiprintf_r+0x198>
 801148e:	2340      	movs	r3, #64	; 0x40
 8011490:	eba0 000a 	sub.w	r0, r0, sl
 8011494:	fa03 f000 	lsl.w	r0, r3, r0
 8011498:	9b04      	ldr	r3, [sp, #16]
 801149a:	4303      	orrs	r3, r0
 801149c:	3401      	adds	r4, #1
 801149e:	9304      	str	r3, [sp, #16]
 80114a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114a4:	482c      	ldr	r0, [pc, #176]	; (8011558 <_vfiprintf_r+0x250>)
 80114a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114aa:	2206      	movs	r2, #6
 80114ac:	f7ee feb0 	bl	8000210 <memchr>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d03f      	beq.n	8011534 <_vfiprintf_r+0x22c>
 80114b4:	4b29      	ldr	r3, [pc, #164]	; (801155c <_vfiprintf_r+0x254>)
 80114b6:	bb1b      	cbnz	r3, 8011500 <_vfiprintf_r+0x1f8>
 80114b8:	9b03      	ldr	r3, [sp, #12]
 80114ba:	3307      	adds	r3, #7
 80114bc:	f023 0307 	bic.w	r3, r3, #7
 80114c0:	3308      	adds	r3, #8
 80114c2:	9303      	str	r3, [sp, #12]
 80114c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114c6:	443b      	add	r3, r7
 80114c8:	9309      	str	r3, [sp, #36]	; 0x24
 80114ca:	e767      	b.n	801139c <_vfiprintf_r+0x94>
 80114cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80114d0:	460c      	mov	r4, r1
 80114d2:	2001      	movs	r0, #1
 80114d4:	e7a5      	b.n	8011422 <_vfiprintf_r+0x11a>
 80114d6:	2300      	movs	r3, #0
 80114d8:	3401      	adds	r4, #1
 80114da:	9305      	str	r3, [sp, #20]
 80114dc:	4619      	mov	r1, r3
 80114de:	f04f 0c0a 	mov.w	ip, #10
 80114e2:	4620      	mov	r0, r4
 80114e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114e8:	3a30      	subs	r2, #48	; 0x30
 80114ea:	2a09      	cmp	r2, #9
 80114ec:	d903      	bls.n	80114f6 <_vfiprintf_r+0x1ee>
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d0c5      	beq.n	801147e <_vfiprintf_r+0x176>
 80114f2:	9105      	str	r1, [sp, #20]
 80114f4:	e7c3      	b.n	801147e <_vfiprintf_r+0x176>
 80114f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80114fa:	4604      	mov	r4, r0
 80114fc:	2301      	movs	r3, #1
 80114fe:	e7f0      	b.n	80114e2 <_vfiprintf_r+0x1da>
 8011500:	ab03      	add	r3, sp, #12
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	462a      	mov	r2, r5
 8011506:	4b16      	ldr	r3, [pc, #88]	; (8011560 <_vfiprintf_r+0x258>)
 8011508:	a904      	add	r1, sp, #16
 801150a:	4630      	mov	r0, r6
 801150c:	f7fd ff80 	bl	800f410 <_printf_float>
 8011510:	4607      	mov	r7, r0
 8011512:	1c78      	adds	r0, r7, #1
 8011514:	d1d6      	bne.n	80114c4 <_vfiprintf_r+0x1bc>
 8011516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011518:	07d9      	lsls	r1, r3, #31
 801151a:	d405      	bmi.n	8011528 <_vfiprintf_r+0x220>
 801151c:	89ab      	ldrh	r3, [r5, #12]
 801151e:	059a      	lsls	r2, r3, #22
 8011520:	d402      	bmi.n	8011528 <_vfiprintf_r+0x220>
 8011522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011524:	f7ff fb0c 	bl	8010b40 <__retarget_lock_release_recursive>
 8011528:	89ab      	ldrh	r3, [r5, #12]
 801152a:	065b      	lsls	r3, r3, #25
 801152c:	f53f af12 	bmi.w	8011354 <_vfiprintf_r+0x4c>
 8011530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011532:	e711      	b.n	8011358 <_vfiprintf_r+0x50>
 8011534:	ab03      	add	r3, sp, #12
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	462a      	mov	r2, r5
 801153a:	4b09      	ldr	r3, [pc, #36]	; (8011560 <_vfiprintf_r+0x258>)
 801153c:	a904      	add	r1, sp, #16
 801153e:	4630      	mov	r0, r6
 8011540:	f7fe fa0a 	bl	800f958 <_printf_i>
 8011544:	e7e4      	b.n	8011510 <_vfiprintf_r+0x208>
 8011546:	bf00      	nop
 8011548:	08012140 	.word	0x08012140
 801154c:	08012160 	.word	0x08012160
 8011550:	08012120 	.word	0x08012120
 8011554:	080122e4 	.word	0x080122e4
 8011558:	080122ee 	.word	0x080122ee
 801155c:	0800f411 	.word	0x0800f411
 8011560:	080112e3 	.word	0x080112e3
 8011564:	080122ea 	.word	0x080122ea

08011568 <__sread>:
 8011568:	b510      	push	{r4, lr}
 801156a:	460c      	mov	r4, r1
 801156c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011570:	f000 fa70 	bl	8011a54 <_read_r>
 8011574:	2800      	cmp	r0, #0
 8011576:	bfab      	itete	ge
 8011578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801157a:	89a3      	ldrhlt	r3, [r4, #12]
 801157c:	181b      	addge	r3, r3, r0
 801157e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011582:	bfac      	ite	ge
 8011584:	6563      	strge	r3, [r4, #84]	; 0x54
 8011586:	81a3      	strhlt	r3, [r4, #12]
 8011588:	bd10      	pop	{r4, pc}

0801158a <__swrite>:
 801158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	461f      	mov	r7, r3
 8011590:	898b      	ldrh	r3, [r1, #12]
 8011592:	05db      	lsls	r3, r3, #23
 8011594:	4605      	mov	r5, r0
 8011596:	460c      	mov	r4, r1
 8011598:	4616      	mov	r6, r2
 801159a:	d505      	bpl.n	80115a8 <__swrite+0x1e>
 801159c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a0:	2302      	movs	r3, #2
 80115a2:	2200      	movs	r2, #0
 80115a4:	f000 f9de 	bl	8011964 <_lseek_r>
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	4632      	mov	r2, r6
 80115b6:	463b      	mov	r3, r7
 80115b8:	4628      	mov	r0, r5
 80115ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	f000 b877 	b.w	80116b0 <_write_r>

080115c2 <__sseek>:
 80115c2:	b510      	push	{r4, lr}
 80115c4:	460c      	mov	r4, r1
 80115c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ca:	f000 f9cb 	bl	8011964 <_lseek_r>
 80115ce:	1c43      	adds	r3, r0, #1
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	bf15      	itete	ne
 80115d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80115d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115de:	81a3      	strheq	r3, [r4, #12]
 80115e0:	bf18      	it	ne
 80115e2:	81a3      	strhne	r3, [r4, #12]
 80115e4:	bd10      	pop	{r4, pc}

080115e6 <__sclose>:
 80115e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ea:	f000 b8e9 	b.w	80117c0 <_close_r>
	...

080115f0 <__swbuf_r>:
 80115f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f2:	460e      	mov	r6, r1
 80115f4:	4614      	mov	r4, r2
 80115f6:	4605      	mov	r5, r0
 80115f8:	b118      	cbz	r0, 8011602 <__swbuf_r+0x12>
 80115fa:	6983      	ldr	r3, [r0, #24]
 80115fc:	b90b      	cbnz	r3, 8011602 <__swbuf_r+0x12>
 80115fe:	f7ff f9e9 	bl	80109d4 <__sinit>
 8011602:	4b21      	ldr	r3, [pc, #132]	; (8011688 <__swbuf_r+0x98>)
 8011604:	429c      	cmp	r4, r3
 8011606:	d12b      	bne.n	8011660 <__swbuf_r+0x70>
 8011608:	686c      	ldr	r4, [r5, #4]
 801160a:	69a3      	ldr	r3, [r4, #24]
 801160c:	60a3      	str	r3, [r4, #8]
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	071a      	lsls	r2, r3, #28
 8011612:	d52f      	bpl.n	8011674 <__swbuf_r+0x84>
 8011614:	6923      	ldr	r3, [r4, #16]
 8011616:	b36b      	cbz	r3, 8011674 <__swbuf_r+0x84>
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	6820      	ldr	r0, [r4, #0]
 801161c:	1ac0      	subs	r0, r0, r3
 801161e:	6963      	ldr	r3, [r4, #20]
 8011620:	b2f6      	uxtb	r6, r6
 8011622:	4283      	cmp	r3, r0
 8011624:	4637      	mov	r7, r6
 8011626:	dc04      	bgt.n	8011632 <__swbuf_r+0x42>
 8011628:	4621      	mov	r1, r4
 801162a:	4628      	mov	r0, r5
 801162c:	f000 f95e 	bl	80118ec <_fflush_r>
 8011630:	bb30      	cbnz	r0, 8011680 <__swbuf_r+0x90>
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	3b01      	subs	r3, #1
 8011636:	60a3      	str	r3, [r4, #8]
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	1c5a      	adds	r2, r3, #1
 801163c:	6022      	str	r2, [r4, #0]
 801163e:	701e      	strb	r6, [r3, #0]
 8011640:	6963      	ldr	r3, [r4, #20]
 8011642:	3001      	adds	r0, #1
 8011644:	4283      	cmp	r3, r0
 8011646:	d004      	beq.n	8011652 <__swbuf_r+0x62>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	07db      	lsls	r3, r3, #31
 801164c:	d506      	bpl.n	801165c <__swbuf_r+0x6c>
 801164e:	2e0a      	cmp	r6, #10
 8011650:	d104      	bne.n	801165c <__swbuf_r+0x6c>
 8011652:	4621      	mov	r1, r4
 8011654:	4628      	mov	r0, r5
 8011656:	f000 f949 	bl	80118ec <_fflush_r>
 801165a:	b988      	cbnz	r0, 8011680 <__swbuf_r+0x90>
 801165c:	4638      	mov	r0, r7
 801165e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011660:	4b0a      	ldr	r3, [pc, #40]	; (801168c <__swbuf_r+0x9c>)
 8011662:	429c      	cmp	r4, r3
 8011664:	d101      	bne.n	801166a <__swbuf_r+0x7a>
 8011666:	68ac      	ldr	r4, [r5, #8]
 8011668:	e7cf      	b.n	801160a <__swbuf_r+0x1a>
 801166a:	4b09      	ldr	r3, [pc, #36]	; (8011690 <__swbuf_r+0xa0>)
 801166c:	429c      	cmp	r4, r3
 801166e:	bf08      	it	eq
 8011670:	68ec      	ldreq	r4, [r5, #12]
 8011672:	e7ca      	b.n	801160a <__swbuf_r+0x1a>
 8011674:	4621      	mov	r1, r4
 8011676:	4628      	mov	r0, r5
 8011678:	f000 f82c 	bl	80116d4 <__swsetup_r>
 801167c:	2800      	cmp	r0, #0
 801167e:	d0cb      	beq.n	8011618 <__swbuf_r+0x28>
 8011680:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011684:	e7ea      	b.n	801165c <__swbuf_r+0x6c>
 8011686:	bf00      	nop
 8011688:	08012140 	.word	0x08012140
 801168c:	08012160 	.word	0x08012160
 8011690:	08012120 	.word	0x08012120

08011694 <__ascii_wctomb>:
 8011694:	b149      	cbz	r1, 80116aa <__ascii_wctomb+0x16>
 8011696:	2aff      	cmp	r2, #255	; 0xff
 8011698:	bf85      	ittet	hi
 801169a:	238a      	movhi	r3, #138	; 0x8a
 801169c:	6003      	strhi	r3, [r0, #0]
 801169e:	700a      	strbls	r2, [r1, #0]
 80116a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80116a4:	bf98      	it	ls
 80116a6:	2001      	movls	r0, #1
 80116a8:	4770      	bx	lr
 80116aa:	4608      	mov	r0, r1
 80116ac:	4770      	bx	lr
	...

080116b0 <_write_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4d07      	ldr	r5, [pc, #28]	; (80116d0 <_write_r+0x20>)
 80116b4:	4604      	mov	r4, r0
 80116b6:	4608      	mov	r0, r1
 80116b8:	4611      	mov	r1, r2
 80116ba:	2200      	movs	r2, #0
 80116bc:	602a      	str	r2, [r5, #0]
 80116be:	461a      	mov	r2, r3
 80116c0:	f000 fa86 	bl	8011bd0 <_write>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d102      	bne.n	80116ce <_write_r+0x1e>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b103      	cbz	r3, 80116ce <_write_r+0x1e>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	bd38      	pop	{r3, r4, r5, pc}
 80116d0:	200028e0 	.word	0x200028e0

080116d4 <__swsetup_r>:
 80116d4:	4b32      	ldr	r3, [pc, #200]	; (80117a0 <__swsetup_r+0xcc>)
 80116d6:	b570      	push	{r4, r5, r6, lr}
 80116d8:	681d      	ldr	r5, [r3, #0]
 80116da:	4606      	mov	r6, r0
 80116dc:	460c      	mov	r4, r1
 80116de:	b125      	cbz	r5, 80116ea <__swsetup_r+0x16>
 80116e0:	69ab      	ldr	r3, [r5, #24]
 80116e2:	b913      	cbnz	r3, 80116ea <__swsetup_r+0x16>
 80116e4:	4628      	mov	r0, r5
 80116e6:	f7ff f975 	bl	80109d4 <__sinit>
 80116ea:	4b2e      	ldr	r3, [pc, #184]	; (80117a4 <__swsetup_r+0xd0>)
 80116ec:	429c      	cmp	r4, r3
 80116ee:	d10f      	bne.n	8011710 <__swsetup_r+0x3c>
 80116f0:	686c      	ldr	r4, [r5, #4]
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116f8:	0719      	lsls	r1, r3, #28
 80116fa:	d42c      	bmi.n	8011756 <__swsetup_r+0x82>
 80116fc:	06dd      	lsls	r5, r3, #27
 80116fe:	d411      	bmi.n	8011724 <__swsetup_r+0x50>
 8011700:	2309      	movs	r3, #9
 8011702:	6033      	str	r3, [r6, #0]
 8011704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011708:	81a3      	strh	r3, [r4, #12]
 801170a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801170e:	e03e      	b.n	801178e <__swsetup_r+0xba>
 8011710:	4b25      	ldr	r3, [pc, #148]	; (80117a8 <__swsetup_r+0xd4>)
 8011712:	429c      	cmp	r4, r3
 8011714:	d101      	bne.n	801171a <__swsetup_r+0x46>
 8011716:	68ac      	ldr	r4, [r5, #8]
 8011718:	e7eb      	b.n	80116f2 <__swsetup_r+0x1e>
 801171a:	4b24      	ldr	r3, [pc, #144]	; (80117ac <__swsetup_r+0xd8>)
 801171c:	429c      	cmp	r4, r3
 801171e:	bf08      	it	eq
 8011720:	68ec      	ldreq	r4, [r5, #12]
 8011722:	e7e6      	b.n	80116f2 <__swsetup_r+0x1e>
 8011724:	0758      	lsls	r0, r3, #29
 8011726:	d512      	bpl.n	801174e <__swsetup_r+0x7a>
 8011728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801172a:	b141      	cbz	r1, 801173e <__swsetup_r+0x6a>
 801172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011730:	4299      	cmp	r1, r3
 8011732:	d002      	beq.n	801173a <__swsetup_r+0x66>
 8011734:	4630      	mov	r0, r6
 8011736:	f7fd fceb 	bl	800f110 <_free_r>
 801173a:	2300      	movs	r3, #0
 801173c:	6363      	str	r3, [r4, #52]	; 0x34
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011744:	81a3      	strh	r3, [r4, #12]
 8011746:	2300      	movs	r3, #0
 8011748:	6063      	str	r3, [r4, #4]
 801174a:	6923      	ldr	r3, [r4, #16]
 801174c:	6023      	str	r3, [r4, #0]
 801174e:	89a3      	ldrh	r3, [r4, #12]
 8011750:	f043 0308 	orr.w	r3, r3, #8
 8011754:	81a3      	strh	r3, [r4, #12]
 8011756:	6923      	ldr	r3, [r4, #16]
 8011758:	b94b      	cbnz	r3, 801176e <__swsetup_r+0x9a>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011764:	d003      	beq.n	801176e <__swsetup_r+0x9a>
 8011766:	4621      	mov	r1, r4
 8011768:	4630      	mov	r0, r6
 801176a:	f000 f933 	bl	80119d4 <__smakebuf_r>
 801176e:	89a0      	ldrh	r0, [r4, #12]
 8011770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011774:	f010 0301 	ands.w	r3, r0, #1
 8011778:	d00a      	beq.n	8011790 <__swsetup_r+0xbc>
 801177a:	2300      	movs	r3, #0
 801177c:	60a3      	str	r3, [r4, #8]
 801177e:	6963      	ldr	r3, [r4, #20]
 8011780:	425b      	negs	r3, r3
 8011782:	61a3      	str	r3, [r4, #24]
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	b943      	cbnz	r3, 801179a <__swsetup_r+0xc6>
 8011788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801178c:	d1ba      	bne.n	8011704 <__swsetup_r+0x30>
 801178e:	bd70      	pop	{r4, r5, r6, pc}
 8011790:	0781      	lsls	r1, r0, #30
 8011792:	bf58      	it	pl
 8011794:	6963      	ldrpl	r3, [r4, #20]
 8011796:	60a3      	str	r3, [r4, #8]
 8011798:	e7f4      	b.n	8011784 <__swsetup_r+0xb0>
 801179a:	2000      	movs	r0, #0
 801179c:	e7f7      	b.n	801178e <__swsetup_r+0xba>
 801179e:	bf00      	nop
 80117a0:	20000184 	.word	0x20000184
 80117a4:	08012140 	.word	0x08012140
 80117a8:	08012160 	.word	0x08012160
 80117ac:	08012120 	.word	0x08012120

080117b0 <abort>:
 80117b0:	b508      	push	{r3, lr}
 80117b2:	2006      	movs	r0, #6
 80117b4:	f000 f988 	bl	8011ac8 <raise>
 80117b8:	2001      	movs	r0, #1
 80117ba:	f000 fa11 	bl	8011be0 <_exit>
	...

080117c0 <_close_r>:
 80117c0:	b538      	push	{r3, r4, r5, lr}
 80117c2:	4d06      	ldr	r5, [pc, #24]	; (80117dc <_close_r+0x1c>)
 80117c4:	2300      	movs	r3, #0
 80117c6:	4604      	mov	r4, r0
 80117c8:	4608      	mov	r0, r1
 80117ca:	602b      	str	r3, [r5, #0]
 80117cc:	f000 f9ba 	bl	8011b44 <_close>
 80117d0:	1c43      	adds	r3, r0, #1
 80117d2:	d102      	bne.n	80117da <_close_r+0x1a>
 80117d4:	682b      	ldr	r3, [r5, #0]
 80117d6:	b103      	cbz	r3, 80117da <_close_r+0x1a>
 80117d8:	6023      	str	r3, [r4, #0]
 80117da:	bd38      	pop	{r3, r4, r5, pc}
 80117dc:	200028e0 	.word	0x200028e0

080117e0 <__sflush_r>:
 80117e0:	898a      	ldrh	r2, [r1, #12]
 80117e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e6:	4605      	mov	r5, r0
 80117e8:	0710      	lsls	r0, r2, #28
 80117ea:	460c      	mov	r4, r1
 80117ec:	d458      	bmi.n	80118a0 <__sflush_r+0xc0>
 80117ee:	684b      	ldr	r3, [r1, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	dc05      	bgt.n	8011800 <__sflush_r+0x20>
 80117f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	dc02      	bgt.n	8011800 <__sflush_r+0x20>
 80117fa:	2000      	movs	r0, #0
 80117fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011802:	2e00      	cmp	r6, #0
 8011804:	d0f9      	beq.n	80117fa <__sflush_r+0x1a>
 8011806:	2300      	movs	r3, #0
 8011808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801180c:	682f      	ldr	r7, [r5, #0]
 801180e:	602b      	str	r3, [r5, #0]
 8011810:	d032      	beq.n	8011878 <__sflush_r+0x98>
 8011812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	075a      	lsls	r2, r3, #29
 8011818:	d505      	bpl.n	8011826 <__sflush_r+0x46>
 801181a:	6863      	ldr	r3, [r4, #4]
 801181c:	1ac0      	subs	r0, r0, r3
 801181e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011820:	b10b      	cbz	r3, 8011826 <__sflush_r+0x46>
 8011822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011824:	1ac0      	subs	r0, r0, r3
 8011826:	2300      	movs	r3, #0
 8011828:	4602      	mov	r2, r0
 801182a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801182c:	6a21      	ldr	r1, [r4, #32]
 801182e:	4628      	mov	r0, r5
 8011830:	47b0      	blx	r6
 8011832:	1c43      	adds	r3, r0, #1
 8011834:	89a3      	ldrh	r3, [r4, #12]
 8011836:	d106      	bne.n	8011846 <__sflush_r+0x66>
 8011838:	6829      	ldr	r1, [r5, #0]
 801183a:	291d      	cmp	r1, #29
 801183c:	d82c      	bhi.n	8011898 <__sflush_r+0xb8>
 801183e:	4a2a      	ldr	r2, [pc, #168]	; (80118e8 <__sflush_r+0x108>)
 8011840:	40ca      	lsrs	r2, r1
 8011842:	07d6      	lsls	r6, r2, #31
 8011844:	d528      	bpl.n	8011898 <__sflush_r+0xb8>
 8011846:	2200      	movs	r2, #0
 8011848:	6062      	str	r2, [r4, #4]
 801184a:	04d9      	lsls	r1, r3, #19
 801184c:	6922      	ldr	r2, [r4, #16]
 801184e:	6022      	str	r2, [r4, #0]
 8011850:	d504      	bpl.n	801185c <__sflush_r+0x7c>
 8011852:	1c42      	adds	r2, r0, #1
 8011854:	d101      	bne.n	801185a <__sflush_r+0x7a>
 8011856:	682b      	ldr	r3, [r5, #0]
 8011858:	b903      	cbnz	r3, 801185c <__sflush_r+0x7c>
 801185a:	6560      	str	r0, [r4, #84]	; 0x54
 801185c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801185e:	602f      	str	r7, [r5, #0]
 8011860:	2900      	cmp	r1, #0
 8011862:	d0ca      	beq.n	80117fa <__sflush_r+0x1a>
 8011864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011868:	4299      	cmp	r1, r3
 801186a:	d002      	beq.n	8011872 <__sflush_r+0x92>
 801186c:	4628      	mov	r0, r5
 801186e:	f7fd fc4f 	bl	800f110 <_free_r>
 8011872:	2000      	movs	r0, #0
 8011874:	6360      	str	r0, [r4, #52]	; 0x34
 8011876:	e7c1      	b.n	80117fc <__sflush_r+0x1c>
 8011878:	6a21      	ldr	r1, [r4, #32]
 801187a:	2301      	movs	r3, #1
 801187c:	4628      	mov	r0, r5
 801187e:	47b0      	blx	r6
 8011880:	1c41      	adds	r1, r0, #1
 8011882:	d1c7      	bne.n	8011814 <__sflush_r+0x34>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0c4      	beq.n	8011814 <__sflush_r+0x34>
 801188a:	2b1d      	cmp	r3, #29
 801188c:	d001      	beq.n	8011892 <__sflush_r+0xb2>
 801188e:	2b16      	cmp	r3, #22
 8011890:	d101      	bne.n	8011896 <__sflush_r+0xb6>
 8011892:	602f      	str	r7, [r5, #0]
 8011894:	e7b1      	b.n	80117fa <__sflush_r+0x1a>
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801189c:	81a3      	strh	r3, [r4, #12]
 801189e:	e7ad      	b.n	80117fc <__sflush_r+0x1c>
 80118a0:	690f      	ldr	r7, [r1, #16]
 80118a2:	2f00      	cmp	r7, #0
 80118a4:	d0a9      	beq.n	80117fa <__sflush_r+0x1a>
 80118a6:	0793      	lsls	r3, r2, #30
 80118a8:	680e      	ldr	r6, [r1, #0]
 80118aa:	bf08      	it	eq
 80118ac:	694b      	ldreq	r3, [r1, #20]
 80118ae:	600f      	str	r7, [r1, #0]
 80118b0:	bf18      	it	ne
 80118b2:	2300      	movne	r3, #0
 80118b4:	eba6 0807 	sub.w	r8, r6, r7
 80118b8:	608b      	str	r3, [r1, #8]
 80118ba:	f1b8 0f00 	cmp.w	r8, #0
 80118be:	dd9c      	ble.n	80117fa <__sflush_r+0x1a>
 80118c0:	6a21      	ldr	r1, [r4, #32]
 80118c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118c4:	4643      	mov	r3, r8
 80118c6:	463a      	mov	r2, r7
 80118c8:	4628      	mov	r0, r5
 80118ca:	47b0      	blx	r6
 80118cc:	2800      	cmp	r0, #0
 80118ce:	dc06      	bgt.n	80118de <__sflush_r+0xfe>
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118dc:	e78e      	b.n	80117fc <__sflush_r+0x1c>
 80118de:	4407      	add	r7, r0
 80118e0:	eba8 0800 	sub.w	r8, r8, r0
 80118e4:	e7e9      	b.n	80118ba <__sflush_r+0xda>
 80118e6:	bf00      	nop
 80118e8:	20400001 	.word	0x20400001

080118ec <_fflush_r>:
 80118ec:	b538      	push	{r3, r4, r5, lr}
 80118ee:	690b      	ldr	r3, [r1, #16]
 80118f0:	4605      	mov	r5, r0
 80118f2:	460c      	mov	r4, r1
 80118f4:	b913      	cbnz	r3, 80118fc <_fflush_r+0x10>
 80118f6:	2500      	movs	r5, #0
 80118f8:	4628      	mov	r0, r5
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	b118      	cbz	r0, 8011906 <_fflush_r+0x1a>
 80118fe:	6983      	ldr	r3, [r0, #24]
 8011900:	b90b      	cbnz	r3, 8011906 <_fflush_r+0x1a>
 8011902:	f7ff f867 	bl	80109d4 <__sinit>
 8011906:	4b14      	ldr	r3, [pc, #80]	; (8011958 <_fflush_r+0x6c>)
 8011908:	429c      	cmp	r4, r3
 801190a:	d11b      	bne.n	8011944 <_fflush_r+0x58>
 801190c:	686c      	ldr	r4, [r5, #4]
 801190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d0ef      	beq.n	80118f6 <_fflush_r+0xa>
 8011916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011918:	07d0      	lsls	r0, r2, #31
 801191a:	d404      	bmi.n	8011926 <_fflush_r+0x3a>
 801191c:	0599      	lsls	r1, r3, #22
 801191e:	d402      	bmi.n	8011926 <_fflush_r+0x3a>
 8011920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011922:	f7ff f90c 	bl	8010b3e <__retarget_lock_acquire_recursive>
 8011926:	4628      	mov	r0, r5
 8011928:	4621      	mov	r1, r4
 801192a:	f7ff ff59 	bl	80117e0 <__sflush_r>
 801192e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011930:	07da      	lsls	r2, r3, #31
 8011932:	4605      	mov	r5, r0
 8011934:	d4e0      	bmi.n	80118f8 <_fflush_r+0xc>
 8011936:	89a3      	ldrh	r3, [r4, #12]
 8011938:	059b      	lsls	r3, r3, #22
 801193a:	d4dd      	bmi.n	80118f8 <_fflush_r+0xc>
 801193c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801193e:	f7ff f8ff 	bl	8010b40 <__retarget_lock_release_recursive>
 8011942:	e7d9      	b.n	80118f8 <_fflush_r+0xc>
 8011944:	4b05      	ldr	r3, [pc, #20]	; (801195c <_fflush_r+0x70>)
 8011946:	429c      	cmp	r4, r3
 8011948:	d101      	bne.n	801194e <_fflush_r+0x62>
 801194a:	68ac      	ldr	r4, [r5, #8]
 801194c:	e7df      	b.n	801190e <_fflush_r+0x22>
 801194e:	4b04      	ldr	r3, [pc, #16]	; (8011960 <_fflush_r+0x74>)
 8011950:	429c      	cmp	r4, r3
 8011952:	bf08      	it	eq
 8011954:	68ec      	ldreq	r4, [r5, #12]
 8011956:	e7da      	b.n	801190e <_fflush_r+0x22>
 8011958:	08012140 	.word	0x08012140
 801195c:	08012160 	.word	0x08012160
 8011960:	08012120 	.word	0x08012120

08011964 <_lseek_r>:
 8011964:	b538      	push	{r3, r4, r5, lr}
 8011966:	4d07      	ldr	r5, [pc, #28]	; (8011984 <_lseek_r+0x20>)
 8011968:	4604      	mov	r4, r0
 801196a:	4608      	mov	r0, r1
 801196c:	4611      	mov	r1, r2
 801196e:	2200      	movs	r2, #0
 8011970:	602a      	str	r2, [r5, #0]
 8011972:	461a      	mov	r2, r3
 8011974:	f000 f90e 	bl	8011b94 <_lseek>
 8011978:	1c43      	adds	r3, r0, #1
 801197a:	d102      	bne.n	8011982 <_lseek_r+0x1e>
 801197c:	682b      	ldr	r3, [r5, #0]
 801197e:	b103      	cbz	r3, 8011982 <_lseek_r+0x1e>
 8011980:	6023      	str	r3, [r4, #0]
 8011982:	bd38      	pop	{r3, r4, r5, pc}
 8011984:	200028e0 	.word	0x200028e0

08011988 <__swhatbuf_r>:
 8011988:	b570      	push	{r4, r5, r6, lr}
 801198a:	460e      	mov	r6, r1
 801198c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011990:	2900      	cmp	r1, #0
 8011992:	b096      	sub	sp, #88	; 0x58
 8011994:	4614      	mov	r4, r2
 8011996:	461d      	mov	r5, r3
 8011998:	da08      	bge.n	80119ac <__swhatbuf_r+0x24>
 801199a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	602a      	str	r2, [r5, #0]
 80119a2:	061a      	lsls	r2, r3, #24
 80119a4:	d410      	bmi.n	80119c8 <__swhatbuf_r+0x40>
 80119a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119aa:	e00e      	b.n	80119ca <__swhatbuf_r+0x42>
 80119ac:	466a      	mov	r2, sp
 80119ae:	f000 f8a7 	bl	8011b00 <_fstat_r>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	dbf1      	blt.n	801199a <__swhatbuf_r+0x12>
 80119b6:	9a01      	ldr	r2, [sp, #4]
 80119b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119c0:	425a      	negs	r2, r3
 80119c2:	415a      	adcs	r2, r3
 80119c4:	602a      	str	r2, [r5, #0]
 80119c6:	e7ee      	b.n	80119a6 <__swhatbuf_r+0x1e>
 80119c8:	2340      	movs	r3, #64	; 0x40
 80119ca:	2000      	movs	r0, #0
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	b016      	add	sp, #88	; 0x58
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080119d4 <__smakebuf_r>:
 80119d4:	898b      	ldrh	r3, [r1, #12]
 80119d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119d8:	079d      	lsls	r5, r3, #30
 80119da:	4606      	mov	r6, r0
 80119dc:	460c      	mov	r4, r1
 80119de:	d507      	bpl.n	80119f0 <__smakebuf_r+0x1c>
 80119e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	6123      	str	r3, [r4, #16]
 80119e8:	2301      	movs	r3, #1
 80119ea:	6163      	str	r3, [r4, #20]
 80119ec:	b002      	add	sp, #8
 80119ee:	bd70      	pop	{r4, r5, r6, pc}
 80119f0:	ab01      	add	r3, sp, #4
 80119f2:	466a      	mov	r2, sp
 80119f4:	f7ff ffc8 	bl	8011988 <__swhatbuf_r>
 80119f8:	9900      	ldr	r1, [sp, #0]
 80119fa:	4605      	mov	r5, r0
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7fd fbf3 	bl	800f1e8 <_malloc_r>
 8011a02:	b948      	cbnz	r0, 8011a18 <__smakebuf_r+0x44>
 8011a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a08:	059a      	lsls	r2, r3, #22
 8011a0a:	d4ef      	bmi.n	80119ec <__smakebuf_r+0x18>
 8011a0c:	f023 0303 	bic.w	r3, r3, #3
 8011a10:	f043 0302 	orr.w	r3, r3, #2
 8011a14:	81a3      	strh	r3, [r4, #12]
 8011a16:	e7e3      	b.n	80119e0 <__smakebuf_r+0xc>
 8011a18:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <__smakebuf_r+0x7c>)
 8011a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	6020      	str	r0, [r4, #0]
 8011a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a24:	81a3      	strh	r3, [r4, #12]
 8011a26:	9b00      	ldr	r3, [sp, #0]
 8011a28:	6163      	str	r3, [r4, #20]
 8011a2a:	9b01      	ldr	r3, [sp, #4]
 8011a2c:	6120      	str	r0, [r4, #16]
 8011a2e:	b15b      	cbz	r3, 8011a48 <__smakebuf_r+0x74>
 8011a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a34:	4630      	mov	r0, r6
 8011a36:	f000 f875 	bl	8011b24 <_isatty_r>
 8011a3a:	b128      	cbz	r0, 8011a48 <__smakebuf_r+0x74>
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	f023 0303 	bic.w	r3, r3, #3
 8011a42:	f043 0301 	orr.w	r3, r3, #1
 8011a46:	81a3      	strh	r3, [r4, #12]
 8011a48:	89a0      	ldrh	r0, [r4, #12]
 8011a4a:	4305      	orrs	r5, r0
 8011a4c:	81a5      	strh	r5, [r4, #12]
 8011a4e:	e7cd      	b.n	80119ec <__smakebuf_r+0x18>
 8011a50:	0801096d 	.word	0x0801096d

08011a54 <_read_r>:
 8011a54:	b538      	push	{r3, r4, r5, lr}
 8011a56:	4d07      	ldr	r5, [pc, #28]	; (8011a74 <_read_r+0x20>)
 8011a58:	4604      	mov	r4, r0
 8011a5a:	4608      	mov	r0, r1
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	2200      	movs	r2, #0
 8011a60:	602a      	str	r2, [r5, #0]
 8011a62:	461a      	mov	r2, r3
 8011a64:	f000 f89e 	bl	8011ba4 <_read>
 8011a68:	1c43      	adds	r3, r0, #1
 8011a6a:	d102      	bne.n	8011a72 <_read_r+0x1e>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	b103      	cbz	r3, 8011a72 <_read_r+0x1e>
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	bd38      	pop	{r3, r4, r5, pc}
 8011a74:	200028e0 	.word	0x200028e0

08011a78 <_raise_r>:
 8011a78:	291f      	cmp	r1, #31
 8011a7a:	b538      	push	{r3, r4, r5, lr}
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	460d      	mov	r5, r1
 8011a80:	d904      	bls.n	8011a8c <_raise_r+0x14>
 8011a82:	2316      	movs	r3, #22
 8011a84:	6003      	str	r3, [r0, #0]
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a8e:	b112      	cbz	r2, 8011a96 <_raise_r+0x1e>
 8011a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a94:	b94b      	cbnz	r3, 8011aaa <_raise_r+0x32>
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 f830 	bl	8011afc <_getpid_r>
 8011a9c:	462a      	mov	r2, r5
 8011a9e:	4601      	mov	r1, r0
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aa6:	f000 b817 	b.w	8011ad8 <_kill_r>
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d00a      	beq.n	8011ac4 <_raise_r+0x4c>
 8011aae:	1c59      	adds	r1, r3, #1
 8011ab0:	d103      	bne.n	8011aba <_raise_r+0x42>
 8011ab2:	2316      	movs	r3, #22
 8011ab4:	6003      	str	r3, [r0, #0]
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	e7e7      	b.n	8011a8a <_raise_r+0x12>
 8011aba:	2400      	movs	r4, #0
 8011abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	4798      	blx	r3
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	e7e0      	b.n	8011a8a <_raise_r+0x12>

08011ac8 <raise>:
 8011ac8:	4b02      	ldr	r3, [pc, #8]	; (8011ad4 <raise+0xc>)
 8011aca:	4601      	mov	r1, r0
 8011acc:	6818      	ldr	r0, [r3, #0]
 8011ace:	f7ff bfd3 	b.w	8011a78 <_raise_r>
 8011ad2:	bf00      	nop
 8011ad4:	20000184 	.word	0x20000184

08011ad8 <_kill_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	; (8011af8 <_kill_r+0x20>)
 8011adc:	2300      	movs	r3, #0
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	602b      	str	r3, [r5, #0]
 8011ae6:	f000 f84d 	bl	8011b84 <_kill>
 8011aea:	1c43      	adds	r3, r0, #1
 8011aec:	d102      	bne.n	8011af4 <_kill_r+0x1c>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	b103      	cbz	r3, 8011af4 <_kill_r+0x1c>
 8011af2:	6023      	str	r3, [r4, #0]
 8011af4:	bd38      	pop	{r3, r4, r5, pc}
 8011af6:	bf00      	nop
 8011af8:	200028e0 	.word	0x200028e0

08011afc <_getpid_r>:
 8011afc:	f000 b832 	b.w	8011b64 <_getpid>

08011b00 <_fstat_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4d07      	ldr	r5, [pc, #28]	; (8011b20 <_fstat_r+0x20>)
 8011b04:	2300      	movs	r3, #0
 8011b06:	4604      	mov	r4, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	602b      	str	r3, [r5, #0]
 8011b0e:	f000 f821 	bl	8011b54 <_fstat>
 8011b12:	1c43      	adds	r3, r0, #1
 8011b14:	d102      	bne.n	8011b1c <_fstat_r+0x1c>
 8011b16:	682b      	ldr	r3, [r5, #0]
 8011b18:	b103      	cbz	r3, 8011b1c <_fstat_r+0x1c>
 8011b1a:	6023      	str	r3, [r4, #0]
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	bf00      	nop
 8011b20:	200028e0 	.word	0x200028e0

08011b24 <_isatty_r>:
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	4d06      	ldr	r5, [pc, #24]	; (8011b40 <_isatty_r+0x1c>)
 8011b28:	2300      	movs	r3, #0
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	4608      	mov	r0, r1
 8011b2e:	602b      	str	r3, [r5, #0]
 8011b30:	f000 f820 	bl	8011b74 <_isatty>
 8011b34:	1c43      	adds	r3, r0, #1
 8011b36:	d102      	bne.n	8011b3e <_isatty_r+0x1a>
 8011b38:	682b      	ldr	r3, [r5, #0]
 8011b3a:	b103      	cbz	r3, 8011b3e <_isatty_r+0x1a>
 8011b3c:	6023      	str	r3, [r4, #0]
 8011b3e:	bd38      	pop	{r3, r4, r5, pc}
 8011b40:	200028e0 	.word	0x200028e0

08011b44 <_close>:
 8011b44:	4b02      	ldr	r3, [pc, #8]	; (8011b50 <_close+0xc>)
 8011b46:	2258      	movs	r2, #88	; 0x58
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b4e:	4770      	bx	lr
 8011b50:	200028e0 	.word	0x200028e0

08011b54 <_fstat>:
 8011b54:	4b02      	ldr	r3, [pc, #8]	; (8011b60 <_fstat+0xc>)
 8011b56:	2258      	movs	r2, #88	; 0x58
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b5e:	4770      	bx	lr
 8011b60:	200028e0 	.word	0x200028e0

08011b64 <_getpid>:
 8011b64:	4b02      	ldr	r3, [pc, #8]	; (8011b70 <_getpid+0xc>)
 8011b66:	2258      	movs	r2, #88	; 0x58
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b6e:	4770      	bx	lr
 8011b70:	200028e0 	.word	0x200028e0

08011b74 <_isatty>:
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <_isatty+0xc>)
 8011b76:	2258      	movs	r2, #88	; 0x58
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop
 8011b80:	200028e0 	.word	0x200028e0

08011b84 <_kill>:
 8011b84:	4b02      	ldr	r3, [pc, #8]	; (8011b90 <_kill+0xc>)
 8011b86:	2258      	movs	r2, #88	; 0x58
 8011b88:	601a      	str	r2, [r3, #0]
 8011b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b8e:	4770      	bx	lr
 8011b90:	200028e0 	.word	0x200028e0

08011b94 <_lseek>:
 8011b94:	4b02      	ldr	r3, [pc, #8]	; (8011ba0 <_lseek+0xc>)
 8011b96:	2258      	movs	r2, #88	; 0x58
 8011b98:	601a      	str	r2, [r3, #0]
 8011b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9e:	4770      	bx	lr
 8011ba0:	200028e0 	.word	0x200028e0

08011ba4 <_read>:
 8011ba4:	4b02      	ldr	r3, [pc, #8]	; (8011bb0 <_read+0xc>)
 8011ba6:	2258      	movs	r2, #88	; 0x58
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bae:	4770      	bx	lr
 8011bb0:	200028e0 	.word	0x200028e0

08011bb4 <_sbrk>:
 8011bb4:	4a04      	ldr	r2, [pc, #16]	; (8011bc8 <_sbrk+0x14>)
 8011bb6:	6811      	ldr	r1, [r2, #0]
 8011bb8:	4603      	mov	r3, r0
 8011bba:	b909      	cbnz	r1, 8011bc0 <_sbrk+0xc>
 8011bbc:	4903      	ldr	r1, [pc, #12]	; (8011bcc <_sbrk+0x18>)
 8011bbe:	6011      	str	r1, [r2, #0]
 8011bc0:	6810      	ldr	r0, [r2, #0]
 8011bc2:	4403      	add	r3, r0
 8011bc4:	6013      	str	r3, [r2, #0]
 8011bc6:	4770      	bx	lr
 8011bc8:	200028e4 	.word	0x200028e4
 8011bcc:	200028e8 	.word	0x200028e8

08011bd0 <_write>:
 8011bd0:	4b02      	ldr	r3, [pc, #8]	; (8011bdc <_write+0xc>)
 8011bd2:	2258      	movs	r2, #88	; 0x58
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bda:	4770      	bx	lr
 8011bdc:	200028e0 	.word	0x200028e0

08011be0 <_exit>:
 8011be0:	e7fe      	b.n	8011be0 <_exit>
	...

08011be4 <_init>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	bf00      	nop
 8011be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bea:	bc08      	pop	{r3}
 8011bec:	469e      	mov	lr, r3
 8011bee:	4770      	bx	lr

08011bf0 <_fini>:
 8011bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf2:	bf00      	nop
 8011bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bf6:	bc08      	pop	{r3}
 8011bf8:	469e      	mov	lr, r3
 8011bfa:	4770      	bx	lr
