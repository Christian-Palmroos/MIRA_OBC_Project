
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08011a90  08011a90  00021a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012188  08012188  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08012188  08012188  00022188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012190  08012190  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012190  08012190  00022190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012194  08012194  00022194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08012198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002594  20000354  080124ec  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200028e8  080124ec  000328e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bcc5  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f1  00000000  00000000  0005c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  00061840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  00063a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000878a  00000000  00000000  00065a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c67b  00000000  00000000  0006e1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120497  00000000  00000000  0009a84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bace4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a240  00000000  00000000  001bad34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c4f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c5040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011a74 	.word	0x08011a74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08011a74 	.word	0x08011a74

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f001 fd2d 	bl	800295a <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f001 fd24 	bl	8002976 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000370 	.word	0x20000370
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c4 	.word	0x200003c4

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fc4e 	bl	800283c <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fce2 	bl	8002976 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fd24 	bl	8002a0c <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00d ffcd 	bl	800ef90 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fef2 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fa1c 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 fa06 	bl	8002484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	f5ad 6d28 	sub.w	sp, sp, #2688	; 0xa80
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010a8:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <main+0x210>)
 80010aa:	f607 2434 	addw	r4, r7, #2612	; 0xa34
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	c403      	stmia	r4!, {r0, r1}
 80010ba:	7022      	strb	r2, [r4, #0]
 80010bc:	f607 234d 	addw	r3, r7, #2637	; 0xa4d
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 80010d0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80010d4:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80010d8:	461a      	mov	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	6093      	str	r3, [r2, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 80010e4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80010e8:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80010f6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80010fa:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8001106:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800110a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001122:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001126:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 800113e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001142:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 800115a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800115e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001162:	4a54      	ldr	r2, [pc, #336]	; (80012b4 <main+0x214>)
 8001164:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 8001166:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800116a:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	3304      	adds	r3, #4
 8001174:	2224      	movs	r2, #36	; 0x24
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00d ff09 	bl	800ef90 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 800117e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001182:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	2224      	movs	r2, #36	; 0x24
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00d fefd 	bl	800ef90 <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80011a2:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011a6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80011aa:	f6a3 2378 	subw	r3, r3, #2680	; 0xa78
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 fefa 	bl	8001fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f87f 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fa97 	bl	80016fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ce:	f000 f8e1 	bl	8001394 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 80011d2:	f000 f91f 	bl	8001414 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011d6:	f000 f93f 	bl	8001458 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011da:	f000 f9f1 	bl	80015c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011de:	f000 fa3d 	bl	800165c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80011e2:	f00b fa7d 	bl	800c6e0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80011e6:	f00d f8d5 	bl	800e394 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 80011ea:	f000 f973 	bl	80014d4 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011ee:	f000 f8bd 	bl	800136c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 80011f2:	f000 fbeb 	bl	80019cc <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 80011f6:	f7ff fe71 	bl	8000edc <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <main+0x218>)
 80011fc:	f000 fd4e 	bl	8001c9c <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8001200:	482e      	ldr	r0, [pc, #184]	; (80012bc <main+0x21c>)
 8001202:	f000 fd4b 	bl	8001c9c <HAL_UART_MspInit>

  HAL_StatusTypeDef status;


  // enable channel 1 for MIRA communication
  HAL_GPIO_TogglePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin);
 8001206:	2110      	movs	r1, #16
 8001208:	482d      	ldr	r0, [pc, #180]	; (80012c0 <main+0x220>)
 800120a:	f001 fafd 	bl	8002808 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin);
 800120e:	2120      	movs	r1, #32
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <main+0x220>)
 8001212:	f001 faf9 	bl	8002808 <HAL_GPIO_TogglePin>

  //msg_size = build_message(&message, &command, &payload);
  //status = mira_write(&huart1, message, 5000);
  uint8_t reg[1] = {0x02};
 8001216:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800121a:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
  uint8_t data[4] = {0x00,0x00,0x00,0x01};
 8001222:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001226:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800122a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800122e:	601a      	str	r2, [r3, #0]
  status = mira_write_register(&huart1, reg, data, 5000);
 8001230:	463a      	mov	r2, r7
 8001232:	1d39      	adds	r1, r7, #4
 8001234:	f241 3388 	movw	r3, #5000	; 0x1388
 8001238:	481f      	ldr	r0, [pc, #124]	; (80012b8 <main+0x218>)
 800123a:	f000 fb63 	bl	8001904 <mira_write_register>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 3a7f 	strb.w	r3, [r7, #2687]	; 0xa7f

  if (status == HAL_OK) {
 8001244:	f897 3a7f 	ldrb.w	r3, [r7, #2687]	; 0xa7f
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <main+0x1b4>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	481d      	ldr	r0, [pc, #116]	; (80012c4 <main+0x224>)
 8001250:	f001 fada 	bl	8002808 <HAL_GPIO_TogglePin>
  }


  reg[0] = 0x01;
 8001254:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001258:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    data[3] = 0x00;
 8001260:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001264:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8001268:	2200      	movs	r2, #0
 800126a:	70da      	strb	r2, [r3, #3]
    status = mira_write_register(&huart1, reg,data, 5000);
 800126c:	463a      	mov	r2, r7
 800126e:	1d39      	adds	r1, r7, #4
 8001270:	f241 3388 	movw	r3, #5000	; 0x1388
 8001274:	4810      	ldr	r0, [pc, #64]	; (80012b8 <main+0x218>)
 8001276:	f000 fb45 	bl	8001904 <mira_write_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3a7f 	strb.w	r3, [r7, #2687]	; 0xa7f

  reg[0] = 0x00;
 8001280:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001284:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
  data[3] = 0x05;
 800128c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001290:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8001294:	2205      	movs	r2, #5
 8001296:	70da      	strb	r2, [r3, #3]
  status = mira_write_register(&huart1, reg, data, 5000);
 8001298:	463a      	mov	r2, r7
 800129a:	1d39      	adds	r1, r7, #4
 800129c:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <main+0x218>)
 80012a2:	f000 fb2f 	bl	8001904 <mira_write_register>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3a7f 	strb.w	r3, [r7, #2687]	; 0xa7f

  while(1);
 80012ac:	e7fe      	b.n	80012ac <main+0x20c>
 80012ae:	bf00      	nop
 80012b0:	08011a90 	.word	0x08011a90
 80012b4:	00202d20 	.word	0x00202d20
 80012b8:	2000054c 	.word	0x2000054c
 80012bc:	200005dc 	.word	0x200005dc
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48000c00 	.word	0x48000c00

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2244      	movs	r2, #68	; 0x44
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00d fe5a 	bl	800ef90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80012ea:	2000      	movs	r0, #0
 80012ec:	f002 fdc6 	bl	8003e7c <HAL_PWREx_ControlVoltageScaling>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80012f6:	f000 fad1 	bl	800189c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80012fa:	2321      	movs	r3, #33	; 0x21
 80012fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130c:	2303      	movs	r3, #3
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001314:	231e      	movs	r3, #30
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fe5b 	bl	8003fe4 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001334:	f000 fab2 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2105      	movs	r1, #5
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fa61 	bl	8004818 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800135c:	f000 fa9e 	bl	800189c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001360:	f003 fc58 	bl	8004c14 <HAL_RCC_EnableCSS>
}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	201a      	movs	r0, #26
 8001376:	f000 ff94 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800137a:	201a      	movs	r0, #26
 800137c:	f000 ffad 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2026      	movs	r0, #38	; 0x26
 8001386:	f000 ff8c 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800138a:	2026      	movs	r0, #38	; 0x26
 800138c:	f000 ffa5 	bl	80022da <HAL_NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_I2C1_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_I2C1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_I2C1_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <MX_I2C1_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_I2C1_Init+0x74>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_I2C1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_I2C1_Init+0x74>)
 80013d0:	f001 fa34 	bl	800283c <HAL_I2C_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013da:	f000 fa5f 	bl	800189c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <MX_I2C1_Init+0x74>)
 80013e2:	f001 fac8 	bl	8002976 <HAL_I2CEx_ConfigAnalogFilter>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 fa56 	bl	800189c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_I2C1_Init+0x74>)
 80013f4:	f001 fb0a 	bl	8002a0c <HAL_I2CEx_ConfigDigitalFilter>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f000 fa4d 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200003c8 	.word	0x200003c8
 800140c:	40005400 	.word	0x40005400
 8001410:	307075b1 	.word	0x307075b1

08001414 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 800141c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 800142c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001430:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <MX_SDMMC1_SD_Init+0x3c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000041c 	.word	0x2000041c
 8001454:	50062400 	.word	0x50062400

08001458 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_SPI1_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_SPI1_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_SPI1_Init+0x74>)
 8001464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_SPI1_Init+0x74>)
 8001472:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_SPI1_Init+0x74>)
 8001486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI1_Init+0x74>)
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_SPI1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI1_Init+0x74>)
 80014a6:	2207      	movs	r2, #7
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_SPI1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI1_Init+0x74>)
 80014b2:	2208      	movs	r2, #8
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_SPI1_Init+0x74>)
 80014b8:	f006 fe23 	bl	8008102 <HAL_SPI_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 f9eb 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000049c 	.word	0x2000049c
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b092      	sub	sp, #72	; 0x48
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	222c      	movs	r2, #44	; 0x2c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d fd4b 	bl	800ef90 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_TIM17_Init+0xe4>)
 80014fc:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <MX_TIM17_Init+0xe8>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <MX_TIM17_Init+0xe4>)
 8001502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001506:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <MX_TIM17_Init+0xe4>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_TIM17_Init+0xe4>)
 8001510:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001514:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_TIM17_Init+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_TIM17_Init+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <MX_TIM17_Init+0xe4>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <MX_TIM17_Init+0xe4>)
 800152a:	f006 fe8d 	bl	8008248 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001534:	f000 f9b2 	bl	800189c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <MX_TIM17_Init+0xe4>)
 800153a:	f006 fedc 	bl	80082f6 <HAL_TIM_OC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 f9aa 	bl	800189c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <MX_TIM17_Init+0xe4>)
 800156e:	f007 f843 	bl	80085f8 <HAL_TIM_OC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001578:	f000 f990 	bl	800189c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_TIM17_Init+0xe4>)
 80015a0:	f007 fc46 	bl	8008e30 <HAL_TIMEx_ConfigBreakDeadTime>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80015aa:	f000 f977 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3748      	adds	r7, #72	; 0x48
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000500 	.word	0x20000500
 80015bc:	40014800 	.word	0x40014800

080015c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <MX_USART1_UART_Init+0x94>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <MX_USART1_UART_Init+0x98>)
 80015ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015e4:	220c      	movs	r2, #12
 80015e6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_USART1_UART_Init+0x90>)
 8001608:	f007 fcae 	bl	8008f68 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001612:	f000 f943 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_USART1_UART_Init+0x90>)
 800161a:	f008 fe74 	bl	800a306 <HAL_UARTEx_SetTxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001624:	f000 f93a 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x90>)
 800162c:	f008 fea9 	bl	800a382 <HAL_UARTEx_SetRxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001636:	f000 f931 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x90>)
 800163c:	f008 fe2a 	bl	800a294 <HAL_UARTEx_DisableFifoMode>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001646:	f000 f929 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000054c 	.word	0x2000054c
 8001654:	40013800 	.word	0x40013800
 8001658:	0001c138 	.word	0x0001c138

0800165c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <MX_USART2_UART_Init+0x9c>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016ae:	f007 fc5b 	bl	8008f68 <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80016b8:	f000 f8f0 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016c0:	f008 fe21 	bl	800a306 <HAL_UARTEx_SetTxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80016ca:	f000 f8e7 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016d2:	f008 fe56 	bl	800a382 <HAL_UARTEx_SetRxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80016dc:	f000 f8de 	bl	800189c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_USART2_UART_Init+0x98>)
 80016e2:	f008 fdd7 	bl	800a294 <HAL_UARTEx_DisableFifoMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80016ec:	f000 f8d6 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200005dc 	.word	0x200005dc
 80016f8:	40004400 	.word	0x40004400

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b57      	ldr	r3, [pc, #348]	; (8001888 <MX_GPIO_Init+0x18c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a56      	ldr	r2, [pc, #344]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b54      	ldr	r3, [pc, #336]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a50      	ldr	r2, [pc, #320]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b4e      	ldr	r3, [pc, #312]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <MX_GPIO_Init+0x18c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b48      	ldr	r3, [pc, #288]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a44      	ldr	r2, [pc, #272]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b42      	ldr	r3, [pc, #264]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <MX_GPIO_Init+0x18c>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a3e      	ldr	r2, [pc, #248]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <MX_GPIO_Init+0x18c>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80017a2:	2200      	movs	r2, #0
 80017a4:	f641 013c 	movw	r1, #6204	; 0x183c
 80017a8:	4838      	ldr	r0, [pc, #224]	; (800188c <MX_GPIO_Init+0x190>)
 80017aa:	f001 f815 	bl	80027d8 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2130      	movs	r1, #48	; 0x30
 80017b2:	4837      	ldr	r0, [pc, #220]	; (8001890 <MX_GPIO_Init+0x194>)
 80017b4:	f001 f810 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2178      	movs	r1, #120	; 0x78
 80017bc:	4835      	ldr	r0, [pc, #212]	; (8001894 <MX_GPIO_Init+0x198>)
 80017be:	f001 f80b 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80017c2:	f641 033c 	movw	r3, #6204	; 0x183c
 80017c6:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	482c      	ldr	r0, [pc, #176]	; (800188c <MX_GPIO_Init+0x190>)
 80017dc:	f000 fe52 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4826      	ldr	r0, [pc, #152]	; (8001890 <MX_GPIO_Init+0x194>)
 80017f6:	f000 fe45 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80017fa:	f248 0302 	movw	r3, #32770	; 0x8002
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f000 fe37 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001816:	2330      	movs	r3, #48	; 0x30
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_GPIO_Init+0x194>)
 800182e:	f000 fe29 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4811      	ldr	r0, [pc, #68]	; (800188c <MX_GPIO_Init+0x190>)
 8001848:	f000 fe1c 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800184c:	2378      	movs	r3, #120	; 0x78
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_GPIO_Init+0x198>)
 8001864:	f000 fe0e 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001868:	2320      	movs	r3, #32
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_GPIO_Init+0x19c>)
 800187c:	f000 fe02 	bl	8002484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	48001000 	.word	0x48001000
 8001890:	48000800 	.word	0x48000800
 8001894:	48000c00 	.word	0x48000c00
 8001898:	48000400 	.word	0x48000400

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 80018a4:	4801      	ldr	r0, [pc, #4]	; (80018ac <Error_Handler+0x10>)
 80018a6:	f00e f8c5 	bl	800fa34 <iprintf>
  while (1)
 80018aa:	e7fe      	b.n	80018aa <Error_Handler+0xe>
 80018ac:	08011ac4 	.word	0x08011ac4

080018b0 <CRC16>:
   }
   return sum;
}

uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c0:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 80018c2:	e011      	b.n	80018e8 <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4053      	eors	r3, r2
 80018d2:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	81fb      	strh	r3, [r7, #14]
      wCRCWord ^= wCRCTable[nTemp];
 80018da:	7b7b      	ldrb	r3, [r7, #13]
 80018dc:	4a08      	ldr	r2, [pc, #32]	; (8001900 <CRC16+0x50>)
 80018de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018e2:	89fb      	ldrh	r3, [r7, #14]
 80018e4:	4053      	eors	r3, r2
 80018e6:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	1e5a      	subs	r2, r3, #1
 80018ec:	807a      	strh	r2, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e8      	bne.n	80018c4 <CRC16+0x14>
   }
   return wCRCWord;
 80018f2:	89fb      	ldrh	r3, [r7, #14]

}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	08011b24 	.word	0x08011b24

08001904 <mira_write_register>:
	strcat(message, checksum);

	return msg_size;
}

HAL_StatusTypeDef mira_write_register(UART_HandleTypeDef *huart, uint8_t *reg, uint8_t *data, uint32_t Timeout){
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef status;
	uint8_t message[14];

	uint8_t sync[2] = {0x5a, 0xce};
 8001912:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001916:	843b      	strh	r3, [r7, #32]
	uint8_t length[2] = {0x00, 0x05};
 8001918:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800191c:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 800191e:	23c1      	movs	r3, #193	; 0xc1
 8001920:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001922:	23e1      	movs	r3, #225	; 0xe1
 8001924:	753b      	strb	r3, [r7, #20]
	uint8_t command[1] = {0x03};
 8001926:	2303      	movs	r3, #3
 8001928:	743b      	strb	r3, [r7, #16]
	//uint8_t payload[5] = {0x02,0x00,0x00,0x00,0x01};
	uint16_t sum = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[0] = sync[0];
 800192e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001932:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[1] = sync[1];
 8001936:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800193a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[2] = length[0];
 800193e:	7f3b      	ldrb	r3, [r7, #28]
 8001940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[3] = length[1];
 8001944:	7f7b      	ldrb	r3, [r7, #29]
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[4] = src[0];
 800194a:	7e3b      	ldrb	r3, [r7, #24]
 800194c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message[5] = dest[0];
 8001950:	7d3b      	ldrb	r3, [r7, #20]
 8001952:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message[6] = command[0];
 8001956:	7c3b      	ldrb	r3, [r7, #16]
 8001958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	message[7] = reg[0];
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	message[8] = data[0];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message[9] = data[1];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	message[10] = data[2];
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	message[11] = data[3];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	78db      	ldrb	r3, [r3, #3]
 8001980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	sum = CRC16(message+2, 10);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	3302      	adds	r3, #2
 800198a:	210a      	movs	r1, #10
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff8f 	bl	80018b0 <CRC16>
 8001992:	4603      	mov	r3, r0
 8001994:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[12] = (sum&0xFF00)>>8;
 8001996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	message[13] = (sum&0x00FF);
 80019a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, 14, Timeout);
 80019aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	220e      	movs	r2, #14
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f007 fb28 	bl	8009008 <HAL_UART_Transmit>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// return status
	return status;
 80019be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35

}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3738      	adds	r7, #56	; 0x38
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_MspInit+0x44>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_MspInit+0x44>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_MspInit+0x44>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0ae      	sub	sp, #184	; 0xb8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2294      	movs	r2, #148	; 0x94
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00d faab 	bl	800ef90 <memset>
  if(hi2c->Instance==I2C1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <HAL_I2C_MspInit+0xb0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d13a      	bne.n	8001aba <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 f9cb 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a5c:	f7ff ff1e 	bl	800189c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7e:	2312      	movs	r3, #18
 8001a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a90:	2304      	movs	r3, #4
 8001a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <HAL_I2C_MspInit+0xb8>)
 8001a9e:	f000 fcf1 	bl	8002484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_I2C_MspInit+0xb4>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	37b8      	adds	r7, #184	; 0xb8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	48000400 	.word	0x48000400

08001ad0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b0      	sub	sp, #192	; 0xc0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	2294      	movs	r2, #148	; 0x94
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00d fa4d 	bl	800ef90 <memset>
  if(hsd->Instance==SDMMC1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_SD_MspInit+0xf8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d15e      	bne.n	8001bbe <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001b00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f96b 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001b1c:	f7ff febe 	bl	800189c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_SD_MspInit+0xfc>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b68:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b82:	230c      	movs	r3, #12
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <HAL_SD_MspInit+0x100>)
 8001b90:	f000 fc78 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b94:	2304      	movs	r3, #4
 8001b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bac:	230c      	movs	r3, #12
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_SD_MspInit+0x104>)
 8001bba:	f000 fc63 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	37c0      	adds	r7, #192	; 0xc0
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	50062400 	.word	0x50062400
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	48000c00 	.word	0x48000c00

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_SPI_MspInit+0x7c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d128      	bne.n	8001c4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c04:	6613      	str	r3, [r2, #96]	; 0x60
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001c2a:	23f0      	movs	r3, #240	; 0xf0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f000 fc1c 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0x38>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10b      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40014800 	.word	0x40014800
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0b0      	sub	sp, #192	; 0xc0
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	2294      	movs	r2, #148	; 0x94
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00d f967 	bl	800ef90 <memset>
  if(huart->Instance==USART1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <HAL_UART_MspInit+0x138>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d13d      	bne.n	8001d48 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f887 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ce4:	f7ff fdda 	bl	800189c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001d18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d32:	2307      	movs	r3, #7
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f000 fb9f 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d46:	e040      	b.n	8001dca <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_UART_MspInit+0x140>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d13b      	bne.n	8001dca <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 f844 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001d6a:	f7ff fd97 	bl	800189c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_UART_MspInit+0x13c>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db6:	2307      	movs	r3, #7
 8001db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f000 fb5d 	bl	8002484 <HAL_GPIO_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	37c0      	adds	r7, #192	; 0xc0
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40004400 	.word	0x40004400

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001de4:	f002 ff26 	bl	8004c34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x8>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e30:	f000 f918 	bl	8002064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8001e52:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8001e6a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8001e6e:	f006 faa3 	bl	80083b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000cb8 	.word	0x20000cb8
 8001e7c:	20000cb9 	.word	0x20000cb9
 8001e80:	20000500 	.word	0x20000500

08001e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <USART2_IRQHandler+0x90>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <USART2_IRQHandler+0x94>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <USART2_IRQHandler+0x98>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <USART2_IRQHandler+0x94>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	b2c8      	uxtb	r0, r1
 8001ea6:	491c      	ldr	r1, [pc, #112]	; (8001f18 <USART2_IRQHandler+0x94>)
 8001ea8:	7008      	strb	r0, [r1, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d126      	bne.n	8001f04 <USART2_IRQHandler+0x80>
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <USART2_IRQHandler+0x9c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d022      	beq.n	8001f04 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <USART2_IRQHandler+0x98>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <USART2_IRQHandler+0x94>)
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4413      	add	r3, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <USART2_IRQHandler+0xa0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <USART2_IRQHandler+0xa0>)
 8001ed8:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <USART2_IRQHandler+0x9c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f083 0301 	eor.w	r3, r3, #1
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <USART2_IRQHandler+0x9c>)
 8001ee4:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <USART2_IRQHandler+0x94>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <USART2_IRQHandler+0x98>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <USART2_IRQHandler+0xa4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d103      	bne.n	8001efe <USART2_IRQHandler+0x7a>
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <USART2_IRQHandler+0x98>)
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <USART2_IRQHandler+0xa8>)
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e002      	b.n	8001f04 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <USART2_IRQHandler+0x98>)
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <USART2_IRQHandler+0xa4>)
 8001f02:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <USART2_IRQHandler+0x90>)
 8001f06:	f007 f917 	bl	8009138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200005dc 	.word	0x200005dc
 8001f18:	20000cb0 	.word	0x20000cb0
 8001f1c:	20000cac 	.word	0x20000cac
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000cb4 	.word	0x20000cb4
 8001f28:	2000066c 	.word	0x2000066c
 8001f2c:	2000098c 	.word	0x2000098c

08001f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <OTG_FS_IRQHandler+0x10>)
 8001f36:	f000 ff08 	bl	8002d4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200021a8 	.word	0x200021a8

08001f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6c:	f7ff ffea 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	; (8001fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <LoopForever+0xe>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	; (8001fb4 <LoopForever+0x16>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f00c ffc1 	bl	800ef1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9a:	f7ff f881 	bl	80010a0 <main>

08001f9e <LoopForever>:

LoopForever:
    b LoopForever
 8001f9e:	e7fe      	b.n	8001f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001fac:	08012198 	.word	0x08012198
  ldr r2, =_sbss
 8001fb0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001fb4:	200028e8 	.word	0x200028e8

08001fb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_IRQHandler>

08001fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f961 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f80e 	bl	8001fec <HAL_InitTick>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e001      	b.n	8001fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fdc:	f7ff fcf6 	bl	80019cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_InitTick+0x6c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_InitTick+0x70>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_InitTick+0x6c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f96d 	bl	80022f6 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d809      	bhi.n	800203c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002028:	2200      	movs	r2, #0
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002030:	f000 f937 	bl	80022a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_InitTick+0x74>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e007      	b.n	800204c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e004      	b.n	800204c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e001      	b.n	800204c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c
 800205c:	20000004 	.word	0x20000004
 8002060:	20000008 	.word	0x20000008

08002064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x20>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x24>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_IncTick+0x24>)
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000000c 	.word	0x2000000c
 8002088:	20000cbc 	.word	0x20000cbc

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_GetTick+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000cbc 	.word	0x20000cbc

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff ffee 	bl	800208c <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_Delay+0x44>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ca:	bf00      	nop
 80020cc:	f7ff ffde 	bl	800208c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	; (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800226c:	f7ff ff8e 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff29 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff3e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff31 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d008      	beq.n	8002338 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2204      	movs	r2, #4
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e040      	b.n	80023ba <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 020e 	bic.w	r2, r2, #14
 8002346:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002356:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f003 021c 	and.w	r2, r3, #28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002384:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2204      	movs	r2, #4
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e047      	b.n	800247a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 020e 	bic.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f003 021c 	and.w	r2, r3, #28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002436:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800244e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002458:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
    }
  }
  return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002492:	e166      	b.n	8002762 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8158 	beq.w	800275c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d005      	beq.n	80024c4 <HAL_GPIO_Init+0x40>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d130      	bne.n	8002526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 0201 	and.w	r2, r3, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b03      	cmp	r3, #3
 8002530:	d017      	beq.n	8002562 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d123      	bne.n	80025b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	6939      	ldr	r1, [r7, #16]
 80025b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0203 	and.w	r2, r3, #3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80b2 	beq.w	800275c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_GPIO_Init+0x2fc>)
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	4a60      	ldr	r2, [pc, #384]	; (8002780 <HAL_GPIO_Init+0x2fc>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6613      	str	r3, [r2, #96]	; 0x60
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_GPIO_Init+0x2fc>)
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002610:	4a5c      	ldr	r2, [pc, #368]	; (8002784 <HAL_GPIO_Init+0x300>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800263a:	d02b      	beq.n	8002694 <HAL_GPIO_Init+0x210>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_GPIO_Init+0x304>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d025      	beq.n	8002690 <HAL_GPIO_Init+0x20c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a51      	ldr	r2, [pc, #324]	; (800278c <HAL_GPIO_Init+0x308>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01f      	beq.n	800268c <HAL_GPIO_Init+0x208>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_GPIO_Init+0x30c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d019      	beq.n	8002688 <HAL_GPIO_Init+0x204>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x310>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d013      	beq.n	8002684 <HAL_GPIO_Init+0x200>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x314>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00d      	beq.n	8002680 <HAL_GPIO_Init+0x1fc>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x318>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x1f8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x31c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_Init+0x1f4>
 8002674:	2307      	movs	r3, #7
 8002676:	e00e      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002678:	2308      	movs	r3, #8
 800267a:	e00c      	b.n	8002696 <HAL_GPIO_Init+0x212>
 800267c:	2306      	movs	r3, #6
 800267e:	e00a      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002680:	2305      	movs	r3, #5
 8002682:	e008      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002684:	2304      	movs	r3, #4
 8002686:	e006      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002688:	2303      	movs	r3, #3
 800268a:	e004      	b.n	8002696 <HAL_GPIO_Init+0x212>
 800268c:	2302      	movs	r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_GPIO_Init+0x212>
 8002694:	2300      	movs	r3, #0
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	4093      	lsls	r3, r2
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a6:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_GPIO_Init+0x300>)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_GPIO_Init+0x320>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d8:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_GPIO_Init+0x320>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_GPIO_Init+0x320>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002702:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_GPIO_Init+0x320>)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_GPIO_Init+0x320>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_GPIO_Init+0x320>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_GPIO_Init+0x320>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_GPIO_Init+0x320>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f ae91 	bne.w	8002494 <HAL_GPIO_Init+0x10>
  }
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000
 8002784:	40010000 	.word	0x40010000
 8002788:	48000400 	.word	0x48000400
 800278c:	48000800 	.word	0x48000800
 8002790:	48000c00 	.word	0x48000c00
 8002794:	48001000 	.word	0x48001000
 8002798:	48001400 	.word	0x48001400
 800279c:	48001800 	.word	0x48001800
 80027a0:	48001c00 	.word	0x48001c00
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43d9      	mvns	r1, r3
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e081      	b.n	8002952 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff f8d6 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d104      	bne.n	80028d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b20      	cmp	r3, #32
 800298a:	d138      	bne.n	80029fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002996:	2302      	movs	r3, #2
 8002998:	e032      	b.n	8002a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2224      	movs	r2, #36	; 0x24
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d139      	bne.n	8002a96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e033      	b.n	8002a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa6:	b08f      	sub	sp, #60	; 0x3c
 8002aa8:	af0a      	add	r7, sp, #40	; 0x28
 8002aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e116      	b.n	8002ce4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f00b fe3f 	bl	800e754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 fb90 	bl	800b21a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	687e      	ldr	r6, [r7, #4]
 8002b02:	466d      	mov	r5, sp
 8002b04:	f106 0410 	add.w	r4, r6, #16
 8002b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b18:	1d33      	adds	r3, r6, #4
 8002b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1c:	6838      	ldr	r0, [r7, #0]
 8002b1e:	f008 faa3 	bl	800b068 <USB_CoreInit>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0d7      	b.n	8002ce4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f008 fb7e 	bl	800b23c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e04a      	b.n	8002bdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	333d      	adds	r3, #61	; 0x3d
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	333c      	adds	r3, #60	; 0x3c
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	b298      	uxth	r0, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	; 0x44
 8002b82:	4602      	mov	r2, r0
 8002b84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3340      	adds	r3, #64	; 0x40
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3348      	adds	r3, #72	; 0x48
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	334c      	adds	r3, #76	; 0x4c
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3354      	adds	r3, #84	; 0x54
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3af      	bcc.n	8002b46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e044      	b.n	8002c76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	3301      	adds	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3b5      	bcc.n	8002bec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	687e      	ldr	r6, [r7, #4]
 8002c88:	466d      	mov	r5, sp
 8002c8a:	f106 0410 	add.w	r4, r6, #16
 8002c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c9e:	1d33      	adds	r3, r6, #4
 8002ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	f008 fb16 	bl	800b2d4 <USB_DevInit>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e014      	b.n	8002ce4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f001 f882 	bl	8003ddc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f009 fb9e 	bl	800c41e <USB_DevDisconnect>

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_Start+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e01c      	b.n	8002d42 <HAL_PCD_Start+0x56>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f008 fa65 	bl	800b1f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f009 fb52 	bl	800c3dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b08d      	sub	sp, #52	; 0x34
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 fc10 	bl	800c586 <USB_GetMode>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 847e 	bne.w	800366a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f009 fb74 	bl	800c460 <USB_ReadInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8474 	beq.w	8003668 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f009 fb61 	bl	800c460 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d107      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f002 0202 	and.w	r2, r2, #2
 8002db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f009 fb4f 	bl	800c460 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d161      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0210 	bic.w	r2, r2, #16
 8002dda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	0c5b      	lsrs	r3, r3, #17
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d124      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d035      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6a38      	ldr	r0, [r7, #32]
 8002e28:	f009 f986 	bl	800c138 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e38:	441a      	add	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e4a:	441a      	add	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	621a      	str	r2, [r3, #32]
 8002e50:	e016      	b.n	8002e80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	0c5b      	lsrs	r3, r3, #17
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d110      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e64:	2208      	movs	r2, #8
 8002e66:	4619      	mov	r1, r3
 8002e68:	6a38      	ldr	r0, [r7, #32]
 8002e6a:	f009 f965 	bl	800c138 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7a:	441a      	add	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0210 	orr.w	r2, r2, #16
 8002e8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f009 fae3 	bl	800c460 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ea4:	f040 80a7 	bne.w	8002ff6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f009 fae8 	bl	800c486 <USB_ReadDevAllOutEpInterrupt>
 8002eb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002eb8:	e099      	b.n	8002fee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 808e 	beq.w	8002fe2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f009 fb0c 	bl	800c4ee <USB_ReadDevOutEPInterrupt>
 8002ed6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fe96 	bl	8003c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	2308      	movs	r3, #8
 8002f16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fed2 	bl	8003cc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f36:	461a      	mov	r2, r3
 8002f38:	2310      	movs	r3, #16
 8002f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d030      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d109      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2200      	movs	r2, #0
 8002f88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f00b fd23 	bl	800e9dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af62 	bne.w	8002eba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f009 fa30 	bl	800c460 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800300a:	f040 80a4 	bne.w	8003156 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f009 fa51 	bl	800c4ba <USB_ReadDevAllInEpInterrupt>
 8003018:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800301e:	e096      	b.n	800314e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 808b 	beq.w	8003142 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f009 fa77 	bl	800c52a <USB_ReadDevInEPInterrupt>
 800303c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43db      	mvns	r3, r3
 8003062:	69f9      	ldr	r1, [r7, #28]
 8003064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003068:	4013      	ands	r3, r2
 800306a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003078:	461a      	mov	r2, r3
 800307a:	2301      	movs	r3, #1
 800307c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f00b fc14 	bl	800e8b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	2308      	movs	r3, #8
 80030a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	2310      	movs	r3, #16
 80030c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ea:	6a38      	ldr	r0, [r7, #32]
 80030ec:	f008 fa3e 	bl	800b56c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3338      	adds	r3, #56	; 0x38
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f00b fc71 	bl	800ea00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	461a      	mov	r2, r3
 800312c:	2302      	movs	r3, #2
 800312e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fcea 	bl	8003b16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f af65 	bne.w	8003020 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f009 f980 	bl	800c460 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316a:	d122      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003192:	2100      	movs	r1, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fe45 	bl	8003e24 <HAL_PCDEx_LPM_Callback>
 800319a:	e002      	b.n	80031a2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f00b fbf5 	bl	800e98c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f009 f952 	bl	800c460 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d112      	bne.n	80031ee <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f00b fbb1 	bl	800e940 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f009 f934 	bl	800c460 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003202:	d121      	bne.n	8003248 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003212:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d111      	bne.n	8003242 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f003 020f 	and.w	r2, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003238:	2101      	movs	r1, #1
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fdf2 	bl	8003e24 <HAL_PCDEx_LPM_Callback>
 8003240:	e002      	b.n	8003248 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f00b fb7c 	bl	800e940 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f009 f907 	bl	800c460 <USB_ReadInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	f040 80b5 	bne.w	80033ca <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2110      	movs	r1, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f008 f976 	bl	800b56c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003284:	e046      	b.n	8003314 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003292:	461a      	mov	r2, r3
 8003294:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003298:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	461a      	mov	r2, r3
 80032c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032de:	0151      	lsls	r1, r2, #5
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	440a      	add	r2, r1
 80032e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	440a      	add	r2, r1
 8003304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800330c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	3301      	adds	r3, #1
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d3b3      	bcc.n	8003286 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003330:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800334a:	f043 030b 	orr.w	r3, r3, #11
 800334e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003360:	f043 030b 	orr.w	r3, r3, #11
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	e015      	b.n	8003394 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800337a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800337e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338e:	f043 030b 	orr.w	r3, r3, #11
 8003392:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f009 f917 	bl	800c5e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f009 f846 	bl	800c460 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d124      	bne.n	800342a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f009 f8dc 	bl	800c5a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f008 f939 	bl	800b666 <USB_GetDevSpeed>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	f001 fbd0 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4620      	mov	r0, r4
 8003410:	f007 fe56 	bl	800b0c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f00b fa74 	bl	800e902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003428:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f009 f816 	bl	800c460 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b08      	cmp	r3, #8
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f00b fa51 	bl	800e8e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f002 0208 	and.w	r2, r2, #8
 8003452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f009 f801 	bl	800c460 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d122      	bne.n	80034ae <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003474:	2301      	movs	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e014      	b.n	80034a4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fb0b 	bl	8003ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3e5      	bcc.n	800347a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f008 ffd4 	bl	800c460 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c2:	d13b      	bne.n	800353c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e02b      	b.n	8003522 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d115      	bne.n	800351c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da12      	bge.n	800351c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	333f      	adds	r3, #63	; 0x3f
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 facc 	bl	8003ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	d3ce      	bcc.n	80034ca <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800353a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f008 ff8d 	bl	800c460 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003550:	d155      	bne.n	80035fe <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003552:	2301      	movs	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e045      	b.n	80035e4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d12e      	bne.n	80035de <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003580:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003582:	2b00      	cmp	r3, #0
 8003584:	da2b      	bge.n	80035de <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003592:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003596:	429a      	cmp	r2, r3
 8003598:	d121      	bne.n	80035de <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035da:	6053      	str	r3, [r2, #4]
            break;
 80035dc:	e007      	b.n	80035ee <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3b4      	bcc.n	8003558 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f008 ff2c 	bl	800c460 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d10a      	bne.n	800362a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f00b fa05 	bl	800ea24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f008 ff16 	bl	800c460 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d115      	bne.n	800366a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f00b f9f5 	bl	800ea40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	e000      	b.n	800366a <HAL_PCD_IRQHandler+0x920>
      return;
 8003668:	bf00      	nop
    }
  }
}
 800366a:	3734      	adds	r7, #52	; 0x34
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}

08003670 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_PCD_SetAddress+0x1a>
 8003686:	2302      	movs	r3, #2
 8003688:	e013      	b.n	80036b2 <HAL_PCD_SetAddress+0x42>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f008 fe74 	bl	800c390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	4608      	mov	r0, r1
 80036c4:	4611      	mov	r1, r2
 80036c6:	461a      	mov	r2, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	70fb      	strb	r3, [r7, #3]
 80036cc:	460b      	mov	r3, r1
 80036ce:	803b      	strh	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da0f      	bge.n	8003700 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	3338      	adds	r3, #56	; 0x38
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	705a      	strb	r2, [r3, #1]
 80036fe:	e00f      	b.n	8003720 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800372c:	883a      	ldrh	r2, [r7, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	78ba      	ldrb	r2, [r7, #2]
 8003736:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800374a:	78bb      	ldrb	r3, [r7, #2]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d102      	bne.n	8003756 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_PCD_EP_Open+0xaa>
 8003760:	2302      	movs	r3, #2
 8003762:	e00e      	b.n	8003782 <HAL_PCD_EP_Open+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	4618      	mov	r0, r3
 8003774:	f007 ff96 	bl	800b6a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003780:	7afb      	ldrb	r3, [r7, #11]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	da0f      	bge.n	80037be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	705a      	strb	r2, [r3, #1]
 80037bc:	e00f      	b.n	80037de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_EP_Close+0x6e>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e00e      	b.n	8003816 <HAL_PCD_EP_Close+0x8c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4618      	mov	r0, r3
 8003808:	f007 ffd4 	bl	800b7b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	460b      	mov	r3, r1
 800382c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2200      	movs	r2, #0
 8003858:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	b2da      	uxtb	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386c:	7afb      	ldrb	r3, [r7, #11]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	4618      	mov	r0, r3
 800387e:	f008 fa55 	bl	800bd2c <USB_EP0StartXfer>
 8003882:	e005      	b.n	8003890 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	4618      	mov	r0, r3
 800388c:	f008 f86e 	bl	800b96c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038bc:	681b      	ldr	r3, [r3, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	460b      	mov	r3, r1
 80038d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3338      	adds	r3, #56	; 0x38
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2201      	movs	r2, #1
 8003908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	b2da      	uxtb	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6979      	ldr	r1, [r7, #20]
 8003926:	4618      	mov	r0, r3
 8003928:	f008 fa00 	bl	800bd2c <USB_EP0StartXfer>
 800392c:	e005      	b.n	800393a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	4618      	mov	r0, r3
 8003936:	f008 f819 	bl	800b96c <USB_EPStartXfer>
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d901      	bls.n	8003962 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e04e      	b.n	8003a00 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0f      	bge.n	800398a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 020f 	and.w	r2, r3, #15
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	3338      	adds	r3, #56	; 0x38
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	3304      	adds	r3, #4
 8003980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	705a      	strb	r2, [r3, #1]
 8003988:	e00d      	b.n	80039a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_PCD_EP_SetStall+0x82>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e01c      	b.n	8003a00 <HAL_PCD_EP_SetStall+0xbc>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68f9      	ldr	r1, [r7, #12]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f008 fc07 	bl	800c1e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f008 fdf9 	bl	800c5e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d901      	bls.n	8003a26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e042      	b.n	8003aac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da0f      	bge.n	8003a4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3338      	adds	r3, #56	; 0x38
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	705a      	strb	r2, [r3, #1]
 8003a4c:	e00f      	b.n	8003a6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_PCD_EP_ClrStall+0x86>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e00e      	b.n	8003aac <HAL_PCD_EP_ClrStall+0xa4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f008 fc11 	bl	800c2c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da0c      	bge.n	8003ae2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	3338      	adds	r3, #56	; 0x38
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e00c      	b.n	8003afc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f008 fa34 	bl	800bf70 <USB_EPStopXfer>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	3338      	adds	r3, #56	; 0x38
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d901      	bls.n	8003b4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d902      	bls.n	8003b6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	e026      	b.n	8003bc2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d902      	bls.n	8003b90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3303      	adds	r3, #3
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f008 fa8d 	bl	800c0c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d809      	bhi.n	8003bec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d203      	bcs.n	8003bec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1c3      	bne.n	8003b74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d811      	bhi.n	8003c1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	2201      	movs	r2, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	6939      	ldr	r1, [r7, #16]
 8003c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c18:	4013      	ands	r3, r2
 8003c1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	333c      	adds	r3, #60	; 0x3c
 8003c40:	3304      	adds	r3, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <PCD_EP_OutXfrComplete_int+0x98>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d124      	bne.n	8003ca8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7a:	6093      	str	r3, [r2, #8]
 8003c7c:	e01a      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	2320      	movs	r3, #32
 8003c98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f00a fdeb 	bl	800e87c <HAL_PCD_DataOutStageCallback>
 8003ca6:	e005      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f00a fde4 	bl	800e87c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	4f54310a 	.word	0x4f54310a

08003cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	333c      	adds	r3, #60	; 0x3c
 8003cdc:	3304      	adds	r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <PCD_EP_OutSetupPacket_int+0x64>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d90e      	bls.n	8003d18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f00a fd9d 	bl	800e858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	4f54300a 	.word	0x4f54300a

08003d2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d107      	bne.n	8003d5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d4a:	883b      	ldrh	r3, [r7, #0]
 8003d4c:	0419      	lsls	r1, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
 8003d58:	e028      	b.n	8003dac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e00d      	b.n	8003d8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	3301      	adds	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d3ec      	bcc.n	8003d6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d94:	883b      	ldrh	r3, [r7, #0]
 8003d96:	0418      	lsls	r0, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	4302      	orrs	r2, r0
 8003da4:	3340      	adds	r3, #64	; 0x40
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	f043 0303 	orr.w	r3, r3, #3
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d102      	bne.n	8003e54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e52:	e00b      	b.n	8003e6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e62:	d102      	bne.n	8003e6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e68:	e000      	b.n	8003e6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40007000 	.word	0x40007000

08003e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d141      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e96:	d131      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e98:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9e:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eb0:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003eb8:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2232      	movs	r2, #50	; 0x32
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	0c9b      	lsrs	r3, r3, #18
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ece:	e002      	b.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed6:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d102      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eea:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d158      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e057      	b.n	8003fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f02:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f0c:	e04d      	b.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d141      	bne.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d131      	bne.n	8003f88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2232      	movs	r2, #50	; 0x32
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	0c9b      	lsrs	r3, r3, #18
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5a:	e002      	b.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d102      	bne.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f2      	bne.n	8003f5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d112      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e011      	b.n	8003fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f98:	e007      	b.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fa2:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	20000004 	.word	0x20000004
 8003fc0:	431bde83 	.word	0x431bde83

08003fc4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd2:	6053      	str	r3, [r2, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000

08003fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f000 bc08 	b.w	8004808 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff8:	4b96      	ldr	r3, [pc, #600]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004002:	4b94      	ldr	r3, [pc, #592]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80e4 	beq.w	80041e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_RCC_OscConfig+0x4c>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	f040 808b 	bne.w	800413e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b01      	cmp	r3, #1
 800402c:	f040 8087 	bne.w	800413e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004030:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x64>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e3df      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_RCC_OscConfig+0x7e>
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004060:	e005      	b.n	800406e <HAL_RCC_OscConfig+0x8a>
 8004062:	4b7c      	ldr	r3, [pc, #496]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406e:	4293      	cmp	r3, r2
 8004070:	d223      	bcs.n	80040ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fdf8 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e3c0      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004086:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a72      	ldr	r2, [pc, #456]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800408c:	f043 0308 	orr.w	r3, r3, #8
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	496d      	ldr	r1, [pc, #436]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a4:	4b6b      	ldr	r3, [pc, #428]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	4968      	ldr	r1, [pc, #416]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
 80040b8:	e025      	b.n	8004106 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ba:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4960      	ldr	r1, [pc, #384]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d8:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	495b      	ldr	r1, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fdb8 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e380      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004106:	f000 fcc1 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 800410a:	4602      	mov	r2, r0
 800410c:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	4950      	ldr	r1, [pc, #320]	; (8004258 <HAL_RCC_OscConfig+0x274>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a4e      	ldr	r2, [pc, #312]	; (800425c <HAL_RCC_OscConfig+0x278>)
 8004124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004126:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <HAL_RCC_OscConfig+0x27c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd ff5e 	bl	8001fec <HAL_InitTick>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d052      	beq.n	80041e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	e364      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d032      	beq.n	80041ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004146:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004152:	f7fd ff9b 	bl	800208c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800415a:	f7fd ff97 	bl	800208c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e34d      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416c:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004178:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800417e:	f043 0308 	orr.w	r3, r3, #8
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b33      	ldr	r3, [pc, #204]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	4930      	ldr	r1, [pc, #192]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	492b      	ldr	r1, [pc, #172]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
 80041aa:	e01a      	b.n	80041e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b8:	f7fd ff68 	bl	800208c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c0:	f7fd ff64 	bl	800208c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e31a      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1dc>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d073      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_OscConfig+0x21c>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d10e      	bne.n	8004218 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d10b      	bne.n	8004218 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d063      	beq.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d15f      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e2f7      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d106      	bne.n	8004230 <HAL_RCC_OscConfig+0x24c>
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e025      	b.n	800427c <HAL_RCC_OscConfig+0x298>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d114      	bne.n	8004264 <HAL_RCC_OscConfig+0x280>
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a05      	ldr	r2, [pc, #20]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a02      	ldr	r2, [pc, #8]	; (8004254 <HAL_RCC_OscConfig+0x270>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e013      	b.n	800427c <HAL_RCC_OscConfig+0x298>
 8004254:	40021000 	.word	0x40021000
 8004258:	08011d24 	.word	0x08011d24
 800425c:	20000004 	.word	0x20000004
 8004260:	20000008 	.word	0x20000008
 8004264:	4ba0      	ldr	r3, [pc, #640]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a9f      	ldr	r2, [pc, #636]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b9d      	ldr	r3, [pc, #628]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a9c      	ldr	r2, [pc, #624]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd ff02 	bl	800208c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fefe 	bl	800208c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e2b4      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	4b92      	ldr	r3, [pc, #584]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x2a8>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd feee 	bl	800208c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd feea 	bl	800208c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e2a0      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2d0>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d060      	beq.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_OscConfig+0x310>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d119      	bne.n	8004322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d116      	bne.n	8004322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	4b7c      	ldr	r3, [pc, #496]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_OscConfig+0x328>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e27d      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4973      	ldr	r1, [pc, #460]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004320:	e040      	b.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d023      	beq.n	8004372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fea9 	bl	800208c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd fea5 	bl	800208c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e25b      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004350:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	495f      	ldr	r1, [pc, #380]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	e018      	b.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b5d      	ldr	r3, [pc, #372]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5c      	ldr	r2, [pc, #368]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fd fe85 	bl	800208c <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd fe81 	bl	800208c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e237      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03c      	beq.n	800442a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043be:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fe60 	bl	800208c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fd fe5c 	bl	800208c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e212      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ef      	beq.n	80043d0 <HAL_RCC_OscConfig+0x3ec>
 80043f0:	e01b      	b.n	800442a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f2:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	4a3b      	ldr	r2, [pc, #236]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fe43 	bl	800208c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd fe3f 	bl	800208c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1f5      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ef      	bne.n	800440a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a6 	beq.w	8004584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
 8004454:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004460:	2301      	movs	r3, #1
 8004462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004464:	4b21      	ldr	r3, [pc, #132]	; (80044ec <HAL_RCC_OscConfig+0x508>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d118      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x508>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_RCC_OscConfig+0x508>)
 8004476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447c:	f7fd fe06 	bl	800208c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004484:	f7fd fe02 	bl	800208c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1b8      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x508>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0x4d8>
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ba:	e029      	b.n	8004510 <HAL_RCC_OscConfig+0x52c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d115      	bne.n	80044f0 <HAL_RCC_OscConfig+0x50c>
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a03      	ldr	r2, [pc, #12]	; (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e4:	e014      	b.n	8004510 <HAL_RCC_OscConfig+0x52c>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
 80044f0:	4b9d      	ldr	r3, [pc, #628]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4a9c      	ldr	r2, [pc, #624]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004500:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a98      	ldr	r2, [pc, #608]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fdb8 	bl	800208c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd fdb4 	bl	800208c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e168      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b8c      	ldr	r3, [pc, #560]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ed      	beq.n	8004520 <HAL_RCC_OscConfig+0x53c>
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fda1 	bl	800208c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fd fd9d 	bl	800208c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e151      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004564:	4b80      	ldr	r3, [pc, #512]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ed      	bne.n	800454e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	4a7a      	ldr	r2, [pc, #488]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03c      	beq.n	800460a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004598:	4b73      	ldr	r3, [pc, #460]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 800459a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459e:	4a72      	ldr	r2, [pc, #456]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fd70 	bl	800208c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b0:	f7fd fd6c 	bl	800208c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e122      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80045c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <HAL_RCC_OscConfig+0x5cc>
 80045d0:	e01b      	b.n	800460a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045d2:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80045d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d8:	4a63      	ldr	r2, [pc, #396]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd fd53 	bl	800208c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ea:	f7fd fd4f 	bl	800208c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e105      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ef      	bne.n	80045ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80f9 	beq.w	8004806 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b02      	cmp	r3, #2
 800461a:	f040 80cf 	bne.w	80047bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0203 	and.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	429a      	cmp	r2, r3
 8004630:	d12c      	bne.n	800468c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	3b01      	subs	r3, #1
 800463e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d123      	bne.n	800468c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d11b      	bne.n	800468c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d113      	bne.n	800468c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	3b01      	subs	r3, #1
 8004672:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d109      	bne.n	800468c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d071      	beq.n	8004770 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d068      	beq.n	8004764 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004692:	4b35      	ldr	r3, [pc, #212]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800469e:	4b32      	ldr	r3, [pc, #200]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0ac      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80046b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ba:	f7fd fce7 	bl	800208c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fd fce3 	bl	800208c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e099      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCC_OscConfig+0x788>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046f0:	3a01      	subs	r2, #1
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	4311      	orrs	r1, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046fa:	0212      	lsls	r2, r2, #8
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004702:	0852      	lsrs	r2, r2, #1
 8004704:	3a01      	subs	r2, #1
 8004706:	0552      	lsls	r2, r2, #21
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0652      	lsls	r2, r2, #25
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800471a:	06d2      	lsls	r2, r2, #27
 800471c:	430a      	orrs	r2, r1
 800471e:	4912      	ldr	r1, [pc, #72]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004720:	4313      	orrs	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004730:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800473c:	f7fd fca6 	bl	800208c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd fca2 	bl	800208c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e058      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCC_OscConfig+0x784>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004762:	e050      	b.n	8004806 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e04f      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
 8004768:	40021000 	.word	0x40021000
 800476c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004770:	4b27      	ldr	r3, [pc, #156]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d144      	bne.n	8004806 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004794:	f7fd fc7a 	bl	800208c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fc76 	bl	800208c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e02c      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x7b8>
 80047ba:	e024      	b.n	8004806 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d01f      	beq.n	8004802 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd fc5d 	bl	800208c <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fd fc59 	bl	800208c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e00f      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4905      	ldr	r1, [pc, #20]	; (8004810 <HAL_RCC_OscConfig+0x82c>)
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_OscConfig+0x830>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
 8004800:	e001      	b.n	8004806 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	feeefffc 	.word	0xfeeefffc

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e11d      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b90      	ldr	r3, [pc, #576]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d910      	bls.n	8004860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 020f 	bic.w	r2, r3, #15
 8004846:	498b      	ldr	r1, [pc, #556]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e105      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b81      	ldr	r3, [pc, #516]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004878:	429a      	cmp	r2, r3
 800487a:	d908      	bls.n	800488e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b7e      	ldr	r3, [pc, #504]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	497b      	ldr	r1, [pc, #492]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d079      	beq.n	800498e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d11e      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0dc      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048b2:	f000 fa35 	bl	8004d20 <RCC_GetSysClockFreqFromPLLSource>
 80048b6:	4603      	mov	r3, r0
 80048b8:	4a70      	ldr	r2, [pc, #448]	; (8004a7c <HAL_RCC_ClockConfig+0x264>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d946      	bls.n	800494c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048be:	4b6e      	ldr	r3, [pc, #440]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d140      	bne.n	800494c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ca:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	4a69      	ldr	r2, [pc, #420]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e035      	b.n	800494c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e8:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d115      	bne.n	8004920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b9      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004900:	4b5d      	ldr	r3, [pc, #372]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0ad      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0a5      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004920:	f000 f8b4 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004924:	4603      	mov	r3, r0
 8004926:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_RCC_ClockConfig+0x264>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d90f      	bls.n	800494c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800492c:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004940:	4a4d      	ldr	r2, [pc, #308]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494c:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 0203 	bic.w	r2, r3, #3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4947      	ldr	r1, [pc, #284]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495e:	f7fd fb95 	bl	800208c <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004964:	e00a      	b.n	800497c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004966:	f7fd fb91 	bl	800208c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e077      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 020c 	and.w	r2, r3, #12
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	429a      	cmp	r2, r3
 800498c:	d1eb      	bne.n	8004966 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d105      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a37      	ldr	r2, [pc, #220]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 800499a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d208      	bcs.n	80049ce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	492b      	ldr	r1, [pc, #172]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ce:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d210      	bcs.n	80049fe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 020f 	bic.w	r2, r3, #15
 80049e4:	4923      	ldr	r1, [pc, #140]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCC_ClockConfig+0x25c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e036      	b.n	8004a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4918      	ldr	r1, [pc, #96]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4910      	ldr	r1, [pc, #64]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a3c:	f000 f826 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	490c      	ldr	r1, [pc, #48]	; (8004a80 <HAL_RCC_ClockConfig+0x268>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x26c>)
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_RCC_ClockConfig+0x270>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd fac3 	bl	8001fec <HAL_InitTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	04c4b400 	.word	0x04c4b400
 8004a80:	08011d24 	.word	0x08011d24
 8004a84:	20000004 	.word	0x20000004
 8004a88:	20000008 	.word	0x20000008

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9a:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d121      	bne.n	8004afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d11e      	bne.n	8004afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ac0:	4b34      	ldr	r3, [pc, #208]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004acc:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	e005      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10d      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b04:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e004      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b10:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d134      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0xac>
 8004b30:	e005      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b34:	617b      	str	r3, [r7, #20]
      break;
 8004b36:	e005      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b3a:	617b      	str	r3, [r7, #20]
      break;
 8004b3c:	e002      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	617b      	str	r3, [r7, #20]
      break;
 8004b42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	fb03 f202 	mul.w	r2, r3, r2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	0e5b      	lsrs	r3, r3, #25
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	3301      	adds	r3, #1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b84:	69bb      	ldr	r3, [r7, #24]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	08011d3c 	.word	0x08011d3c
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000004 	.word	0x20000004

08004bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc0:	f7ff fff0 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4904      	ldr	r1, [pc, #16]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	08011d34 	.word	0x08011d34

08004be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bec:	f7ff ffda 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0adb      	lsrs	r3, r3, #11
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	08011d34 	.word	0x08011d34

08004c14 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_EnableCSS+0x1c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_RCC_EnableCSS+0x1c>)
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c44:	d105      	bne.n	8004c52 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004c46:	f000 f809 	bl	8004c5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c50:	621a      	str	r2, [r3, #32]
  }
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c84:	f7ff f8da 	bl	8003e3c <HAL_PWREx_GetVoltageRange>
 8004c88:	6178      	str	r0, [r7, #20]
 8004c8a:	e014      	b.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	; 0x58
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca4:	f7ff f8ca 	bl	8003e3c <HAL_PWREx_GetVoltageRange>
 8004ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbc:	d10b      	bne.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d913      	bls.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc8:	d902      	bls.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cca:	2302      	movs	r3, #2
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e00d      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	e00a      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cda:	d902      	bls.n	8004ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004cdc:	2302      	movs	r3, #2
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e004      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d101      	bne.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce8:	2301      	movs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 020f 	bic.w	r2, r3, #15
 8004cf4:	4909      	ldr	r1, [pc, #36]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d001      	beq.n	8004d0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40022000 	.word	0x40022000

08004d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d26:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d00b      	beq.n	8004d4e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d825      	bhi.n	8004d88 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d008      	beq.n	8004d54 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d11f      	bne.n	8004d88 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d4a:	613b      	str	r3, [r7, #16]
    break;
 8004d4c:	e01f      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d4e:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d50:	613b      	str	r3, [r7, #16]
    break;
 8004d52:	e01c      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e005      	b.n	8004d7c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d84:	613b      	str	r3, [r7, #16]
    break;
 8004d86:	e002      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
    break;
 8004d8c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	fb03 f202 	mul.w	r2, r3, r2
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004dce:	683b      	ldr	r3, [r7, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	00f42400 	.word	0x00f42400
 8004de4:	007a1200 	.word	0x007a1200
 8004de8:	08011d3c 	.word	0x08011d3c

08004dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004df4:	2300      	movs	r3, #0
 8004df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df8:	2300      	movs	r3, #0
 8004dfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d040      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d02a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d825      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d026      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d821      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d006      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d81d      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e2c:	e018      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e2e:	4b89      	ldr	r3, [pc, #548]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4a88      	ldr	r2, [pc, #544]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e3a:	e015      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fa24 	bl	8006290 <RCCEx_PLLSAI1_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3320      	adds	r3, #32
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fb0f 	bl	8006478 <RCCEx_PLLSAI2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	74fb      	strb	r3, [r7, #19]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6e:	4b79      	ldr	r3, [pc, #484]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e74:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7c:	4975      	ldr	r1, [pc, #468]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e84:	e001      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d047      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d030      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d82a      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d02a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d824      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d008      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d81e      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ec8:	e018      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eca:	4b62      	ldr	r3, [pc, #392]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4a61      	ldr	r2, [pc, #388]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ed6:	e015      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f9d6 	bl	8006290 <RCCEx_PLLSAI1_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee8:	e00c      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3320      	adds	r3, #32
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fac1 	bl	8006478 <RCCEx_PLLSAI2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	74fb      	strb	r3, [r7, #19]
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f0a:	4b52      	ldr	r3, [pc, #328]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	494e      	ldr	r1, [pc, #312]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f20:	e001      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 809f 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f34:	2300      	movs	r3, #0
 8004f36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	4a40      	ldr	r2, [pc, #256]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f66:	2301      	movs	r3, #1
 8004f68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f76:	f7fd f889 	bl	800208c <HAL_GetTick>
 8004f7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f7c:	e009      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7fd f885 	bl	800208c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ef      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d15b      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01f      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d019      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd f844 	bl	800208c <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005006:	e00b      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fd f840 	bl	800208c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d902      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	74fb      	strb	r3, [r7, #19]
            break;
 800501e:	e006      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ec      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	74bb      	strb	r3, [r7, #18]
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005054:	40021000 	.word	0x40021000
 8005058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005060:	7c7b      	ldrb	r3, [r7, #17]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a9f      	ldr	r2, [pc, #636]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	4996      	ldr	r1, [pc, #600]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a0:	4b91      	ldr	r3, [pc, #580]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 020c 	bic.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	498e      	ldr	r1, [pc, #568]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	4985      	ldr	r1, [pc, #532]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e4:	4b80      	ldr	r3, [pc, #512]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	497d      	ldr	r1, [pc, #500]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005106:	4b78      	ldr	r3, [pc, #480]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005114:	4974      	ldr	r1, [pc, #464]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005128:	4b6f      	ldr	r3, [pc, #444]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	496c      	ldr	r1, [pc, #432]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005158:	4963      	ldr	r1, [pc, #396]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516c:	4b5e      	ldr	r3, [pc, #376]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517a:	495b      	ldr	r1, [pc, #364]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800518e:	4b56      	ldr	r3, [pc, #344]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	4952      	ldr	r1, [pc, #328]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b0:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	494a      	ldr	r1, [pc, #296]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d2:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	4941      	ldr	r1, [pc, #260]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051f4:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	4939      	ldr	r1, [pc, #228]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d028      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	4930      	ldr	r1, [pc, #192]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005234:	d106      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005240:	60d3      	str	r3, [r2, #12]
 8005242:	e011      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800524c:	d10c      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f81b 	bl	8006290 <RCCEx_PLLSAI1_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d04d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800527c:	d108      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800528a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800528e:	e012      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005290:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ae:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052be:	d106      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ca:	60d3      	str	r3, [r2, #12]
 80052cc:	e020      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d6:	d109      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a02      	ldr	r2, [pc, #8]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	e014      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 ffc7 	bl	8006290 <RCCEx_PLLSAI1_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d028      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800531c:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800532a:	4947      	ldr	r1, [pc, #284]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800533a:	d106      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533c:	4b42      	ldr	r3, [pc, #264]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a41      	ldr	r2, [pc, #260]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005346:	60d3      	str	r3, [r2, #12]
 8005348:	e011      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005352:	d10c      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f000 ff98 	bl	8006290 <RCCEx_PLLSAI1_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01e      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537a:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800538a:	492f      	ldr	r1, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 ff73 	bl	8006290 <RCCEx_PLLSAI1_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053c4:	4b20      	ldr	r3, [pc, #128]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ca:	f023 0204 	bic.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d4:	491c      	ldr	r1, [pc, #112]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ee:	f023 0218 	bic.w	r2, r3, #24
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	4913      	ldr	r1, [pc, #76]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800543c:	7cbb      	ldrb	r3, [r7, #18]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800545e:	d13e      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005460:	4bb6      	ldr	r3, [pc, #728]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005472:	d028      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547a:	f200 86f4 	bhi.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d005      	beq.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548c:	d00e      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800548e:	f000 beea 	b.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005492:	4baa      	ldr	r3, [pc, #680]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	f040 86e4 	bne.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a6:	61fb      	str	r3, [r7, #28]
      break;
 80054a8:	f000 bedf 	b.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80054ac:	4ba3      	ldr	r3, [pc, #652]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f040 86d9 	bne.w	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80054bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80054c0:	61fb      	str	r3, [r7, #28]
      break;
 80054c2:	f000 bed4 	b.w	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054c6:	4b9d      	ldr	r3, [pc, #628]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d2:	f040 86ce 	bne.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80054d6:	4b9a      	ldr	r3, [pc, #616]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054d8:	61fb      	str	r3, [r7, #28]
      break;
 80054da:	f000 beca 	b.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054de:	4b97      	ldr	r3, [pc, #604]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d036      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d840      	bhi.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d003      	beq.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d020      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005500:	e039      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005502:	4b8e      	ldr	r3, [pc, #568]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d116      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800550e:	4b8b      	ldr	r3, [pc, #556]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800551a:	4b88      	ldr	r3, [pc, #544]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	e005      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005526:	4b85      	ldr	r3, [pc, #532]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	4a84      	ldr	r2, [pc, #528]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005538:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800553a:	e01f      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
      break;
 8005540:	e01c      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005542:	4b7e      	ldr	r3, [pc, #504]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005550:	4b7d      	ldr	r3, [pc, #500]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005552:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005554:	e012      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
      break;
 800555a:	e00f      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800555c:	4b77      	ldr	r3, [pc, #476]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005568:	d102      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800556a:	4b78      	ldr	r3, [pc, #480]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800556c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800556e:	e005      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
      break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
      break;
 800557a:	bf00      	nop
    }

    switch(PeriphClk)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005582:	f000 8606 	beq.w	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558c:	f200 8673 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005596:	f000 8469 	beq.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	f200 8669 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	f000 8531 	beq.w	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b4:	f200 865f 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055be:	f000 8187 	beq.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c8:	f200 8655 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055d2:	f000 80cd 	beq.w	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055dc:	f200 864b 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e6:	f000 8430 	beq.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	f200 8641 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055fa:	f000 83e4 	beq.w	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005604:	f200 8637 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560e:	f000 80af 	beq.w	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005618:	f200 862d 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	f000 809d 	beq.w	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	f200 8623 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005636:	f000 808b 	beq.w	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	f200 8619 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564a:	f000 8554 	beq.w	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	f200 860f 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800565e:	f000 8500 	beq.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005668:	f200 8605 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	f000 84a1 	beq.w	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567c:	f200 85fb 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	f000 846c 	beq.w	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b80      	cmp	r3, #128	; 0x80
 800568c:	f200 85f3 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b20      	cmp	r3, #32
 8005694:	d84c      	bhi.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 85ec 	beq.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	2b1f      	cmp	r3, #31
 80056a4:	f200 85e7 	bhi.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	08005ac5 	.word	0x08005ac5
 80056b4:	08005b33 	.word	0x08005b33
 80056b8:	08006277 	.word	0x08006277
 80056bc:	08005bc7 	.word	0x08005bc7
 80056c0:	08006277 	.word	0x08006277
 80056c4:	08006277 	.word	0x08006277
 80056c8:	08006277 	.word	0x08006277
 80056cc:	08005c3f 	.word	0x08005c3f
 80056d0:	08006277 	.word	0x08006277
 80056d4:	08006277 	.word	0x08006277
 80056d8:	08006277 	.word	0x08006277
 80056dc:	08006277 	.word	0x08006277
 80056e0:	08006277 	.word	0x08006277
 80056e4:	08006277 	.word	0x08006277
 80056e8:	08006277 	.word	0x08006277
 80056ec:	08005cc3 	.word	0x08005cc3
 80056f0:	08006277 	.word	0x08006277
 80056f4:	08006277 	.word	0x08006277
 80056f8:	08006277 	.word	0x08006277
 80056fc:	08006277 	.word	0x08006277
 8005700:	08006277 	.word	0x08006277
 8005704:	08006277 	.word	0x08006277
 8005708:	08006277 	.word	0x08006277
 800570c:	08006277 	.word	0x08006277
 8005710:	08006277 	.word	0x08006277
 8005714:	08006277 	.word	0x08006277
 8005718:	08006277 	.word	0x08006277
 800571c:	08006277 	.word	0x08006277
 8005720:	08006277 	.word	0x08006277
 8005724:	08006277 	.word	0x08006277
 8005728:	08006277 	.word	0x08006277
 800572c:	08005d45 	.word	0x08005d45
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	f000 83e8 	beq.w	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005738:	f000 bd9d 	b.w	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800573c:	40021000 	.word	0x40021000
 8005740:	0003d090 	.word	0x0003d090
 8005744:	08011d3c 	.word	0x08011d3c
 8005748:	00f42400 	.word	0x00f42400
 800574c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005750:	69b9      	ldr	r1, [r7, #24]
 8005752:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005756:	f000 ff83 	bl	8006660 <RCCEx_GetSAIxPeriphCLKFreq>
 800575a:	61f8      	str	r0, [r7, #28]
      break;
 800575c:	f000 bd8e 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005766:	f000 ff7b 	bl	8006660 <RCCEx_GetSAIxPeriphCLKFreq>
 800576a:	61f8      	str	r0, [r7, #28]
      break;
 800576c:	f000 bd86 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005770:	4b9a      	ldr	r3, [pc, #616]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005782:	d015      	beq.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800578a:	f200 8092 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005794:	d029      	beq.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579c:	f200 8089 	bhi.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d07b      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ac:	d04a      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80057ae:	e080      	b.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80057b0:	4b8a      	ldr	r3, [pc, #552]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d17d      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80057bc:	4b87      	ldr	r3, [pc, #540]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80057c8:	4b84      	ldr	r3, [pc, #528]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	e005      	b.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80057d4:	4b81      	ldr	r3, [pc, #516]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	4a7f      	ldr	r2, [pc, #508]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	61fb      	str	r3, [r7, #28]
          break;
 80057e8:	e066      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057ea:	4b7c      	ldr	r3, [pc, #496]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f6:	d162      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057f8:	4b78      	ldr	r3, [pc, #480]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005804:	d15b      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005806:	4b75      	ldr	r3, [pc, #468]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	fb03 f202 	mul.w	r2, r3, r2
 800581a:	4b70      	ldr	r3, [pc, #448]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	3301      	adds	r3, #1
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800582c:	4b6b      	ldr	r3, [pc, #428]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	0d5b      	lsrs	r3, r3, #21
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	3301      	adds	r3, #1
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	61fb      	str	r3, [r7, #28]
          break;
 8005842:	e03c      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005844:	4b65      	ldr	r3, [pc, #404]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005850:	d138      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005852:	4b62      	ldr	r3, [pc, #392]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585e:	d131      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005860:	4b5e      	ldr	r3, [pc, #376]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	fb03 f202 	mul.w	r2, r3, r2
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3301      	adds	r3, #1
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005886:	4b55      	ldr	r3, [pc, #340]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	0d5b      	lsrs	r3, r3, #21
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	3301      	adds	r3, #1
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	61fb      	str	r3, [r7, #28]
          break;
 800589c:	e012      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800589e:	4b4f      	ldr	r3, [pc, #316]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d10e      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80058ac:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80058ae:	61fb      	str	r3, [r7, #28]
          break;
 80058b0:	e00b      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80058b2:	bf00      	nop
 80058b4:	f000 bce2 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058b8:	bf00      	nop
 80058ba:	f000 bcdf 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058be:	bf00      	nop
 80058c0:	f000 bcdc 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058c4:	bf00      	nop
 80058c6:	f000 bcd9 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058ca:	bf00      	nop
        break;
 80058cc:	f000 bcd6 	b.w	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80058d0:	4b42      	ldr	r3, [pc, #264]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058de:	d13d      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058e0:	4b3e      	ldr	r3, [pc, #248]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ec:	f040 84c5 	bne.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80058f0:	4b3a      	ldr	r3, [pc, #232]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	f040 84bd 	bne.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	fb03 f202 	mul.w	r2, r3, r2
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	3301      	adds	r3, #1
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005926:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	0edb      	lsrs	r3, r3, #27
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005944:	2311      	movs	r3, #17
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e001      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800594a:	2307      	movs	r3, #7
 800594c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	61fb      	str	r3, [r7, #28]
      break;
 8005958:	f000 bc8f 	b.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800595c:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800596e:	d016      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005976:	f200 809b 	bhi.w	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005980:	d032      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	f200 8092 	bhi.w	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8084 	beq.w	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800599a:	d052      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800599c:	e088      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	f040 8084 	bne.w	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	e005      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	4a03      	ldr	r2, [pc, #12]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80059d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d6:	61fb      	str	r3, [r7, #28]
          break;
 80059d8:	e06c      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000
 80059e0:	08011d3c 	.word	0x08011d3c
 80059e4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059e8:	4ba5      	ldr	r3, [pc, #660]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f4:	d160      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059f6:	4ba2      	ldr	r3, [pc, #648]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a02:	d159      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a04:	4b9e      	ldr	r3, [pc, #632]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	fb03 f202 	mul.w	r2, r3, r2
 8005a18:	4b99      	ldr	r3, [pc, #612]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005a2a:	4b95      	ldr	r3, [pc, #596]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	0d5b      	lsrs	r3, r3, #21
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	3301      	adds	r3, #1
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	61fb      	str	r3, [r7, #28]
          break;
 8005a40:	e03a      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a42:	4b8f      	ldr	r3, [pc, #572]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4e:	d135      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a50:	4b8b      	ldr	r3, [pc, #556]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5c:	d12e      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a5e:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a68:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	fb03 f202 	mul.w	r2, r3, r2
 8005a72:	4b83      	ldr	r3, [pc, #524]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a84:	4b7e      	ldr	r3, [pc, #504]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	0d5b      	lsrs	r3, r3, #21
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	61fb      	str	r3, [r7, #28]
          break;
 8005a9a:	e00f      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a9c:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005aaa:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005aac:	61fb      	str	r3, [r7, #28]
          break;
 8005aae:	e007      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005ab0:	bf00      	nop
 8005ab2:	e3e2      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ab4:	bf00      	nop
 8005ab6:	e3e0      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ab8:	bf00      	nop
 8005aba:	e3de      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005abc:	bf00      	nop
 8005abe:	e3dc      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005ac0:	bf00      	nop
      break;
 8005ac2:	e3da      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ac4:	4b6e      	ldr	r3, [pc, #440]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d827      	bhi.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af5 	.word	0x08005af5
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b11 	.word	0x08005b11
          frequency = HAL_RCC_GetPCLK2Freq();
 8005aec:	f7ff f87c 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 8005af0:	61f8      	str	r0, [r7, #28]
          break;
 8005af2:	e01d      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005af4:	f7fe ffca 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005af8:	61f8      	str	r0, [r7, #28]
          break;
 8005afa:	e019      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005afc:	4b60      	ldr	r3, [pc, #384]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d10f      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005b0a:	4b5f      	ldr	r3, [pc, #380]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b0c:	61fb      	str	r3, [r7, #28]
          break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b10:	4b5b      	ldr	r3, [pc, #364]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	61fb      	str	r3, [r7, #28]
          break;
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005b26:	bf00      	nop
 8005b28:	e3a8      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b2a:	bf00      	nop
 8005b2c:	e3a6      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b2e:	bf00      	nop
        break;
 8005b30:	e3a4      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b32:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f003 030c 	and.w	r3, r3, #12
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b0c      	cmp	r3, #12
 8005b42:	d83a      	bhi.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005bbb 	.word	0x08005bbb
 8005b54:	08005bbb 	.word	0x08005bbb
 8005b58:	08005bbb 	.word	0x08005bbb
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	08005bbb 	.word	0x08005bbb
 8005b64:	08005bbb 	.word	0x08005bbb
 8005b68:	08005bbb 	.word	0x08005bbb
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005bbb 	.word	0x08005bbb
 8005b74:	08005bbb 	.word	0x08005bbb
 8005b78:	08005bbb 	.word	0x08005bbb
 8005b7c:	08005ba5 	.word	0x08005ba5
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7ff f81c 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005b84:	61f8      	str	r0, [r7, #28]
          break;
 8005b86:	e01d      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b88:	f7fe ff80 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005b8c:	61f8      	str	r0, [r7, #28]
          break;
 8005b8e:	e019      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b90:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9c:	d10f      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005b9e:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ba0:	61fb      	str	r3, [r7, #28]
          break;
 8005ba2:	e00c      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb6:	61fb      	str	r3, [r7, #28]
          break;
 8005bb8:	e003      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005bba:	bf00      	nop
 8005bbc:	e35e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bbe:	bf00      	nop
 8005bc0:	e35c      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bc2:	bf00      	nop
        break;
 8005bc4:	e35a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b30      	cmp	r3, #48	; 0x30
 8005bd6:	d021      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d829      	bhi.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d011      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d823      	bhi.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d004      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005bf6:	e01c      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bf8:	f7fe ffe0 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005bfc:	61f8      	str	r0, [r7, #28]
          break;
 8005bfe:	e01d      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c00:	f7fe ff44 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005c04:	61f8      	str	r0, [r7, #28]
          break;
 8005c06:	e019      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d10f      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005c16:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c18:	61fb      	str	r3, [r7, #28]
          break;
 8005c1a:	e00c      	b.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	61fb      	str	r3, [r7, #28]
          break;
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005c32:	bf00      	nop
 8005c34:	e322      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c36:	bf00      	nop
 8005c38:	e320      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c3a:	bf00      	nop
        break;
 8005c3c:	e31e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2bc0      	cmp	r3, #192	; 0xc0
 8005c4e:	d027      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2bc0      	cmp	r3, #192	; 0xc0
 8005c54:	d82f      	bhi.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d017      	beq.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d829      	bhi.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d004      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005c6e:	e022      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe ffa4 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
          break;
 8005c76:	e023      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c78:	f7fe ff08 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005c7c:	61f8      	str	r0, [r7, #28]
          break;
 8005c7e:	e01f      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005c80:	40021000 	.word	0x40021000
 8005c84:	02dc6c00 	.word	0x02dc6c00
 8005c88:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c8c:	4b9b      	ldr	r3, [pc, #620]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c98:	d10f      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005c9a:	4b99      	ldr	r3, [pc, #612]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005c9c:	61fb      	str	r3, [r7, #28]
          break;
 8005c9e:	e00c      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ca0:	4b96      	ldr	r3, [pc, #600]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d107      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb2:	61fb      	str	r3, [r7, #28]
          break;
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005cb6:	bf00      	nop
 8005cb8:	e2e0      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cba:	bf00      	nop
 8005cbc:	e2de      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cbe:	bf00      	nop
        break;
 8005cc0:	e2dc      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005cc2:	4b8e      	ldr	r3, [pc, #568]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd4:	d025      	beq.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cdc:	d82c      	bhi.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d013      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d824      	bhi.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfa:	d004      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005cfc:	e01c      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7fe ff5d 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005d02:	61f8      	str	r0, [r7, #28]
          break;
 8005d04:	e01d      	b.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fe fec1 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005d0a:	61f8      	str	r0, [r7, #28]
          break;
 8005d0c:	e019      	b.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d0e:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d10f      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005d1c:	4b78      	ldr	r3, [pc, #480]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d1e:	61fb      	str	r3, [r7, #28]
          break;
 8005d20:	e00c      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d22:	4b76      	ldr	r3, [pc, #472]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d34:	61fb      	str	r3, [r7, #28]
          break;
 8005d36:	e003      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005d38:	bf00      	nop
 8005d3a:	e29f      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d3c:	bf00      	nop
 8005d3e:	e29d      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d40:	bf00      	nop
        break;
 8005d42:	e29b      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d44:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d56:	d025      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d5e:	d82c      	bhi.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d66:	d013      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6e:	d824      	bhi.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d004      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005d7e:	e01c      	b.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fe ff1c 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
          break;
 8005d86:	e01d      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d88:	f7fe fe80 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005d8c:	61f8      	str	r0, [r7, #28]
          break;
 8005d8e:	e019      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d90:	4b5a      	ldr	r3, [pc, #360]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9c:	d10f      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005d9e:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005da0:	61fb      	str	r3, [r7, #28]
          break;
 8005da2:	e00c      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005da4:	4b55      	ldr	r3, [pc, #340]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d107      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	61fb      	str	r3, [r7, #28]
          break;
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005dba:	bf00      	nop
 8005dbc:	e25e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dbe:	bf00      	nop
 8005dc0:	e25c      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dc2:	bf00      	nop
        break;
 8005dc4:	e25a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd8:	d007      	beq.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005de0:	d12f      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fe fe53 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005de6:	61f8      	str	r0, [r7, #28]
          break;
 8005de8:	e02e      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005dea:	4b44      	ldr	r3, [pc, #272]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df6:	d126      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005df8:	4b40      	ldr	r3, [pc, #256]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e04:	4b3d      	ldr	r3, [pc, #244]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	fb03 f202 	mul.w	r2, r3, r2
 8005e18:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	3301      	adds	r3, #1
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005e2a:	4b34      	ldr	r3, [pc, #208]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	0e5b      	lsrs	r3, r3, #25
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	3301      	adds	r3, #1
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	61fb      	str	r3, [r7, #28]
          break;
 8005e40:	e001      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005e42:	bf00      	nop
 8005e44:	e21a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e46:	bf00      	nop
        break;
 8005e48:	e218      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe fec4 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 8005e60:	61f8      	str	r0, [r7, #28]
        break;
 8005e62:	e20b      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e64:	f7fe fe12 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e207      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e72:	f003 0318 	and.w	r3, r3, #24
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d834      	bhi.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d024      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005e90:	e02d      	b.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e98:	f000 fbe2 	bl	8006660 <RCCEx_GetSAIxPeriphCLKFreq>
 8005e9c:	61f8      	str	r0, [r7, #28]
          break;
 8005e9e:	e02b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ea0:	4b16      	ldr	r3, [pc, #88]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d122      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	e005      	b.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed6:	61fb      	str	r3, [r7, #28]
          break;
 8005ed8:	e00b      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005eea:	61fb      	str	r3, [r7, #28]
          break;
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005eee:	bf00      	nop
 8005ef0:	e1c4      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ef2:	bf00      	nop
 8005ef4:	e1c2      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ef6:	bf00      	nop
        break;
 8005ef8:	e1c0      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	00f42400 	.word	0x00f42400
 8005f04:	08011d3c 	.word	0x08011d3c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f08:	4b96      	ldr	r3, [pc, #600]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	d013      	beq.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f22:	d819      	bhi.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	d004      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005f32:	e011      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f34:	f7fe fe42 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005f38:	61f8      	str	r0, [r7, #28]
          break;
 8005f3a:	e010      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f3c:	f7fe fda6 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005f40:	61f8      	str	r0, [r7, #28]
          break;
 8005f42:	e00c      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f44:	4b87      	ldr	r3, [pc, #540]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d104      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005f52:	4b85      	ldr	r3, [pc, #532]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f54:	61fb      	str	r3, [r7, #28]
          break;
 8005f56:	e001      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005f58:	bf00      	nop
 8005f5a:	e18f      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f5c:	bf00      	nop
        break;
 8005f5e:	e18d      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f72:	d013      	beq.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	d819      	bhi.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f88:	d004      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005f8a:	e011      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f8c:	f7fe fe16 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005f90:	61f8      	str	r0, [r7, #28]
          break;
 8005f92:	e010      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f94:	f7fe fd7a 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005f98:	61f8      	str	r0, [r7, #28]
          break;
 8005f9a:	e00c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f9c:	4b71      	ldr	r3, [pc, #452]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d104      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005faa:	4b6f      	ldr	r3, [pc, #444]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005fac:	61fb      	str	r3, [r7, #28]
          break;
 8005fae:	e001      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005fb0:	bf00      	nop
 8005fb2:	e163      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fb4:	bf00      	nop
        break;
 8005fb6:	e161      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005fb8:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fca:	d013      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fd2:	d819      	bhi.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005fe2:	e011      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe fdea 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005fe8:	61f8      	str	r0, [r7, #28]
          break;
 8005fea:	e010      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fec:	f7fe fd4e 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005ff0:	61f8      	str	r0, [r7, #28]
          break;
 8005ff2:	e00c      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff4:	4b5b      	ldr	r3, [pc, #364]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006000:	d104      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006002:	4b59      	ldr	r3, [pc, #356]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006004:	61fb      	str	r3, [r7, #28]
          break;
 8006006:	e001      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006008:	bf00      	nop
 800600a:	e137      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800600c:	bf00      	nop
        break;
 800600e:	e135      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006010:	4b54      	ldr	r3, [pc, #336]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d011      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d818      	bhi.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d004      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006034:	e011      	b.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fe fdc1 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 800603a:	61f8      	str	r0, [r7, #28]
          break;
 800603c:	e010      	b.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800603e:	f7fe fd25 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006042:	61f8      	str	r0, [r7, #28]
          break;
 8006044:	e00c      	b.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006046:	4b47      	ldr	r3, [pc, #284]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006052:	d104      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006054:	4b44      	ldr	r3, [pc, #272]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006056:	61fb      	str	r3, [r7, #28]
          break;
 8006058:	e001      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800605a:	bf00      	nop
 800605c:	e10e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800605e:	bf00      	nop
        break;
 8006060:	e10c      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006062:	4b40      	ldr	r3, [pc, #256]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006074:	d02c      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800607c:	d833      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006084:	d01a      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800608c:	d82b      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800609a:	d004      	beq.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800609c:	e023      	b.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800609e:	f7fe fd8d 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 80060a2:	61f8      	str	r0, [r7, #28]
          break;
 80060a4:	e026      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d11a      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80060b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060b8:	61fb      	str	r3, [r7, #28]
          break;
 80060ba:	e016      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060bc:	4b29      	ldr	r3, [pc, #164]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d111      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80060ca:	4b27      	ldr	r3, [pc, #156]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060cc:	61fb      	str	r3, [r7, #28]
          break;
 80060ce:	e00e      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060d0:	4b24      	ldr	r3, [pc, #144]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d109      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	61fb      	str	r3, [r7, #28]
          break;
 80060e4:	e005      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80060e6:	bf00      	nop
 80060e8:	e0c8      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ea:	bf00      	nop
 80060ec:	e0c6      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ee:	bf00      	nop
 80060f0:	e0c4      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060f2:	bf00      	nop
        break;
 80060f4:	e0c2      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006108:	d030      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006110:	d837      	bhi.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006118:	d01a      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006120:	d82f      	bhi.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612e:	d004      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006130:	e027      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fe fd43 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8006136:	61f8      	str	r0, [r7, #28]
          break;
 8006138:	e02a      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800613c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d11e      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006148:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800614c:	61fb      	str	r3, [r7, #28]
          break;
 800614e:	e01a      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d115      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800615e:	4b02      	ldr	r3, [pc, #8]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006160:	61fb      	str	r3, [r7, #28]
          break;
 8006162:	e012      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006164:	40021000 	.word	0x40021000
 8006168:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800616c:	4b46      	ldr	r3, [pc, #280]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d109      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
          break;
 8006180:	e005      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006182:	bf00      	nop
 8006184:	e07a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006186:	bf00      	nop
 8006188:	e078      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800618a:	bf00      	nop
 800618c:	e076      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800618e:	bf00      	nop
        break;
 8006190:	e074      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006192:	4b3d      	ldr	r3, [pc, #244]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006198:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a4:	d02c      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ac:	d855      	bhi.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ba:	d004      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80061bc:	e04d      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80061be:	f7fe fc65 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80061c2:	61f8      	str	r0, [r7, #28]
          break;
 80061c4:	e04e      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80061c6:	4b30      	ldr	r3, [pc, #192]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d145      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80061d2:	4b2d      	ldr	r3, [pc, #180]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80061de:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	e005      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	4a25      	ldr	r2, [pc, #148]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	61fb      	str	r3, [r7, #28]
          break;
 80061fe:	e02e      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006200:	4b21      	ldr	r3, [pc, #132]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800620c:	d129      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d122      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006226:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	4b15      	ldr	r3, [pc, #84]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	3301      	adds	r3, #1
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	0d5b      	lsrs	r3, r3, #21
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	3301      	adds	r3, #1
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	61fb      	str	r3, [r7, #28]
          break;
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800625a:	bf00      	nop
 800625c:	e00e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800625e:	bf00      	nop
 8006260:	e00c      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006262:	bf00      	nop
        break;
 8006264:	e00a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006266:	bf00      	nop
 8006268:	e008      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800626a:	bf00      	nop
 800626c:	e006      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800626e:	bf00      	nop
 8006270:	e004      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800627a:	bf00      	nop
    }
  }

  return(frequency);
 800627c:	69fb      	ldr	r3, [r7, #28]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000
 800628c:	08011d3c 	.word	0x08011d3c

08006290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800629e:	4b72      	ldr	r3, [pc, #456]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062aa:	4b6f      	ldr	r3, [pc, #444]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d103      	bne.n	80062c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
       ||
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d142      	bne.n	8006348 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e03f      	b.n	8006348 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d018      	beq.n	8006302 <RCCEx_PLLSAI1_Config+0x72>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d825      	bhi.n	8006320 <RCCEx_PLLSAI1_Config+0x90>
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d002      	beq.n	80062de <RCCEx_PLLSAI1_Config+0x4e>
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d009      	beq.n	80062f0 <RCCEx_PLLSAI1_Config+0x60>
 80062dc:	e020      	b.n	8006320 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062de:	4b62      	ldr	r3, [pc, #392]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11d      	bne.n	8006326 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ee:	e01a      	b.n	8006326 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062f0:	4b5d      	ldr	r3, [pc, #372]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e013      	b.n	800632a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006302:	4b59      	ldr	r3, [pc, #356]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800630e:	4b56      	ldr	r3, [pc, #344]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800631e:	e006      	b.n	800632e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e004      	b.n	8006330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800632e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006336:	4b4c      	ldr	r3, [pc, #304]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4949      	ldr	r1, [pc, #292]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006344:	4313      	orrs	r3, r2
 8006346:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8086 	bne.w	800645c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a44      	ldr	r2, [pc, #272]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800635a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635c:	f7fb fe96 	bl	800208c <HAL_GetTick>
 8006360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006362:	e009      	b.n	8006378 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006364:	f7fb fe92 	bl	800208c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d902      	bls.n	8006378 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
        break;
 8006376:	e005      	b.n	8006384 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006378:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ef      	bne.n	8006364 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d168      	bne.n	800645c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d113      	bne.n	80063b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006390:	4b35      	ldr	r3, [pc, #212]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	4b35      	ldr	r3, [pc, #212]	; (800646c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006396:	4013      	ands	r3, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6892      	ldr	r2, [r2, #8]
 800639c:	0211      	lsls	r1, r2, #8
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68d2      	ldr	r2, [r2, #12]
 80063a2:	06d2      	lsls	r2, r2, #27
 80063a4:	4311      	orrs	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	3a01      	subs	r2, #1
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	430a      	orrs	r2, r1
 80063b0:	492d      	ldr	r1, [pc, #180]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
 80063b6:	e02d      	b.n	8006414 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d115      	bne.n	80063ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063be:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6892      	ldr	r2, [r2, #8]
 80063ca:	0211      	lsls	r1, r2, #8
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6912      	ldr	r2, [r2, #16]
 80063d0:	0852      	lsrs	r2, r2, #1
 80063d2:	3a01      	subs	r2, #1
 80063d4:	0552      	lsls	r2, r2, #21
 80063d6:	4311      	orrs	r1, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6852      	ldr	r2, [r2, #4]
 80063dc:	3a01      	subs	r2, #1
 80063de:	0112      	lsls	r2, r2, #4
 80063e0:	430a      	orrs	r2, r1
 80063e2:	4921      	ldr	r1, [pc, #132]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	610b      	str	r3, [r1, #16]
 80063e8:	e014      	b.n	8006414 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	0211      	lsls	r1, r2, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6952      	ldr	r2, [r2, #20]
 80063fc:	0852      	lsrs	r2, r2, #1
 80063fe:	3a01      	subs	r2, #1
 8006400:	0652      	lsls	r2, r2, #25
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6852      	ldr	r2, [r2, #4]
 8006408:	3a01      	subs	r2, #1
 800640a:	0112      	lsls	r2, r2, #4
 800640c:	430a      	orrs	r2, r1
 800640e:	4916      	ldr	r1, [pc, #88]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006414:	4b14      	ldr	r3, [pc, #80]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a13      	ldr	r2, [pc, #76]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800641e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fb fe34 	bl	800208c <HAL_GetTick>
 8006424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006426:	e009      	b.n	800643c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006428:	f7fb fe30 	bl	800208c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d902      	bls.n	800643c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	73fb      	strb	r3, [r7, #15]
          break;
 800643a:	e005      	b.n	8006448 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0ef      	beq.n	8006428 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	4904      	ldr	r1, [pc, #16]	; (8006468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000
 800646c:	07ff800f 	.word	0x07ff800f
 8006470:	ff9f800f 	.word	0xff9f800f
 8006474:	f9ff800f 	.word	0xf9ff800f

08006478 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006486:	4b72      	ldr	r3, [pc, #456]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00e      	beq.n	80064b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006492:	4b6f      	ldr	r3, [pc, #444]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0203 	and.w	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d103      	bne.n	80064aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
       ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d142      	bne.n	8006530 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
 80064ae:	e03f      	b.n	8006530 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d018      	beq.n	80064ea <RCCEx_PLLSAI2_Config+0x72>
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d825      	bhi.n	8006508 <RCCEx_PLLSAI2_Config+0x90>
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d002      	beq.n	80064c6 <RCCEx_PLLSAI2_Config+0x4e>
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d009      	beq.n	80064d8 <RCCEx_PLLSAI2_Config+0x60>
 80064c4:	e020      	b.n	8006508 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064c6:	4b62      	ldr	r3, [pc, #392]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d11d      	bne.n	800650e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d6:	e01a      	b.n	800650e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064d8:	4b5d      	ldr	r3, [pc, #372]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d116      	bne.n	8006512 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e8:	e013      	b.n	8006512 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064ea:	4b59      	ldr	r3, [pc, #356]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064f6:	4b56      	ldr	r3, [pc, #344]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006506:	e006      	b.n	8006516 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e004      	b.n	8006518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800650e:	bf00      	nop
 8006510:	e002      	b.n	8006518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006512:	bf00      	nop
 8006514:	e000      	b.n	8006518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006516:	bf00      	nop
    }

    if(status == HAL_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4949      	ldr	r1, [pc, #292]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652c:	4313      	orrs	r3, r2
 800652e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 8086 	bne.w	8006644 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006538:	4b45      	ldr	r3, [pc, #276]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a44      	ldr	r2, [pc, #272]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800653e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fb fda2 	bl	800208c <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800654a:	e009      	b.n	8006560 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800654c:	f7fb fd9e 	bl	800208c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d902      	bls.n	8006560 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
        break;
 800655e:	e005      	b.n	800656c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006560:	4b3b      	ldr	r3, [pc, #236]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1ef      	bne.n	800654c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d168      	bne.n	8006644 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d113      	bne.n	80065a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006578:	4b35      	ldr	r3, [pc, #212]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	4b35      	ldr	r3, [pc, #212]	; (8006654 <RCCEx_PLLSAI2_Config+0x1dc>)
 800657e:	4013      	ands	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6892      	ldr	r2, [r2, #8]
 8006584:	0211      	lsls	r1, r2, #8
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68d2      	ldr	r2, [r2, #12]
 800658a:	06d2      	lsls	r2, r2, #27
 800658c:	4311      	orrs	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6852      	ldr	r2, [r2, #4]
 8006592:	3a01      	subs	r2, #1
 8006594:	0112      	lsls	r2, r2, #4
 8006596:	430a      	orrs	r2, r1
 8006598:	492d      	ldr	r1, [pc, #180]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659a:	4313      	orrs	r3, r2
 800659c:	614b      	str	r3, [r1, #20]
 800659e:	e02d      	b.n	80065fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d115      	bne.n	80065d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <RCCEx_PLLSAI2_Config+0x1e0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	0211      	lsls	r1, r2, #8
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6912      	ldr	r2, [r2, #16]
 80065b8:	0852      	lsrs	r2, r2, #1
 80065ba:	3a01      	subs	r2, #1
 80065bc:	0552      	lsls	r2, r2, #21
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6852      	ldr	r2, [r2, #4]
 80065c4:	3a01      	subs	r2, #1
 80065c6:	0112      	lsls	r2, r2, #4
 80065c8:	430a      	orrs	r2, r1
 80065ca:	4921      	ldr	r1, [pc, #132]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	614b      	str	r3, [r1, #20]
 80065d0:	e014      	b.n	80065fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065d2:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	4b21      	ldr	r3, [pc, #132]	; (800665c <RCCEx_PLLSAI2_Config+0x1e4>)
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6892      	ldr	r2, [r2, #8]
 80065de:	0211      	lsls	r1, r2, #8
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6952      	ldr	r2, [r2, #20]
 80065e4:	0852      	lsrs	r2, r2, #1
 80065e6:	3a01      	subs	r2, #1
 80065e8:	0652      	lsls	r2, r2, #25
 80065ea:	4311      	orrs	r1, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	3a01      	subs	r2, #1
 80065f2:	0112      	lsls	r2, r2, #4
 80065f4:	430a      	orrs	r2, r1
 80065f6:	4916      	ldr	r1, [pc, #88]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006608:	f7fb fd40 	bl	800208c <HAL_GetTick>
 800660c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800660e:	e009      	b.n	8006624 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006610:	f7fb fd3c 	bl	800208c <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d902      	bls.n	8006624 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	73fb      	strb	r3, [r7, #15]
          break;
 8006622:	e005      	b.n	8006630 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0ef      	beq.n	8006610 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	4904      	ldr	r1, [pc, #16]	; (8006650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006640:	4313      	orrs	r3, r2
 8006642:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000
 8006654:	07ff800f 	.word	0x07ff800f
 8006658:	ff9f800f 	.word	0xff9f800f
 800665c:	f9ff800f 	.word	0xf9ff800f

08006660 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667c:	d10b      	bne.n	8006696 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800667e:	4b7e      	ldr	r3, [pc, #504]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006684:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006688:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d112      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006690:	4b7a      	ldr	r3, [pc, #488]	; (800687c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e00f      	b.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d10b      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800669e:	4b76      	ldr	r3, [pc, #472]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066a8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b0:	d101      	bne.n	80066b6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80066b2:	4b72      	ldr	r3, [pc, #456]	; (800687c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80066b4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 80d6 	bne.w	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	d003      	beq.n	80066d0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ce:	d13b      	bne.n	8006748 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80066d0:	4b69      	ldr	r3, [pc, #420]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066dc:	f040 80c4 	bne.w	8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80066e0:	4b65      	ldr	r3, [pc, #404]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80bd 	beq.w	8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066ee:	4b62      	ldr	r3, [pc, #392]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	3301      	adds	r3, #1
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006702:	4b5d      	ldr	r3, [pc, #372]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800670e:	4b5a      	ldr	r3, [pc, #360]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	0edb      	lsrs	r3, r3, #27
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006720:	4b55      	ldr	r3, [pc, #340]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800672c:	2311      	movs	r3, #17
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e001      	b.n	8006736 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006732:	2307      	movs	r3, #7
 8006734:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	fb03 f202 	mul.w	r2, r3, r2
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006746:	e08f      	b.n	8006868 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d13a      	bne.n	80067c4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800674e:	4b4a      	ldr	r3, [pc, #296]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800675a:	f040 8086 	bne.w	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800675e:	4b46      	ldr	r3, [pc, #280]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d07f      	beq.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800676a:	4b43      	ldr	r3, [pc, #268]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	3301      	adds	r3, #1
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	fbb2 f3f3 	udiv	r3, r2, r3
 800677c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800677e:	4b3e      	ldr	r3, [pc, #248]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006788:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800678a:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	0edb      	lsrs	r3, r3, #27
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800679c:	4b36      	ldr	r3, [pc, #216]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80067a8:	2311      	movs	r3, #17
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e001      	b.n	80067b2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80067ae:	2307      	movs	r3, #7
 80067b0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	fb03 f202 	mul.w	r2, r3, r2
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e052      	b.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d003      	beq.n	80067d2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d109      	bne.n	80067e6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d2:	4b29      	ldr	r3, [pc, #164]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067de:	d144      	bne.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80067e0:	4b27      	ldr	r3, [pc, #156]	; (8006880 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80067e2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067e4:	e041      	b.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d003      	beq.n	80067f4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f2:	d13a      	bne.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80067f4:	4b20      	ldr	r3, [pc, #128]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006800:	d133      	bne.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d02d      	beq.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800680e:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	3301      	adds	r3, #1
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	0edb      	lsrs	r3, r3, #27
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800684c:	2311      	movs	r3, #17
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e001      	b.n	8006856 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006852:	2307      	movs	r3, #7
 8006854:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	fb03 f202 	mul.w	r2, r3, r2
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	e000      	b.n	800686a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006868:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800686a:	69fb      	ldr	r3, [r7, #28]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3724      	adds	r7, #36	; 0x24
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40021000 	.word	0x40021000
 800687c:	001fff68 	.word	0x001fff68
 8006880:	00f42400 	.word	0x00f42400

08006884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e078      	b.n	8006988 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fb f911 	bl	8001ad0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2203      	movs	r2, #3
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f86a 	bl	8006990 <HAL_SD_InitCard>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e060      	b.n	8006988 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fdcd 	bl	800746c <HAL_SD_GetCardStatus>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e055      	b.n	8006988 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80068dc:	7e3b      	ldrb	r3, [r7, #24]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80068e2:	7e7b      	ldrb	r3, [r7, #25]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d10a      	bne.n	8006906 <HAL_SD_Init+0x82>
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_SD_Init+0x78>
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c
 8006904:	e00b      	b.n	800691e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d104      	bne.n	8006918 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006914:	65da      	str	r2, [r3, #92]	; 0x5c
 8006916:	e002      	b.n	800691e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fe83 	bl	8007630 <HAL_SD_ConfigWideBusOperation>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e029      	b.n	8006988 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006934:	f7fb fbaa 	bl	800208c <HAL_GetTick>
 8006938:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800693a:	e014      	b.n	8006966 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800693c:	f7fb fba6 	bl	800208c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694a:	d10c      	bne.n	8006966 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e010      	b.n	8006988 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 ff76 	bl	8007858 <HAL_SD_GetCardState>
 800696c:	4603      	mov	r3, r0
 800696e:	2b04      	cmp	r3, #4
 8006970:	d1e4      	bne.n	800693c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3728      	adds	r7, #40	; 0x28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006990:	b5b0      	push	{r4, r5, r7, lr}
 8006992:	b08e      	sub	sp, #56	; 0x38
 8006994:	af04      	add	r7, sp, #16
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006998:	2300      	movs	r3, #0
 800699a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80069a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80069ac:	f7fe fd4e 	bl	800544c <HAL_RCCEx_GetPeriphCLKFreq>
 80069b0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e079      	b.n	8006ac0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	4a3d      	ldr	r2, [pc, #244]	; (8006ac8 <HAL_SD_InitCard+0x138>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0210 	orr.w	r2, r2, #16
 80069f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681d      	ldr	r5, [r3, #0]
 80069fc:	466c      	mov	r4, sp
 80069fe:	f107 0314 	add.w	r3, r7, #20
 8006a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a10:	4628      	mov	r0, r5
 8006a12:	f003 fd43 	bl	800a49c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f003 fd86 	bl	800a52c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <HAL_SD_InitCard+0x13c>)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	3301      	adds	r3, #1
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fb fb34 	bl	80020a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 ffeb 	bl	8007a18 <SD_PowerON>
 8006a42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e02e      	b.n	8006ac0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ff18 	bl	8007898 <SD_InitCard>
 8006a68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e01b      	b.n	8006ac0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a90:	4618      	mov	r0, r3
 8006a92:	f003 fde1 	bl	800a658 <SDMMC_CmdBlockLength>
 8006a96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a0b      	ldr	r2, [pc, #44]	; (8006ad0 <HAL_SD_InitCard+0x140>)
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	; 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac8:	014f8b59 	.word	0x014f8b59
 8006acc:	00012110 	.word	0x00012110
 8006ad0:	1fe00fff 	.word	0x1fe00fff

08006ad4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b092      	sub	sp, #72	; 0x48
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ae2:	f7fb fad3 	bl	800208c <HAL_GetTick>
 8006ae6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d107      	bne.n	8006b06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e170      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	f040 8163 	bne.w	8006dda <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	441a      	add	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d907      	bls.n	8006b38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e157      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2200      	movs	r2, #0
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d002      	beq.n	8006b56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	025b      	lsls	r3, r3, #9
 8006b54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b62:	2390      	movs	r3, #144	; 0x90
 8006b64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b66:	2302      	movs	r3, #2
 8006b68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f107 0214 	add.w	r2, r7, #20
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f003 fd3f 	bl	800a600 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b90:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d90a      	bls.n	8006bae <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f003 fd9d 	bl	800a6e4 <SDMMC_CmdReadMultiBlock>
 8006baa:	6478      	str	r0, [r7, #68]	; 0x44
 8006bac:	e009      	b.n	8006bc2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fd6f 	bl	800a69e <SDMMC_CmdReadSingleBlock>
 8006bc0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a88      	ldr	r2, [pc, #544]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e0fc      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bf2:	e061      	b.n	8006cb8 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03c      	beq.n	8006c7c <HAL_SD_ReadBlocks+0x1a8>
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d039      	beq.n	8006c7c <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0c:	e033      	b.n	8006c76 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f003 fc6c 	bl	800a4f0 <SDMMC_ReadFIFO>
 8006c18:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c24:	3301      	adds	r3, #1
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	3b01      	subs	r3, #1
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	0c1b      	lsrs	r3, r3, #16
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	3301      	adds	r3, #1
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c56:	3b01      	subs	r3, #1
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	0e1b      	lsrs	r3, r3, #24
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	3301      	adds	r3, #1
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	3301      	adds	r3, #1
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
 8006c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c78:	2b07      	cmp	r3, #7
 8006c7a:	d9c8      	bls.n	8006c0e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c7c:	f7fb fa06 	bl	800208c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d902      	bls.n	8006c92 <HAL_SD_ReadBlocks+0x1be>
 8006c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d112      	bne.n	8006cb8 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a56      	ldr	r2, [pc, #344]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e097      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d096      	beq.n	8006bf4 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d022      	beq.n	8006d2a <HAL_SD_ReadBlocks+0x256>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d91f      	bls.n	8006d2a <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d01b      	beq.n	8006d2a <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f003 fd5e 	bl	800a7b8 <SDMMC_CmdStopTransfer>
 8006cfc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e05e      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d012      	beq.n	8006d5e <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	f043 0208 	orr.w	r2, r3, #8
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e044      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	f043 0202 	orr.w	r2, r3, #2
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e02a      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d012      	beq.n	8006dc6 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <HAL_SD_ReadBlocks+0x31c>)
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	f043 0220 	orr.w	r2, r3, #32
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e010      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <HAL_SD_ReadBlocks+0x320>)
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e006      	b.n	8006de8 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3748      	adds	r7, #72	; 0x48
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	1fe00fff 	.word	0x1fe00fff
 8006df4:	18000f3a 	.word	0x18000f3a

08006df8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b092      	sub	sp, #72	; 0x48
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e06:	f7fb f941 	bl	800208c <HAL_GetTick>
 8006e0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e174      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	f040 8167 	bne.w	8007106 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	441a      	add	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d907      	bls.n	8006e5c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e15b      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2203      	movs	r2, #3
 8006e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d002      	beq.n	8006e7a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	025b      	lsls	r3, r3, #9
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e7e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	025b      	lsls	r3, r3, #9
 8006e84:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e86:	2390      	movs	r3, #144	; 0x90
 8006e88:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f107 0218 	add.w	r2, r7, #24
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f003 fbad 	bl	800a600 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d90a      	bls.n	8006ed2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f003 fc51 	bl	800a770 <SDMMC_CmdWriteMultiBlock>
 8006ece:	6478      	str	r0, [r7, #68]	; 0x44
 8006ed0:	e009      	b.n	8006ee6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f003 fc23 	bl	800a72a <SDMMC_CmdWriteSingleBlock>
 8006ee4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d012      	beq.n	8006f12 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a8a      	ldr	r2, [pc, #552]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e100      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f16:	e065      	b.n	8006fe4 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d040      	beq.n	8006fa8 <HAL_SD_WriteBlocks+0x1b0>
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d03d      	beq.n	8006fa8 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f30:	e037      	b.n	8006fa2 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	3b01      	subs	r3, #1
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	021a      	lsls	r2, r3, #8
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	3301      	adds	r3, #1
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	041a      	lsls	r2, r3, #16
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	3b01      	subs	r3, #1
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	061a      	lsls	r2, r3, #24
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	3301      	adds	r3, #1
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f107 0214 	add.w	r2, r7, #20
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f003 fab7 	bl	800a50a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	2b07      	cmp	r3, #7
 8006fa6:	d9c4      	bls.n	8006f32 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006fa8:	f7fb f870 	bl	800208c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d902      	bls.n	8006fbe <HAL_SD_WriteBlocks+0x1c6>
 8006fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d112      	bne.n	8006fe4 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a56      	ldr	r2, [pc, #344]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e097      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d092      	beq.n	8006f18 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007000:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700c:	2b00      	cmp	r3, #0
 800700e:	d022      	beq.n	8007056 <HAL_SD_WriteBlocks+0x25e>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d91f      	bls.n	8007056 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	2b03      	cmp	r3, #3
 800701c:	d01b      	beq.n	8007056 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f003 fbc8 	bl	800a7b8 <SDMMC_CmdStopTransfer>
 8007028:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a39      	ldr	r2, [pc, #228]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703e:	431a      	orrs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e05e      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2c      	ldr	r2, [pc, #176]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	f043 0208 	orr.w	r2, r3, #8
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e044      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d012      	beq.n	80070be <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	f043 0202 	orr.w	r2, r3, #2
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e02a      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a12      	ldr	r2, [pc, #72]	; (800711c <HAL_SD_WriteBlocks+0x324>)
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	f043 0210 	orr.w	r2, r3, #16
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e010      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <HAL_SD_WriteBlocks+0x328>)
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e006      	b.n	8007114 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3748      	adds	r7, #72	; 0x48
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	1fe00fff 	.word	0x1fe00fff
 8007120:	18000f3a 	.word	0x18000f3a

08007124 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007132:	0f9b      	lsrs	r3, r3, #30
 8007134:	b2da      	uxtb	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713e:	0e9b      	lsrs	r3, r3, #26
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	b2da      	uxtb	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007150:	0e1b      	lsrs	r3, r3, #24
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	b2da      	uxtb	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007162:	0c1b      	lsrs	r3, r3, #16
 8007164:	b2da      	uxtb	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	b2da      	uxtb	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717a:	b2da      	uxtb	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007184:	0d1b      	lsrs	r3, r3, #20
 8007186:	b29a      	uxth	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007190:	0c1b      	lsrs	r3, r3, #16
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	b2da      	uxtb	r2, r3
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a2:	0bdb      	lsrs	r3, r3, #15
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	0b9b      	lsrs	r3, r3, #14
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c6:	0b5b      	lsrs	r3, r3, #13
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d8:	0b1b      	lsrs	r3, r3, #12
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d163      	bne.n	80072bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f8:	009a      	lsls	r2, r3, #2
 80071fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071fe:	4013      	ands	r3, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007204:	0f92      	lsrs	r2, r2, #30
 8007206:	431a      	orrs	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007210:	0edb      	lsrs	r3, r3, #27
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	b2da      	uxtb	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007222:	0e1b      	lsrs	r3, r3, #24
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007234:	0d5b      	lsrs	r3, r3, #21
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007246:	0c9b      	lsrs	r3, r3, #18
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	b2da      	uxtb	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007258:	0bdb      	lsrs	r3, r3, #15
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	b2da      	uxtb	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	7e1b      	ldrb	r3, [r3, #24]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	3302      	adds	r3, #2
 800727c:	2201      	movs	r2, #1
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007286:	fb03 f202 	mul.w	r2, r3, r2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	7a1b      	ldrb	r3, [r3, #8]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072a8:	0a52      	lsrs	r2, r2, #9
 80072aa:	fb03 f202 	mul.w	r2, r3, r2
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b8:	659a      	str	r2, [r3, #88]	; 0x58
 80072ba:	e031      	b.n	8007320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d11d      	bne.n	8007300 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	431a      	orrs	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	3301      	adds	r3, #1
 80072e0:	029a      	lsls	r2, r3, #10
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	659a      	str	r2, [r3, #88]	; 0x58
 80072fe:	e00f      	b.n	8007320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a58      	ldr	r2, [pc, #352]	; (8007468 <HAL_SD_GetCardCSD+0x344>)
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e09d      	b.n	800745c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007324:	0b9b      	lsrs	r3, r3, #14
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	b2da      	uxtb	r2, r3
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007336:	09db      	lsrs	r3, r3, #7
 8007338:	b2db      	uxtb	r3, r3
 800733a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733e:	b2da      	uxtb	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007358:	0fdb      	lsrs	r3, r3, #31
 800735a:	b2da      	uxtb	r2, r3
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007364:	0f5b      	lsrs	r3, r3, #29
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	b2da      	uxtb	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	0e9b      	lsrs	r3, r3, #26
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	b2da      	uxtb	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007388:	0d9b      	lsrs	r3, r3, #22
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	b2da      	uxtb	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739a:	0d5b      	lsrs	r3, r3, #21
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	0bdb      	lsrs	r3, r3, #15
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073de:	0b9b      	lsrs	r3, r3, #14
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f2:	0b5b      	lsrs	r3, r3, #13
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007406:	0b1b      	lsrs	r3, r3, #12
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800741a:	0a9b      	lsrs	r3, r3, #10
 800741c:	b2db      	uxtb	r3, r3
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	b2da      	uxtb	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	b2da      	uxtb	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	b2da      	uxtb	r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	1fe00fff 	.word	0x1fe00fff

0800746c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b094      	sub	sp, #80	; 0x50
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fbd4 	bl	8007c30 <SD_SendSDStatus>
 8007488:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800748a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a4f      	ldr	r2, [pc, #316]	; (80075d4 <HAL_SD_GetCardStatus+0x168>)
 8007496:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80074b2:	e070      	b.n	8007596 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	0e1b      	lsrs	r3, r3, #24
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	061a      	lsls	r2, r3, #24
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007504:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	0e1b      	lsrs	r3, r3, #24
 800750a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	b2da      	uxtb	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	0d1b      	lsrs	r3, r3, #20
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	b29b      	uxth	r3, r3
 8007538:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800753c:	b29a      	uxth	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	b29b      	uxth	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0a9b      	lsrs	r3, r3, #10
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007558:	b2da      	uxtb	r2, r3
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	b2da      	uxtb	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	b2da      	uxtb	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	b2da      	uxtb	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	0e1b      	lsrs	r3, r3, #24
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800759e:	4618      	mov	r0, r3
 80075a0:	f003 f85a 	bl	800a658 <SDMMC_CmdBlockLength>
 80075a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80075a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <HAL_SD_GetCardStatus+0x168>)
 80075b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80075c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3750      	adds	r7, #80	; 0x50
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	1fe00fff 	.word	0x1fe00fff

080075d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007630:	b5b0      	push	{r4, r5, r7, lr}
 8007632:	b090      	sub	sp, #64	; 0x40
 8007634:	af04      	add	r7, sp, #16
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2203      	movs	r2, #3
 8007644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	2b03      	cmp	r3, #3
 800764e:	d02e      	beq.n	80076ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007656:	d106      	bne.n	8007666 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38
 8007664:	e029      	b.n	80076ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800766c:	d10a      	bne.n	8007684 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbd6 	bl	8007e20 <SD_WideBus_Enable>
 8007674:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
 8007682:	e01a      	b.n	80076ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc13 	bl	8007eb6 <SD_WideBus_Disable>
 8007690:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	639a      	str	r2, [r3, #56]	; 0x38
 800769e:	e00c      	b.n	80076ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
 80076ac:	e005      	b.n	80076ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a60      	ldr	r2, [pc, #384]	; (8007848 <HAL_SD_ConfigWideBusOperation+0x218>)
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80076d0:	e097      	b.n	8007802 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80076d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80076d6:	f7fd feb9 	bl	800544c <HAL_RCCEx_GetPeriphCLKFreq>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8086 	beq.w	80077f0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	4952      	ldr	r1, [pc, #328]	; (800784c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007702:	fba1 1303 	umull	r1, r3, r1, r3
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	429a      	cmp	r2, r3
 800770a:	d303      	bcc.n	8007714 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e05a      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d103      	bne.n	8007726 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	e051      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772e:	d126      	bne.n	800777e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10e      	bne.n	8007756 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	4a45      	ldr	r2, [pc, #276]	; (8007850 <HAL_SD_ConfigWideBusOperation+0x220>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d906      	bls.n	800774e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	4a42      	ldr	r2, [pc, #264]	; (800784c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	0e5b      	lsrs	r3, r3, #25
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e03d      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e039      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	4a3b      	ldr	r2, [pc, #236]	; (8007850 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d906      	bls.n	8007776 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	4a38      	ldr	r2, [pc, #224]	; (800784c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	0e5b      	lsrs	r3, r3, #25
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e029      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	e025      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10e      	bne.n	80077a4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	4a32      	ldr	r2, [pc, #200]	; (8007854 <HAL_SD_ConfigWideBusOperation+0x224>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d906      	bls.n	800779c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	4a2e      	ldr	r2, [pc, #184]	; (800784c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	0e1b      	lsrs	r3, r3, #24
 8007798:	61fb      	str	r3, [r7, #28]
 800779a:	e016      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	e012      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	4a28      	ldr	r2, [pc, #160]	; (8007854 <HAL_SD_ConfigWideBusOperation+0x224>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d906      	bls.n	80077c4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	4a24      	ldr	r2, [pc, #144]	; (800784c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	0e1b      	lsrs	r3, r3, #24
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	e002      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681d      	ldr	r5, [r3, #0]
 80077d4:	466c      	mov	r4, sp
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077e2:	f107 030c 	add.w	r3, r7, #12
 80077e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077e8:	4628      	mov	r0, r5
 80077ea:	f002 fe57 	bl	800a49c <SDMMC_Init>
 80077ee:	e008      	b.n	8007802 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800780a:	4618      	mov	r0, r3
 800780c:	f002 ff24 	bl	800a658 <SDMMC_CmdBlockLength>
 8007810:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <HAL_SD_ConfigWideBusOperation+0x218>)
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800783a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800783e:	4618      	mov	r0, r3
 8007840:	3730      	adds	r7, #48	; 0x30
 8007842:	46bd      	mov	sp, r7
 8007844:	bdb0      	pop	{r4, r5, r7, pc}
 8007846:	bf00      	nop
 8007848:	1fe00fff 	.word	0x1fe00fff
 800784c:	55e63b89 	.word	0x55e63b89
 8007850:	02faf080 	.word	0x02faf080
 8007854:	017d7840 	.word	0x017d7840

08007858 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fab0 	bl	8007dd0 <SD_SendStatus>
 8007870:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	0a5b      	lsrs	r3, r3, #9
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800788e:	693b      	ldr	r3, [r7, #16]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007898:	b5b0      	push	{r4, r5, r7, lr}
 800789a:	b090      	sub	sp, #64	; 0x40
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80078a0:	2301      	movs	r3, #1
 80078a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 fe51 	bl	800a550 <SDMMC_GetPowerState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80078b8:	e0a9      	b.n	8007a0e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d02e      	beq.n	8007920 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f003 f896 	bl	800a9f8 <SDMMC_CmdSendCID>
 80078cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80078d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d6:	e09a      	b.n	8007a0e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2100      	movs	r1, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	f002 fe7b 	bl	800a5da <SDMMC_GetResponse>
 80078e4:	4602      	mov	r2, r0
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2104      	movs	r1, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f002 fe72 	bl	800a5da <SDMMC_GetResponse>
 80078f6:	4602      	mov	r2, r0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2108      	movs	r1, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f002 fe69 	bl	800a5da <SDMMC_GetResponse>
 8007908:	4602      	mov	r2, r0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	210c      	movs	r1, #12
 8007914:	4618      	mov	r0, r3
 8007916:	f002 fe60 	bl	800a5da <SDMMC_GetResponse>
 800791a:	4602      	mov	r2, r0
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007924:	2b03      	cmp	r3, #3
 8007926:	d00d      	beq.n	8007944 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f107 020e 	add.w	r2, r7, #14
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f003 f89f 	bl	800aa76 <SDMMC_CmdSetRelAdd>
 8007938:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800793a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <SD_InitCard+0xac>
    {
      return errorstate;
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	e064      	b.n	8007a0e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	2b03      	cmp	r3, #3
 800794a:	d036      	beq.n	80079ba <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800794c:	89fb      	ldrh	r3, [r7, #14]
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795c:	041b      	lsls	r3, r3, #16
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f003 f868 	bl	800aa36 <SDMMC_CmdSendCSD>
 8007966:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <SD_InitCard+0xda>
    {
      return errorstate;
 800796e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007970:	e04d      	b.n	8007a0e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f002 fe2e 	bl	800a5da <SDMMC_GetResponse>
 800797e:	4602      	mov	r2, r0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2104      	movs	r1, #4
 800798a:	4618      	mov	r0, r3
 800798c:	f002 fe25 	bl	800a5da <SDMMC_GetResponse>
 8007990:	4602      	mov	r2, r0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2108      	movs	r1, #8
 800799c:	4618      	mov	r0, r3
 800799e:	f002 fe1c 	bl	800a5da <SDMMC_GetResponse>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	210c      	movs	r1, #12
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fe13 	bl	800a5da <SDMMC_GetResponse>
 80079b4:	4602      	mov	r2, r0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2104      	movs	r1, #4
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 fe0a 	bl	800a5da <SDMMC_GetResponse>
 80079c6:	4603      	mov	r3, r0
 80079c8:	0d1a      	lsrs	r2, r3, #20
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80079ce:	f107 0310 	add.w	r3, r7, #16
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fba5 	bl	8007124 <HAL_SD_GetCardCSD>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079e4:	e013      	b.n	8007a0e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	2200      	movs	r2, #0
 80079f2:	461c      	mov	r4, r3
 80079f4:	4615      	mov	r5, r2
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	4608      	mov	r0, r1
 80079fc:	f002 ff12 	bl	800a824 <SDMMC_CmdSelDesel>
 8007a00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <SD_InitCard+0x174>
  {
    return errorstate;
 8007a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0a:	e000      	b.n	8007a0e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3740      	adds	r7, #64	; 0x40
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007a2c:	f7fa fb2e 	bl	800208c <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f002 ff18 	bl	800a86c <SDMMC_CmdGoIdleState>
 8007a3c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <SD_PowerON+0x30>
  {
    return errorstate;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	e0ed      	b.n	8007c24 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f002 ff2b 	bl	800a8a8 <SDMMC_CmdOperCond>
 8007a52:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 ff01 	bl	800a86c <SDMMC_CmdGoIdleState>
 8007a6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <SD_PowerON+0x64>
    {
      return errorstate;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	e0d6      	b.n	8007c24 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d137      	bne.n	8007af4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 ff2c 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007a90:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02d      	beq.n	8007af4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a9c:	e0c2      	b.n	8007c24 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 ff1f 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007aaa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	e0b6      	b.n	8007c24 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	495c      	ldr	r1, [pc, #368]	; (8007c2c <SD_PowerON+0x214>)
 8007abc:	4618      	mov	r0, r3
 8007abe:	f002 ff36 	bl	800a92e <SDMMC_CmdAppOperCommand>
 8007ac2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ace:	e0a9      	b.n	8007c24 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f002 fd7f 	bl	800a5da <SDMMC_GetResponse>
 8007adc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	0fdb      	lsrs	r3, r3, #31
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <SD_PowerON+0xd2>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <SD_PowerON+0xd4>
 8007aea:	2300      	movs	r3, #0
 8007aec:	61bb      	str	r3, [r7, #24]

    count++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d802      	bhi.n	8007b04 <SD_PowerON+0xec>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0cc      	beq.n	8007a9e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d902      	bls.n	8007b14 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b12:	e087      	b.n	8007c24 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d07e      	beq.n	8007c1c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d17a      	bne.n	8007c22 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d075      	beq.n	8007c22 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b3c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0208 	orr.w	r2, r2, #8
 8007b4c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 fff6 	bl	800ab44 <SDMMC_CmdVoltageSwitch>
 8007b58:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <SD_PowerON+0x162>
        {
          return errorstate;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	e05f      	b.n	8007c24 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b64:	f7fa fa92 	bl	800208c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b72:	d102      	bne.n	8007b7a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b78:	e054      	b.n	8007c24 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b88:	d1ec      	bne.n	8007b64 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba2:	d002      	beq.n	8007baa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007ba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ba8:	e03c      	b.n	8007c24 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007baa:	2001      	movs	r0, #1
 8007bac:	f000 fa9e 	bl	80080ec <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0204 	orr.w	r2, r2, #4
 8007bbe:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007bc0:	e00a      	b.n	8007bd8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bc2:	f7fa fa63 	bl	800208c <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd0:	d102      	bne.n	8007bd8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007bd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bd6:	e025      	b.n	8007c24 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be6:	d1ec      	bne.n	8007bc2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c00:	d102      	bne.n	8007c08 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c06:	e00d      	b.n	8007c24 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2213      	movs	r2, #19
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
 8007c1a:	e002      	b.n	8007c22 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	c1100000 	.word	0xc1100000

08007c30 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08c      	sub	sp, #48	; 0x30
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c3a:	f7fa fa27 	bl	800208c <HAL_GetTick>
 8007c3e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 fcc5 	bl	800a5da <SDMMC_GetResponse>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c5a:	d102      	bne.n	8007c62 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c60:	e0b0      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2140      	movs	r1, #64	; 0x40
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fcf5 	bl	800a658 <SDMMC_CmdBlockLength>
 8007c6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	e0a0      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f002 fe2a 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007c94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	e08d      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007cb2:	2360      	movs	r3, #96	; 0x60
 8007cb4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f107 0208 	add.w	r2, r7, #8
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f002 fc97 	bl	800a600 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f002 ff12 	bl	800ab00 <SDMMC_CmdStatusRegister>
 8007cdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02b      	beq.n	8007d3c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	e069      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d013      	beq.n	8007d26 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007cfe:	2300      	movs	r3, #0
 8007d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d02:	e00d      	b.n	8007d20 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f002 fbf1 	bl	800a4f0 <SDMMC_ReadFIFO>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	601a      	str	r2, [r3, #0]
        pData++;
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	3304      	adds	r3, #4
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b07      	cmp	r3, #7
 8007d24:	d9ee      	bls.n	8007d04 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d26:	f7fa f9b1 	bl	800208c <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d34:	d102      	bne.n	8007d3c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d3a:	e043      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d42:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0d2      	beq.n	8007cf0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d58:	2308      	movs	r3, #8
 8007d5a:	e033      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e02a      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	e021      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fbb3 	bl	800a4f0 <SDMMC_ReadFIFO>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	601a      	str	r2, [r3, #0]
    pData++;
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	3304      	adds	r3, #4
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d96:	f7fa f979 	bl	800208c <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da4:	d102      	bne.n	8007dac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007da6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007daa:	e00b      	b.n	8007dc4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e2      	bne.n	8007d80 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <SD_SendSDStatus+0x19c>)
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3730      	adds	r7, #48	; 0x30
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	18000f3a 	.word	0x18000f3a

08007dd0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007de4:	e018      	b.n	8007e18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f002 fe61 	bl	800aaba <SDMMC_CmdSendStatus>
 8007df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	e009      	b.n	8007e18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 fbe5 	bl	800a5da <SDMMC_GetResponse>
 8007e10:	4602      	mov	r2, r0
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 fbcf 	bl	800a5da <SDMMC_GetResponse>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e46:	d102      	bne.n	8007e4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e4c:	e02f      	b.n	8007eae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e4e:	f107 030c 	add.w	r3, r7, #12
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f879 	bl	8007f4c <SD_FindSCR>
 8007e5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	e023      	b.n	8007eae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01c      	beq.n	8007eaa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e78:	041b      	lsls	r3, r3, #16
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f002 fd33 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007e82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	e00f      	b.n	8007eae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 fd6a 	bl	800a96e <SDMMC_CmdBusWidth>
 8007e9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	e003      	b.n	8007eae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e001      	b.n	8007eae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 fb84 	bl	800a5da <SDMMC_GetResponse>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007edc:	d102      	bne.n	8007ee4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ee2:	e02f      	b.n	8007f44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ee4:	f107 030c 	add.w	r3, r7, #12
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f82e 	bl	8007f4c <SD_FindSCR>
 8007ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	e023      	b.n	8007f44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01c      	beq.n	8007f40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	041b      	lsls	r3, r3, #16
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f002 fce8 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007f18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	e00f      	b.n	8007f44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 fd1f 	bl	800a96e <SDMMC_CmdBusWidth>
 8007f30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	e003      	b.n	8007f44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e001      	b.n	8007f44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f56:	f7fa f899 	bl	800208c <HAL_GetTick>
 8007f5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2108      	movs	r1, #8
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 fb70 	bl	800a658 <SDMMC_CmdBlockLength>
 8007f78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	e0ad      	b.n	80080e0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8c:	041b      	lsls	r3, r3, #16
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f002 fca9 	bl	800a8e8 <SDMMC_CmdAppCommand>
 8007f96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	e09e      	b.n	80080e0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007fa8:	2308      	movs	r3, #8
 8007faa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007fac:	2330      	movs	r3, #48	; 0x30
 8007fae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f107 0210 	add.w	r2, r7, #16
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f002 fb1a 	bl	800a600 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f002 fcef 	bl	800a9b4 <SDMMC_CmdSendSCR>
 8007fd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d027      	beq.n	800802e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	e07e      	b.n	80080e0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d113      	bne.n	8008018 <SD_FindSCR+0xcc>
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d110      	bne.n	8008018 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 fa78 	bl	800a4f0 <SDMMC_ReadFIFO>
 8008000:	4603      	mov	r3, r0
 8008002:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f002 fa71 	bl	800a4f0 <SDMMC_ReadFIFO>
 800800e:	4603      	mov	r3, r0
 8008010:	60fb      	str	r3, [r7, #12]
      index++;
 8008012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008014:	3301      	adds	r3, #1
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008018:	f7fa f838 	bl	800208c <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008026:	d102      	bne.n	800802e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800802c:	e058      	b.n	80080e0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008034:	f240 532a 	movw	r3, #1322	; 0x52a
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0d1      	beq.n	8007fe2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2208      	movs	r2, #8
 8008052:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008054:	2308      	movs	r3, #8
 8008056:	e043      	b.n	80080e0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2202      	movs	r2, #2
 800806c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800806e:	2302      	movs	r3, #2
 8008070:	e036      	b.n	80080e0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2220      	movs	r2, #32
 8008086:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008088:	2320      	movs	r3, #32
 800808a:	e029      	b.n	80080e0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <SD_FindSCR+0x19c>)
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	061a      	lsls	r2, r3, #24
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	021b      	lsls	r3, r3, #8
 800809c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	0a1b      	lsrs	r3, r3, #8
 80080a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80080aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	0e1b      	lsrs	r3, r3, #24
 80080b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	601a      	str	r2, [r3, #0]
    scr++;
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	3304      	adds	r3, #4
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	061a      	lsls	r2, r3, #24
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	0e1b      	lsrs	r3, r3, #24
 80080d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3738      	adds	r7, #56	; 0x38
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	18000f3a 	.word	0x18000f3a

080080ec <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e095      	b.n	8008240 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d108      	bne.n	800812e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008124:	d009      	beq.n	800813a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	61da      	str	r2, [r3, #28]
 800812c:	e005      	b.n	800813a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7f9 fd3f 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008170:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800817a:	d902      	bls.n	8008182 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e002      	b.n	8008188 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008186:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008190:	d007      	beq.n	80081a2 <HAL_SPI_Init+0xa0>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800819a:	d002      	beq.n	80081a2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e4:	ea42 0103 	orr.w	r1, r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	0c1b      	lsrs	r3, r3, #16
 80081fe:	f003 0204 	and.w	r2, r3, #4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800821e:	ea42 0103 	orr.w	r1, r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e049      	b.n	80082ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7f9 fcf4 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f000 fa62 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e049      	b.n	800839c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f841 	bl	80083a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3304      	adds	r3, #4
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f000 fa0b 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0202 	mvn.w	r2, #2
 80083e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f98a 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f97c 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f98d 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b04      	cmp	r3, #4
 8008420:	d122      	bne.n	8008468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b04      	cmp	r3, #4
 800842e:	d11b      	bne.n	8008468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0204 	mvn.w	r2, #4
 8008438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f960 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 8008454:	e005      	b.n	8008462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f952 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f963 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b08      	cmp	r3, #8
 8008474:	d122      	bne.n	80084bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b08      	cmp	r3, #8
 8008482:	d11b      	bne.n	80084bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0208 	mvn.w	r2, #8
 800848c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2204      	movs	r2, #4
 8008492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f936 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f928 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f939 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d122      	bne.n	8008510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b10      	cmp	r3, #16
 80084d6:	d11b      	bne.n	8008510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0210 	mvn.w	r2, #16
 80084e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2208      	movs	r2, #8
 80084e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f90c 	bl	8008714 <HAL_TIM_IC_CaptureCallback>
 80084fc:	e005      	b.n	800850a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8fe 	bl	8008700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f90f 	bl	8008728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b01      	cmp	r3, #1
 800851c:	d10e      	bne.n	800853c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d107      	bne.n	800853c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0201 	mvn.w	r2, #1
 8008534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8d8 	bl	80086ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008546:	2b80      	cmp	r3, #128	; 0x80
 8008548:	d10e      	bne.n	8008568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008554:	2b80      	cmp	r3, #128	; 0x80
 8008556:	d107      	bne.n	8008568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fcec 	bl	8008f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008576:	d10e      	bne.n	8008596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008582:	2b80      	cmp	r3, #128	; 0x80
 8008584:	d107      	bne.n	8008596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800858e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fcdf 	bl	8008f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a0:	2b40      	cmp	r3, #64	; 0x40
 80085a2:	d10e      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d107      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f8bd 	bl	800873c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d10e      	bne.n	80085ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b20      	cmp	r3, #32
 80085dc:	d107      	bne.n	80085ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f06f 0220 	mvn.w	r2, #32
 80085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fc9f 	bl	8008f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008612:	2302      	movs	r3, #2
 8008614:	e066      	b.n	80086e4 <HAL_TIM_OC_ConfigChannel+0xec>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b14      	cmp	r3, #20
 8008622:	d857      	bhi.n	80086d4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008681 	.word	0x08008681
 8008630:	080086d5 	.word	0x080086d5
 8008634:	080086d5 	.word	0x080086d5
 8008638:	080086d5 	.word	0x080086d5
 800863c:	0800868f 	.word	0x0800868f
 8008640:	080086d5 	.word	0x080086d5
 8008644:	080086d5 	.word	0x080086d5
 8008648:	080086d5 	.word	0x080086d5
 800864c:	0800869d 	.word	0x0800869d
 8008650:	080086d5 	.word	0x080086d5
 8008654:	080086d5 	.word	0x080086d5
 8008658:	080086d5 	.word	0x080086d5
 800865c:	080086ab 	.word	0x080086ab
 8008660:	080086d5 	.word	0x080086d5
 8008664:	080086d5 	.word	0x080086d5
 8008668:	080086d5 	.word	0x080086d5
 800866c:	080086b9 	.word	0x080086b9
 8008670:	080086d5 	.word	0x080086d5
 8008674:	080086d5 	.word	0x080086d5
 8008678:	080086d5 	.word	0x080086d5
 800867c:	080086c7 	.word	0x080086c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f8fc 	bl	8008884 <TIM_OC1_SetConfig>
      break;
 800868c:	e025      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f985 	bl	80089a4 <TIM_OC2_SetConfig>
      break;
 800869a:	e01e      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fa08 	bl	8008ab8 <TIM_OC3_SetConfig>
      break;
 80086a8:	e017      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fa89 	bl	8008bc8 <TIM_OC4_SetConfig>
      break;
 80086b6:	e010      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 faec 	bl	8008c9c <TIM_OC5_SetConfig>
      break;
 80086c4:	e009      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fb49 	bl	8008d64 <TIM_OC6_SetConfig>
      break;
 80086d2:	e002      	b.n	80086da <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
      break;
 80086d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a40      	ldr	r2, [pc, #256]	; (8008864 <TIM_Base_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876e:	d00f      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3d      	ldr	r2, [pc, #244]	; (8008868 <TIM_Base_SetConfig+0x118>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00b      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3c      	ldr	r2, [pc, #240]	; (800886c <TIM_Base_SetConfig+0x11c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a3b      	ldr	r2, [pc, #236]	; (8008870 <TIM_Base_SetConfig+0x120>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a3a      	ldr	r2, [pc, #232]	; (8008874 <TIM_Base_SetConfig+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d108      	bne.n	80087a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2f      	ldr	r2, [pc, #188]	; (8008864 <TIM_Base_SetConfig+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01f      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b0:	d01b      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2c      	ldr	r2, [pc, #176]	; (8008868 <TIM_Base_SetConfig+0x118>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d017      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a2b      	ldr	r2, [pc, #172]	; (800886c <TIM_Base_SetConfig+0x11c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2a      	ldr	r2, [pc, #168]	; (8008870 <TIM_Base_SetConfig+0x120>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00f      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a29      	ldr	r2, [pc, #164]	; (8008874 <TIM_Base_SetConfig+0x124>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00b      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a28      	ldr	r2, [pc, #160]	; (8008878 <TIM_Base_SetConfig+0x128>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d007      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <TIM_Base_SetConfig+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <TIM_Base_SetConfig+0x9a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a26      	ldr	r2, [pc, #152]	; (8008880 <TIM_Base_SetConfig+0x130>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d108      	bne.n	80087fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a10      	ldr	r2, [pc, #64]	; (8008864 <TIM_Base_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00f      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a12      	ldr	r2, [pc, #72]	; (8008874 <TIM_Base_SetConfig+0x124>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00b      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <TIM_Base_SetConfig+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d007      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a10      	ldr	r2, [pc, #64]	; (800887c <TIM_Base_SetConfig+0x12c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <TIM_Base_SetConfig+0x130>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d103      	bne.n	8008850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	615a      	str	r2, [r3, #20]
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	40012c00 	.word	0x40012c00
 8008868:	40000400 	.word	0x40000400
 800886c:	40000800 	.word	0x40000800
 8008870:	40000c00 	.word	0x40000c00
 8008874:	40013400 	.word	0x40013400
 8008878:	40014000 	.word	0x40014000
 800887c:	40014400 	.word	0x40014400
 8008880:	40014800 	.word	0x40014800

08008884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f023 0201 	bic.w	r2, r3, #1
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0303 	bic.w	r3, r3, #3
 80088be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f023 0302 	bic.w	r3, r3, #2
 80088d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4313      	orrs	r3, r2
 80088da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <TIM_OC1_SetConfig+0x10c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00f      	beq.n	8008904 <TIM_OC1_SetConfig+0x80>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <TIM_OC1_SetConfig+0x110>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00b      	beq.n	8008904 <TIM_OC1_SetConfig+0x80>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a2a      	ldr	r2, [pc, #168]	; (8008998 <TIM_OC1_SetConfig+0x114>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_OC1_SetConfig+0x80>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a29      	ldr	r2, [pc, #164]	; (800899c <TIM_OC1_SetConfig+0x118>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC1_SetConfig+0x80>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <TIM_OC1_SetConfig+0x11c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10c      	bne.n	800891e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0308 	bic.w	r3, r3, #8
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f023 0304 	bic.w	r3, r3, #4
 800891c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <TIM_OC1_SetConfig+0x10c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00f      	beq.n	8008946 <TIM_OC1_SetConfig+0xc2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a1a      	ldr	r2, [pc, #104]	; (8008994 <TIM_OC1_SetConfig+0x110>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00b      	beq.n	8008946 <TIM_OC1_SetConfig+0xc2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a19      	ldr	r2, [pc, #100]	; (8008998 <TIM_OC1_SetConfig+0x114>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d007      	beq.n	8008946 <TIM_OC1_SetConfig+0xc2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a18      	ldr	r2, [pc, #96]	; (800899c <TIM_OC1_SetConfig+0x118>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_OC1_SetConfig+0xc2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a17      	ldr	r2, [pc, #92]	; (80089a0 <TIM_OC1_SetConfig+0x11c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d111      	bne.n	800896a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800894c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	621a      	str	r2, [r3, #32]
}
 8008984:	bf00      	nop
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	40012c00 	.word	0x40012c00
 8008994:	40013400 	.word	0x40013400
 8008998:	40014000 	.word	0x40014000
 800899c:	40014400 	.word	0x40014400
 80089a0:	40014800 	.word	0x40014800

080089a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0210 	bic.w	r2, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a28      	ldr	r2, [pc, #160]	; (8008aa4 <TIM_OC2_SetConfig+0x100>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_OC2_SetConfig+0x6c>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a27      	ldr	r2, [pc, #156]	; (8008aa8 <TIM_OC2_SetConfig+0x104>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10d      	bne.n	8008a2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <TIM_OC2_SetConfig+0x100>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00f      	beq.n	8008a54 <TIM_OC2_SetConfig+0xb0>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a1c      	ldr	r2, [pc, #112]	; (8008aa8 <TIM_OC2_SetConfig+0x104>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00b      	beq.n	8008a54 <TIM_OC2_SetConfig+0xb0>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1b      	ldr	r2, [pc, #108]	; (8008aac <TIM_OC2_SetConfig+0x108>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_OC2_SetConfig+0xb0>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1a      	ldr	r2, [pc, #104]	; (8008ab0 <TIM_OC2_SetConfig+0x10c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC2_SetConfig+0xb0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a19      	ldr	r2, [pc, #100]	; (8008ab4 <TIM_OC2_SetConfig+0x110>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d113      	bne.n	8008a7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	621a      	str	r2, [r3, #32]
}
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40013400 	.word	0x40013400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40014400 	.word	0x40014400
 8008ab4:	40014800 	.word	0x40014800

08008ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0303 	bic.w	r3, r3, #3
 8008af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a27      	ldr	r2, [pc, #156]	; (8008bb4 <TIM_OC3_SetConfig+0xfc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d003      	beq.n	8008b22 <TIM_OC3_SetConfig+0x6a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a26      	ldr	r2, [pc, #152]	; (8008bb8 <TIM_OC3_SetConfig+0x100>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10d      	bne.n	8008b3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1c      	ldr	r2, [pc, #112]	; (8008bb4 <TIM_OC3_SetConfig+0xfc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00f      	beq.n	8008b66 <TIM_OC3_SetConfig+0xae>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1b      	ldr	r2, [pc, #108]	; (8008bb8 <TIM_OC3_SetConfig+0x100>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00b      	beq.n	8008b66 <TIM_OC3_SetConfig+0xae>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <TIM_OC3_SetConfig+0x104>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d007      	beq.n	8008b66 <TIM_OC3_SetConfig+0xae>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a19      	ldr	r2, [pc, #100]	; (8008bc0 <TIM_OC3_SetConfig+0x108>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d003      	beq.n	8008b66 <TIM_OC3_SetConfig+0xae>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <TIM_OC3_SetConfig+0x10c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d113      	bne.n	8008b8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	621a      	str	r2, [r3, #32]
}
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40012c00 	.word	0x40012c00
 8008bb8:	40013400 	.word	0x40013400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40014400 	.word	0x40014400
 8008bc4:	40014800 	.word	0x40014800

08008bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	021b      	lsls	r3, r3, #8
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	031b      	lsls	r3, r3, #12
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <TIM_OC4_SetConfig+0xc0>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00f      	beq.n	8008c4c <TIM_OC4_SetConfig+0x84>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a17      	ldr	r2, [pc, #92]	; (8008c8c <TIM_OC4_SetConfig+0xc4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <TIM_OC4_SetConfig+0x84>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a16      	ldr	r2, [pc, #88]	; (8008c90 <TIM_OC4_SetConfig+0xc8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d007      	beq.n	8008c4c <TIM_OC4_SetConfig+0x84>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <TIM_OC4_SetConfig+0xcc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_OC4_SetConfig+0x84>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a14      	ldr	r2, [pc, #80]	; (8008c98 <TIM_OC4_SetConfig+0xd0>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d109      	bne.n	8008c60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	019b      	lsls	r3, r3, #6
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40014400 	.word	0x40014400
 8008c98:	40014800 	.word	0x40014800

08008c9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <TIM_OC5_SetConfig+0xb4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00f      	beq.n	8008d16 <TIM_OC5_SetConfig+0x7a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <TIM_OC5_SetConfig+0xb8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00b      	beq.n	8008d16 <TIM_OC5_SetConfig+0x7a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <TIM_OC5_SetConfig+0xbc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d007      	beq.n	8008d16 <TIM_OC5_SetConfig+0x7a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a14      	ldr	r2, [pc, #80]	; (8008d5c <TIM_OC5_SetConfig+0xc0>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d003      	beq.n	8008d16 <TIM_OC5_SetConfig+0x7a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <TIM_OC5_SetConfig+0xc4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d109      	bne.n	8008d2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	621a      	str	r2, [r3, #32]
}
 8008d44:	bf00      	nop
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	40012c00 	.word	0x40012c00
 8008d54:	40013400 	.word	0x40013400
 8008d58:	40014000 	.word	0x40014000
 8008d5c:	40014400 	.word	0x40014400
 8008d60:	40014800 	.word	0x40014800

08008d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	051b      	lsls	r3, r3, #20
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <TIM_OC6_SetConfig+0xb8>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00f      	beq.n	8008de0 <TIM_OC6_SetConfig+0x7c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <TIM_OC6_SetConfig+0xbc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <TIM_OC6_SetConfig+0x7c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <TIM_OC6_SetConfig+0xc0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d007      	beq.n	8008de0 <TIM_OC6_SetConfig+0x7c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <TIM_OC6_SetConfig+0xc4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d003      	beq.n	8008de0 <TIM_OC6_SetConfig+0x7c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a14      	ldr	r2, [pc, #80]	; (8008e2c <TIM_OC6_SetConfig+0xc8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d109      	bne.n	8008df4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	029b      	lsls	r3, r3, #10
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	40013400 	.word	0x40013400
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400
 8008e2c:	40014800 	.word	0x40014800

08008e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e065      	b.n	8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a16      	ldr	r2, [pc, #88]	; (8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d004      	beq.n	8008eda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a14      	ldr	r2, [pc, #80]	; (8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d115      	bne.n	8008f06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	051b      	lsls	r3, r3, #20
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	40012c00 	.word	0x40012c00
 8008f28:	40013400 	.word	0x40013400

08008f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e042      	b.n	8009000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7f8 fe85 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2224      	movs	r2, #36	; 0x24
 8008f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0201 	bic.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fbfc 	bl	80097a8 <UART_SetConfig>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e022      	b.n	8009000 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 feec 	bl	8009da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 ff73 	bl	8009ee4 <UART_CheckIdleState>
 8008ffe:	4603      	mov	r3, r0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af02      	add	r7, sp, #8
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800901e:	2b20      	cmp	r3, #32
 8009020:	f040 8084 	bne.w	800912c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_UART_Transmit+0x28>
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e07c      	b.n	800912e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_UART_Transmit+0x3a>
 800903e:	2302      	movs	r3, #2
 8009040:	e075      	b.n	800912e <HAL_UART_Transmit+0x126>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2221      	movs	r2, #33	; 0x21
 8009056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800905a:	f7f9 f817 	bl	800208c <HAL_GetTick>
 800905e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	88fa      	ldrh	r2, [r7, #6]
 800906c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009078:	d108      	bne.n	800908c <HAL_UART_Transmit+0x84>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e003      	b.n	8009094 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800909c:	e02d      	b.n	80090fa <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2200      	movs	r2, #0
 80090a6:	2180      	movs	r1, #128	; 0x80
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 ff66 	bl	8009f7a <UART_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e03a      	b.n	800912e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10b      	bne.n	80090d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	881a      	ldrh	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ca:	b292      	uxth	r2, r2
 80090cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3302      	adds	r3, #2
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	e008      	b.n	80090e8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	b292      	uxth	r2, r2
 80090e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3301      	adds	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1cb      	bne.n	800909e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2200      	movs	r2, #0
 800910e:	2140      	movs	r1, #64	; 0x40
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 ff32 	bl	8009f7a <UART_WaitOnFlagUntilTimeout>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e006      	b.n	800912e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	e000      	b.n	800912e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800912c:	2302      	movs	r3, #2
  }
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b0ba      	sub	sp, #232	; 0xe8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800915e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009162:	f640 030f 	movw	r3, #2063	; 0x80f
 8009166:	4013      	ands	r3, r2
 8009168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800916c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11b      	bne.n	80091ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	d015      	beq.n	80091ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d105      	bne.n	8009198 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800918c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d009      	beq.n	80091ac <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 82d6 	beq.w	800974e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
      }
      return;
 80091aa:	e2d0      	b.n	800974e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80091ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 811f 	beq.w	80093f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091ba:	4b8b      	ldr	r3, [pc, #556]	; (80093e8 <HAL_UART_IRQHandler+0x2b0>)
 80091bc:	4013      	ands	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091c6:	4b89      	ldr	r3, [pc, #548]	; (80093ec <HAL_UART_IRQHandler+0x2b4>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8112 	beq.w	80093f4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d011      	beq.n	8009200 <HAL_UART_IRQHandler+0xc8>
 80091dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2201      	movs	r2, #1
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f6:	f043 0201 	orr.w	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d011      	beq.n	8009230 <HAL_UART_IRQHandler+0xf8>
 800920c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2202      	movs	r2, #2
 800921e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009226:	f043 0204 	orr.w	r2, r3, #4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d011      	beq.n	8009260 <HAL_UART_IRQHandler+0x128>
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2204      	movs	r2, #4
 800924e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009256:	f043 0202 	orr.w	r2, r3, #2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d017      	beq.n	800929c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800926c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800927c:	4b5a      	ldr	r3, [pc, #360]	; (80093e8 <HAL_UART_IRQHandler+0x2b0>)
 800927e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2208      	movs	r2, #8
 800928a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009292:	f043 0208 	orr.w	r2, r3, #8
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800929c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d012      	beq.n	80092ce <HAL_UART_IRQHandler+0x196>
 80092a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00c      	beq.n	80092ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c4:	f043 0220 	orr.w	r2, r3, #32
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 823c 	beq.w	8009752 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d013      	beq.n	800930e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d005      	beq.n	8009332 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800932a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800932e:	2b00      	cmp	r3, #0
 8009330:	d04f      	beq.n	80093d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fee9 	bl	800a10a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d141      	bne.n	80093ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800935c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800937e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800938a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1d9      	bne.n	8009346 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939e:	4a14      	ldr	r2, [pc, #80]	; (80093f0 <HAL_UART_IRQHandler+0x2b8>)
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f9 f80d 	bl	80023c6 <HAL_DMA_Abort_IT>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d017      	beq.n	80093e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c0:	e00f      	b.n	80093e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9da 	bl	800977c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c8:	e00b      	b.n	80093e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f9d6 	bl	800977c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d0:	e007      	b.n	80093e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9d2 	bl	800977c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80093e0:	e1b7      	b.n	8009752 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e2:	bf00      	nop
    return;
 80093e4:	e1b5      	b.n	8009752 <HAL_UART_IRQHandler+0x61a>
 80093e6:	bf00      	nop
 80093e8:	10000001 	.word	0x10000001
 80093ec:	04000120 	.word	0x04000120
 80093f0:	0800a1d7 	.word	0x0800a1d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	f040 814a 	bne.w	8009692 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009402:	f003 0310 	and.w	r3, r3, #16
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8143 	beq.w	8009692 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 813c 	beq.w	8009692 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	f040 80b5 	bne.w	800959c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800943e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 8187 	beq.w	8009756 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800944e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009452:	429a      	cmp	r2, r3
 8009454:	f080 817f 	bcs.w	8009756 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800945e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 8086 	bne.w	8009580 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800948c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800949e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1da      	bne.n	8009474 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e1      	bne.n	80094be <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800950a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800950c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800951e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800952c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e3      	bne.n	80094fa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800954e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009550:	f023 0310 	bic.w	r3, r3, #16
 8009554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009562:	65bb      	str	r3, [r7, #88]	; 0x58
 8009564:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e4      	bne.n	8009540 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957a:	4618      	mov	r0, r3
 800957c:	f7f8 fec7 	bl	800230e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800958c:	b29b      	uxth	r3, r3
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	b29b      	uxth	r3, r3
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8fb 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800959a:	e0dc      	b.n	8009756 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80ce 	beq.w	800975a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80095be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 80c9 	beq.w	800975a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ea:	647b      	str	r3, [r7, #68]	; 0x44
 80095ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e4      	bne.n	80095c8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	623b      	str	r3, [r7, #32]
   return(result);
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009626:	633a      	str	r2, [r7, #48]	; 0x30
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800962c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e1      	bne.n	80095fe <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	60fb      	str	r3, [r7, #12]
   return(result);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0310 	bic.w	r3, r3, #16
 8009662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009674:	69b9      	ldr	r1, [r7, #24]
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	e841 2300 	strex	r3, r2, [r1]
 800967c:	617b      	str	r3, [r7, #20]
   return(result);
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f880 	bl	8009790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009690:	e063      	b.n	800975a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00e      	beq.n	80096bc <HAL_UART_IRQHandler+0x584>
 800969e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d008      	beq.n	80096bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fdcf 	bl	800a258 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ba:	e051      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d014      	beq.n	80096f2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d03a      	beq.n	800975e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
    }
    return;
 80096f0:	e035      	b.n	800975e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_UART_IRQHandler+0x5da>
 80096fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fd79 	bl	800a202 <UART_EndTransmit_IT>
    return;
 8009710:	e026      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d009      	beq.n	8009732 <HAL_UART_IRQHandler+0x5fa>
 800971e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009722:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fda8 	bl	800a280 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009730:	e016      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d010      	beq.n	8009760 <HAL_UART_IRQHandler+0x628>
 800973e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009742:	2b00      	cmp	r3, #0
 8009744:	da0c      	bge.n	8009760 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fd90 	bl	800a26c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800974c:	e008      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
      return;
 800974e:	bf00      	nop
 8009750:	e006      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
    return;
 8009752:	bf00      	nop
 8009754:	e004      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
      return;
 8009756:	bf00      	nop
 8009758:	e002      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
      return;
 800975a:	bf00      	nop
 800975c:	e000      	b.n	8009760 <HAL_UART_IRQHandler+0x628>
    return;
 800975e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009760:	37e8      	adds	r7, #232	; 0xe8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop

08009768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097ac:	b08c      	sub	sp, #48	; 0x30
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4baa      	ldr	r3, [pc, #680]	; (8009a80 <UART_SetConfig+0x2d8>)
 80097d8:	4013      	ands	r3, r2
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a9f      	ldr	r2, [pc, #636]	; (8009a84 <UART_SetConfig+0x2dc>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009810:	4313      	orrs	r3, r2
 8009812:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800981e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	6812      	ldr	r2, [r2, #0]
 8009826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009828:	430b      	orrs	r3, r1
 800982a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	f023 010f 	bic.w	r1, r3, #15
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a90      	ldr	r2, [pc, #576]	; (8009a88 <UART_SetConfig+0x2e0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d125      	bne.n	8009898 <UART_SetConfig+0xf0>
 800984c:	4b8f      	ldr	r3, [pc, #572]	; (8009a8c <UART_SetConfig+0x2e4>)
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	2b03      	cmp	r3, #3
 8009858:	d81a      	bhi.n	8009890 <UART_SetConfig+0xe8>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <UART_SetConfig+0xb8>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	08009871 	.word	0x08009871
 8009864:	08009881 	.word	0x08009881
 8009868:	08009879 	.word	0x08009879
 800986c:	08009889 	.word	0x08009889
 8009870:	2301      	movs	r3, #1
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009876:	e116      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009878:	2302      	movs	r3, #2
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987e:	e112      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009880:	2304      	movs	r3, #4
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009886:	e10e      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009888:	2308      	movs	r3, #8
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988e:	e10a      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009890:	2310      	movs	r3, #16
 8009892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009896:	e106      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a7c      	ldr	r2, [pc, #496]	; (8009a90 <UART_SetConfig+0x2e8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d138      	bne.n	8009914 <UART_SetConfig+0x16c>
 80098a2:	4b7a      	ldr	r3, [pc, #488]	; (8009a8c <UART_SetConfig+0x2e4>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	f003 030c 	and.w	r3, r3, #12
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	d82d      	bhi.n	800990c <UART_SetConfig+0x164>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <UART_SetConfig+0x110>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098ed 	.word	0x080098ed
 80098bc:	0800990d 	.word	0x0800990d
 80098c0:	0800990d 	.word	0x0800990d
 80098c4:	0800990d 	.word	0x0800990d
 80098c8:	080098fd 	.word	0x080098fd
 80098cc:	0800990d 	.word	0x0800990d
 80098d0:	0800990d 	.word	0x0800990d
 80098d4:	0800990d 	.word	0x0800990d
 80098d8:	080098f5 	.word	0x080098f5
 80098dc:	0800990d 	.word	0x0800990d
 80098e0:	0800990d 	.word	0x0800990d
 80098e4:	0800990d 	.word	0x0800990d
 80098e8:	08009905 	.word	0x08009905
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098f2:	e0d8      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80098f4:	2302      	movs	r3, #2
 80098f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098fa:	e0d4      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80098fc:	2304      	movs	r3, #4
 80098fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009902:	e0d0      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009904:	2308      	movs	r3, #8
 8009906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800990a:	e0cc      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 800990c:	2310      	movs	r3, #16
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009912:	e0c8      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a5e      	ldr	r2, [pc, #376]	; (8009a94 <UART_SetConfig+0x2ec>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d125      	bne.n	800996a <UART_SetConfig+0x1c2>
 800991e:	4b5b      	ldr	r3, [pc, #364]	; (8009a8c <UART_SetConfig+0x2e4>)
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009928:	2b30      	cmp	r3, #48	; 0x30
 800992a:	d016      	beq.n	800995a <UART_SetConfig+0x1b2>
 800992c:	2b30      	cmp	r3, #48	; 0x30
 800992e:	d818      	bhi.n	8009962 <UART_SetConfig+0x1ba>
 8009930:	2b20      	cmp	r3, #32
 8009932:	d00a      	beq.n	800994a <UART_SetConfig+0x1a2>
 8009934:	2b20      	cmp	r3, #32
 8009936:	d814      	bhi.n	8009962 <UART_SetConfig+0x1ba>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <UART_SetConfig+0x19a>
 800993c:	2b10      	cmp	r3, #16
 800993e:	d008      	beq.n	8009952 <UART_SetConfig+0x1aa>
 8009940:	e00f      	b.n	8009962 <UART_SetConfig+0x1ba>
 8009942:	2300      	movs	r3, #0
 8009944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009948:	e0ad      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 800994a:	2302      	movs	r3, #2
 800994c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009950:	e0a9      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009952:	2304      	movs	r3, #4
 8009954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009958:	e0a5      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 800995a:	2308      	movs	r3, #8
 800995c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009960:	e0a1      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009962:	2310      	movs	r3, #16
 8009964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009968:	e09d      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a4a      	ldr	r2, [pc, #296]	; (8009a98 <UART_SetConfig+0x2f0>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d125      	bne.n	80099c0 <UART_SetConfig+0x218>
 8009974:	4b45      	ldr	r3, [pc, #276]	; (8009a8c <UART_SetConfig+0x2e4>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800997e:	2bc0      	cmp	r3, #192	; 0xc0
 8009980:	d016      	beq.n	80099b0 <UART_SetConfig+0x208>
 8009982:	2bc0      	cmp	r3, #192	; 0xc0
 8009984:	d818      	bhi.n	80099b8 <UART_SetConfig+0x210>
 8009986:	2b80      	cmp	r3, #128	; 0x80
 8009988:	d00a      	beq.n	80099a0 <UART_SetConfig+0x1f8>
 800998a:	2b80      	cmp	r3, #128	; 0x80
 800998c:	d814      	bhi.n	80099b8 <UART_SetConfig+0x210>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <UART_SetConfig+0x1f0>
 8009992:	2b40      	cmp	r3, #64	; 0x40
 8009994:	d008      	beq.n	80099a8 <UART_SetConfig+0x200>
 8009996:	e00f      	b.n	80099b8 <UART_SetConfig+0x210>
 8009998:	2300      	movs	r3, #0
 800999a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800999e:	e082      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80099a0:	2302      	movs	r3, #2
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099a6:	e07e      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80099a8:	2304      	movs	r3, #4
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ae:	e07a      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80099b0:	2308      	movs	r3, #8
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099b6:	e076      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80099b8:	2310      	movs	r3, #16
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099be:	e072      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a35      	ldr	r2, [pc, #212]	; (8009a9c <UART_SetConfig+0x2f4>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d12a      	bne.n	8009a20 <UART_SetConfig+0x278>
 80099ca:	4b30      	ldr	r3, [pc, #192]	; (8009a8c <UART_SetConfig+0x2e4>)
 80099cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d8:	d01a      	beq.n	8009a10 <UART_SetConfig+0x268>
 80099da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099de:	d81b      	bhi.n	8009a18 <UART_SetConfig+0x270>
 80099e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e4:	d00c      	beq.n	8009a00 <UART_SetConfig+0x258>
 80099e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ea:	d815      	bhi.n	8009a18 <UART_SetConfig+0x270>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <UART_SetConfig+0x250>
 80099f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f4:	d008      	beq.n	8009a08 <UART_SetConfig+0x260>
 80099f6:	e00f      	b.n	8009a18 <UART_SetConfig+0x270>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099fe:	e052      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a00:	2302      	movs	r3, #2
 8009a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a06:	e04e      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a0e:	e04a      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a16:	e046      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a1e:	e042      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a17      	ldr	r2, [pc, #92]	; (8009a84 <UART_SetConfig+0x2dc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d13a      	bne.n	8009aa0 <UART_SetConfig+0x2f8>
 8009a2a:	4b18      	ldr	r3, [pc, #96]	; (8009a8c <UART_SetConfig+0x2e4>)
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a38:	d01a      	beq.n	8009a70 <UART_SetConfig+0x2c8>
 8009a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a3e:	d81b      	bhi.n	8009a78 <UART_SetConfig+0x2d0>
 8009a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a44:	d00c      	beq.n	8009a60 <UART_SetConfig+0x2b8>
 8009a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a4a:	d815      	bhi.n	8009a78 <UART_SetConfig+0x2d0>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <UART_SetConfig+0x2b0>
 8009a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a54:	d008      	beq.n	8009a68 <UART_SetConfig+0x2c0>
 8009a56:	e00f      	b.n	8009a78 <UART_SetConfig+0x2d0>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a5e:	e022      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a60:	2302      	movs	r3, #2
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a66:	e01e      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a6e:	e01a      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a76:	e016      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a7e:	e012      	b.n	8009aa6 <UART_SetConfig+0x2fe>
 8009a80:	cfff69f3 	.word	0xcfff69f3
 8009a84:	40008000 	.word	0x40008000
 8009a88:	40013800 	.word	0x40013800
 8009a8c:	40021000 	.word	0x40021000
 8009a90:	40004400 	.word	0x40004400
 8009a94:	40004800 	.word	0x40004800
 8009a98:	40004c00 	.word	0x40004c00
 8009a9c:	40005000 	.word	0x40005000
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4aae      	ldr	r2, [pc, #696]	; (8009d64 <UART_SetConfig+0x5bc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	f040 8097 	bne.w	8009be0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ab6:	2b08      	cmp	r3, #8
 8009ab8:	d823      	bhi.n	8009b02 <UART_SetConfig+0x35a>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <UART_SetConfig+0x318>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009b03 	.word	0x08009b03
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009b03 	.word	0x08009b03
 8009ad0:	08009af3 	.word	0x08009af3
 8009ad4:	08009b03 	.word	0x08009b03
 8009ad8:	08009b03 	.word	0x08009b03
 8009adc:	08009b03 	.word	0x08009b03
 8009ae0:	08009afb 	.word	0x08009afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae4:	f7fb f86a 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009aea:	e010      	b.n	8009b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aec:	4b9e      	ldr	r3, [pc, #632]	; (8009d68 <UART_SetConfig+0x5c0>)
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009af0:	e00d      	b.n	8009b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009af2:	f7fa ffcb 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8009af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009af8:	e009      	b.n	8009b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b00:	e005      	b.n	8009b0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 8130 	beq.w	8009d76 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	4a94      	ldr	r2, [pc, #592]	; (8009d6c <UART_SetConfig+0x5c4>)
 8009b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	4413      	add	r3, r2
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d305      	bcc.n	8009b46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d903      	bls.n	8009b4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b4c:	e113      	b.n	8009d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	2200      	movs	r2, #0
 8009b52:	60bb      	str	r3, [r7, #8]
 8009b54:	60fa      	str	r2, [r7, #12]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	4a84      	ldr	r2, [pc, #528]	; (8009d6c <UART_SetConfig+0x5c4>)
 8009b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2200      	movs	r2, #0
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b70:	f7f7 f832 	bl	8000bd8 <__aeabi_uldivmod>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	020b      	lsls	r3, r1, #8
 8009b86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b8a:	0202      	lsls	r2, r0, #8
 8009b8c:	6979      	ldr	r1, [r7, #20]
 8009b8e:	6849      	ldr	r1, [r1, #4]
 8009b90:	0849      	lsrs	r1, r1, #1
 8009b92:	2000      	movs	r0, #0
 8009b94:	460c      	mov	r4, r1
 8009b96:	4605      	mov	r5, r0
 8009b98:	eb12 0804 	adds.w	r8, r2, r4
 8009b9c:	eb43 0905 	adc.w	r9, r3, r5
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	469a      	mov	sl, r3
 8009ba8:	4693      	mov	fp, r2
 8009baa:	4652      	mov	r2, sl
 8009bac:	465b      	mov	r3, fp
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f7 f811 	bl	8000bd8 <__aeabi_uldivmod>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4613      	mov	r3, r2
 8009bbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc4:	d308      	bcc.n	8009bd8 <UART_SetConfig+0x430>
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bcc:	d204      	bcs.n	8009bd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6a3a      	ldr	r2, [r7, #32]
 8009bd4:	60da      	str	r2, [r3, #12]
 8009bd6:	e0ce      	b.n	8009d76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009bde:	e0ca      	b.n	8009d76 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be8:	d166      	bne.n	8009cb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d827      	bhi.n	8009c42 <UART_SetConfig+0x49a>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <UART_SetConfig+0x450>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	08009c43 	.word	0x08009c43
 8009c08:	08009c33 	.word	0x08009c33
 8009c0c:	08009c43 	.word	0x08009c43
 8009c10:	08009c43 	.word	0x08009c43
 8009c14:	08009c43 	.word	0x08009c43
 8009c18:	08009c3b 	.word	0x08009c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c1c:	f7fa ffce 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8009c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c22:	e014      	b.n	8009c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c24:	f7fa ffe0 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 8009c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c2a:	e010      	b.n	8009c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c2c:	4b4e      	ldr	r3, [pc, #312]	; (8009d68 <UART_SetConfig+0x5c0>)
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c30:	e00d      	b.n	8009c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c32:	f7fa ff2b 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c38:	e009      	b.n	8009c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c40:	e005      	b.n	8009c4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8090 	beq.w	8009d76 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	4a44      	ldr	r2, [pc, #272]	; (8009d6c <UART_SetConfig+0x5c4>)
 8009c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c68:	005a      	lsls	r2, r3, #1
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	085b      	lsrs	r3, r3, #1
 8009c70:	441a      	add	r2, r3
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	d916      	bls.n	8009cb0 <UART_SetConfig+0x508>
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c88:	d212      	bcs.n	8009cb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f023 030f 	bic.w	r3, r3, #15
 8009c92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	085b      	lsrs	r3, r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	8bfb      	ldrh	r3, [r7, #30]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	8bfa      	ldrh	r2, [r7, #30]
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	e062      	b.n	8009d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cb6:	e05e      	b.n	8009d76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d828      	bhi.n	8009d12 <UART_SetConfig+0x56a>
 8009cc0:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <UART_SetConfig+0x520>)
 8009cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc6:	bf00      	nop
 8009cc8:	08009ced 	.word	0x08009ced
 8009ccc:	08009cf5 	.word	0x08009cf5
 8009cd0:	08009cfd 	.word	0x08009cfd
 8009cd4:	08009d13 	.word	0x08009d13
 8009cd8:	08009d03 	.word	0x08009d03
 8009cdc:	08009d13 	.word	0x08009d13
 8009ce0:	08009d13 	.word	0x08009d13
 8009ce4:	08009d13 	.word	0x08009d13
 8009ce8:	08009d0b 	.word	0x08009d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cec:	f7fa ff66 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8009cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cf2:	e014      	b.n	8009d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf4:	f7fa ff78 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 8009cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cfa:	e010      	b.n	8009d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cfc:	4b1a      	ldr	r3, [pc, #104]	; (8009d68 <UART_SetConfig+0x5c0>)
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d00:	e00d      	b.n	8009d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d02:	f7fa fec3 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d08:	e009      	b.n	8009d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d10:	e005      	b.n	8009d1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d028      	beq.n	8009d76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	4a10      	ldr	r2, [pc, #64]	; (8009d6c <UART_SetConfig+0x5c4>)
 8009d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	441a      	add	r2, r3
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	2b0f      	cmp	r3, #15
 8009d4c:	d910      	bls.n	8009d70 <UART_SetConfig+0x5c8>
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d54:	d20c      	bcs.n	8009d70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60da      	str	r2, [r3, #12]
 8009d60:	e009      	b.n	8009d76 <UART_SetConfig+0x5ce>
 8009d62:	bf00      	nop
 8009d64:	40008000 	.word	0x40008000
 8009d68:	00f42400 	.word	0x00f42400
 8009d6c:	08011d6c 	.word	0x08011d6c
      }
      else
      {
        ret = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3730      	adds	r7, #48	; 0x30
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00a      	beq.n	8009dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	f003 0308 	and.w	r3, r3, #8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01a      	beq.n	8009eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e9e:	d10a      	bne.n	8009eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	605a      	str	r2, [r3, #4]
  }
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ef4:	f7f8 f8ca 	bl	800208c <HAL_GetTick>
 8009ef8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0308 	and.w	r3, r3, #8
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d10e      	bne.n	8009f26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f82f 	bl	8009f7a <UART_WaitOnFlagUntilTimeout>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e025      	b.n	8009f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d10e      	bne.n	8009f52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f819 	bl	8009f7a <UART_WaitOnFlagUntilTimeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e00f      	b.n	8009f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2220      	movs	r2, #32
 8009f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b09c      	sub	sp, #112	; 0x70
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	603b      	str	r3, [r7, #0]
 8009f86:	4613      	mov	r3, r2
 8009f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f8a:	e0a9      	b.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f92:	f000 80a5 	beq.w	800a0e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f96:	f7f8 f879 	bl	800208c <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d302      	bcc.n	8009fac <UART_WaitOnFlagUntilTimeout+0x32>
 8009fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d140      	bne.n	800a02e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fd2:	e841 2300 	strex	r3, r2, [r1]
 8009fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e6      	bne.n	8009fac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	f023 0301 	bic.w	r3, r3, #1
 8009ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 800a000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e5      	bne.n	8009fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e069      	b.n	800a102 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d051      	beq.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a04a:	d149      	bne.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a054:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	e853 3f00 	ldrex	r3, [r3]
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a06a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a074:	637b      	str	r3, [r7, #52]	; 0x34
 800a076:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e6      	bne.n	800a056 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	613b      	str	r3, [r7, #16]
   return(result);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f023 0301 	bic.w	r3, r3, #1
 800a09e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0a8:	623a      	str	r2, [r7, #32]
 800a0aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	69f9      	ldr	r1, [r7, #28]
 800a0ae:	6a3a      	ldr	r2, [r7, #32]
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e5      	bne.n	800a088 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e010      	b.n	800a102 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69da      	ldr	r2, [r3, #28]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2301      	moveq	r3, #1
 800a0f2:	2300      	movne	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	f43f af46 	beq.w	8009f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3770      	adds	r7, #112	; 0x70
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b095      	sub	sp, #84	; 0x54
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a126:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a130:	643b      	str	r3, [r7, #64]	; 0x40
 800a132:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e6      	bne.n	800a112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	61fb      	str	r3, [r7, #28]
   return(result);
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a16a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e3      	bne.n	800a144 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d118      	bne.n	800a1b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	60bb      	str	r3, [r7, #8]
   return(result);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f023 0310 	bic.w	r3, r3, #16
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a2:	61bb      	str	r3, [r7, #24]
 800a1a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e6      	bne.n	800a184 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a1ca:	bf00      	nop
 800a1cc:	3754      	adds	r7, #84	; 0x54
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff fac1 	bl	800977c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	60bb      	str	r3, [r7, #8]
   return(result);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6979      	ldr	r1, [r7, #20]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	613b      	str	r3, [r7, #16]
   return(result);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e6      	bne.n	800a20a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff fa8c 	bl	8009768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a250:	bf00      	nop
 800a252:	3720      	adds	r7, #32
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e027      	b.n	800a2fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2224      	movs	r2, #36	; 0x24
 800a2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0201 	bic.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e02d      	b.n	800a37a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2224      	movs	r2, #36	; 0x24
 800a32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0201 	bic.w	r2, r2, #1
 800a344:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f850 	bl	800a400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a396:	2302      	movs	r3, #2
 800a398:	e02d      	b.n	800a3f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2224      	movs	r2, #36	; 0x24
 800a3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0201 	bic.w	r2, r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f812 	bl	800a400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d108      	bne.n	800a422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a420:	e031      	b.n	800a486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a422:	2308      	movs	r3, #8
 800a424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a426:	2308      	movs	r3, #8
 800a428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	0e5b      	lsrs	r3, r3, #25
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0307 	and.w	r3, r3, #7
 800a438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	0f5b      	lsrs	r3, r3, #29
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0307 	and.w	r3, r3, #7
 800a448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	7b3a      	ldrb	r2, [r7, #12]
 800a44e:	4911      	ldr	r1, [pc, #68]	; (800a494 <UARTEx_SetNbDataToProcess+0x94>)
 800a450:	5c8a      	ldrb	r2, [r1, r2]
 800a452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a456:	7b3a      	ldrb	r2, [r7, #12]
 800a458:	490f      	ldr	r1, [pc, #60]	; (800a498 <UARTEx_SetNbDataToProcess+0x98>)
 800a45a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a45c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a460:	b29a      	uxth	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	7b7a      	ldrb	r2, [r7, #13]
 800a46c:	4909      	ldr	r1, [pc, #36]	; (800a494 <UARTEx_SetNbDataToProcess+0x94>)
 800a46e:	5c8a      	ldrb	r2, [r1, r2]
 800a470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a474:	7b7a      	ldrb	r2, [r7, #13]
 800a476:	4908      	ldr	r1, [pc, #32]	; (800a498 <UARTEx_SetNbDataToProcess+0x98>)
 800a478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a47a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a486:	bf00      	nop
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	08011d84 	.word	0x08011d84
 800a498:	08011d8c 	.word	0x08011d8c

0800a49c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a49c:	b084      	sub	sp, #16
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	f107 001c 	add.w	r0, r7, #28
 800a4aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a4b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a4b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a4ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a4be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a4c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <SDMMC_Init+0x50>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	b004      	add	sp, #16
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	ffc02c00 	.word	0xffc02c00

0800a4f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f043 0203 	orr.w	r2, r3, #3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a540:	2002      	movs	r0, #2
 800a542:	f7f7 fdaf 	bl	80020a4 <HAL_Delay>

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0303 	and.w	r3, r3, #3
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a58a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a590:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a596:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <SDMMC_SendCommand+0x50>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	fffee0c0 	.word	0xfffee0c0

0800a5c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	b2db      	uxtb	r3, r3
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3314      	adds	r3, #20
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a626:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a62c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a632:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4313      	orrs	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	431a      	orrs	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0

}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a666:	2310      	movs	r3, #16
 800a668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a66a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a67a:	f107 0308 	add.w	r3, r7, #8
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff ff73 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a686:	f241 3288 	movw	r2, #5000	; 0x1388
 800a68a:	2110      	movs	r1, #16
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fa7b 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a694:	69fb      	ldr	r3, [r7, #28]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b088      	sub	sp, #32
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a6ac:	2311      	movs	r3, #17
 800a6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6c0:	f107 0308 	add.w	r3, r7, #8
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff ff50 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d0:	2111      	movs	r1, #17
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fa58 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6da:	69fb      	ldr	r3, [r7, #28]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a6f2:	2312      	movs	r3, #18
 800a6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a706:	f107 0308 	add.w	r3, r7, #8
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff ff2d 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a712:	f241 3288 	movw	r2, #5000	; 0x1388
 800a716:	2112      	movs	r1, #18
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fa35 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a720:	69fb      	ldr	r3, [r7, #28]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b088      	sub	sp, #32
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a738:	2318      	movs	r3, #24
 800a73a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a73c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a74a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a74c:	f107 0308 	add.w	r3, r7, #8
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff ff0a 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a758:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75c:	2118      	movs	r1, #24
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fa12 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a77e:	2319      	movs	r3, #25
 800a780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a782:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a788:	2300      	movs	r3, #0
 800a78a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a78c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a790:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff fee7 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a2:	2119      	movs	r1, #25
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f9ef 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a7aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
	...

0800a7b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7d6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff feb8 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a7fc:	4a08      	ldr	r2, [pc, #32]	; (800a820 <SDMMC_CmdStopTransfer+0x68>)
 800a7fe:	210c      	movs	r1, #12
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f9c1 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a806:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a814:	69fb      	ldr	r3, [r7, #28]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	05f5e100 	.word	0x05f5e100

0800a824 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	; 0x28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a834:	2307      	movs	r3, #7
 800a836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a83c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a83e:	2300      	movs	r3, #0
 800a840:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a846:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a848:	f107 0310 	add.w	r3, r7, #16
 800a84c:	4619      	mov	r1, r3
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff fe8c 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a854:	f241 3288 	movw	r2, #5000	; 0x1388
 800a858:	2107      	movs	r1, #7
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f994 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a860:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a864:	4618      	mov	r0, r3
 800a866:	3728      	adds	r7, #40	; 0x28
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a87c:	2300      	movs	r3, #0
 800a87e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a88a:	f107 0308 	add.w	r3, r7, #8
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fe6b 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fbb8 	bl	800b00c <SDMMC_GetCmdError>
 800a89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89e:	69fb      	ldr	r3, [r7, #28]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8b0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fe4b 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fb4a 	bl	800af70 <SDMMC_GetCmdResp7>
 800a8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8de:	69fb      	ldr	r3, [r7, #28]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8f6:	2337      	movs	r3, #55	; 0x37
 800a8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fe2b 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a916:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91a:	2137      	movs	r1, #55	; 0x37
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f933 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a924:	69fb      	ldr	r3, [r7, #28]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b088      	sub	sp, #32
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a93c:	2329      	movs	r3, #41	; 0x29
 800a93e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a940:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a94a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a94e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a950:	f107 0308 	add.w	r3, r7, #8
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fe08 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fa4f 	bl	800ae00 <SDMMC_GetCmdResp3>
 800a962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a964:	69fb      	ldr	r3, [r7, #28]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b088      	sub	sp, #32
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a97c:	2306      	movs	r3, #6
 800a97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a980:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a98a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a98e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a990:	f107 0308 	add.w	r3, r7, #8
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff fde8 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a0:	2106      	movs	r1, #6
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8f0 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3720      	adds	r7, #32
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9c0:	2333      	movs	r3, #51	; 0x33
 800a9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9d4:	f107 0308 	add.w	r3, r7, #8
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff fdc6 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e4:	2133      	movs	r1, #51	; 0x33
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f8ce 	bl	800ab88 <SDMMC_GetCmdResp1>
 800a9ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa04:	2302      	movs	r3, #2
 800aa06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa08:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa18:	f107 0308 	add.w	r3, r7, #8
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fda4 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f9a1 	bl	800ad6c <SDMMC_GetCmdResp2>
 800aa2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b088      	sub	sp, #32
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa44:	2309      	movs	r3, #9
 800aa46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa48:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fd84 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f981 	bl	800ad6c <SDMMC_GetCmdResp2>
 800aa6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3720      	adds	r7, #32
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa80:	2300      	movs	r3, #0
 800aa82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa84:	2303      	movs	r3, #3
 800aa86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff fd64 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	2103      	movs	r1, #3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9e9 	bl	800ae80 <SDMMC_GetCmdResp6>
 800aaae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab0:	69fb      	ldr	r3, [r7, #28]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b088      	sub	sp, #32
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aac8:	230d      	movs	r3, #13
 800aaca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aacc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad2:	2300      	movs	r3, #0
 800aad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7ff fd42 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaec:	210d      	movs	r1, #13
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f84a 	bl	800ab88 <SDMMC_GetCmdResp1>
 800aaf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ab0c:	230d      	movs	r3, #13
 800ab0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab20:	f107 0308 	add.w	r3, r7, #8
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fd20 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ab2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab30:	210d      	movs	r1, #13
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f828 	bl	800ab88 <SDMMC_GetCmdResp1>
 800ab38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800ab50:	230b      	movs	r3, #11
 800ab52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fcfe 	bl	800a56c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800ab70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab74:	210b      	movs	r1, #11
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f806 	bl	800ab88 <SDMMC_GetCmdResp1>
 800ab7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	460b      	mov	r3, r1
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ab96:	4b70      	ldr	r3, [pc, #448]	; (800ad58 <SDMMC_GetCmdResp1+0x1d0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a70      	ldr	r2, [pc, #448]	; (800ad5c <SDMMC_GetCmdResp1+0x1d4>)
 800ab9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aba0:	0a5a      	lsrs	r2, r3, #9
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	fb02 f303 	mul.w	r3, r2, r3
 800aba8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	1e5a      	subs	r2, r3, #1
 800abae:	61fa      	str	r2, [r7, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d102      	bne.n	800abba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abb8:	e0c9      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abbe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	4b67      	ldr	r3, [pc, #412]	; (800ad60 <SDMMC_GetCmdResp1+0x1d8>)
 800abc4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0ef      	beq.n	800abaa <SDMMC_GetCmdResp1+0x22>
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1ea      	bne.n	800abaa <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d004      	beq.n	800abea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2204      	movs	r2, #4
 800abe4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abe6:	2304      	movs	r3, #4
 800abe8:	e0b1      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e0a6      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4a58      	ldr	r2, [pc, #352]	; (800ad64 <SDMMC_GetCmdResp1+0x1dc>)
 800ac04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fcda 	bl	800a5c0 <SDMMC_GetCommandResponse>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	461a      	mov	r2, r3
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d001      	beq.n	800ac1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e099      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff fcdc 	bl	800a5da <SDMMC_GetResponse>
 800ac22:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4b50      	ldr	r3, [pc, #320]	; (800ad68 <SDMMC_GetCmdResp1+0x1e0>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e08d      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	da02      	bge.n	800ac3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ac38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac3c:	e087      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac48:	2340      	movs	r3, #64	; 0x40
 800ac4a:	e080      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ac56:	2380      	movs	r3, #128	; 0x80
 800ac58:	e079      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ac64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac68:	e071      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ac74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac78:	e069      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac88:	e061      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac98:	e059      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aca8:	e051      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800acb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acb8:	e049      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800acc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acc8:	e041      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800acd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acd8:	e039      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ace4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ace8:	e031      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800acf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800acf8:	e029      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ad04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad08:	e021      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ad14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad18:	e019      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ad24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad28:	e011      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ad34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad38:	e009      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f003 0308 	and.w	r3, r3, #8
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ad44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad48:	e001      	b.n	800ad4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3720      	adds	r7, #32
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000004 	.word	0x20000004
 800ad5c:	10624dd3 	.word	0x10624dd3
 800ad60:	00200045 	.word	0x00200045
 800ad64:	002000c5 	.word	0x002000c5
 800ad68:	fdffe008 	.word	0xfdffe008

0800ad6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad74:	4b1f      	ldr	r3, [pc, #124]	; (800adf4 <SDMMC_GetCmdResp2+0x88>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1f      	ldr	r2, [pc, #124]	; (800adf8 <SDMMC_GetCmdResp2+0x8c>)
 800ad7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7e:	0a5b      	lsrs	r3, r3, #9
 800ad80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad84:	fb02 f303 	mul.w	r3, r2, r3
 800ad88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	1e5a      	subs	r2, r3, #1
 800ad8e:	60fa      	str	r2, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad98:	e026      	b.n	800ade8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0ef      	beq.n	800ad8a <SDMMC_GetCmdResp2+0x1e>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1ea      	bne.n	800ad8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2204      	movs	r2, #4
 800adc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adc6:	2304      	movs	r3, #4
 800adc8:	e00e      	b.n	800ade8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800addc:	2301      	movs	r3, #1
 800adde:	e003      	b.n	800ade8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a06      	ldr	r2, [pc, #24]	; (800adfc <SDMMC_GetCmdResp2+0x90>)
 800ade4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20000004 	.word	0x20000004
 800adf8:	10624dd3 	.word	0x10624dd3
 800adfc:	002000c5 	.word	0x002000c5

0800ae00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae08:	4b1a      	ldr	r3, [pc, #104]	; (800ae74 <SDMMC_GetCmdResp3+0x74>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1a      	ldr	r2, [pc, #104]	; (800ae78 <SDMMC_GetCmdResp3+0x78>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	0a5b      	lsrs	r3, r3, #9
 800ae14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
 800ae1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	1e5a      	subs	r2, r3, #1
 800ae22:	60fa      	str	r2, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae2c:	e01b      	b.n	800ae66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0ef      	beq.n	800ae1e <SDMMC_GetCmdResp3+0x1e>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1ea      	bne.n	800ae1e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2204      	movs	r2, #4
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae5a:	2304      	movs	r3, #4
 800ae5c:	e003      	b.n	800ae66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a06      	ldr	r2, [pc, #24]	; (800ae7c <SDMMC_GetCmdResp3+0x7c>)
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	20000004 	.word	0x20000004
 800ae78:	10624dd3 	.word	0x10624dd3
 800ae7c:	002000c5 	.word	0x002000c5

0800ae80 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae8e:	4b35      	ldr	r3, [pc, #212]	; (800af64 <SDMMC_GetCmdResp6+0xe4>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a35      	ldr	r2, [pc, #212]	; (800af68 <SDMMC_GetCmdResp6+0xe8>)
 800ae94:	fba2 2303 	umull	r2, r3, r2, r3
 800ae98:	0a5b      	lsrs	r3, r3, #9
 800ae9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
 800aea2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	1e5a      	subs	r2, r3, #1
 800aea8:	61fa      	str	r2, [r7, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d102      	bne.n	800aeb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aeb2:	e052      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0ef      	beq.n	800aea4 <SDMMC_GetCmdResp6+0x24>
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1ea      	bne.n	800aea4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d004      	beq.n	800aee4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2204      	movs	r2, #4
 800aede:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aee0:	2304      	movs	r3, #4
 800aee2:	e03a      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e02f      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7ff fb60 	bl	800a5c0 <SDMMC_GetCommandResponse>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	4293      	cmp	r3, r2
 800af08:	d001      	beq.n	800af0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e025      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4a16      	ldr	r2, [pc, #88]	; (800af6c <SDMMC_GetCmdResp6+0xec>)
 800af12:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800af14:	2100      	movs	r1, #0
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff fb5f 	bl	800a5da <SDMMC_GetResponse>
 800af1c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	0c1b      	lsrs	r3, r3, #16
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800af32:	2300      	movs	r3, #0
 800af34:	e011      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af44:	e009      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af54:	e001      	b.n	800af5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3720      	adds	r7, #32
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000004 	.word	0x20000004
 800af68:	10624dd3 	.word	0x10624dd3
 800af6c:	002000c5 	.word	0x002000c5

0800af70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af78:	4b22      	ldr	r3, [pc, #136]	; (800b004 <SDMMC_GetCmdResp7+0x94>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a22      	ldr	r2, [pc, #136]	; (800b008 <SDMMC_GetCmdResp7+0x98>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0a5b      	lsrs	r3, r3, #9
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	fb02 f303 	mul.w	r3, r2, r3
 800af8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	60fa      	str	r2, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af9c:	e02c      	b.n	800aff8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0ef      	beq.n	800af8e <SDMMC_GetCmdResp7+0x1e>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1ea      	bne.n	800af8e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2204      	movs	r2, #4
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afca:	2304      	movs	r3, #4
 800afcc:	e014      	b.n	800aff8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd2:	f003 0301 	and.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e009      	b.n	800aff8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2240      	movs	r2, #64	; 0x40
 800aff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0

}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	20000004 	.word	0x20000004
 800b008:	10624dd3 	.word	0x10624dd3

0800b00c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b014:	4b11      	ldr	r3, [pc, #68]	; (800b05c <SDMMC_GetCmdError+0x50>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a11      	ldr	r2, [pc, #68]	; (800b060 <SDMMC_GetCmdError+0x54>)
 800b01a:	fba2 2303 	umull	r2, r3, r2, r3
 800b01e:	0a5b      	lsrs	r3, r3, #9
 800b020:	f241 3288 	movw	r2, #5000	; 0x1388
 800b024:	fb02 f303 	mul.w	r3, r2, r3
 800b028:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1e5a      	subs	r2, r3, #1
 800b02e:	60fa      	str	r2, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d102      	bne.n	800b03a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b038:	e009      	b.n	800b04e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0f1      	beq.n	800b02a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a06      	ldr	r2, [pc, #24]	; (800b064 <SDMMC_GetCmdError+0x58>)
 800b04a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000004 	.word	0x20000004
 800b060:	10624dd3 	.word	0x10624dd3
 800b064:	002000c5 	.word	0x002000c5

0800b068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b068:	b084      	sub	sp, #16
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	f107 001c 	add.w	r0, r7, #28
 800b076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 faf6 	bl	800c678 <USB_CoreReset>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	639a      	str	r2, [r3, #56]	; 0x38
 800b0a2:	e005      	b.n	800b0b0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0bc:	b004      	add	sp, #16
 800b0be:	4770      	bx	lr

0800b0c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d165      	bne.n	800b1a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	4a3e      	ldr	r2, [pc, #248]	; (800b1d0 <USB_SetTurnaroundTime+0x110>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d906      	bls.n	800b0ea <USB_SetTurnaroundTime+0x2a>
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4a3d      	ldr	r2, [pc, #244]	; (800b1d4 <USB_SetTurnaroundTime+0x114>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d202      	bcs.n	800b0ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b0e4:	230f      	movs	r3, #15
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e05c      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	4a39      	ldr	r2, [pc, #228]	; (800b1d4 <USB_SetTurnaroundTime+0x114>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d306      	bcc.n	800b100 <USB_SetTurnaroundTime+0x40>
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	4a38      	ldr	r2, [pc, #224]	; (800b1d8 <USB_SetTurnaroundTime+0x118>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d202      	bcs.n	800b100 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b0fa:	230e      	movs	r3, #14
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e051      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4a35      	ldr	r2, [pc, #212]	; (800b1d8 <USB_SetTurnaroundTime+0x118>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d306      	bcc.n	800b116 <USB_SetTurnaroundTime+0x56>
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4a34      	ldr	r2, [pc, #208]	; (800b1dc <USB_SetTurnaroundTime+0x11c>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d202      	bcs.n	800b116 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b110:	230d      	movs	r3, #13
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e046      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	4a30      	ldr	r2, [pc, #192]	; (800b1dc <USB_SetTurnaroundTime+0x11c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d306      	bcc.n	800b12c <USB_SetTurnaroundTime+0x6c>
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	4a2f      	ldr	r2, [pc, #188]	; (800b1e0 <USB_SetTurnaroundTime+0x120>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d802      	bhi.n	800b12c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b126:	230c      	movs	r3, #12
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	e03b      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4a2c      	ldr	r2, [pc, #176]	; (800b1e0 <USB_SetTurnaroundTime+0x120>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d906      	bls.n	800b142 <USB_SetTurnaroundTime+0x82>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4a2b      	ldr	r2, [pc, #172]	; (800b1e4 <USB_SetTurnaroundTime+0x124>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d802      	bhi.n	800b142 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b13c:	230b      	movs	r3, #11
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	e030      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4a27      	ldr	r2, [pc, #156]	; (800b1e4 <USB_SetTurnaroundTime+0x124>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d906      	bls.n	800b158 <USB_SetTurnaroundTime+0x98>
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	4a26      	ldr	r2, [pc, #152]	; (800b1e8 <USB_SetTurnaroundTime+0x128>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d802      	bhi.n	800b158 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b152:	230a      	movs	r3, #10
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e025      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	4a23      	ldr	r2, [pc, #140]	; (800b1e8 <USB_SetTurnaroundTime+0x128>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d906      	bls.n	800b16e <USB_SetTurnaroundTime+0xae>
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	4a22      	ldr	r2, [pc, #136]	; (800b1ec <USB_SetTurnaroundTime+0x12c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d202      	bcs.n	800b16e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b168:	2309      	movs	r3, #9
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	e01a      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	4a1e      	ldr	r2, [pc, #120]	; (800b1ec <USB_SetTurnaroundTime+0x12c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d306      	bcc.n	800b184 <USB_SetTurnaroundTime+0xc4>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	4a1d      	ldr	r2, [pc, #116]	; (800b1f0 <USB_SetTurnaroundTime+0x130>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d802      	bhi.n	800b184 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b17e:	2308      	movs	r3, #8
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	e00f      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	4a1a      	ldr	r2, [pc, #104]	; (800b1f0 <USB_SetTurnaroundTime+0x130>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d906      	bls.n	800b19a <USB_SetTurnaroundTime+0xda>
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	4a19      	ldr	r2, [pc, #100]	; (800b1f4 <USB_SetTurnaroundTime+0x134>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d202      	bcs.n	800b19a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b194:	2307      	movs	r3, #7
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	e004      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b19a:	2306      	movs	r3, #6
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	e001      	b.n	800b1a4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b1a0:	2309      	movs	r3, #9
 800b1a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	029b      	lsls	r3, r3, #10
 800b1b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	00d8acbf 	.word	0x00d8acbf
 800b1d4:	00e4e1c0 	.word	0x00e4e1c0
 800b1d8:	00f42400 	.word	0x00f42400
 800b1dc:	01067380 	.word	0x01067380
 800b1e0:	011a499f 	.word	0x011a499f
 800b1e4:	01312cff 	.word	0x01312cff
 800b1e8:	014ca43f 	.word	0x014ca43f
 800b1ec:	016e3600 	.word	0x016e3600
 800b1f0:	01a6ab1f 	.word	0x01a6ab1f
 800b1f4:	01e84800 	.word	0x01e84800

0800b1f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f043 0201 	orr.w	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f023 0201 	bic.w	r2, r3, #1
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d115      	bne.n	800b28a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b26a:	2001      	movs	r0, #1
 800b26c:	f7f6 ff1a 	bl	80020a4 <HAL_Delay>
      ms++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f001 f985 	bl	800c586 <USB_GetMode>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d01e      	beq.n	800b2c0 <USB_SetCurrentMode+0x84>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b31      	cmp	r3, #49	; 0x31
 800b286:	d9f0      	bls.n	800b26a <USB_SetCurrentMode+0x2e>
 800b288:	e01a      	b.n	800b2c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d115      	bne.n	800b2bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b29c:	2001      	movs	r0, #1
 800b29e:	f7f6 ff01 	bl	80020a4 <HAL_Delay>
      ms++;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 f96c 	bl	800c586 <USB_GetMode>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d005      	beq.n	800b2c0 <USB_SetCurrentMode+0x84>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b31      	cmp	r3, #49	; 0x31
 800b2b8:	d9f0      	bls.n	800b29c <USB_SetCurrentMode+0x60>
 800b2ba:	e001      	b.n	800b2c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e005      	b.n	800b2cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b32      	cmp	r3, #50	; 0x32
 800b2c4:	d101      	bne.n	800b2ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	e009      	b.n	800b308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	3340      	adds	r3, #64	; 0x40
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	2200      	movs	r2, #0
 800b300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	3301      	adds	r3, #1
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	2b0e      	cmp	r3, #14
 800b30c:	d9f2      	bls.n	800b2f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d11c      	bne.n	800b34e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b322:	f043 0302 	orr.w	r3, r3, #2
 800b326:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	e005      	b.n	800b35a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b360:	461a      	mov	r2, r3
 800b362:	2300      	movs	r3, #0
 800b364:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36c:	4619      	mov	r1, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b374:	461a      	mov	r2, r3
 800b376:	680b      	ldr	r3, [r1, #0]
 800b378:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b37a:	2103      	movs	r1, #3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f959 	bl	800b634 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b382:	2110      	movs	r1, #16
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f8f1 	bl	800b56c <USB_FlushTxFifo>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f91d 	bl	800b5d4 <USB_FlushRxFifo>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	e043      	b.n	800b456 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3e4:	d118      	bne.n	800b418 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	e013      	b.n	800b42a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40e:	461a      	mov	r2, r3
 800b410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	e008      	b.n	800b42a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b424:	461a      	mov	r2, r3
 800b426:	2300      	movs	r3, #0
 800b428:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b436:	461a      	mov	r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b448:	461a      	mov	r2, r3
 800b44a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b44e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3301      	adds	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d3b7      	bcc.n	800b3ce <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	e043      	b.n	800b4ec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b47a:	d118      	bne.n	800b4ae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	461a      	mov	r2, r3
 800b490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	e013      	b.n	800b4c0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e008      	b.n	800b4c0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d3b7      	bcc.n	800b464 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b506:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b514:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f043 0210 	orr.w	r2, r3, #16
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	699a      	ldr	r2, [r3, #24]
 800b526:	4b10      	ldr	r3, [pc, #64]	; (800b568 <USB_DevInit+0x294>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	f043 0208 	orr.w	r2, r3, #8
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b542:	2b01      	cmp	r3, #1
 800b544:	d107      	bne.n	800b556 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b54e:	f043 0304 	orr.w	r3, r3, #4
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b556:	7dfb      	ldrb	r3, [r7, #23]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b562:	b004      	add	sp, #16
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	803c3800 	.word	0x803c3800

0800b56c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4a13      	ldr	r2, [pc, #76]	; (800b5d0 <USB_FlushTxFifo+0x64>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d901      	bls.n	800b58c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e01b      	b.n	800b5c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	daf2      	bge.n	800b57a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	019b      	lsls	r3, r3, #6
 800b59c:	f043 0220 	orr.w	r2, r3, #32
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <USB_FlushTxFifo+0x64>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d901      	bls.n	800b5b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e006      	b.n	800b5c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d0f0      	beq.n	800b5a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	00030d40 	.word	0x00030d40

0800b5d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4a11      	ldr	r2, [pc, #68]	; (800b630 <USB_FlushRxFifo+0x5c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d901      	bls.n	800b5f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e018      	b.n	800b624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	daf2      	bge.n	800b5e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2210      	movs	r2, #16
 800b602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3301      	adds	r3, #1
 800b608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4a08      	ldr	r2, [pc, #32]	; (800b630 <USB_FlushRxFifo+0x5c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d901      	bls.n	800b616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e006      	b.n	800b624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f003 0310 	and.w	r3, r3, #16
 800b61e:	2b10      	cmp	r3, #16
 800b620:	d0f0      	beq.n	800b604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	00030d40 	.word	0x00030d40

0800b634 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	78fb      	ldrb	r3, [r7, #3]
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b654:	4313      	orrs	r3, r2
 800b656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b666:	b480      	push	{r7}
 800b668:	b087      	sub	sp, #28
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f003 0306 	and.w	r3, r3, #6
 800b67e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d002      	beq.n	800b68c <USB_GetDevSpeed+0x26>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b06      	cmp	r3, #6
 800b68a:	d102      	bne.n	800b692 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b68c:	2302      	movs	r3, #2
 800b68e:	75fb      	strb	r3, [r7, #23]
 800b690:	e001      	b.n	800b696 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b692:	230f      	movs	r3, #15
 800b694:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	785b      	ldrb	r3, [r3, #1]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d13a      	bne.n	800b736 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c6:	69da      	ldr	r2, [r3, #28]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	68f9      	ldr	r1, [r7, #12]
 800b6da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d155      	bne.n	800b7a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	791b      	ldrb	r3, [r3, #4]
 800b712:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b714:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	059b      	lsls	r3, r3, #22
 800b71a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b71c:	4313      	orrs	r3, r2
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	0151      	lsls	r1, r2, #5
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	440a      	add	r2, r1
 800b726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b72e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	e036      	b.n	800b7a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73c:	69da      	ldr	r2, [r3, #28]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	f003 030f 	and.w	r3, r3, #15
 800b746:	2101      	movs	r1, #1
 800b748:	fa01 f303 	lsl.w	r3, r1, r3
 800b74c:	041b      	lsls	r3, r3, #16
 800b74e:	68f9      	ldr	r1, [r7, #12]
 800b750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b754:	4313      	orrs	r3, r2
 800b756:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d11a      	bne.n	800b7a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	791b      	ldrb	r3, [r3, #4]
 800b788:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b78a:	430b      	orrs	r3, r1
 800b78c:	4313      	orrs	r3, r2
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	440a      	add	r2, r1
 800b796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b79e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	785b      	ldrb	r3, [r3, #1]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d161      	bne.n	800b894 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7e6:	d11f      	bne.n	800b828 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	0151      	lsls	r1, r2, #5
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b802:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b806:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	0151      	lsls	r1, r2, #5
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	440a      	add	r2, r1
 800b81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 030f 	and.w	r3, r3, #15
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f303 	lsl.w	r3, r1, r3
 800b83e:	b29b      	uxth	r3, r3
 800b840:	43db      	mvns	r3, r3
 800b842:	68f9      	ldr	r1, [r7, #12]
 800b844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b848:	4013      	ands	r3, r2
 800b84a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b852:	69da      	ldr	r2, [r3, #28]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	2101      	movs	r1, #1
 800b85e:	fa01 f303 	lsl.w	r3, r1, r3
 800b862:	b29b      	uxth	r3, r3
 800b864:	43db      	mvns	r3, r3
 800b866:	68f9      	ldr	r1, [r7, #12]
 800b868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b86c:	4013      	ands	r3, r2
 800b86e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	0159      	lsls	r1, r3, #5
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	440b      	add	r3, r1
 800b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88a:	4619      	mov	r1, r3
 800b88c:	4b35      	ldr	r3, [pc, #212]	; (800b964 <USB_DeactivateEndpoint+0x1b0>)
 800b88e:	4013      	ands	r3, r2
 800b890:	600b      	str	r3, [r1, #0]
 800b892:	e060      	b.n	800b956 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8aa:	d11f      	bne.n	800b8ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	0151      	lsls	r1, r2, #5
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	440a      	add	r2, r1
 800b8c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	0151      	lsls	r1, r2, #5
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	440a      	add	r2, r1
 800b8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 030f 	and.w	r3, r3, #15
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b902:	041b      	lsls	r3, r3, #16
 800b904:	43db      	mvns	r3, r3
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b90c:	4013      	ands	r3, r2
 800b90e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b916:	69da      	ldr	r2, [r3, #28]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 030f 	and.w	r3, r3, #15
 800b920:	2101      	movs	r1, #1
 800b922:	fa01 f303 	lsl.w	r3, r1, r3
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	43db      	mvns	r3, r3
 800b92a:	68f9      	ldr	r1, [r7, #12]
 800b92c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b930:	4013      	ands	r3, r2
 800b932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	0159      	lsls	r1, r3, #5
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	440b      	add	r3, r1
 800b94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b94e:	4619      	mov	r1, r3
 800b950:	4b05      	ldr	r3, [pc, #20]	; (800b968 <USB_DeactivateEndpoint+0x1b4>)
 800b952:	4013      	ands	r3, r2
 800b954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	ec337800 	.word	0xec337800
 800b968:	eff37800 	.word	0xeff37800

0800b96c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	785b      	ldrb	r3, [r3, #1]
 800b984:	2b01      	cmp	r3, #1
 800b986:	f040 810a 	bne.w	800bb9e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d132      	bne.n	800b9f8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	0151      	lsls	r1, r2, #5
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	440a      	add	r2, r1
 800b9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	015a      	lsls	r2, r3, #5
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	4413      	add	r3, r2
 800b9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	0151      	lsls	r1, r2, #5
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	440a      	add	r2, r1
 800b9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f0:	0cdb      	lsrs	r3, r3, #19
 800b9f2:	04db      	lsls	r3, r3, #19
 800b9f4:	6113      	str	r3, [r2, #16]
 800b9f6:	e074      	b.n	800bae2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	0151      	lsls	r1, r2, #5
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	440a      	add	r2, r1
 800ba0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba12:	0cdb      	lsrs	r3, r3, #19
 800ba14:	04db      	lsls	r3, r3, #19
 800ba16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	015a      	lsls	r2, r3, #5
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	4413      	add	r3, r2
 800ba20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	0151      	lsls	r1, r2, #5
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	440a      	add	r2, r1
 800ba2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	6999      	ldr	r1, [r3, #24]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	440b      	add	r3, r1
 800ba54:	1e59      	subs	r1, r3, #1
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ba5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba60:	4b9e      	ldr	r3, [pc, #632]	; (800bcdc <USB_EPStartXfer+0x370>)
 800ba62:	400b      	ands	r3, r1
 800ba64:	6939      	ldr	r1, [r7, #16]
 800ba66:	0148      	lsls	r0, r1, #5
 800ba68:	6979      	ldr	r1, [r7, #20]
 800ba6a:	4401      	add	r1, r0
 800ba6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba70:	4313      	orrs	r3, r2
 800ba72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba80:	691a      	ldr	r2, [r3, #16]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba8a:	6939      	ldr	r1, [r7, #16]
 800ba8c:	0148      	lsls	r0, r1, #5
 800ba8e:	6979      	ldr	r1, [r7, #20]
 800ba90:	4401      	add	r1, r0
 800ba92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba96:	4313      	orrs	r3, r2
 800ba98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	791b      	ldrb	r3, [r3, #4]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d11f      	bne.n	800bae2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	4413      	add	r3, r2
 800baaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	0151      	lsls	r1, r2, #5
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	440a      	add	r2, r1
 800bab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800babc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bac0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800badc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bae0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb00:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	791b      	ldrb	r3, [r3, #4]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d015      	beq.n	800bb36 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f000 8106 	beq.w	800bd20 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	2101      	movs	r1, #1
 800bb26:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2a:	6979      	ldr	r1, [r7, #20]
 800bb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb30:	4313      	orrs	r3, r2
 800bb32:	634b      	str	r3, [r1, #52]	; 0x34
 800bb34:	e0f4      	b.n	800bd20 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d110      	bne.n	800bb68 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	e00f      	b.n	800bb88 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	0151      	lsls	r1, r2, #5
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	440a      	add	r2, r1
 800bb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb86:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	6919      	ldr	r1, [r3, #16]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781a      	ldrb	r2, [r3, #0]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa94 	bl	800c0c4 <USB_WritePacket>
 800bb9c:	e0c0      	b.n	800bd20 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	0151      	lsls	r1, r2, #5
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	440a      	add	r2, r1
 800bbb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbb8:	0cdb      	lsrs	r3, r3, #19
 800bbba:	04db      	lsls	r3, r3, #19
 800bbbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	0151      	lsls	r1, r2, #5
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	440a      	add	r2, r1
 800bbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbe0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d123      	bne.n	800bc32 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	015a      	lsls	r2, r3, #5
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf6:	691a      	ldr	r2, [r3, #16]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc00:	6939      	ldr	r1, [r7, #16]
 800bc02:	0148      	lsls	r0, r1, #5
 800bc04:	6979      	ldr	r1, [r7, #20]
 800bc06:	4401      	add	r1, r0
 800bc08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc2e:	6113      	str	r3, [r2, #16]
 800bc30:	e037      	b.n	800bca2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	699a      	ldr	r2, [r3, #24]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	1e5a      	subs	r2, r3, #1
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc46:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	89fa      	ldrh	r2, [r7, #14]
 800bc4e:	fb03 f202 	mul.w	r2, r3, r2
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc62:	691a      	ldr	r2, [r3, #16]
 800bc64:	89fb      	ldrh	r3, [r7, #14]
 800bc66:	04d9      	lsls	r1, r3, #19
 800bc68:	4b1c      	ldr	r3, [pc, #112]	; (800bcdc <USB_EPStartXfer+0x370>)
 800bc6a:	400b      	ands	r3, r1
 800bc6c:	6939      	ldr	r1, [r7, #16]
 800bc6e:	0148      	lsls	r0, r1, #5
 800bc70:	6979      	ldr	r1, [r7, #20]
 800bc72:	4401      	add	r1, r0
 800bc74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc88:	691a      	ldr	r2, [r3, #16]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc92:	6939      	ldr	r1, [r7, #16]
 800bc94:	0148      	lsls	r0, r1, #5
 800bc96:	6979      	ldr	r1, [r7, #20]
 800bc98:	4401      	add	r1, r0
 800bc9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	791b      	ldrb	r3, [r3, #4]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d12a      	bne.n	800bd00 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d112      	bne.n	800bce0 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	015a      	lsls	r2, r3, #5
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	0151      	lsls	r1, r2, #5
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	440a      	add	r2, r1
 800bcd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e011      	b.n	800bd00 <USB_EPStartXfer+0x394>
 800bcdc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	0151      	lsls	r1, r2, #5
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	440a      	add	r2, r1
 800bcf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	0151      	lsls	r1, r2, #5
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	440a      	add	r2, r1
 800bd16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop

0800bd2c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	f040 80ab 	bne.w	800bea0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d132      	bne.n	800bdb8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	0151      	lsls	r1, r2, #5
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	440a      	add	r2, r1
 800bd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	0151      	lsls	r1, r2, #5
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	440a      	add	r2, r1
 800bd8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	0151      	lsls	r1, r2, #5
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	440a      	add	r2, r1
 800bdac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb0:	0cdb      	lsrs	r3, r3, #19
 800bdb2:	04db      	lsls	r3, r3, #19
 800bdb4:	6113      	str	r3, [r2, #16]
 800bdb6:	e04e      	b.n	800be56 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	0151      	lsls	r1, r2, #5
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	440a      	add	r2, r1
 800bdce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdd2:	0cdb      	lsrs	r3, r3, #19
 800bdd4:	04db      	lsls	r3, r3, #19
 800bdd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	0151      	lsls	r1, r2, #5
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	440a      	add	r2, r1
 800bdee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	699a      	ldr	r2, [r3, #24]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	429a      	cmp	r2, r3
 800be06:	d903      	bls.n	800be10 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3c:	691a      	ldr	r2, [r3, #16]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	0148      	lsls	r0, r1, #5
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4401      	add	r1, r0
 800be4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be52:	4313      	orrs	r3, r2
 800be54:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	015a      	lsls	r2, r3, #5
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	4413      	add	r3, r2
 800be5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	0151      	lsls	r1, r2, #5
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	440a      	add	r2, r1
 800be6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be74:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d071      	beq.n	800bf62 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	2101      	movs	r1, #1
 800be90:	fa01 f303 	lsl.w	r3, r1, r3
 800be94:	68f9      	ldr	r1, [r7, #12]
 800be96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be9a:	4313      	orrs	r3, r2
 800be9c:	634b      	str	r3, [r1, #52]	; 0x34
 800be9e:	e060      	b.n	800bf62 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beba:	0cdb      	lsrs	r3, r3, #19
 800bebc:	04db      	lsls	r3, r3, #19
 800bebe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	0151      	lsls	r1, r2, #5
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	440a      	add	r2, r1
 800bed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bee2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	68da      	ldr	r2, [r3, #12]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	0151      	lsls	r1, r2, #5
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	440a      	add	r2, r1
 800bf12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	015a      	lsls	r2, r3, #5
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4413      	add	r3, r2
 800bf24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf28:	691a      	ldr	r2, [r3, #16]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	0148      	lsls	r0, r1, #5
 800bf36:	68f9      	ldr	r1, [r7, #12]
 800bf38:	4401      	add	r1, r0
 800bf3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	0151      	lsls	r1, r2, #5
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	440a      	add	r2, r1
 800bf58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	785b      	ldrb	r3, [r3, #1]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d14a      	bne.n	800c024 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfa6:	f040 8086 	bne.w	800c0b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	7812      	ldrb	r2, [r2, #0]
 800bfbe:	0151      	lsls	r1, r2, #5
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	7812      	ldrb	r2, [r2, #0]
 800bfe2:	0151      	lsls	r1, r2, #5
 800bfe4:	693a      	ldr	r2, [r7, #16]
 800bfe6:	440a      	add	r2, r1
 800bfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f242 7210 	movw	r2, #10000	; 0x2710
 800bffe:	4293      	cmp	r3, r2
 800c000:	d902      	bls.n	800c008 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	75fb      	strb	r3, [r7, #23]
          break;
 800c006:	e056      	b.n	800c0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c020:	d0e7      	beq.n	800bff2 <USB_EPStopXfer+0x82>
 800c022:	e048      	b.n	800c0b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c03c:	d13b      	bne.n	800c0b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	7812      	ldrb	r2, [r2, #0]
 800c052:	0151      	lsls	r1, r2, #5
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	440a      	add	r2, r1
 800c058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c05c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c060:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	7812      	ldrb	r2, [r2, #0]
 800c076:	0151      	lsls	r1, r2, #5
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	440a      	add	r2, r1
 800c07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c084:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c092:	4293      	cmp	r3, r2
 800c094:	d902      	bls.n	800c09c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
          break;
 800c09a:	e00c      	b.n	800c0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	015a      	lsls	r2, r3, #5
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b4:	d0e7      	beq.n	800c086 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	371c      	adds	r7, #28
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b089      	sub	sp, #36	; 0x24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	71fb      	strb	r3, [r7, #7]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c0e2:	88bb      	ldrh	r3, [r7, #4]
 800c0e4:	3303      	adds	r3, #3
 800c0e6:	089b      	lsrs	r3, r3, #2
 800c0e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	e018      	b.n	800c122 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	031a      	lsls	r2, r3, #12
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	3301      	adds	r3, #1
 800c108:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	3301      	adds	r3, #1
 800c10e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	3301      	adds	r3, #1
 800c114:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	3301      	adds	r3, #1
 800c11a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	3301      	adds	r3, #1
 800c120:	61bb      	str	r3, [r7, #24]
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	429a      	cmp	r2, r3
 800c128:	d3e2      	bcc.n	800c0f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3724      	adds	r7, #36	; 0x24
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c138:	b480      	push	{r7}
 800c13a:	b08b      	sub	sp, #44	; 0x2c
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c14e:	88fb      	ldrh	r3, [r7, #6]
 800c150:	089b      	lsrs	r3, r3, #2
 800c152:	b29b      	uxth	r3, r3
 800c154:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c15e:	2300      	movs	r3, #0
 800c160:	623b      	str	r3, [r7, #32]
 800c162:	e014      	b.n	800c18e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	3301      	adds	r3, #1
 800c174:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	3301      	adds	r3, #1
 800c17a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	3301      	adds	r3, #1
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	3301      	adds	r3, #1
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	3301      	adds	r3, #1
 800c18c:	623b      	str	r3, [r7, #32]
 800c18e:	6a3a      	ldr	r2, [r7, #32]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	429a      	cmp	r2, r3
 800c194:	d3e6      	bcc.n	800c164 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c196:	8bfb      	ldrh	r3, [r7, #30]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01e      	beq.n	800c1da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c19c:	2300      	movs	r3, #0
 800c19e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f107 0310 	add.w	r3, r7, #16
 800c1ac:	6812      	ldr	r2, [r2, #0]
 800c1ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	701a      	strb	r2, [r3, #0]
      i++;
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c1ce:	8bfb      	ldrh	r3, [r7, #30]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c1d4:	8bfb      	ldrh	r3, [r7, #30]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1ea      	bne.n	800c1b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	372c      	adds	r7, #44	; 0x2c
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	785b      	ldrb	r3, [r3, #1]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d12c      	bne.n	800c25e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	db12      	blt.n	800c23c <USB_EPSetStall+0x54>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00f      	beq.n	800c23c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c23a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	440a      	add	r2, r1
 800c252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	e02b      	b.n	800c2b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	db12      	blt.n	800c296 <USB_EPSetStall+0xae>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	015a      	lsls	r2, r3, #5
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	0151      	lsls	r1, r2, #5
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	440a      	add	r2, r1
 800c28c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c294:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	0151      	lsls	r1, r2, #5
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d128      	bne.n	800c332 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	0151      	lsls	r1, r2, #5
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	440a      	add	r2, r1
 800c2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	791b      	ldrb	r3, [r3, #4]
 800c304:	2b03      	cmp	r3, #3
 800c306:	d003      	beq.n	800c310 <USB_EPClearStall+0x4c>
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	791b      	ldrb	r3, [r3, #4]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d138      	bne.n	800c382 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	0151      	lsls	r1, r2, #5
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	440a      	add	r2, r1
 800c326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	e027      	b.n	800c382 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	791b      	ldrb	r3, [r3, #4]
 800c356:	2b03      	cmp	r3, #3
 800c358:	d003      	beq.n	800c362 <USB_EPClearStall+0x9e>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	791b      	ldrb	r3, [r3, #4]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d10f      	bne.n	800c382 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	440a      	add	r2, r1
 800c378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c37c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c380:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c3b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c3c4:	68f9      	ldr	r1, [r7, #12]
 800c3c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c40a:	f023 0302 	bic.w	r3, r3, #2
 800c40e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c438:	f023 0303 	bic.w	r3, r3, #3
 800c43c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c44c:	f043 0302 	orr.w	r3, r3, #2
 800c450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	4013      	ands	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c478:	68fb      	ldr	r3, [r7, #12]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c486:	b480      	push	{r7}
 800c488:	b085      	sub	sp, #20
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	0c1b      	lsrs	r3, r3, #16
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4013      	ands	r3, r2
 800c4dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	b29b      	uxth	r3, r3
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4413      	add	r3, r2
 800c506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4013      	ands	r3, r2
 800c51a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c51c:	68bb      	ldr	r3, [r7, #8]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b087      	sub	sp, #28
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	460b      	mov	r3, r1
 800c534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c54e:	78fb      	ldrb	r3, [r7, #3]
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	fa22 f303 	lsr.w	r3, r2, r3
 800c55a:	01db      	lsls	r3, r3, #7
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	4313      	orrs	r3, r2
 800c562:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c564:	78fb      	ldrb	r3, [r7, #3]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	693a      	ldr	r2, [r7, #16]
 800c574:	4013      	ands	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c578:	68bb      	ldr	r3, [r7, #8]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	695b      	ldr	r3, [r3, #20]
 800c592:	f003 0301 	and.w	r3, r3, #1
}
 800c596:	4618      	mov	r0, r3
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b085      	sub	sp, #20
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c5c0:	f023 0307 	bic.w	r3, r3, #7
 800c5c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	333c      	adds	r3, #60	; 0x3c
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	4a1c      	ldr	r2, [pc, #112]	; (800c674 <USB_EP0_OutStart+0x8c>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d90a      	bls.n	800c61e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c618:	d101      	bne.n	800c61e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	e024      	b.n	800c668 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c624:	461a      	mov	r2, r3
 800c626:	2300      	movs	r3, #0
 800c628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c63c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64c:	f043 0318 	orr.w	r3, r3, #24
 800c650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c660:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c664:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	4f54300a 	.word	0x4f54300a

0800c678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c680:	2300      	movs	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3301      	adds	r3, #1
 800c688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4a13      	ldr	r2, [pc, #76]	; (800c6dc <USB_CoreReset+0x64>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d901      	bls.n	800c696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e01b      	b.n	800c6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	daf2      	bge.n	800c684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f043 0201 	orr.w	r2, r3, #1
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4a09      	ldr	r2, [pc, #36]	; (800c6dc <USB_CoreReset+0x64>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d901      	bls.n	800c6c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e006      	b.n	800c6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d0f0      	beq.n	800c6ae <USB_CoreReset+0x36>

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	00030d40 	.word	0x00030d40

0800c6e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c6e4:	4904      	ldr	r1, [pc, #16]	; (800c6f8 <MX_FATFS_Init+0x18>)
 800c6e6:	4805      	ldr	r0, [pc, #20]	; (800c6fc <MX_FATFS_Init+0x1c>)
 800c6e8:	f001 fe44 	bl	800e374 <FATFS_LinkDriver>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	4b03      	ldr	r3, [pc, #12]	; (800c700 <MX_FATFS_Init+0x20>)
 800c6f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6f4:	bf00      	nop
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20000cc4 	.word	0x20000cc4
 800c6fc:	08011d94 	.word	0x08011d94
 800c700:	20000cc0 	.word	0x20000cc0

0800c704 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c70e:	f000 f879 	bl	800c804 <BSP_SD_IsDetected>
 800c712:	4603      	mov	r3, r0
 800c714:	2b01      	cmp	r3, #1
 800c716:	d001      	beq.n	800c71c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c718:	2302      	movs	r3, #2
 800c71a:	e012      	b.n	800c742 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c71c:	480b      	ldr	r0, [pc, #44]	; (800c74c <BSP_SD_Init+0x48>)
 800c71e:	f7fa f8b1 	bl	8006884 <HAL_SD_Init>
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d109      	bne.n	800c740 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c72c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c730:	4806      	ldr	r0, [pc, #24]	; (800c74c <BSP_SD_Init+0x48>)
 800c732:	f7fa ff7d 	bl	8007630 <HAL_SD_ConfigWideBusOperation>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c740:	79fb      	ldrb	r3, [r7, #7]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	2000041c 	.word	0x2000041c

0800c750 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af02      	add	r7, sp, #8
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	4806      	ldr	r0, [pc, #24]	; (800c788 <BSP_SD_ReadBlocks+0x38>)
 800c76e:	f7fa f9b1 	bl	8006ad4 <HAL_SD_ReadBlocks>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2000041c 	.word	0x2000041c

0800c78c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af02      	add	r7, sp, #8
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	68f9      	ldr	r1, [r7, #12]
 800c7a8:	4806      	ldr	r0, [pc, #24]	; (800c7c4 <BSP_SD_WriteBlocks+0x38>)
 800c7aa:	f7fa fb25 	bl	8006df8 <HAL_SD_WriteBlocks>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	2000041c 	.word	0x2000041c

0800c7c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c7cc:	4805      	ldr	r0, [pc, #20]	; (800c7e4 <BSP_SD_GetCardState+0x1c>)
 800c7ce:	f7fb f843 	bl	8007858 <HAL_SD_GetCardState>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b04      	cmp	r3, #4
 800c7d6:	bf14      	ite	ne
 800c7d8:	2301      	movne	r3, #1
 800c7da:	2300      	moveq	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	2000041c 	.word	0x2000041c

0800c7e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	4803      	ldr	r0, [pc, #12]	; (800c800 <BSP_SD_GetCardInfo+0x18>)
 800c7f4:	f7fa fef0 	bl	80075d8 <HAL_SD_GetCardInfo>
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	2000041c 	.word	0x2000041c

0800c804 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c80a:	2301      	movs	r3, #1
 800c80c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c80e:	f000 f80b 	bl	800c828 <BSP_PlatformIsDetected>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c818:	2300      	movs	r3, #0
 800c81a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	b2db      	uxtb	r3, r3
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c82e:	2301      	movs	r3, #1
 800c830:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c83a:	f7f5 ffb5 	bl	80027a8 <HAL_GPIO_ReadPin>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800c844:	2300      	movs	r3, #0
 800c846:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c848:	79fb      	ldrb	r3, [r7, #7]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c85e:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <SD_CheckStatus+0x38>)
 800c860:	2201      	movs	r2, #1
 800c862:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c864:	f7ff ffb0 	bl	800c7c8 <BSP_SD_GetCardState>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d107      	bne.n	800c87e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <SD_CheckStatus+0x38>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f023 0301 	bic.w	r3, r3, #1
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b04      	ldr	r3, [pc, #16]	; (800c88c <SD_CheckStatus+0x38>)
 800c87c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <SD_CheckStatus+0x38>)
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	b2db      	uxtb	r3, r3
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	2000000d 	.word	0x2000000d

0800c890 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c89a:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <SD_initialize+0x38>)
 800c89c:	2201      	movs	r2, #1
 800c89e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c8a0:	f7ff ff30 	bl	800c704 <BSP_SD_Init>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d107      	bne.n	800c8ba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff ffd1 	bl	800c854 <SD_CheckStatus>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4b04      	ldr	r3, [pc, #16]	; (800c8c8 <SD_initialize+0x38>)
 800c8b8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c8ba:	4b03      	ldr	r3, [pc, #12]	; (800c8c8 <SD_initialize+0x38>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	b2db      	uxtb	r3, r3
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	2000000d 	.word	0x2000000d

0800c8cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c8d6:	79fb      	ldrb	r3, [r7, #7]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff ffbb 	bl	800c854 <SD_CheckStatus>
 800c8de:	4603      	mov	r3, r0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c900:	683a      	ldr	r2, [r7, #0]
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	68b8      	ldr	r0, [r7, #8]
 800c906:	f7ff ff23 	bl	800c750 <BSP_SD_ReadBlocks>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d107      	bne.n	800c920 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c910:	bf00      	nop
 800c912:	f7ff ff59 	bl	800c7c8 <BSP_SD_GetCardState>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1fa      	bne.n	800c912 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
 800c936:	4603      	mov	r3, r0
 800c938:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	68b8      	ldr	r0, [r7, #8]
 800c948:	f7ff ff20 	bl	800c78c <BSP_SD_WriteBlocks>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d107      	bne.n	800c962 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c952:	bf00      	nop
 800c954:	f7ff ff38 	bl	800c7c8 <BSP_SD_GetCardState>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1fa      	bne.n	800c954 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c95e:	2300      	movs	r3, #0
 800c960:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08c      	sub	sp, #48	; 0x30
 800c970:	af00      	add	r7, sp, #0
 800c972:	4603      	mov	r3, r0
 800c974:	603a      	str	r2, [r7, #0]
 800c976:	71fb      	strb	r3, [r7, #7]
 800c978:	460b      	mov	r3, r1
 800c97a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c982:	4b25      	ldr	r3, [pc, #148]	; (800ca18 <SD_ioctl+0xac>)
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <SD_ioctl+0x28>
 800c990:	2303      	movs	r3, #3
 800c992:	e03c      	b.n	800ca0e <SD_ioctl+0xa2>

  switch (cmd)
 800c994:	79bb      	ldrb	r3, [r7, #6]
 800c996:	2b03      	cmp	r3, #3
 800c998:	d834      	bhi.n	800ca04 <SD_ioctl+0x98>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <SD_ioctl+0x34>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9b1 	.word	0x0800c9b1
 800c9a4:	0800c9b9 	.word	0x0800c9b9
 800c9a8:	0800c9d1 	.word	0x0800c9d1
 800c9ac:	0800c9eb 	.word	0x0800c9eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c9b6:	e028      	b.n	800ca0a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff ff13 	bl	800c7e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c9c2:	6a3a      	ldr	r2, [r7, #32]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c9ce:	e01c      	b.n	800ca0a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff ff07 	bl	800c7e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c9e8:	e00f      	b.n	800ca0a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fefa 	bl	800c7e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	0a5a      	lsrs	r2, r3, #9
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca02:	e002      	b.n	800ca0a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ca04:	2304      	movs	r3, #4
 800ca06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ca0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3730      	adds	r7, #48	; 0x30
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	2000000d 	.word	0x2000000d

0800ca1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca2c:	f002 fa58 	bl	800eee0 <USBD_static_malloc>
 800ca30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d105      	bne.n	800ca44 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ca40:	2302      	movs	r3, #2
 800ca42:	e066      	b.n	800cb12 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7c1b      	ldrb	r3, [r3, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d119      	bne.n	800ca88 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca58:	2202      	movs	r2, #2
 800ca5a:	2181      	movs	r1, #129	; 0x81
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f002 f879 	bl	800eb54 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	2101      	movs	r1, #1
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f002 f86f 	bl	800eb54 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2210      	movs	r2, #16
 800ca82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ca86:	e016      	b.n	800cab6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca88:	2340      	movs	r3, #64	; 0x40
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	2181      	movs	r1, #129	; 0x81
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f002 f860 	bl	800eb54 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca9a:	2340      	movs	r3, #64	; 0x40
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	2101      	movs	r1, #1
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f002 f857 	bl	800eb54 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2210      	movs	r2, #16
 800cab2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cab6:	2308      	movs	r3, #8
 800cab8:	2203      	movs	r2, #3
 800caba:	2182      	movs	r1, #130	; 0x82
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f002 f849 	bl	800eb54 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7c1b      	ldrb	r3, [r3, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d109      	bne.n	800cb00 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800caf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800caf6:	2101      	movs	r1, #1
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f002 f9a5 	bl	800ee48 <USBD_LL_PrepareReceive>
 800cafe:	e007      	b.n	800cb10 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb06:	2340      	movs	r3, #64	; 0x40
 800cb08:	2101      	movs	r1, #1
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f002 f99c 	bl	800ee48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cb26:	2181      	movs	r1, #129	; 0x81
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f002 f851 	bl	800ebd0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cb34:	2101      	movs	r1, #1
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f002 f84a 	bl	800ebd0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cb44:	2182      	movs	r1, #130	; 0x82
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f002 f842 	bl	800ebd0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00e      	beq.n	800cb84 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb76:	4618      	mov	r0, r3
 800cb78:	f002 f9c0 	bl	800eefc <USBD_static_free>
    pdev->pClassData = NULL;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
	...

0800cb90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cba0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e0af      	b.n	800cd18 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d03f      	beq.n	800cc44 <USBD_CDC_Setup+0xb4>
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	f040 809f 	bne.w	800cd08 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	88db      	ldrh	r3, [r3, #6]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d02e      	beq.n	800cc30 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b25b      	sxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	da16      	bge.n	800cc0a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cbe8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	88d2      	ldrh	r2, [r2, #6]
 800cbee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	88db      	ldrh	r3, [r3, #6]
 800cbf4:	2b07      	cmp	r3, #7
 800cbf6:	bf28      	it	cs
 800cbf8:	2307      	movcs	r3, #7
 800cbfa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	89fa      	ldrh	r2, [r7, #14]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 fae9 	bl	800e1da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cc08:	e085      	b.n	800cd16 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	785a      	ldrb	r2, [r3, #1]
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	88db      	ldrh	r3, [r3, #6]
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cc20:	6939      	ldr	r1, [r7, #16]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	88db      	ldrh	r3, [r3, #6]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f001 fb02 	bl	800e232 <USBD_CtlPrepareRx>
      break;
 800cc2e:	e072      	b.n	800cd16 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	7850      	ldrb	r0, [r2, #1]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	4798      	blx	r3
      break;
 800cc42:	e068      	b.n	800cd16 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	2b0b      	cmp	r3, #11
 800cc4a:	d852      	bhi.n	800ccf2 <USBD_CDC_Setup+0x162>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <USBD_CDC_Setup+0xc4>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc85 	.word	0x0800cc85
 800cc58:	0800cd01 	.word	0x0800cd01
 800cc5c:	0800ccf3 	.word	0x0800ccf3
 800cc60:	0800ccf3 	.word	0x0800ccf3
 800cc64:	0800ccf3 	.word	0x0800ccf3
 800cc68:	0800ccf3 	.word	0x0800ccf3
 800cc6c:	0800ccf3 	.word	0x0800ccf3
 800cc70:	0800ccf3 	.word	0x0800ccf3
 800cc74:	0800ccf3 	.word	0x0800ccf3
 800cc78:	0800ccf3 	.word	0x0800ccf3
 800cc7c:	0800ccaf 	.word	0x0800ccaf
 800cc80:	0800ccd9 	.word	0x0800ccd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d107      	bne.n	800cca0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc90:	f107 030a 	add.w	r3, r7, #10
 800cc94:	2202      	movs	r2, #2
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f001 fa9e 	bl	800e1da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc9e:	e032      	b.n	800cd06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f001 fa28 	bl	800e0f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	75fb      	strb	r3, [r7, #23]
          break;
 800ccac:	e02b      	b.n	800cd06 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d107      	bne.n	800ccca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ccba:	f107 030d 	add.w	r3, r7, #13
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 fa89 	bl	800e1da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccc8:	e01d      	b.n	800cd06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fa13 	bl	800e0f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	75fb      	strb	r3, [r7, #23]
          break;
 800ccd6:	e016      	b.n	800cd06 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d00f      	beq.n	800cd04 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 fa06 	bl	800e0f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ccec:	2303      	movs	r3, #3
 800ccee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ccf0:	e008      	b.n	800cd04 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f001 f9ff 	bl	800e0f8 <USBD_CtlError>
          ret = USBD_FAIL;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	75fb      	strb	r3, [r7, #23]
          break;
 800ccfe:	e002      	b.n	800cd06 <USBD_CDC_Setup+0x176>
          break;
 800cd00:	bf00      	nop
 800cd02:	e008      	b.n	800cd16 <USBD_CDC_Setup+0x186>
          break;
 800cd04:	bf00      	nop
      }
      break;
 800cd06:	e006      	b.n	800cd16 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f001 f9f4 	bl	800e0f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800cd10:	2303      	movs	r3, #3
 800cd12:	75fb      	strb	r3, [r7, #23]
      break;
 800cd14:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e04f      	b.n	800cde2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	440b      	add	r3, r1
 800cd58:	3318      	adds	r3, #24
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d029      	beq.n	800cdb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd60:	78fa      	ldrb	r2, [r7, #3]
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3318      	adds	r3, #24
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	78f9      	ldrb	r1, [r7, #3]
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	460b      	mov	r3, r1
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	440b      	add	r3, r1
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4403      	add	r3, r0
 800cd80:	3348      	adds	r3, #72	; 0x48
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd88:	fb01 f303 	mul.w	r3, r1, r3
 800cd8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d110      	bne.n	800cdb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cd92:	78fa      	ldrb	r2, [r7, #3]
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	4613      	mov	r3, r2
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4413      	add	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	440b      	add	r3, r1
 800cda0:	3318      	adds	r3, #24
 800cda2:	2200      	movs	r2, #0
 800cda4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cda6:	78f9      	ldrb	r1, [r7, #3]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	2200      	movs	r2, #0
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f002 f813 	bl	800edd8 <USBD_LL_Transmit>
 800cdb2:	e015      	b.n	800cde0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cddc:	78fa      	ldrb	r2, [r7, #3]
 800cdde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e015      	b.n	800ce38 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f002 f851 	bl	800eeb8 <USBD_LL_GetRxDataSize>
 800ce16:	4602      	mov	r2, r0
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce32:	4611      	mov	r1, r2
 800ce34:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e01b      	b.n	800ce92 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d015      	beq.n	800ce90 <USBD_CDC_EP0_RxReady+0x50>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce6a:	2bff      	cmp	r3, #255	; 0xff
 800ce6c:	d010      	beq.n	800ce90 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ce7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce84:	b292      	uxth	r2, r2
 800ce86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	22ff      	movs	r2, #255	; 0xff
 800ce8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2243      	movs	r2, #67	; 0x43
 800cea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ceaa:	4b03      	ldr	r3, [pc, #12]	; (800ceb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	20000098 	.word	0x20000098

0800cebc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2243      	movs	r2, #67	; 0x43
 800cec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ceca:	4b03      	ldr	r3, [pc, #12]	; (800ced8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	20000054 	.word	0x20000054

0800cedc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2243      	movs	r2, #67	; 0x43
 800cee8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ceea:	4b03      	ldr	r3, [pc, #12]	; (800cef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	200000dc 	.word	0x200000dc

0800cefc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	220a      	movs	r2, #10
 800cf08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf0a:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	20000010 	.word	0x20000010

0800cf1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e004      	b.n	800cf3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf46:	b480      	push	{r7}
 800cf48:	b087      	sub	sp, #28
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e008      	b.n	800cf76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b085      	sub	sp, #20
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e004      	b.n	800cfa8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	e016      	b.n	800d000 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	7c1b      	ldrb	r3, [r3, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f001 ff2e 	bl	800ee48 <USBD_LL_PrepareReceive>
 800cfec:	e007      	b.n	800cffe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	2101      	movs	r1, #1
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f001 ff25 	bl	800ee48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	4613      	mov	r3, r2
 800d014:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d01c:	2303      	movs	r3, #3
 800d01e:	e01f      	b.n	800d060 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	79fa      	ldrb	r2, [r7, #7]
 800d052:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f001 fd01 	bl	800ea5c <USBD_LL_Init>
 800d05a:	4603      	mov	r3, r0
 800d05c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3718      	adds	r7, #24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e016      	b.n	800d0ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09c:	f107 020e 	add.w	r2, r7, #14
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4798      	blx	r3
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 fd16 	bl	800eaf0 <USBD_LL_Start>
 800d0c4:	4603      	mov	r3, r0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d009      	beq.n	800d112 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	78fa      	ldrb	r2, [r7, #3]
 800d108:	4611      	mov	r1, r2
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	4798      	blx	r3
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d112:	7bfb      	ldrb	r3, [r7, #15]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	78fa      	ldrb	r2, [r7, #3]
 800d13c:	4611      	mov	r1, r2
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	4798      	blx	r3
  }

  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 ff90 	bl	800e084 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d172:	461a      	mov	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d180:	f003 031f 	and.w	r3, r3, #31
 800d184:	2b02      	cmp	r3, #2
 800d186:	d01a      	beq.n	800d1be <USBD_LL_SetupStage+0x72>
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d822      	bhi.n	800d1d2 <USBD_LL_SetupStage+0x86>
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <USBD_LL_SetupStage+0x4a>
 800d190:	2b01      	cmp	r3, #1
 800d192:	d00a      	beq.n	800d1aa <USBD_LL_SetupStage+0x5e>
 800d194:	e01d      	b.n	800d1d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fa62 	bl	800d668 <USBD_StdDevReq>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a8:	e020      	b.n	800d1ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fac6 	bl	800d744 <USBD_StdItfReq>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d1bc:	e016      	b.n	800d1ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fb05 	bl	800d7d6 <USBD_StdEPReq>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d0:	e00c      	b.n	800d1ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d1d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f001 fd2b 	bl	800ec3c <USBD_LL_StallEP>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ea:	bf00      	nop
  }

  return ret;
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b086      	sub	sp, #24
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	460b      	mov	r3, r1
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d204:	7afb      	ldrb	r3, [r7, #11]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d138      	bne.n	800d27c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d210:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d14a      	bne.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	429a      	cmp	r2, r3
 800d226:	d913      	bls.n	800d250 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	1ad2      	subs	r2, r2, r3
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	68da      	ldr	r2, [r3, #12]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	4293      	cmp	r3, r2
 800d240:	bf28      	it	cs
 800d242:	4613      	movcs	r3, r2
 800d244:	461a      	mov	r2, r3
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f001 f80f 	bl	800e26c <USBD_CtlContinueRx>
 800d24e:	e030      	b.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b03      	cmp	r3, #3
 800d25a:	d10b      	bne.n	800d274 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d005      	beq.n	800d274 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f001 f80a 	bl	800e28e <USBD_CtlSendStatus>
 800d27a:	e01a      	b.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b03      	cmp	r3, #3
 800d286:	d114      	bne.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00e      	beq.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	7afa      	ldrb	r2, [r7, #11]
 800d29e:	4611      	mov	r1, r2
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	4798      	blx	r3
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	e000      	b.n	800d2b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d2ca:	7afb      	ldrb	r3, [r7, #11]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d16b      	bne.n	800d3a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3314      	adds	r3, #20
 800d2d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d156      	bne.n	800d38e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	689a      	ldr	r2, [r3, #8]
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d914      	bls.n	800d316 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	1ad2      	subs	r2, r2, r3
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 ff84 	bl	800e210 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d308:	2300      	movs	r3, #0
 800d30a:	2200      	movs	r2, #0
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f001 fd9a 	bl	800ee48 <USBD_LL_PrepareReceive>
 800d314:	e03b      	b.n	800d38e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	68da      	ldr	r2, [r3, #12]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d11c      	bne.n	800d35c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d316      	bcc.n	800d35c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d338:	429a      	cmp	r2, r3
 800d33a:	d20f      	bcs.n	800d35c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d33c:	2200      	movs	r2, #0
 800d33e:	2100      	movs	r1, #0
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f000 ff65 	bl	800e210 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d34e:	2300      	movs	r3, #0
 800d350:	2200      	movs	r2, #0
 800d352:	2100      	movs	r1, #0
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f001 fd77 	bl	800ee48 <USBD_LL_PrepareReceive>
 800d35a:	e018      	b.n	800d38e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b03      	cmp	r3, #3
 800d366:	d10b      	bne.n	800d380 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d380:	2180      	movs	r1, #128	; 0x80
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f001 fc5a 	bl	800ec3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f000 ff93 	bl	800e2b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d394:	2b01      	cmp	r3, #1
 800d396:	d122      	bne.n	800d3de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7ff fe98 	bl	800d0ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d3a6:	e01a      	b.n	800d3de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d114      	bne.n	800d3de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00e      	beq.n	800d3de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	7afa      	ldrb	r2, [r7, #11]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	4798      	blx	r3
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	e000      	b.n	800d3e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3718      	adds	r7, #24
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d418:	2303      	movs	r3, #3
 800d41a:	e02f      	b.n	800d47c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00f      	beq.n	800d446 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d009      	beq.n	800d446 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6852      	ldr	r2, [r2, #4]
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	4611      	mov	r1, r2
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d446:	2340      	movs	r3, #64	; 0x40
 800d448:	2200      	movs	r2, #0
 800d44a:	2100      	movs	r1, #0
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 fb81 	bl	800eb54 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2240      	movs	r2, #64	; 0x40
 800d45e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d462:	2340      	movs	r3, #64	; 0x40
 800d464:	2200      	movs	r2, #0
 800d466:	2180      	movs	r1, #128	; 0x80
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f001 fb73 	bl	800eb54 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2201      	movs	r2, #1
 800d472:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2240      	movs	r2, #64	; 0x40
 800d478:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	460b      	mov	r3, r1
 800d48e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2204      	movs	r2, #4
 800d4be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b04      	cmp	r3, #4
 800d4e2:	d106      	bne.n	800d4f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d512:	2303      	movs	r3, #3
 800d514:	e012      	b.n	800d53c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b03      	cmp	r3, #3
 800d520:	d10b      	bne.n	800d53a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d005      	beq.n	800d53a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e014      	b.n	800d588 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b03      	cmp	r3, #3
 800d568:	d10d      	bne.n	800d586 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	78fa      	ldrb	r2, [r7, #3]
 800d580:	4611      	mov	r1, r2
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d5a6:	2303      	movs	r3, #3
 800d5a8:	e014      	b.n	800d5d4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d10d      	bne.n	800d5d2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d007      	beq.n	800d5d2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	78fa      	ldrb	r2, [r7, #3]
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d009      	beq.n	800d620 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6852      	ldr	r2, [r2, #4]
 800d618:	b2d2      	uxtb	r2, r2
 800d61a:	4611      	mov	r1, r2
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	4798      	blx	r3
  }

  return USBD_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d62a:	b480      	push	{r7}
 800d62c:	b087      	sub	sp, #28
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	3301      	adds	r3, #1
 800d640:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d648:	8a3b      	ldrh	r3, [r7, #16]
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	b21a      	sxth	r2, r3
 800d64e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d652:	4313      	orrs	r3, r2
 800d654:	b21b      	sxth	r3, r3
 800d656:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d658:	89fb      	ldrh	r3, [r7, #14]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
	...

0800d668 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d67e:	2b40      	cmp	r3, #64	; 0x40
 800d680:	d005      	beq.n	800d68e <USBD_StdDevReq+0x26>
 800d682:	2b40      	cmp	r3, #64	; 0x40
 800d684:	d853      	bhi.n	800d72e <USBD_StdDevReq+0xc6>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <USBD_StdDevReq+0x3a>
 800d68a:	2b20      	cmp	r3, #32
 800d68c:	d14f      	bne.n	800d72e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	6839      	ldr	r1, [r7, #0]
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	4798      	blx	r3
 800d69c:	4603      	mov	r3, r0
 800d69e:	73fb      	strb	r3, [r7, #15]
      break;
 800d6a0:	e04a      	b.n	800d738 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	785b      	ldrb	r3, [r3, #1]
 800d6a6:	2b09      	cmp	r3, #9
 800d6a8:	d83b      	bhi.n	800d722 <USBD_StdDevReq+0xba>
 800d6aa:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <USBD_StdDevReq+0x48>)
 800d6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b0:	0800d705 	.word	0x0800d705
 800d6b4:	0800d719 	.word	0x0800d719
 800d6b8:	0800d723 	.word	0x0800d723
 800d6bc:	0800d70f 	.word	0x0800d70f
 800d6c0:	0800d723 	.word	0x0800d723
 800d6c4:	0800d6e3 	.word	0x0800d6e3
 800d6c8:	0800d6d9 	.word	0x0800d6d9
 800d6cc:	0800d723 	.word	0x0800d723
 800d6d0:	0800d6fb 	.word	0x0800d6fb
 800d6d4:	0800d6ed 	.word	0x0800d6ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 f9de 	bl	800da9c <USBD_GetDescriptor>
          break;
 800d6e0:	e024      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d6e2:	6839      	ldr	r1, [r7, #0]
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fb43 	bl	800dd70 <USBD_SetAddress>
          break;
 800d6ea:	e01f      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d6ec:	6839      	ldr	r1, [r7, #0]
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fb82 	bl	800ddf8 <USBD_SetConfig>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
          break;
 800d6f8:	e018      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fc21 	bl	800df44 <USBD_GetConfig>
          break;
 800d702:	e013      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fc52 	bl	800dfb0 <USBD_GetStatus>
          break;
 800d70c:	e00e      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fc81 	bl	800e018 <USBD_SetFeature>
          break;
 800d716:	e009      	b.n	800d72c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fc90 	bl	800e040 <USBD_ClrFeature>
          break;
 800d720:	e004      	b.n	800d72c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fce7 	bl	800e0f8 <USBD_CtlError>
          break;
 800d72a:	bf00      	nop
      }
      break;
 800d72c:	e004      	b.n	800d738 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fce1 	bl	800e0f8 <USBD_CtlError>
      break;
 800d736:	bf00      	nop
  }

  return ret;
 800d738:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop

0800d744 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d75a:	2b40      	cmp	r3, #64	; 0x40
 800d75c:	d005      	beq.n	800d76a <USBD_StdItfReq+0x26>
 800d75e:	2b40      	cmp	r3, #64	; 0x40
 800d760:	d82f      	bhi.n	800d7c2 <USBD_StdItfReq+0x7e>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <USBD_StdItfReq+0x26>
 800d766:	2b20      	cmp	r3, #32
 800d768:	d12b      	bne.n	800d7c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d770:	b2db      	uxtb	r3, r3
 800d772:	3b01      	subs	r3, #1
 800d774:	2b02      	cmp	r3, #2
 800d776:	d81d      	bhi.n	800d7b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	889b      	ldrh	r3, [r3, #4]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d813      	bhi.n	800d7aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4798      	blx	r3
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	88db      	ldrh	r3, [r3, #6]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d110      	bne.n	800d7be <USBD_StdItfReq+0x7a>
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10d      	bne.n	800d7be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fd73 	bl	800e28e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d7a8:	e009      	b.n	800d7be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fca3 	bl	800e0f8 <USBD_CtlError>
          break;
 800d7b2:	e004      	b.n	800d7be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fc9e 	bl	800e0f8 <USBD_CtlError>
          break;
 800d7bc:	e000      	b.n	800d7c0 <USBD_StdItfReq+0x7c>
          break;
 800d7be:	bf00      	nop
      }
      break;
 800d7c0:	e004      	b.n	800d7cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fc97 	bl	800e0f8 <USBD_CtlError>
      break;
 800d7ca:	bf00      	nop
  }

  return ret;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b084      	sub	sp, #16
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
 800d7de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	889b      	ldrh	r3, [r3, #4]
 800d7e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7f2:	2b40      	cmp	r3, #64	; 0x40
 800d7f4:	d007      	beq.n	800d806 <USBD_StdEPReq+0x30>
 800d7f6:	2b40      	cmp	r3, #64	; 0x40
 800d7f8:	f200 8145 	bhi.w	800da86 <USBD_StdEPReq+0x2b0>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00c      	beq.n	800d81a <USBD_StdEPReq+0x44>
 800d800:	2b20      	cmp	r3, #32
 800d802:	f040 8140 	bne.w	800da86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4798      	blx	r3
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
      break;
 800d818:	e13a      	b.n	800da90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	785b      	ldrb	r3, [r3, #1]
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d007      	beq.n	800d832 <USBD_StdEPReq+0x5c>
 800d822:	2b03      	cmp	r3, #3
 800d824:	f300 8129 	bgt.w	800da7a <USBD_StdEPReq+0x2a4>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d07f      	beq.n	800d92c <USBD_StdEPReq+0x156>
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d03c      	beq.n	800d8aa <USBD_StdEPReq+0xd4>
 800d830:	e123      	b.n	800da7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d002      	beq.n	800d844 <USBD_StdEPReq+0x6e>
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d016      	beq.n	800d870 <USBD_StdEPReq+0x9a>
 800d842:	e02c      	b.n	800d89e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d844:	7bbb      	ldrb	r3, [r7, #14]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00d      	beq.n	800d866 <USBD_StdEPReq+0x90>
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
 800d84c:	2b80      	cmp	r3, #128	; 0x80
 800d84e:	d00a      	beq.n	800d866 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f001 f9f1 	bl	800ec3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d85a:	2180      	movs	r1, #128	; 0x80
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f001 f9ed 	bl	800ec3c <USBD_LL_StallEP>
 800d862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d864:	e020      	b.n	800d8a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 fc45 	bl	800e0f8 <USBD_CtlError>
              break;
 800d86e:	e01b      	b.n	800d8a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	885b      	ldrh	r3, [r3, #2]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10e      	bne.n	800d896 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00b      	beq.n	800d896 <USBD_StdEPReq+0xc0>
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	2b80      	cmp	r3, #128	; 0x80
 800d882:	d008      	beq.n	800d896 <USBD_StdEPReq+0xc0>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	88db      	ldrh	r3, [r3, #6]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d104      	bne.n	800d896 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d88c:	7bbb      	ldrb	r3, [r7, #14]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f001 f9d3 	bl	800ec3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fcf9 	bl	800e28e <USBD_CtlSendStatus>

              break;
 800d89c:	e004      	b.n	800d8a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fc29 	bl	800e0f8 <USBD_CtlError>
              break;
 800d8a6:	bf00      	nop
          }
          break;
 800d8a8:	e0ec      	b.n	800da84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d002      	beq.n	800d8bc <USBD_StdEPReq+0xe6>
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d016      	beq.n	800d8e8 <USBD_StdEPReq+0x112>
 800d8ba:	e030      	b.n	800d91e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00d      	beq.n	800d8de <USBD_StdEPReq+0x108>
 800d8c2:	7bbb      	ldrb	r3, [r7, #14]
 800d8c4:	2b80      	cmp	r3, #128	; 0x80
 800d8c6:	d00a      	beq.n	800d8de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f001 f9b5 	bl	800ec3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8d2:	2180      	movs	r1, #128	; 0x80
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f001 f9b1 	bl	800ec3c <USBD_LL_StallEP>
 800d8da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8dc:	e025      	b.n	800d92a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d8de:	6839      	ldr	r1, [r7, #0]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fc09 	bl	800e0f8 <USBD_CtlError>
              break;
 800d8e6:	e020      	b.n	800d92a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	885b      	ldrh	r3, [r3, #2]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d11b      	bne.n	800d928 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d004      	beq.n	800d904 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f001 f9d2 	bl	800eca8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fcc2 	bl	800e28e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	4798      	blx	r3
 800d918:	4603      	mov	r3, r0
 800d91a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d91c:	e004      	b.n	800d928 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fbe9 	bl	800e0f8 <USBD_CtlError>
              break;
 800d926:	e000      	b.n	800d92a <USBD_StdEPReq+0x154>
              break;
 800d928:	bf00      	nop
          }
          break;
 800d92a:	e0ab      	b.n	800da84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b02      	cmp	r3, #2
 800d936:	d002      	beq.n	800d93e <USBD_StdEPReq+0x168>
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d032      	beq.n	800d9a2 <USBD_StdEPReq+0x1cc>
 800d93c:	e097      	b.n	800da6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d007      	beq.n	800d954 <USBD_StdEPReq+0x17e>
 800d944:	7bbb      	ldrb	r3, [r7, #14]
 800d946:	2b80      	cmp	r3, #128	; 0x80
 800d948:	d004      	beq.n	800d954 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fbd3 	bl	800e0f8 <USBD_CtlError>
                break;
 800d952:	e091      	b.n	800da78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	da0b      	bge.n	800d974 <USBD_StdEPReq+0x19e>
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d962:	4613      	mov	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	3310      	adds	r3, #16
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4413      	add	r3, r2
 800d970:	3304      	adds	r3, #4
 800d972:	e00b      	b.n	800d98c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d97a:	4613      	mov	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	4413      	add	r3, r2
 800d98a:	3304      	adds	r3, #4
 800d98c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2202      	movs	r2, #2
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fc1d 	bl	800e1da <USBD_CtlSendData>
              break;
 800d9a0:	e06a      	b.n	800da78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	da11      	bge.n	800d9ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9aa:	7bbb      	ldrb	r3, [r7, #14]
 800d9ac:	f003 020f 	and.w	r2, r3, #15
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3324      	adds	r3, #36	; 0x24
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d117      	bne.n	800d9f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fb96 	bl	800e0f8 <USBD_CtlError>
                  break;
 800d9cc:	e054      	b.n	800da78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9ce:	7bbb      	ldrb	r3, [r7, #14]
 800d9d0:	f003 020f 	and.w	r2, r3, #15
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4413      	add	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	440b      	add	r3, r1
 800d9e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d104      	bne.n	800d9f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fb83 	bl	800e0f8 <USBD_CtlError>
                  break;
 800d9f2:	e041      	b.n	800da78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	da0b      	bge.n	800da14 <USBD_StdEPReq+0x23e>
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	3310      	adds	r3, #16
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	4413      	add	r3, r2
 800da10:	3304      	adds	r3, #4
 800da12:	e00b      	b.n	800da2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da14:	7bbb      	ldrb	r3, [r7, #14]
 800da16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	4413      	add	r3, r2
 800da2a:	3304      	adds	r3, #4
 800da2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da2e:	7bbb      	ldrb	r3, [r7, #14]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <USBD_StdEPReq+0x264>
 800da34:	7bbb      	ldrb	r3, [r7, #14]
 800da36:	2b80      	cmp	r3, #128	; 0x80
 800da38:	d103      	bne.n	800da42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	e00e      	b.n	800da60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	4619      	mov	r1, r3
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f001 f964 	bl	800ed14 <USBD_LL_IsStallEP>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2201      	movs	r2, #1
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	e002      	b.n	800da60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	2200      	movs	r2, #0
 800da5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2202      	movs	r2, #2
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fbb7 	bl	800e1da <USBD_CtlSendData>
              break;
 800da6c:	e004      	b.n	800da78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fb41 	bl	800e0f8 <USBD_CtlError>
              break;
 800da76:	bf00      	nop
          }
          break;
 800da78:	e004      	b.n	800da84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fb3b 	bl	800e0f8 <USBD_CtlError>
          break;
 800da82:	bf00      	nop
      }
      break;
 800da84:	e004      	b.n	800da90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fb35 	bl	800e0f8 <USBD_CtlError>
      break;
 800da8e:	bf00      	nop
  }

  return ret;
 800da90:	7bfb      	ldrb	r3, [r7, #15]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800daae:	2300      	movs	r3, #0
 800dab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	885b      	ldrh	r3, [r3, #2]
 800dab6:	0a1b      	lsrs	r3, r3, #8
 800dab8:	b29b      	uxth	r3, r3
 800daba:	3b01      	subs	r3, #1
 800dabc:	2b06      	cmp	r3, #6
 800dabe:	f200 8128 	bhi.w	800dd12 <USBD_GetDescriptor+0x276>
 800dac2:	a201      	add	r2, pc, #4	; (adr r2, 800dac8 <USBD_GetDescriptor+0x2c>)
 800dac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac8:	0800dae5 	.word	0x0800dae5
 800dacc:	0800dafd 	.word	0x0800dafd
 800dad0:	0800db3d 	.word	0x0800db3d
 800dad4:	0800dd13 	.word	0x0800dd13
 800dad8:	0800dd13 	.word	0x0800dd13
 800dadc:	0800dcb3 	.word	0x0800dcb3
 800dae0:	0800dcdf 	.word	0x0800dcdf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	7c12      	ldrb	r2, [r2, #16]
 800daf0:	f107 0108 	add.w	r1, r7, #8
 800daf4:	4610      	mov	r0, r2
 800daf6:	4798      	blx	r3
 800daf8:	60f8      	str	r0, [r7, #12]
      break;
 800dafa:	e112      	b.n	800dd22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7c1b      	ldrb	r3, [r3, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10d      	bne.n	800db20 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0c:	f107 0208 	add.w	r2, r7, #8
 800db10:	4610      	mov	r0, r2
 800db12:	4798      	blx	r3
 800db14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	2202      	movs	r2, #2
 800db1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db1e:	e100      	b.n	800dd22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	f107 0208 	add.w	r2, r7, #8
 800db2c:	4610      	mov	r0, r2
 800db2e:	4798      	blx	r3
 800db30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3301      	adds	r3, #1
 800db36:	2202      	movs	r2, #2
 800db38:	701a      	strb	r2, [r3, #0]
      break;
 800db3a:	e0f2      	b.n	800dd22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	885b      	ldrh	r3, [r3, #2]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b05      	cmp	r3, #5
 800db44:	f200 80ac 	bhi.w	800dca0 <USBD_GetDescriptor+0x204>
 800db48:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <USBD_GetDescriptor+0xb4>)
 800db4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4e:	bf00      	nop
 800db50:	0800db69 	.word	0x0800db69
 800db54:	0800db9d 	.word	0x0800db9d
 800db58:	0800dbd1 	.word	0x0800dbd1
 800db5c:	0800dc05 	.word	0x0800dc05
 800db60:	0800dc39 	.word	0x0800dc39
 800db64:	0800dc6d 	.word	0x0800dc6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00b      	beq.n	800db8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	7c12      	ldrb	r2, [r2, #16]
 800db80:	f107 0108 	add.w	r1, r7, #8
 800db84:	4610      	mov	r0, r2
 800db86:	4798      	blx	r3
 800db88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db8a:	e091      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fab2 	bl	800e0f8 <USBD_CtlError>
            err++;
 800db94:	7afb      	ldrb	r3, [r7, #11]
 800db96:	3301      	adds	r3, #1
 800db98:	72fb      	strb	r3, [r7, #11]
          break;
 800db9a:	e089      	b.n	800dcb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00b      	beq.n	800dbc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	7c12      	ldrb	r2, [r2, #16]
 800dbb4:	f107 0108 	add.w	r1, r7, #8
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4798      	blx	r3
 800dbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbbe:	e077      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbc0:	6839      	ldr	r1, [r7, #0]
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fa98 	bl	800e0f8 <USBD_CtlError>
            err++;
 800dbc8:	7afb      	ldrb	r3, [r7, #11]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbce:	e06f      	b.n	800dcb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00b      	beq.n	800dbf4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	7c12      	ldrb	r2, [r2, #16]
 800dbe8:	f107 0108 	add.w	r1, r7, #8
 800dbec:	4610      	mov	r0, r2
 800dbee:	4798      	blx	r3
 800dbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbf2:	e05d      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fa7e 	bl	800e0f8 <USBD_CtlError>
            err++;
 800dbfc:	7afb      	ldrb	r3, [r7, #11]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	72fb      	strb	r3, [r7, #11]
          break;
 800dc02:	e055      	b.n	800dcb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00b      	beq.n	800dc28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	7c12      	ldrb	r2, [r2, #16]
 800dc1c:	f107 0108 	add.w	r1, r7, #8
 800dc20:	4610      	mov	r0, r2
 800dc22:	4798      	blx	r3
 800dc24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc26:	e043      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fa64 	bl	800e0f8 <USBD_CtlError>
            err++;
 800dc30:	7afb      	ldrb	r3, [r7, #11]
 800dc32:	3301      	adds	r3, #1
 800dc34:	72fb      	strb	r3, [r7, #11]
          break;
 800dc36:	e03b      	b.n	800dcb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00b      	beq.n	800dc5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	7c12      	ldrb	r2, [r2, #16]
 800dc50:	f107 0108 	add.w	r1, r7, #8
 800dc54:	4610      	mov	r0, r2
 800dc56:	4798      	blx	r3
 800dc58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc5a:	e029      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fa4a 	bl	800e0f8 <USBD_CtlError>
            err++;
 800dc64:	7afb      	ldrb	r3, [r7, #11]
 800dc66:	3301      	adds	r3, #1
 800dc68:	72fb      	strb	r3, [r7, #11]
          break;
 800dc6a:	e021      	b.n	800dcb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc72:	699b      	ldr	r3, [r3, #24]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00b      	beq.n	800dc90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	7c12      	ldrb	r2, [r2, #16]
 800dc84:	f107 0108 	add.w	r1, r7, #8
 800dc88:	4610      	mov	r0, r2
 800dc8a:	4798      	blx	r3
 800dc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8e:	e00f      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 fa30 	bl	800e0f8 <USBD_CtlError>
            err++;
 800dc98:	7afb      	ldrb	r3, [r7, #11]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc9e:	e007      	b.n	800dcb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fa28 	bl	800e0f8 <USBD_CtlError>
          err++;
 800dca8:	7afb      	ldrb	r3, [r7, #11]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dcae:	bf00      	nop
      }
      break;
 800dcb0:	e037      	b.n	800dd22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	7c1b      	ldrb	r3, [r3, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d109      	bne.n	800dcce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc2:	f107 0208 	add.w	r2, r7, #8
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	4798      	blx	r3
 800dcca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dccc:	e029      	b.n	800dd22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fa11 	bl	800e0f8 <USBD_CtlError>
        err++;
 800dcd6:	7afb      	ldrb	r3, [r7, #11]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	72fb      	strb	r3, [r7, #11]
      break;
 800dcdc:	e021      	b.n	800dd22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7c1b      	ldrb	r3, [r3, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10d      	bne.n	800dd02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcee:	f107 0208 	add.w	r2, r7, #8
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	4798      	blx	r3
 800dcf6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	2207      	movs	r2, #7
 800dcfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd00:	e00f      	b.n	800dd22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f9f7 	bl	800e0f8 <USBD_CtlError>
        err++;
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd10:	e007      	b.n	800dd22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f9ef 	bl	800e0f8 <USBD_CtlError>
      err++;
 800dd1a:	7afb      	ldrb	r3, [r7, #11]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd20:	bf00      	nop
  }

  if (err != 0U)
 800dd22:	7afb      	ldrb	r3, [r7, #11]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d11e      	bne.n	800dd66 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	88db      	ldrh	r3, [r3, #6]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d016      	beq.n	800dd5e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dd30:	893b      	ldrh	r3, [r7, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00e      	beq.n	800dd54 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	88da      	ldrh	r2, [r3, #6]
 800dd3a:	893b      	ldrh	r3, [r7, #8]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bf28      	it	cs
 800dd40:	4613      	movcs	r3, r2
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd46:	893b      	ldrh	r3, [r7, #8]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fa44 	bl	800e1da <USBD_CtlSendData>
 800dd52:	e009      	b.n	800dd68 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f9ce 	bl	800e0f8 <USBD_CtlError>
 800dd5c:	e004      	b.n	800dd68 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fa95 	bl	800e28e <USBD_CtlSendStatus>
 800dd64:	e000      	b.n	800dd68 <USBD_GetDescriptor+0x2cc>
    return;
 800dd66:	bf00      	nop
  }
}
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop

0800dd70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	889b      	ldrh	r3, [r3, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d131      	bne.n	800dde6 <USBD_SetAddress+0x76>
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	88db      	ldrh	r3, [r3, #6]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d12d      	bne.n	800dde6 <USBD_SetAddress+0x76>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	885b      	ldrh	r3, [r3, #2]
 800dd8e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd90:	d829      	bhi.n	800dde6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	885b      	ldrh	r3, [r3, #2]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d104      	bne.n	800ddb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f9a3 	bl	800e0f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	e01d      	b.n	800ddf0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	7bfa      	ldrb	r2, [r7, #15]
 800ddb8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 ffd3 	bl	800ed6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fa61 	bl	800e28e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d004      	beq.n	800dddc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddda:	e009      	b.n	800ddf0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde4:	e004      	b.n	800ddf0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f985 	bl	800e0f8 <USBD_CtlError>
  }
}
 800ddee:	bf00      	nop
 800ddf0:	bf00      	nop
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	885b      	ldrh	r3, [r3, #2]
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	4b4c      	ldr	r3, [pc, #304]	; (800df40 <USBD_SetConfig+0x148>)
 800de0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de10:	4b4b      	ldr	r3, [pc, #300]	; (800df40 <USBD_SetConfig+0x148>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d905      	bls.n	800de24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f96c 	bl	800e0f8 <USBD_CtlError>
    return USBD_FAIL;
 800de20:	2303      	movs	r3, #3
 800de22:	e088      	b.n	800df36 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d002      	beq.n	800de36 <USBD_SetConfig+0x3e>
 800de30:	2b03      	cmp	r3, #3
 800de32:	d025      	beq.n	800de80 <USBD_SetConfig+0x88>
 800de34:	e071      	b.n	800df1a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de36:	4b42      	ldr	r3, [pc, #264]	; (800df40 <USBD_SetConfig+0x148>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d01c      	beq.n	800de78 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800de3e:	4b40      	ldr	r3, [pc, #256]	; (800df40 <USBD_SetConfig+0x148>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	461a      	mov	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de48:	4b3d      	ldr	r3, [pc, #244]	; (800df40 <USBD_SetConfig+0x148>)
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff f948 	bl	800d0e4 <USBD_SetClassConfig>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de58:	7bfb      	ldrb	r3, [r7, #15]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d004      	beq.n	800de68 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f949 	bl	800e0f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de66:	e065      	b.n	800df34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 fa10 	bl	800e28e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2203      	movs	r2, #3
 800de72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de76:	e05d      	b.n	800df34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 fa08 	bl	800e28e <USBD_CtlSendStatus>
      break;
 800de7e:	e059      	b.n	800df34 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de80:	4b2f      	ldr	r3, [pc, #188]	; (800df40 <USBD_SetConfig+0x148>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d112      	bne.n	800deae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2202      	movs	r2, #2
 800de8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de90:	4b2b      	ldr	r3, [pc, #172]	; (800df40 <USBD_SetConfig+0x148>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	461a      	mov	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de9a:	4b29      	ldr	r3, [pc, #164]	; (800df40 <USBD_SetConfig+0x148>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff f93b 	bl	800d11c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f9f1 	bl	800e28e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800deac:	e042      	b.n	800df34 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800deae:	4b24      	ldr	r3, [pc, #144]	; (800df40 <USBD_SetConfig+0x148>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d02a      	beq.n	800df12 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff f929 	bl	800d11c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800deca:	4b1d      	ldr	r3, [pc, #116]	; (800df40 <USBD_SetConfig+0x148>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ded4:	4b1a      	ldr	r3, [pc, #104]	; (800df40 <USBD_SetConfig+0x148>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff f902 	bl	800d0e4 <USBD_SetClassConfig>
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00f      	beq.n	800df0a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800deea:	6839      	ldr	r1, [r7, #0]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f903 	bl	800e0f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	b2db      	uxtb	r3, r3
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff f90e 	bl	800d11c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df08:	e014      	b.n	800df34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f9bf 	bl	800e28e <USBD_CtlSendStatus>
      break;
 800df10:	e010      	b.n	800df34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f9bb 	bl	800e28e <USBD_CtlSendStatus>
      break;
 800df18:	e00c      	b.n	800df34 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f8eb 	bl	800e0f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df22:	4b07      	ldr	r3, [pc, #28]	; (800df40 <USBD_SetConfig+0x148>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	4619      	mov	r1, r3
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff f8f7 	bl	800d11c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df2e:	2303      	movs	r3, #3
 800df30:	73fb      	strb	r3, [r7, #15]
      break;
 800df32:	bf00      	nop
  }

  return ret;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20000cc8 	.word	0x20000cc8

0800df44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	88db      	ldrh	r3, [r3, #6]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d004      	beq.n	800df60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f8cd 	bl	800e0f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df5e:	e023      	b.n	800dfa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df66:	b2db      	uxtb	r3, r3
 800df68:	2b02      	cmp	r3, #2
 800df6a:	dc02      	bgt.n	800df72 <USBD_GetConfig+0x2e>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dc03      	bgt.n	800df78 <USBD_GetConfig+0x34>
 800df70:	e015      	b.n	800df9e <USBD_GetConfig+0x5a>
 800df72:	2b03      	cmp	r3, #3
 800df74:	d00b      	beq.n	800df8e <USBD_GetConfig+0x4a>
 800df76:	e012      	b.n	800df9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3308      	adds	r3, #8
 800df82:	2201      	movs	r2, #1
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 f927 	bl	800e1da <USBD_CtlSendData>
        break;
 800df8c:	e00c      	b.n	800dfa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3304      	adds	r3, #4
 800df92:	2201      	movs	r2, #1
 800df94:	4619      	mov	r1, r3
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f91f 	bl	800e1da <USBD_CtlSendData>
        break;
 800df9c:	e004      	b.n	800dfa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f8a9 	bl	800e0f8 <USBD_CtlError>
        break;
 800dfa6:	bf00      	nop
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d81e      	bhi.n	800e006 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	88db      	ldrh	r3, [r3, #6]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d004      	beq.n	800dfda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f890 	bl	800e0f8 <USBD_CtlError>
        break;
 800dfd8:	e01a      	b.n	800e010 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d005      	beq.n	800dff6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	f043 0202 	orr.w	r2, r3, #2
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	330c      	adds	r3, #12
 800dffa:	2202      	movs	r2, #2
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f8eb 	bl	800e1da <USBD_CtlSendData>
      break;
 800e004:	e004      	b.n	800e010 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f875 	bl	800e0f8 <USBD_CtlError>
      break;
 800e00e:	bf00      	nop
  }
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	885b      	ldrh	r3, [r3, #2]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d106      	bne.n	800e038 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f92b 	bl	800e28e <USBD_CtlSendStatus>
  }
}
 800e038:	bf00      	nop
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e050:	b2db      	uxtb	r3, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	2b02      	cmp	r3, #2
 800e056:	d80b      	bhi.n	800e070 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	885b      	ldrh	r3, [r3, #2]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d10c      	bne.n	800e07a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f910 	bl	800e28e <USBD_CtlSendStatus>
      }
      break;
 800e06e:	e004      	b.n	800e07a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f840 	bl	800e0f8 <USBD_CtlError>
      break;
 800e078:	e000      	b.n	800e07c <USBD_ClrFeature+0x3c>
      break;
 800e07a:	bf00      	nop
  }
}
 800e07c:	bf00      	nop
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	781a      	ldrb	r2, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3301      	adds	r3, #1
 800e09e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	781a      	ldrb	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f7ff fabb 	bl	800d62a <SWAPBYTE>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff faae 	bl	800d62a <SWAPBYTE>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff faa1 	bl	800d62a <SWAPBYTE>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	80da      	strh	r2, [r3, #6]
}
 800e0f0:	bf00      	nop
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e102:	2180      	movs	r1, #128	; 0x80
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fd99 	bl	800ec3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e10a:	2100      	movs	r1, #0
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 fd95 	bl	800ec3c <USBD_LL_StallEP>
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b086      	sub	sp, #24
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d036      	beq.n	800e19e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e134:	6938      	ldr	r0, [r7, #16]
 800e136:	f000 f836 	bl	800e1a6 <USBD_GetLen>
 800e13a:	4603      	mov	r3, r0
 800e13c:	3301      	adds	r3, #1
 800e13e:	b29b      	uxth	r3, r3
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	4413      	add	r3, r2
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	7812      	ldrb	r2, [r2, #0]
 800e152:	701a      	strb	r2, [r3, #0]
  idx++;
 800e154:	7dfb      	ldrb	r3, [r7, #23]
 800e156:	3301      	adds	r3, #1
 800e158:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	4413      	add	r3, r2
 800e160:	2203      	movs	r2, #3
 800e162:	701a      	strb	r2, [r3, #0]
  idx++;
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	3301      	adds	r3, #1
 800e168:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e16a:	e013      	b.n	800e194 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e16c:	7dfb      	ldrb	r3, [r7, #23]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	4413      	add	r3, r2
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	7812      	ldrb	r2, [r2, #0]
 800e176:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	3301      	adds	r3, #1
 800e17c:	613b      	str	r3, [r7, #16]
    idx++;
 800e17e:	7dfb      	ldrb	r3, [r7, #23]
 800e180:	3301      	adds	r3, #1
 800e182:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	4413      	add	r3, r2
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
 800e190:	3301      	adds	r3, #1
 800e192:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1e7      	bne.n	800e16c <USBD_GetString+0x52>
 800e19c:	e000      	b.n	800e1a0 <USBD_GetString+0x86>
    return;
 800e19e:	bf00      	nop
  }
}
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e1b6:	e005      	b.n	800e1c4 <USBD_GetLen+0x1e>
  {
    len++;
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1f5      	bne.n	800e1b8 <USBD_GetLen+0x12>
  }

  return len;
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	60f8      	str	r0, [r7, #12]
 800e1e2:	60b9      	str	r1, [r7, #8]
 800e1e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	2100      	movs	r1, #0
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 fde9 	bl	800edd8 <USBD_LL_Transmit>

  return USBD_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3710      	adds	r7, #16
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	2100      	movs	r1, #0
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fdd8 	bl	800edd8 <USBD_LL_Transmit>

  return USBD_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2203      	movs	r2, #3
 800e242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	2100      	movs	r1, #0
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 fdf3 	bl	800ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	2100      	movs	r1, #0
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f000 fde2 	bl	800ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b082      	sub	sp, #8
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2204      	movs	r2, #4
 800e29a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fd97 	bl	800edd8 <USBD_LL_Transmit>

  return USBD_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2205      	movs	r2, #5
 800e2c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fdbc 	bl	800ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b087      	sub	sp, #28
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e2f2:	4b1f      	ldr	r3, [pc, #124]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e2f4:	7a5b      	ldrb	r3, [r3, #9]
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d131      	bne.n	800e360 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e2fc:	4b1c      	ldr	r3, [pc, #112]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e2fe:	7a5b      	ldrb	r3, [r3, #9]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	461a      	mov	r2, r3
 800e304:	4b1a      	ldr	r3, [pc, #104]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e306:	2100      	movs	r1, #0
 800e308:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e30a:	4b19      	ldr	r3, [pc, #100]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e30c:	7a5b      	ldrb	r3, [r3, #9]
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	4a17      	ldr	r2, [pc, #92]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e31a:	4b15      	ldr	r3, [pc, #84]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e31c:	7a5b      	ldrb	r3, [r3, #9]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	461a      	mov	r2, r3
 800e322:	4b13      	ldr	r3, [pc, #76]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e324:	4413      	add	r3, r2
 800e326:	79fa      	ldrb	r2, [r7, #7]
 800e328:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e32a:	4b11      	ldr	r3, [pc, #68]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e32c:	7a5b      	ldrb	r3, [r3, #9]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	b2d1      	uxtb	r1, r2
 800e334:	4a0e      	ldr	r2, [pc, #56]	; (800e370 <FATFS_LinkDriverEx+0x94>)
 800e336:	7251      	strb	r1, [r2, #9]
 800e338:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e33a:	7dbb      	ldrb	r3, [r7, #22]
 800e33c:	3330      	adds	r3, #48	; 0x30
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	3301      	adds	r3, #1
 800e348:	223a      	movs	r2, #58	; 0x3a
 800e34a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	3302      	adds	r3, #2
 800e350:	222f      	movs	r2, #47	; 0x2f
 800e352:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	3303      	adds	r3, #3
 800e358:	2200      	movs	r2, #0
 800e35a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e360:	7dfb      	ldrb	r3, [r7, #23]
}
 800e362:	4618      	mov	r0, r3
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	20000ccc 	.word	0x20000ccc

0800e374 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e37e:	2200      	movs	r2, #0
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff ffaa 	bl	800e2dc <FATFS_LinkDriverEx>
 800e388:	4603      	mov	r3, r0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
	...

0800e394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e398:	2200      	movs	r2, #0
 800e39a:	4912      	ldr	r1, [pc, #72]	; (800e3e4 <MX_USB_DEVICE_Init+0x50>)
 800e39c:	4812      	ldr	r0, [pc, #72]	; (800e3e8 <MX_USB_DEVICE_Init+0x54>)
 800e39e:	f7fe fe33 	bl	800d008 <USBD_Init>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e3a8:	f7f3 fa78 	bl	800189c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3ac:	490f      	ldr	r1, [pc, #60]	; (800e3ec <MX_USB_DEVICE_Init+0x58>)
 800e3ae:	480e      	ldr	r0, [pc, #56]	; (800e3e8 <MX_USB_DEVICE_Init+0x54>)
 800e3b0:	f7fe fe5a 	bl	800d068 <USBD_RegisterClass>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3ba:	f7f3 fa6f 	bl	800189c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3be:	490c      	ldr	r1, [pc, #48]	; (800e3f0 <MX_USB_DEVICE_Init+0x5c>)
 800e3c0:	4809      	ldr	r0, [pc, #36]	; (800e3e8 <MX_USB_DEVICE_Init+0x54>)
 800e3c2:	f7fe fdab 	bl	800cf1c <USBD_CDC_RegisterInterface>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3cc:	f7f3 fa66 	bl	800189c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3d0:	4805      	ldr	r0, [pc, #20]	; (800e3e8 <MX_USB_DEVICE_Init+0x54>)
 800e3d2:	f7fe fe70 	bl	800d0b6 <USBD_Start>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3dc:	f7f3 fa5e 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3e0:	bf00      	nop
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	20000134 	.word	0x20000134
 800e3e8:	20000cd8 	.word	0x20000cd8
 800e3ec:	2000001c 	.word	0x2000001c
 800e3f0:	20000120 	.word	0x20000120

0800e3f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4905      	ldr	r1, [pc, #20]	; (800e410 <CDC_Init_FS+0x1c>)
 800e3fc:	4805      	ldr	r0, [pc, #20]	; (800e414 <CDC_Init_FS+0x20>)
 800e3fe:	f7fe fda2 	bl	800cf46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e402:	4905      	ldr	r1, [pc, #20]	; (800e418 <CDC_Init_FS+0x24>)
 800e404:	4803      	ldr	r0, [pc, #12]	; (800e414 <CDC_Init_FS+0x20>)
 800e406:	f7fe fdbc 	bl	800cf82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e40a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	200017a8 	.word	0x200017a8
 800e414:	20000cd8 	.word	0x20000cd8
 800e418:	20000fa8 	.word	0x20000fa8

0800e41c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e422:	4618      	mov	r0, r3
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	4603      	mov	r3, r0
 800e434:	6039      	str	r1, [r7, #0]
 800e436:	71fb      	strb	r3, [r7, #7]
 800e438:	4613      	mov	r3, r2
 800e43a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	2b23      	cmp	r3, #35	; 0x23
 800e440:	d84a      	bhi.n	800e4d8 <CDC_Control_FS+0xac>
 800e442:	a201      	add	r2, pc, #4	; (adr r2, 800e448 <CDC_Control_FS+0x1c>)
 800e444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e448:	0800e4d9 	.word	0x0800e4d9
 800e44c:	0800e4d9 	.word	0x0800e4d9
 800e450:	0800e4d9 	.word	0x0800e4d9
 800e454:	0800e4d9 	.word	0x0800e4d9
 800e458:	0800e4d9 	.word	0x0800e4d9
 800e45c:	0800e4d9 	.word	0x0800e4d9
 800e460:	0800e4d9 	.word	0x0800e4d9
 800e464:	0800e4d9 	.word	0x0800e4d9
 800e468:	0800e4d9 	.word	0x0800e4d9
 800e46c:	0800e4d9 	.word	0x0800e4d9
 800e470:	0800e4d9 	.word	0x0800e4d9
 800e474:	0800e4d9 	.word	0x0800e4d9
 800e478:	0800e4d9 	.word	0x0800e4d9
 800e47c:	0800e4d9 	.word	0x0800e4d9
 800e480:	0800e4d9 	.word	0x0800e4d9
 800e484:	0800e4d9 	.word	0x0800e4d9
 800e488:	0800e4d9 	.word	0x0800e4d9
 800e48c:	0800e4d9 	.word	0x0800e4d9
 800e490:	0800e4d9 	.word	0x0800e4d9
 800e494:	0800e4d9 	.word	0x0800e4d9
 800e498:	0800e4d9 	.word	0x0800e4d9
 800e49c:	0800e4d9 	.word	0x0800e4d9
 800e4a0:	0800e4d9 	.word	0x0800e4d9
 800e4a4:	0800e4d9 	.word	0x0800e4d9
 800e4a8:	0800e4d9 	.word	0x0800e4d9
 800e4ac:	0800e4d9 	.word	0x0800e4d9
 800e4b0:	0800e4d9 	.word	0x0800e4d9
 800e4b4:	0800e4d9 	.word	0x0800e4d9
 800e4b8:	0800e4d9 	.word	0x0800e4d9
 800e4bc:	0800e4d9 	.word	0x0800e4d9
 800e4c0:	0800e4d9 	.word	0x0800e4d9
 800e4c4:	0800e4d9 	.word	0x0800e4d9
 800e4c8:	0800e4d9 	.word	0x0800e4d9
 800e4cc:	0800e4d9 	.word	0x0800e4d9
 800e4d0:	0800e4d9 	.word	0x0800e4d9
 800e4d4:	0800e4d9 	.word	0x0800e4d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e4d8:	bf00      	nop
  }

  return (USBD_OK);
 800e4da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	4805      	ldr	r0, [pc, #20]	; (800e50c <CDC_Receive_FS+0x24>)
 800e4f6:	f7fe fd44 	bl	800cf82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e4fa:	4804      	ldr	r0, [pc, #16]	; (800e50c <CDC_Receive_FS+0x24>)
 800e4fc:	f7fe fd5a 	bl	800cfb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e500:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20000cd8 	.word	0x20000cd8

0800e510 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e510:	b480      	push	{r7}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	4613      	mov	r3, r2
 800e51c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e526:	4618      	mov	r0, r3
 800e528:	371c      	adds	r7, #28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
	...

0800e534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2212      	movs	r2, #18
 800e544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e546:	4b03      	ldr	r3, [pc, #12]	; (800e554 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e548:	4618      	mov	r0, r3
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	20000150 	.word	0x20000150

0800e558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	6039      	str	r1, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2204      	movs	r2, #4
 800e568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e56a:	4b03      	ldr	r3, [pc, #12]	; (800e578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	20000164 	.word	0x20000164

0800e57c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	6039      	str	r1, [r7, #0]
 800e586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e588:	79fb      	ldrb	r3, [r7, #7]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d105      	bne.n	800e59a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	4907      	ldr	r1, [pc, #28]	; (800e5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e592:	4808      	ldr	r0, [pc, #32]	; (800e5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e594:	f7ff fdc1 	bl	800e11a <USBD_GetString>
 800e598:	e004      	b.n	800e5a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	4904      	ldr	r1, [pc, #16]	; (800e5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e59e:	4805      	ldr	r0, [pc, #20]	; (800e5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5a0:	f7ff fdbb 	bl	800e11a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5a4:	4b02      	ldr	r3, [pc, #8]	; (800e5b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3708      	adds	r7, #8
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	20001fa8 	.word	0x20001fa8
 800e5b4:	08011adc 	.word	0x08011adc

0800e5b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	4603      	mov	r3, r0
 800e5c0:	6039      	str	r1, [r7, #0]
 800e5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	4904      	ldr	r1, [pc, #16]	; (800e5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5c8:	4804      	ldr	r0, [pc, #16]	; (800e5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5ca:	f7ff fda6 	bl	800e11a <USBD_GetString>
  return USBD_StrDesc;
 800e5ce:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20001fa8 	.word	0x20001fa8
 800e5dc:	08011af4 	.word	0x08011af4

0800e5e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	6039      	str	r1, [r7, #0]
 800e5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	221a      	movs	r2, #26
 800e5f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5f2:	f000 f843 	bl	800e67c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e5f6:	4b02      	ldr	r3, [pc, #8]	; (800e600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20000168 	.word	0x20000168

0800e604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	4603      	mov	r3, r0
 800e60c:	6039      	str	r1, [r7, #0]
 800e60e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d105      	bne.n	800e622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	4907      	ldr	r1, [pc, #28]	; (800e638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e61a:	4808      	ldr	r0, [pc, #32]	; (800e63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e61c:	f7ff fd7d 	bl	800e11a <USBD_GetString>
 800e620:	e004      	b.n	800e62c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	4904      	ldr	r1, [pc, #16]	; (800e638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e626:	4805      	ldr	r0, [pc, #20]	; (800e63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e628:	f7ff fd77 	bl	800e11a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e62c:	4b02      	ldr	r3, [pc, #8]	; (800e638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	20001fa8 	.word	0x20001fa8
 800e63c:	08011b08 	.word	0x08011b08

0800e640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	6039      	str	r1, [r7, #0]
 800e64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e64c:	79fb      	ldrb	r3, [r7, #7]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d105      	bne.n	800e65e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	4907      	ldr	r1, [pc, #28]	; (800e674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e656:	4808      	ldr	r0, [pc, #32]	; (800e678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e658:	f7ff fd5f 	bl	800e11a <USBD_GetString>
 800e65c:	e004      	b.n	800e668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	4904      	ldr	r1, [pc, #16]	; (800e674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e662:	4805      	ldr	r0, [pc, #20]	; (800e678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e664:	f7ff fd59 	bl	800e11a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e668:	4b02      	ldr	r3, [pc, #8]	; (800e674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20001fa8 	.word	0x20001fa8
 800e678:	08011b14 	.word	0x08011b14

0800e67c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e682:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <Get_SerialNum+0x44>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e688:	4b0e      	ldr	r3, [pc, #56]	; (800e6c4 <Get_SerialNum+0x48>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e68e:	4b0e      	ldr	r3, [pc, #56]	; (800e6c8 <Get_SerialNum+0x4c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4413      	add	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d009      	beq.n	800e6b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6a2:	2208      	movs	r2, #8
 800e6a4:	4909      	ldr	r1, [pc, #36]	; (800e6cc <Get_SerialNum+0x50>)
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f000 f814 	bl	800e6d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6ac:	2204      	movs	r2, #4
 800e6ae:	4908      	ldr	r1, [pc, #32]	; (800e6d0 <Get_SerialNum+0x54>)
 800e6b0:	68b8      	ldr	r0, [r7, #8]
 800e6b2:	f000 f80f 	bl	800e6d4 <IntToUnicode>
  }
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	1fff7590 	.word	0x1fff7590
 800e6c4:	1fff7594 	.word	0x1fff7594
 800e6c8:	1fff7598 	.word	0x1fff7598
 800e6cc:	2000016a 	.word	0x2000016a
 800e6d0:	2000017a 	.word	0x2000017a

0800e6d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	75fb      	strb	r3, [r7, #23]
 800e6ea:	e027      	b.n	800e73c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	0f1b      	lsrs	r3, r3, #28
 800e6f0:	2b09      	cmp	r3, #9
 800e6f2:	d80b      	bhi.n	800e70c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	0f1b      	lsrs	r3, r3, #28
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	4619      	mov	r1, r3
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	440b      	add	r3, r1
 800e704:	3230      	adds	r2, #48	; 0x30
 800e706:	b2d2      	uxtb	r2, r2
 800e708:	701a      	strb	r2, [r3, #0]
 800e70a:	e00a      	b.n	800e722 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	0f1b      	lsrs	r3, r3, #28
 800e710:	b2da      	uxtb	r2, r3
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	4619      	mov	r1, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	440b      	add	r3, r1
 800e71c:	3237      	adds	r2, #55	; 0x37
 800e71e:	b2d2      	uxtb	r2, r2
 800e720:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	3301      	adds	r3, #1
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	4413      	add	r3, r2
 800e732:	2200      	movs	r2, #0
 800e734:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e736:	7dfb      	ldrb	r3, [r7, #23]
 800e738:	3301      	adds	r3, #1
 800e73a:	75fb      	strb	r3, [r7, #23]
 800e73c:	7dfa      	ldrb	r2, [r7, #23]
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	429a      	cmp	r2, r3
 800e742:	d3d3      	bcc.n	800e6ec <IntToUnicode+0x18>
  }
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	371c      	adds	r7, #28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
	...

0800e754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b0b0      	sub	sp, #192	; 0xc0
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e75c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	605a      	str	r2, [r3, #4]
 800e766:	609a      	str	r2, [r3, #8]
 800e768:	60da      	str	r2, [r3, #12]
 800e76a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e76c:	f107 0318 	add.w	r3, r7, #24
 800e770:	2294      	movs	r2, #148	; 0x94
 800e772:	2100      	movs	r1, #0
 800e774:	4618      	mov	r0, r3
 800e776:	f000 fc0b 	bl	800ef90 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e782:	d163      	bne.n	800e84c <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e788:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e78a:	2300      	movs	r3, #0
 800e78c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e790:	f107 0318 	add.w	r3, r7, #24
 800e794:	4618      	mov	r0, r3
 800e796:	f7f6 fb29 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e7a0:	f7f3 f87c 	bl	800189c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7a4:	4b2b      	ldr	r3, [pc, #172]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7a8:	4a2a      	ldr	r2, [pc, #168]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7aa:	f043 0301 	orr.w	r3, r3, #1
 800e7ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e7b0:	4b28      	ldr	r3, [pc, #160]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e7c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e7d6:	230a      	movs	r3, #10
 800e7d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e7e6:	f7f3 fe4d 	bl	8002484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7ea:	4b1a      	ldr	r3, [pc, #104]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ee:	4a19      	ldr	r2, [pc, #100]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e7f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e7f6:	4b17      	ldr	r3, [pc, #92]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e7fe:	613b      	str	r3, [r7, #16]
 800e800:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e802:	4b14      	ldr	r3, [pc, #80]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d114      	bne.n	800e838 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e80e:	4b11      	ldr	r3, [pc, #68]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e812:	4a10      	ldr	r2, [pc, #64]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e818:	6593      	str	r3, [r2, #88]	; 0x58
 800e81a:	4b0e      	ldr	r3, [pc, #56]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800e826:	f7f5 fbcd 	bl	8003fc4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e82a:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e82e:	4a09      	ldr	r2, [pc, #36]	; (800e854 <HAL_PCD_MspInit+0x100>)
 800e830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e834:	6593      	str	r3, [r2, #88]	; 0x58
 800e836:	e001      	b.n	800e83c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e838:	f7f5 fbc4 	bl	8003fc4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e83c:	2200      	movs	r2, #0
 800e83e:	2100      	movs	r1, #0
 800e840:	2043      	movs	r0, #67	; 0x43
 800e842:	f7f3 fd2e 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e846:	2043      	movs	r0, #67	; 0x43
 800e848:	f7f3 fd47 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e84c:	bf00      	nop
 800e84e:	37c0      	adds	r7, #192	; 0xc0
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	40021000 	.word	0x40021000

0800e858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e86c:	4619      	mov	r1, r3
 800e86e:	4610      	mov	r0, r2
 800e870:	f7fe fc6c 	bl	800d14c <USBD_LL_SetupStage>
}
 800e874:	bf00      	nop
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	460b      	mov	r3, r1
 800e886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e88e:	78fa      	ldrb	r2, [r7, #3]
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	4613      	mov	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	440b      	add	r3, r1
 800e89c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	78fb      	ldrb	r3, [r7, #3]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	f7fe fca6 	bl	800d1f6 <USBD_LL_DataOutStage>
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	6879      	ldr	r1, [r7, #4]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	440b      	add	r3, r1
 800e8d2:	334c      	adds	r3, #76	; 0x4c
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	78fb      	ldrb	r3, [r7, #3]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	f7fe fcef 	bl	800d2bc <USBD_LL_DataInStage>
}
 800e8de:	bf00      	nop
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fe03 	bl	800d500 <USBD_LL_SOF>
}
 800e8fa:	bf00      	nop
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b084      	sub	sp, #16
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e90a:	2301      	movs	r3, #1
 800e90c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	2b02      	cmp	r3, #2
 800e914:	d001      	beq.n	800e91a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e916:	f7f2 ffc1 	bl	800189c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e920:	7bfa      	ldrb	r2, [r7, #15]
 800e922:	4611      	mov	r1, r2
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe fdad 	bl	800d484 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e930:	4618      	mov	r0, r3
 800e932:	f7fe fd59 	bl	800d3e8 <USBD_LL_Reset>
}
 800e936:	bf00      	nop
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	6812      	ldr	r2, [r2, #0]
 800e956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e95a:	f043 0301 	orr.w	r3, r3, #1
 800e95e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e966:	4618      	mov	r0, r3
 800e968:	f7fe fd9c 	bl	800d4a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d005      	beq.n	800e980 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e974:	4b04      	ldr	r3, [pc, #16]	; (800e988 <HAL_PCD_SuspendCallback+0x48>)
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	4a03      	ldr	r2, [pc, #12]	; (800e988 <HAL_PCD_SuspendCallback+0x48>)
 800e97a:	f043 0306 	orr.w	r3, r3, #6
 800e97e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	e000ed00 	.word	0xe000ed00

0800e98c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	6812      	ldr	r2, [r2, #0]
 800e9a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9a6:	f023 0301 	bic.w	r3, r3, #1
 800e9aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a1b      	ldr	r3, [r3, #32]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9b4:	4b08      	ldr	r3, [pc, #32]	; (800e9d8 <HAL_PCD_ResumeCallback+0x4c>)
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	4a07      	ldr	r2, [pc, #28]	; (800e9d8 <HAL_PCD_ResumeCallback+0x4c>)
 800e9ba:	f023 0306 	bic.w	r3, r3, #6
 800e9be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e9c0:	f000 faa6 	bl	800ef10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe fd80 	bl	800d4d0 <USBD_LL_Resume>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed00 	.word	0xe000ed00

0800e9dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ee:	78fa      	ldrb	r2, [r7, #3]
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fe fdcc 	bl	800d590 <USBD_LL_IsoOUTIncomplete>
}
 800e9f8:	bf00      	nop
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea12:	78fa      	ldrb	r2, [r7, #3]
 800ea14:	4611      	mov	r1, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fd94 	bl	800d544 <USBD_LL_IsoINIncomplete>
}
 800ea1c:	bf00      	nop
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fe fdd2 	bl	800d5dc <USBD_LL_DevConnected>
}
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fe fdcf 	bl	800d5f2 <USBD_LL_DevDisconnected>
}
 800ea54:	bf00      	nop
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d139      	bne.n	800eae0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ea6c:	4a1f      	ldr	r2, [pc, #124]	; (800eaec <USBD_LL_Init+0x90>)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a1d      	ldr	r2, [pc, #116]	; (800eaec <USBD_LL_Init+0x90>)
 800ea78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea7c:	4b1b      	ldr	r3, [pc, #108]	; (800eaec <USBD_LL_Init+0x90>)
 800ea7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ea84:	4b19      	ldr	r3, [pc, #100]	; (800eaec <USBD_LL_Init+0x90>)
 800ea86:	2206      	movs	r2, #6
 800ea88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea8a:	4b18      	ldr	r3, [pc, #96]	; (800eaec <USBD_LL_Init+0x90>)
 800ea8c:	2202      	movs	r2, #2
 800ea8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea90:	4b16      	ldr	r3, [pc, #88]	; (800eaec <USBD_LL_Init+0x90>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea96:	4b15      	ldr	r3, [pc, #84]	; (800eaec <USBD_LL_Init+0x90>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea9c:	4b13      	ldr	r3, [pc, #76]	; (800eaec <USBD_LL_Init+0x90>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800eaa2:	4b12      	ldr	r3, [pc, #72]	; (800eaec <USBD_LL_Init+0x90>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eaa8:	4b10      	ldr	r3, [pc, #64]	; (800eaec <USBD_LL_Init+0x90>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eaae:	4b0f      	ldr	r3, [pc, #60]	; (800eaec <USBD_LL_Init+0x90>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eab4:	480d      	ldr	r0, [pc, #52]	; (800eaec <USBD_LL_Init+0x90>)
 800eab6:	f7f3 fff5 	bl	8002aa4 <HAL_PCD_Init>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800eac0:	f7f2 feec 	bl	800189c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eac4:	2180      	movs	r1, #128	; 0x80
 800eac6:	4809      	ldr	r0, [pc, #36]	; (800eaec <USBD_LL_Init+0x90>)
 800eac8:	f7f5 f977 	bl	8003dba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eacc:	2240      	movs	r2, #64	; 0x40
 800eace:	2100      	movs	r1, #0
 800ead0:	4806      	ldr	r0, [pc, #24]	; (800eaec <USBD_LL_Init+0x90>)
 800ead2:	f7f5 f92b 	bl	8003d2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ead6:	2280      	movs	r2, #128	; 0x80
 800ead8:	2101      	movs	r1, #1
 800eada:	4804      	ldr	r0, [pc, #16]	; (800eaec <USBD_LL_Init+0x90>)
 800eadc:	f7f5 f926 	bl	8003d2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	200021a8 	.word	0x200021a8

0800eaf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f4 f8f0 	bl	8002cec <HAL_PCD_Start>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb10:	7bbb      	ldrb	r3, [r7, #14]
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d816      	bhi.n	800eb44 <USBD_LL_Start+0x54>
 800eb16:	a201      	add	r2, pc, #4	; (adr r2, 800eb1c <USBD_LL_Start+0x2c>)
 800eb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb1c:	0800eb2d 	.word	0x0800eb2d
 800eb20:	0800eb33 	.word	0x0800eb33
 800eb24:	0800eb39 	.word	0x0800eb39
 800eb28:	0800eb3f 	.word	0x0800eb3f
    case HAL_OK :
      usb_status = USBD_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb30:	e00b      	b.n	800eb4a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb32:	2303      	movs	r3, #3
 800eb34:	73fb      	strb	r3, [r7, #15]
    break;
 800eb36:	e008      	b.n	800eb4a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb3c:	e005      	b.n	800eb4a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	73fb      	strb	r3, [r7, #15]
    break;
 800eb42:	e002      	b.n	800eb4a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800eb44:	2303      	movs	r3, #3
 800eb46:	73fb      	strb	r3, [r7, #15]
    break;
 800eb48:	bf00      	nop
  }
  return usb_status;
 800eb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	4611      	mov	r1, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4603      	mov	r3, r0
 800eb64:	70fb      	strb	r3, [r7, #3]
 800eb66:	460b      	mov	r3, r1
 800eb68:	70bb      	strb	r3, [r7, #2]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb7c:	78bb      	ldrb	r3, [r7, #2]
 800eb7e:	883a      	ldrh	r2, [r7, #0]
 800eb80:	78f9      	ldrb	r1, [r7, #3]
 800eb82:	f7f4 fd9a 	bl	80036ba <HAL_PCD_EP_Open>
 800eb86:	4603      	mov	r3, r0
 800eb88:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb8a:	7bbb      	ldrb	r3, [r7, #14]
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d817      	bhi.n	800ebc0 <USBD_LL_OpenEP+0x6c>
 800eb90:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <USBD_LL_OpenEP+0x44>)
 800eb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb96:	bf00      	nop
 800eb98:	0800eba9 	.word	0x0800eba9
 800eb9c:	0800ebaf 	.word	0x0800ebaf
 800eba0:	0800ebb5 	.word	0x0800ebb5
 800eba4:	0800ebbb 	.word	0x0800ebbb
    case HAL_OK :
      usb_status = USBD_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ebac:	e00b      	b.n	800ebc6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb2:	e008      	b.n	800ebc6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb8:	e005      	b.n	800ebc6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ebbe:	e002      	b.n	800ebc6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc4:	bf00      	nop
  }
  return usb_status;
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebea:	78fa      	ldrb	r2, [r7, #3]
 800ebec:	4611      	mov	r1, r2
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f4 fdcb 	bl	800378a <HAL_PCD_EP_Close>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebf8:	7bbb      	ldrb	r3, [r7, #14]
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d816      	bhi.n	800ec2c <USBD_LL_CloseEP+0x5c>
 800ebfe:	a201      	add	r2, pc, #4	; (adr r2, 800ec04 <USBD_LL_CloseEP+0x34>)
 800ec00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec04:	0800ec15 	.word	0x0800ec15
 800ec08:	0800ec1b 	.word	0x0800ec1b
 800ec0c:	0800ec21 	.word	0x0800ec21
 800ec10:	0800ec27 	.word	0x0800ec27
    case HAL_OK :
      usb_status = USBD_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
    break;
 800ec18:	e00b      	b.n	800ec32 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1e:	e008      	b.n	800ec32 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec20:	2301      	movs	r3, #1
 800ec22:	73fb      	strb	r3, [r7, #15]
    break;
 800ec24:	e005      	b.n	800ec32 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec26:	2303      	movs	r3, #3
 800ec28:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2a:	e002      	b.n	800ec32 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec30:	bf00      	nop
  }
  return usb_status;
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	460b      	mov	r3, r1
 800ec46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec56:	78fa      	ldrb	r2, [r7, #3]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7f4 fe72 	bl	8003944 <HAL_PCD_EP_SetStall>
 800ec60:	4603      	mov	r3, r0
 800ec62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec64:	7bbb      	ldrb	r3, [r7, #14]
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d816      	bhi.n	800ec98 <USBD_LL_StallEP+0x5c>
 800ec6a:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <USBD_LL_StallEP+0x34>)
 800ec6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec70:	0800ec81 	.word	0x0800ec81
 800ec74:	0800ec87 	.word	0x0800ec87
 800ec78:	0800ec8d 	.word	0x0800ec8d
 800ec7c:	0800ec93 	.word	0x0800ec93
    case HAL_OK :
      usb_status = USBD_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]
    break;
 800ec84:	e00b      	b.n	800ec9e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec86:	2303      	movs	r3, #3
 800ec88:	73fb      	strb	r3, [r7, #15]
    break;
 800ec8a:	e008      	b.n	800ec9e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec90:	e005      	b.n	800ec9e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec92:	2303      	movs	r3, #3
 800ec94:	73fb      	strb	r3, [r7, #15]
    break;
 800ec96:	e002      	b.n	800ec9e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9c:	bf00      	nop
  }
  return usb_status;
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f4 fe9e 	bl	8003a08 <HAL_PCD_EP_ClrStall>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d816      	bhi.n	800ed04 <USBD_LL_ClearStallEP+0x5c>
 800ecd6:	a201      	add	r2, pc, #4	; (adr r2, 800ecdc <USBD_LL_ClearStallEP+0x34>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800eced 	.word	0x0800eced
 800ece0:	0800ecf3 	.word	0x0800ecf3
 800ece4:	0800ecf9 	.word	0x0800ecf9
 800ece8:	0800ecff 	.word	0x0800ecff
    case HAL_OK :
      usb_status = USBD_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf0:	e00b      	b.n	800ed0a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecf2:	2303      	movs	r3, #3
 800ecf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf6:	e008      	b.n	800ed0a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecfc:	e005      	b.n	800ed0a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	73fb      	strb	r3, [r7, #15]
    break;
 800ed02:	e002      	b.n	800ed0a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed04:	2303      	movs	r3, #3
 800ed06:	73fb      	strb	r3, [r7, #15]
    break;
 800ed08:	bf00      	nop
  }
  return usb_status;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	da0b      	bge.n	800ed48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed36:	68f9      	ldr	r1, [r7, #12]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	4413      	add	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	440b      	add	r3, r1
 800ed42:	333e      	adds	r3, #62	; 0x3e
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	e00b      	b.n	800ed60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed48:	78fb      	ldrb	r3, [r7, #3]
 800ed4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed4e:	68f9      	ldr	r1, [r7, #12]
 800ed50:	4613      	mov	r3, r2
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	4413      	add	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	440b      	add	r3, r1
 800ed5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed86:	78fa      	ldrb	r2, [r7, #3]
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7f4 fc70 	bl	8003670 <HAL_PCD_SetAddress>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed94:	7bbb      	ldrb	r3, [r7, #14]
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d816      	bhi.n	800edc8 <USBD_LL_SetUSBAddress+0x5c>
 800ed9a:	a201      	add	r2, pc, #4	; (adr r2, 800eda0 <USBD_LL_SetUSBAddress+0x34>)
 800ed9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda0:	0800edb1 	.word	0x0800edb1
 800eda4:	0800edb7 	.word	0x0800edb7
 800eda8:	0800edbd 	.word	0x0800edbd
 800edac:	0800edc3 	.word	0x0800edc3
    case HAL_OK :
      usb_status = USBD_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	73fb      	strb	r3, [r7, #15]
    break;
 800edb4:	e00b      	b.n	800edce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edb6:	2303      	movs	r3, #3
 800edb8:	73fb      	strb	r3, [r7, #15]
    break;
 800edba:	e008      	b.n	800edce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edbc:	2301      	movs	r3, #1
 800edbe:	73fb      	strb	r3, [r7, #15]
    break;
 800edc0:	e005      	b.n	800edce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edc2:	2303      	movs	r3, #3
 800edc4:	73fb      	strb	r3, [r7, #15]
    break;
 800edc6:	e002      	b.n	800edce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800edc8:	2303      	movs	r3, #3
 800edca:	73fb      	strb	r3, [r7, #15]
    break;
 800edcc:	bf00      	nop
  }
  return usb_status;
 800edce:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	603b      	str	r3, [r7, #0]
 800ede4:	460b      	mov	r3, r1
 800ede6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edf6:	7af9      	ldrb	r1, [r7, #11]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	f7f4 fd65 	bl	80038ca <HAL_PCD_EP_Transmit>
 800ee00:	4603      	mov	r3, r0
 800ee02:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ee04:	7dbb      	ldrb	r3, [r7, #22]
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d816      	bhi.n	800ee38 <USBD_LL_Transmit+0x60>
 800ee0a:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <USBD_LL_Transmit+0x38>)
 800ee0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee10:	0800ee21 	.word	0x0800ee21
 800ee14:	0800ee27 	.word	0x0800ee27
 800ee18:	0800ee2d 	.word	0x0800ee2d
 800ee1c:	0800ee33 	.word	0x0800ee33
    case HAL_OK :
      usb_status = USBD_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	75fb      	strb	r3, [r7, #23]
    break;
 800ee24:	e00b      	b.n	800ee3e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee26:	2303      	movs	r3, #3
 800ee28:	75fb      	strb	r3, [r7, #23]
    break;
 800ee2a:	e008      	b.n	800ee3e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	75fb      	strb	r3, [r7, #23]
    break;
 800ee30:	e005      	b.n	800ee3e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee32:	2303      	movs	r3, #3
 800ee34:	75fb      	strb	r3, [r7, #23]
    break;
 800ee36:	e002      	b.n	800ee3e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	75fb      	strb	r3, [r7, #23]
    break;
 800ee3c:	bf00      	nop
  }
  return usb_status;
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3718      	adds	r7, #24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	607a      	str	r2, [r7, #4]
 800ee52:	603b      	str	r3, [r7, #0]
 800ee54:	460b      	mov	r3, r1
 800ee56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee66:	7af9      	ldrb	r1, [r7, #11]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	f7f4 fcd7 	bl	800381e <HAL_PCD_EP_Receive>
 800ee70:	4603      	mov	r3, r0
 800ee72:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ee74:	7dbb      	ldrb	r3, [r7, #22]
 800ee76:	2b03      	cmp	r3, #3
 800ee78:	d816      	bhi.n	800eea8 <USBD_LL_PrepareReceive+0x60>
 800ee7a:	a201      	add	r2, pc, #4	; (adr r2, 800ee80 <USBD_LL_PrepareReceive+0x38>)
 800ee7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee80:	0800ee91 	.word	0x0800ee91
 800ee84:	0800ee97 	.word	0x0800ee97
 800ee88:	0800ee9d 	.word	0x0800ee9d
 800ee8c:	0800eea3 	.word	0x0800eea3
    case HAL_OK :
      usb_status = USBD_OK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	75fb      	strb	r3, [r7, #23]
    break;
 800ee94:	e00b      	b.n	800eeae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee96:	2303      	movs	r3, #3
 800ee98:	75fb      	strb	r3, [r7, #23]
    break;
 800ee9a:	e008      	b.n	800eeae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	75fb      	strb	r3, [r7, #23]
    break;
 800eea0:	e005      	b.n	800eeae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eea2:	2303      	movs	r3, #3
 800eea4:	75fb      	strb	r3, [r7, #23]
    break;
 800eea6:	e002      	b.n	800eeae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800eea8:	2303      	movs	r3, #3
 800eeaa:	75fb      	strb	r3, [r7, #23]
    break;
 800eeac:	bf00      	nop
  }
  return usb_status;
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeca:	78fa      	ldrb	r2, [r7, #3]
 800eecc:	4611      	mov	r1, r2
 800eece:	4618      	mov	r0, r3
 800eed0:	f7f4 fce3 	bl	800389a <HAL_PCD_EP_GetRxCount>
 800eed4:	4603      	mov	r3, r0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eee8:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_static_malloc+0x18>)
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	200026b4 	.word	0x200026b4

0800eefc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]

}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ef14:	f7f2 f9d8 	bl	80012c8 <SystemClock_Config>
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <__libc_init_array>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	4d0d      	ldr	r5, [pc, #52]	; (800ef54 <__libc_init_array+0x38>)
 800ef20:	4c0d      	ldr	r4, [pc, #52]	; (800ef58 <__libc_init_array+0x3c>)
 800ef22:	1b64      	subs	r4, r4, r5
 800ef24:	10a4      	asrs	r4, r4, #2
 800ef26:	2600      	movs	r6, #0
 800ef28:	42a6      	cmp	r6, r4
 800ef2a:	d109      	bne.n	800ef40 <__libc_init_array+0x24>
 800ef2c:	4d0b      	ldr	r5, [pc, #44]	; (800ef5c <__libc_init_array+0x40>)
 800ef2e:	4c0c      	ldr	r4, [pc, #48]	; (800ef60 <__libc_init_array+0x44>)
 800ef30:	f002 fda0 	bl	8011a74 <_init>
 800ef34:	1b64      	subs	r4, r4, r5
 800ef36:	10a4      	asrs	r4, r4, #2
 800ef38:	2600      	movs	r6, #0
 800ef3a:	42a6      	cmp	r6, r4
 800ef3c:	d105      	bne.n	800ef4a <__libc_init_array+0x2e>
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef44:	4798      	blx	r3
 800ef46:	3601      	adds	r6, #1
 800ef48:	e7ee      	b.n	800ef28 <__libc_init_array+0xc>
 800ef4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef4e:	4798      	blx	r3
 800ef50:	3601      	adds	r6, #1
 800ef52:	e7f2      	b.n	800ef3a <__libc_init_array+0x1e>
 800ef54:	08012190 	.word	0x08012190
 800ef58:	08012190 	.word	0x08012190
 800ef5c:	08012190 	.word	0x08012190
 800ef60:	08012194 	.word	0x08012194

0800ef64 <malloc>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <malloc+0xc>)
 800ef66:	4601      	mov	r1, r0
 800ef68:	6818      	ldr	r0, [r3, #0]
 800ef6a:	f000 b885 	b.w	800f078 <_malloc_r>
 800ef6e:	bf00      	nop
 800ef70:	20000184 	.word	0x20000184

0800ef74 <memcpy>:
 800ef74:	440a      	add	r2, r1
 800ef76:	4291      	cmp	r1, r2
 800ef78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef7c:	d100      	bne.n	800ef80 <memcpy+0xc>
 800ef7e:	4770      	bx	lr
 800ef80:	b510      	push	{r4, lr}
 800ef82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef8a:	4291      	cmp	r1, r2
 800ef8c:	d1f9      	bne.n	800ef82 <memcpy+0xe>
 800ef8e:	bd10      	pop	{r4, pc}

0800ef90 <memset>:
 800ef90:	4402      	add	r2, r0
 800ef92:	4603      	mov	r3, r0
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d100      	bne.n	800ef9a <memset+0xa>
 800ef98:	4770      	bx	lr
 800ef9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef9e:	e7f9      	b.n	800ef94 <memset+0x4>

0800efa0 <_free_r>:
 800efa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efa2:	2900      	cmp	r1, #0
 800efa4:	d044      	beq.n	800f030 <_free_r+0x90>
 800efa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efaa:	9001      	str	r0, [sp, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	f1a1 0404 	sub.w	r4, r1, #4
 800efb2:	bfb8      	it	lt
 800efb4:	18e4      	addlt	r4, r4, r3
 800efb6:	f001 fd1f 	bl	80109f8 <__malloc_lock>
 800efba:	4a1e      	ldr	r2, [pc, #120]	; (800f034 <_free_r+0x94>)
 800efbc:	9801      	ldr	r0, [sp, #4]
 800efbe:	6813      	ldr	r3, [r2, #0]
 800efc0:	b933      	cbnz	r3, 800efd0 <_free_r+0x30>
 800efc2:	6063      	str	r3, [r4, #4]
 800efc4:	6014      	str	r4, [r2, #0]
 800efc6:	b003      	add	sp, #12
 800efc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efcc:	f001 bd1a 	b.w	8010a04 <__malloc_unlock>
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	d908      	bls.n	800efe6 <_free_r+0x46>
 800efd4:	6825      	ldr	r5, [r4, #0]
 800efd6:	1961      	adds	r1, r4, r5
 800efd8:	428b      	cmp	r3, r1
 800efda:	bf01      	itttt	eq
 800efdc:	6819      	ldreq	r1, [r3, #0]
 800efde:	685b      	ldreq	r3, [r3, #4]
 800efe0:	1949      	addeq	r1, r1, r5
 800efe2:	6021      	streq	r1, [r4, #0]
 800efe4:	e7ed      	b.n	800efc2 <_free_r+0x22>
 800efe6:	461a      	mov	r2, r3
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	b10b      	cbz	r3, 800eff0 <_free_r+0x50>
 800efec:	42a3      	cmp	r3, r4
 800efee:	d9fa      	bls.n	800efe6 <_free_r+0x46>
 800eff0:	6811      	ldr	r1, [r2, #0]
 800eff2:	1855      	adds	r5, r2, r1
 800eff4:	42a5      	cmp	r5, r4
 800eff6:	d10b      	bne.n	800f010 <_free_r+0x70>
 800eff8:	6824      	ldr	r4, [r4, #0]
 800effa:	4421      	add	r1, r4
 800effc:	1854      	adds	r4, r2, r1
 800effe:	42a3      	cmp	r3, r4
 800f000:	6011      	str	r1, [r2, #0]
 800f002:	d1e0      	bne.n	800efc6 <_free_r+0x26>
 800f004:	681c      	ldr	r4, [r3, #0]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	6053      	str	r3, [r2, #4]
 800f00a:	4421      	add	r1, r4
 800f00c:	6011      	str	r1, [r2, #0]
 800f00e:	e7da      	b.n	800efc6 <_free_r+0x26>
 800f010:	d902      	bls.n	800f018 <_free_r+0x78>
 800f012:	230c      	movs	r3, #12
 800f014:	6003      	str	r3, [r0, #0]
 800f016:	e7d6      	b.n	800efc6 <_free_r+0x26>
 800f018:	6825      	ldr	r5, [r4, #0]
 800f01a:	1961      	adds	r1, r4, r5
 800f01c:	428b      	cmp	r3, r1
 800f01e:	bf04      	itt	eq
 800f020:	6819      	ldreq	r1, [r3, #0]
 800f022:	685b      	ldreq	r3, [r3, #4]
 800f024:	6063      	str	r3, [r4, #4]
 800f026:	bf04      	itt	eq
 800f028:	1949      	addeq	r1, r1, r5
 800f02a:	6021      	streq	r1, [r4, #0]
 800f02c:	6054      	str	r4, [r2, #4]
 800f02e:	e7ca      	b.n	800efc6 <_free_r+0x26>
 800f030:	b003      	add	sp, #12
 800f032:	bd30      	pop	{r4, r5, pc}
 800f034:	200028d4 	.word	0x200028d4

0800f038 <sbrk_aligned>:
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	4e0e      	ldr	r6, [pc, #56]	; (800f074 <sbrk_aligned+0x3c>)
 800f03c:	460c      	mov	r4, r1
 800f03e:	6831      	ldr	r1, [r6, #0]
 800f040:	4605      	mov	r5, r0
 800f042:	b911      	cbnz	r1, 800f04a <sbrk_aligned+0x12>
 800f044:	f000 fd0e 	bl	800fa64 <_sbrk_r>
 800f048:	6030      	str	r0, [r6, #0]
 800f04a:	4621      	mov	r1, r4
 800f04c:	4628      	mov	r0, r5
 800f04e:	f000 fd09 	bl	800fa64 <_sbrk_r>
 800f052:	1c43      	adds	r3, r0, #1
 800f054:	d00a      	beq.n	800f06c <sbrk_aligned+0x34>
 800f056:	1cc4      	adds	r4, r0, #3
 800f058:	f024 0403 	bic.w	r4, r4, #3
 800f05c:	42a0      	cmp	r0, r4
 800f05e:	d007      	beq.n	800f070 <sbrk_aligned+0x38>
 800f060:	1a21      	subs	r1, r4, r0
 800f062:	4628      	mov	r0, r5
 800f064:	f000 fcfe 	bl	800fa64 <_sbrk_r>
 800f068:	3001      	adds	r0, #1
 800f06a:	d101      	bne.n	800f070 <sbrk_aligned+0x38>
 800f06c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f070:	4620      	mov	r0, r4
 800f072:	bd70      	pop	{r4, r5, r6, pc}
 800f074:	200028d8 	.word	0x200028d8

0800f078 <_malloc_r>:
 800f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07c:	1ccd      	adds	r5, r1, #3
 800f07e:	f025 0503 	bic.w	r5, r5, #3
 800f082:	3508      	adds	r5, #8
 800f084:	2d0c      	cmp	r5, #12
 800f086:	bf38      	it	cc
 800f088:	250c      	movcc	r5, #12
 800f08a:	2d00      	cmp	r5, #0
 800f08c:	4607      	mov	r7, r0
 800f08e:	db01      	blt.n	800f094 <_malloc_r+0x1c>
 800f090:	42a9      	cmp	r1, r5
 800f092:	d905      	bls.n	800f0a0 <_malloc_r+0x28>
 800f094:	230c      	movs	r3, #12
 800f096:	603b      	str	r3, [r7, #0]
 800f098:	2600      	movs	r6, #0
 800f09a:	4630      	mov	r0, r6
 800f09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a0:	4e2e      	ldr	r6, [pc, #184]	; (800f15c <_malloc_r+0xe4>)
 800f0a2:	f001 fca9 	bl	80109f8 <__malloc_lock>
 800f0a6:	6833      	ldr	r3, [r6, #0]
 800f0a8:	461c      	mov	r4, r3
 800f0aa:	bb34      	cbnz	r4, 800f0fa <_malloc_r+0x82>
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	f7ff ffc2 	bl	800f038 <sbrk_aligned>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	d14d      	bne.n	800f156 <_malloc_r+0xde>
 800f0ba:	6834      	ldr	r4, [r6, #0]
 800f0bc:	4626      	mov	r6, r4
 800f0be:	2e00      	cmp	r6, #0
 800f0c0:	d140      	bne.n	800f144 <_malloc_r+0xcc>
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	eb04 0803 	add.w	r8, r4, r3
 800f0cc:	f000 fcca 	bl	800fa64 <_sbrk_r>
 800f0d0:	4580      	cmp	r8, r0
 800f0d2:	d13a      	bne.n	800f14a <_malloc_r+0xd2>
 800f0d4:	6821      	ldr	r1, [r4, #0]
 800f0d6:	3503      	adds	r5, #3
 800f0d8:	1a6d      	subs	r5, r5, r1
 800f0da:	f025 0503 	bic.w	r5, r5, #3
 800f0de:	3508      	adds	r5, #8
 800f0e0:	2d0c      	cmp	r5, #12
 800f0e2:	bf38      	it	cc
 800f0e4:	250c      	movcc	r5, #12
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	f7ff ffa5 	bl	800f038 <sbrk_aligned>
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	d02b      	beq.n	800f14a <_malloc_r+0xd2>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	442b      	add	r3, r5
 800f0f6:	6023      	str	r3, [r4, #0]
 800f0f8:	e00e      	b.n	800f118 <_malloc_r+0xa0>
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	1b52      	subs	r2, r2, r5
 800f0fe:	d41e      	bmi.n	800f13e <_malloc_r+0xc6>
 800f100:	2a0b      	cmp	r2, #11
 800f102:	d916      	bls.n	800f132 <_malloc_r+0xba>
 800f104:	1961      	adds	r1, r4, r5
 800f106:	42a3      	cmp	r3, r4
 800f108:	6025      	str	r5, [r4, #0]
 800f10a:	bf18      	it	ne
 800f10c:	6059      	strne	r1, [r3, #4]
 800f10e:	6863      	ldr	r3, [r4, #4]
 800f110:	bf08      	it	eq
 800f112:	6031      	streq	r1, [r6, #0]
 800f114:	5162      	str	r2, [r4, r5]
 800f116:	604b      	str	r3, [r1, #4]
 800f118:	4638      	mov	r0, r7
 800f11a:	f104 060b 	add.w	r6, r4, #11
 800f11e:	f001 fc71 	bl	8010a04 <__malloc_unlock>
 800f122:	f026 0607 	bic.w	r6, r6, #7
 800f126:	1d23      	adds	r3, r4, #4
 800f128:	1af2      	subs	r2, r6, r3
 800f12a:	d0b6      	beq.n	800f09a <_malloc_r+0x22>
 800f12c:	1b9b      	subs	r3, r3, r6
 800f12e:	50a3      	str	r3, [r4, r2]
 800f130:	e7b3      	b.n	800f09a <_malloc_r+0x22>
 800f132:	6862      	ldr	r2, [r4, #4]
 800f134:	42a3      	cmp	r3, r4
 800f136:	bf0c      	ite	eq
 800f138:	6032      	streq	r2, [r6, #0]
 800f13a:	605a      	strne	r2, [r3, #4]
 800f13c:	e7ec      	b.n	800f118 <_malloc_r+0xa0>
 800f13e:	4623      	mov	r3, r4
 800f140:	6864      	ldr	r4, [r4, #4]
 800f142:	e7b2      	b.n	800f0aa <_malloc_r+0x32>
 800f144:	4634      	mov	r4, r6
 800f146:	6876      	ldr	r6, [r6, #4]
 800f148:	e7b9      	b.n	800f0be <_malloc_r+0x46>
 800f14a:	230c      	movs	r3, #12
 800f14c:	603b      	str	r3, [r7, #0]
 800f14e:	4638      	mov	r0, r7
 800f150:	f001 fc58 	bl	8010a04 <__malloc_unlock>
 800f154:	e7a1      	b.n	800f09a <_malloc_r+0x22>
 800f156:	6025      	str	r5, [r4, #0]
 800f158:	e7de      	b.n	800f118 <_malloc_r+0xa0>
 800f15a:	bf00      	nop
 800f15c:	200028d4 	.word	0x200028d4

0800f160 <__cvt>:
 800f160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	ec55 4b10 	vmov	r4, r5, d0
 800f168:	2d00      	cmp	r5, #0
 800f16a:	460e      	mov	r6, r1
 800f16c:	4619      	mov	r1, r3
 800f16e:	462b      	mov	r3, r5
 800f170:	bfbb      	ittet	lt
 800f172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f176:	461d      	movlt	r5, r3
 800f178:	2300      	movge	r3, #0
 800f17a:	232d      	movlt	r3, #45	; 0x2d
 800f17c:	700b      	strb	r3, [r1, #0]
 800f17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f184:	4691      	mov	r9, r2
 800f186:	f023 0820 	bic.w	r8, r3, #32
 800f18a:	bfbc      	itt	lt
 800f18c:	4622      	movlt	r2, r4
 800f18e:	4614      	movlt	r4, r2
 800f190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f194:	d005      	beq.n	800f1a2 <__cvt+0x42>
 800f196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f19a:	d100      	bne.n	800f19e <__cvt+0x3e>
 800f19c:	3601      	adds	r6, #1
 800f19e:	2102      	movs	r1, #2
 800f1a0:	e000      	b.n	800f1a4 <__cvt+0x44>
 800f1a2:	2103      	movs	r1, #3
 800f1a4:	ab03      	add	r3, sp, #12
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	ab02      	add	r3, sp, #8
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	ec45 4b10 	vmov	d0, r4, r5
 800f1b0:	4653      	mov	r3, sl
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	f000 fd10 	bl	800fbd8 <_dtoa_r>
 800f1b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f1bc:	4607      	mov	r7, r0
 800f1be:	d102      	bne.n	800f1c6 <__cvt+0x66>
 800f1c0:	f019 0f01 	tst.w	r9, #1
 800f1c4:	d022      	beq.n	800f20c <__cvt+0xac>
 800f1c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1ca:	eb07 0906 	add.w	r9, r7, r6
 800f1ce:	d110      	bne.n	800f1f2 <__cvt+0x92>
 800f1d0:	783b      	ldrb	r3, [r7, #0]
 800f1d2:	2b30      	cmp	r3, #48	; 0x30
 800f1d4:	d10a      	bne.n	800f1ec <__cvt+0x8c>
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4620      	mov	r0, r4
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7f1 fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 800f1e2:	b918      	cbnz	r0, 800f1ec <__cvt+0x8c>
 800f1e4:	f1c6 0601 	rsb	r6, r6, #1
 800f1e8:	f8ca 6000 	str.w	r6, [sl]
 800f1ec:	f8da 3000 	ldr.w	r3, [sl]
 800f1f0:	4499      	add	r9, r3
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 fc7d 	bl	8000af8 <__aeabi_dcmpeq>
 800f1fe:	b108      	cbz	r0, 800f204 <__cvt+0xa4>
 800f200:	f8cd 900c 	str.w	r9, [sp, #12]
 800f204:	2230      	movs	r2, #48	; 0x30
 800f206:	9b03      	ldr	r3, [sp, #12]
 800f208:	454b      	cmp	r3, r9
 800f20a:	d307      	bcc.n	800f21c <__cvt+0xbc>
 800f20c:	9b03      	ldr	r3, [sp, #12]
 800f20e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f210:	1bdb      	subs	r3, r3, r7
 800f212:	4638      	mov	r0, r7
 800f214:	6013      	str	r3, [r2, #0]
 800f216:	b004      	add	sp, #16
 800f218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f21c:	1c59      	adds	r1, r3, #1
 800f21e:	9103      	str	r1, [sp, #12]
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	e7f0      	b.n	800f206 <__cvt+0xa6>

0800f224 <__exponent>:
 800f224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f226:	4603      	mov	r3, r0
 800f228:	2900      	cmp	r1, #0
 800f22a:	bfb8      	it	lt
 800f22c:	4249      	neglt	r1, r1
 800f22e:	f803 2b02 	strb.w	r2, [r3], #2
 800f232:	bfb4      	ite	lt
 800f234:	222d      	movlt	r2, #45	; 0x2d
 800f236:	222b      	movge	r2, #43	; 0x2b
 800f238:	2909      	cmp	r1, #9
 800f23a:	7042      	strb	r2, [r0, #1]
 800f23c:	dd2a      	ble.n	800f294 <__exponent+0x70>
 800f23e:	f10d 0407 	add.w	r4, sp, #7
 800f242:	46a4      	mov	ip, r4
 800f244:	270a      	movs	r7, #10
 800f246:	46a6      	mov	lr, r4
 800f248:	460a      	mov	r2, r1
 800f24a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f24e:	fb07 1516 	mls	r5, r7, r6, r1
 800f252:	3530      	adds	r5, #48	; 0x30
 800f254:	2a63      	cmp	r2, #99	; 0x63
 800f256:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f25a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f25e:	4631      	mov	r1, r6
 800f260:	dcf1      	bgt.n	800f246 <__exponent+0x22>
 800f262:	3130      	adds	r1, #48	; 0x30
 800f264:	f1ae 0502 	sub.w	r5, lr, #2
 800f268:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f26c:	1c44      	adds	r4, r0, #1
 800f26e:	4629      	mov	r1, r5
 800f270:	4561      	cmp	r1, ip
 800f272:	d30a      	bcc.n	800f28a <__exponent+0x66>
 800f274:	f10d 0209 	add.w	r2, sp, #9
 800f278:	eba2 020e 	sub.w	r2, r2, lr
 800f27c:	4565      	cmp	r5, ip
 800f27e:	bf88      	it	hi
 800f280:	2200      	movhi	r2, #0
 800f282:	4413      	add	r3, r2
 800f284:	1a18      	subs	r0, r3, r0
 800f286:	b003      	add	sp, #12
 800f288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f28e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f292:	e7ed      	b.n	800f270 <__exponent+0x4c>
 800f294:	2330      	movs	r3, #48	; 0x30
 800f296:	3130      	adds	r1, #48	; 0x30
 800f298:	7083      	strb	r3, [r0, #2]
 800f29a:	70c1      	strb	r1, [r0, #3]
 800f29c:	1d03      	adds	r3, r0, #4
 800f29e:	e7f1      	b.n	800f284 <__exponent+0x60>

0800f2a0 <_printf_float>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	ed2d 8b02 	vpush	{d8}
 800f2a8:	b08d      	sub	sp, #52	; 0x34
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	461f      	mov	r7, r3
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	f001 fb85 	bl	80109c4 <_localeconv_r>
 800f2ba:	f8d0 a000 	ldr.w	sl, [r0]
 800f2be:	4650      	mov	r0, sl
 800f2c0:	f7f0 ff9e 	bl	8000200 <strlen>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	9305      	str	r3, [sp, #20]
 800f2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f2d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f2d4:	3307      	adds	r3, #7
 800f2d6:	f023 0307 	bic.w	r3, r3, #7
 800f2da:	f103 0208 	add.w	r2, r3, #8
 800f2de:	f8c8 2000 	str.w	r2, [r8]
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f2ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f2ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f2f2:	9307      	str	r3, [sp, #28]
 800f2f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f2f8:	ee08 0a10 	vmov	s16, r0
 800f2fc:	4b9f      	ldr	r3, [pc, #636]	; (800f57c <_printf_float+0x2dc>)
 800f2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f306:	f7f1 fc29 	bl	8000b5c <__aeabi_dcmpun>
 800f30a:	bb88      	cbnz	r0, 800f370 <_printf_float+0xd0>
 800f30c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f310:	4b9a      	ldr	r3, [pc, #616]	; (800f57c <_printf_float+0x2dc>)
 800f312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f316:	f7f1 fc03 	bl	8000b20 <__aeabi_dcmple>
 800f31a:	bb48      	cbnz	r0, 800f370 <_printf_float+0xd0>
 800f31c:	2200      	movs	r2, #0
 800f31e:	2300      	movs	r3, #0
 800f320:	4640      	mov	r0, r8
 800f322:	4649      	mov	r1, r9
 800f324:	f7f1 fbf2 	bl	8000b0c <__aeabi_dcmplt>
 800f328:	b110      	cbz	r0, 800f330 <_printf_float+0x90>
 800f32a:	232d      	movs	r3, #45	; 0x2d
 800f32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f330:	4b93      	ldr	r3, [pc, #588]	; (800f580 <_printf_float+0x2e0>)
 800f332:	4894      	ldr	r0, [pc, #592]	; (800f584 <_printf_float+0x2e4>)
 800f334:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f338:	bf94      	ite	ls
 800f33a:	4698      	movls	r8, r3
 800f33c:	4680      	movhi	r8, r0
 800f33e:	2303      	movs	r3, #3
 800f340:	6123      	str	r3, [r4, #16]
 800f342:	9b05      	ldr	r3, [sp, #20]
 800f344:	f023 0204 	bic.w	r2, r3, #4
 800f348:	6022      	str	r2, [r4, #0]
 800f34a:	f04f 0900 	mov.w	r9, #0
 800f34e:	9700      	str	r7, [sp, #0]
 800f350:	4633      	mov	r3, r6
 800f352:	aa0b      	add	r2, sp, #44	; 0x2c
 800f354:	4621      	mov	r1, r4
 800f356:	4628      	mov	r0, r5
 800f358:	f000 f9d8 	bl	800f70c <_printf_common>
 800f35c:	3001      	adds	r0, #1
 800f35e:	f040 8090 	bne.w	800f482 <_printf_float+0x1e2>
 800f362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f366:	b00d      	add	sp, #52	; 0x34
 800f368:	ecbd 8b02 	vpop	{d8}
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f370:	4642      	mov	r2, r8
 800f372:	464b      	mov	r3, r9
 800f374:	4640      	mov	r0, r8
 800f376:	4649      	mov	r1, r9
 800f378:	f7f1 fbf0 	bl	8000b5c <__aeabi_dcmpun>
 800f37c:	b140      	cbz	r0, 800f390 <_printf_float+0xf0>
 800f37e:	464b      	mov	r3, r9
 800f380:	2b00      	cmp	r3, #0
 800f382:	bfbc      	itt	lt
 800f384:	232d      	movlt	r3, #45	; 0x2d
 800f386:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f38a:	487f      	ldr	r0, [pc, #508]	; (800f588 <_printf_float+0x2e8>)
 800f38c:	4b7f      	ldr	r3, [pc, #508]	; (800f58c <_printf_float+0x2ec>)
 800f38e:	e7d1      	b.n	800f334 <_printf_float+0x94>
 800f390:	6863      	ldr	r3, [r4, #4]
 800f392:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f396:	9206      	str	r2, [sp, #24]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	d13f      	bne.n	800f41c <_printf_float+0x17c>
 800f39c:	2306      	movs	r3, #6
 800f39e:	6063      	str	r3, [r4, #4]
 800f3a0:	9b05      	ldr	r3, [sp, #20]
 800f3a2:	6861      	ldr	r1, [r4, #4]
 800f3a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9303      	str	r3, [sp, #12]
 800f3ac:	ab0a      	add	r3, sp, #40	; 0x28
 800f3ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f3b2:	ab09      	add	r3, sp, #36	; 0x24
 800f3b4:	ec49 8b10 	vmov	d0, r8, r9
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	6022      	str	r2, [r4, #0]
 800f3bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	f7ff fecd 	bl	800f160 <__cvt>
 800f3c6:	9b06      	ldr	r3, [sp, #24]
 800f3c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3ca:	2b47      	cmp	r3, #71	; 0x47
 800f3cc:	4680      	mov	r8, r0
 800f3ce:	d108      	bne.n	800f3e2 <_printf_float+0x142>
 800f3d0:	1cc8      	adds	r0, r1, #3
 800f3d2:	db02      	blt.n	800f3da <_printf_float+0x13a>
 800f3d4:	6863      	ldr	r3, [r4, #4]
 800f3d6:	4299      	cmp	r1, r3
 800f3d8:	dd41      	ble.n	800f45e <_printf_float+0x1be>
 800f3da:	f1ab 0b02 	sub.w	fp, fp, #2
 800f3de:	fa5f fb8b 	uxtb.w	fp, fp
 800f3e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f3e6:	d820      	bhi.n	800f42a <_printf_float+0x18a>
 800f3e8:	3901      	subs	r1, #1
 800f3ea:	465a      	mov	r2, fp
 800f3ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f3f0:	9109      	str	r1, [sp, #36]	; 0x24
 800f3f2:	f7ff ff17 	bl	800f224 <__exponent>
 800f3f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3f8:	1813      	adds	r3, r2, r0
 800f3fa:	2a01      	cmp	r2, #1
 800f3fc:	4681      	mov	r9, r0
 800f3fe:	6123      	str	r3, [r4, #16]
 800f400:	dc02      	bgt.n	800f408 <_printf_float+0x168>
 800f402:	6822      	ldr	r2, [r4, #0]
 800f404:	07d2      	lsls	r2, r2, #31
 800f406:	d501      	bpl.n	800f40c <_printf_float+0x16c>
 800f408:	3301      	adds	r3, #1
 800f40a:	6123      	str	r3, [r4, #16]
 800f40c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f410:	2b00      	cmp	r3, #0
 800f412:	d09c      	beq.n	800f34e <_printf_float+0xae>
 800f414:	232d      	movs	r3, #45	; 0x2d
 800f416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f41a:	e798      	b.n	800f34e <_printf_float+0xae>
 800f41c:	9a06      	ldr	r2, [sp, #24]
 800f41e:	2a47      	cmp	r2, #71	; 0x47
 800f420:	d1be      	bne.n	800f3a0 <_printf_float+0x100>
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1bc      	bne.n	800f3a0 <_printf_float+0x100>
 800f426:	2301      	movs	r3, #1
 800f428:	e7b9      	b.n	800f39e <_printf_float+0xfe>
 800f42a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f42e:	d118      	bne.n	800f462 <_printf_float+0x1c2>
 800f430:	2900      	cmp	r1, #0
 800f432:	6863      	ldr	r3, [r4, #4]
 800f434:	dd0b      	ble.n	800f44e <_printf_float+0x1ae>
 800f436:	6121      	str	r1, [r4, #16]
 800f438:	b913      	cbnz	r3, 800f440 <_printf_float+0x1a0>
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	07d0      	lsls	r0, r2, #31
 800f43e:	d502      	bpl.n	800f446 <_printf_float+0x1a6>
 800f440:	3301      	adds	r3, #1
 800f442:	440b      	add	r3, r1
 800f444:	6123      	str	r3, [r4, #16]
 800f446:	65a1      	str	r1, [r4, #88]	; 0x58
 800f448:	f04f 0900 	mov.w	r9, #0
 800f44c:	e7de      	b.n	800f40c <_printf_float+0x16c>
 800f44e:	b913      	cbnz	r3, 800f456 <_printf_float+0x1b6>
 800f450:	6822      	ldr	r2, [r4, #0]
 800f452:	07d2      	lsls	r2, r2, #31
 800f454:	d501      	bpl.n	800f45a <_printf_float+0x1ba>
 800f456:	3302      	adds	r3, #2
 800f458:	e7f4      	b.n	800f444 <_printf_float+0x1a4>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e7f2      	b.n	800f444 <_printf_float+0x1a4>
 800f45e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f464:	4299      	cmp	r1, r3
 800f466:	db05      	blt.n	800f474 <_printf_float+0x1d4>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	6121      	str	r1, [r4, #16]
 800f46c:	07d8      	lsls	r0, r3, #31
 800f46e:	d5ea      	bpl.n	800f446 <_printf_float+0x1a6>
 800f470:	1c4b      	adds	r3, r1, #1
 800f472:	e7e7      	b.n	800f444 <_printf_float+0x1a4>
 800f474:	2900      	cmp	r1, #0
 800f476:	bfd4      	ite	le
 800f478:	f1c1 0202 	rsble	r2, r1, #2
 800f47c:	2201      	movgt	r2, #1
 800f47e:	4413      	add	r3, r2
 800f480:	e7e0      	b.n	800f444 <_printf_float+0x1a4>
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	055a      	lsls	r2, r3, #21
 800f486:	d407      	bmi.n	800f498 <_printf_float+0x1f8>
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	4642      	mov	r2, r8
 800f48c:	4631      	mov	r1, r6
 800f48e:	4628      	mov	r0, r5
 800f490:	47b8      	blx	r7
 800f492:	3001      	adds	r0, #1
 800f494:	d12c      	bne.n	800f4f0 <_printf_float+0x250>
 800f496:	e764      	b.n	800f362 <_printf_float+0xc2>
 800f498:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f49c:	f240 80e0 	bls.w	800f660 <_printf_float+0x3c0>
 800f4a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f7f1 fb26 	bl	8000af8 <__aeabi_dcmpeq>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d034      	beq.n	800f51a <_printf_float+0x27a>
 800f4b0:	4a37      	ldr	r2, [pc, #220]	; (800f590 <_printf_float+0x2f0>)
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	47b8      	blx	r7
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	f43f af51 	beq.w	800f362 <_printf_float+0xc2>
 800f4c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	db02      	blt.n	800f4ce <_printf_float+0x22e>
 800f4c8:	6823      	ldr	r3, [r4, #0]
 800f4ca:	07d8      	lsls	r0, r3, #31
 800f4cc:	d510      	bpl.n	800f4f0 <_printf_float+0x250>
 800f4ce:	ee18 3a10 	vmov	r3, s16
 800f4d2:	4652      	mov	r2, sl
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	47b8      	blx	r7
 800f4da:	3001      	adds	r0, #1
 800f4dc:	f43f af41 	beq.w	800f362 <_printf_float+0xc2>
 800f4e0:	f04f 0800 	mov.w	r8, #0
 800f4e4:	f104 091a 	add.w	r9, r4, #26
 800f4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	4543      	cmp	r3, r8
 800f4ee:	dc09      	bgt.n	800f504 <_printf_float+0x264>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	079b      	lsls	r3, r3, #30
 800f4f4:	f100 8105 	bmi.w	800f702 <_printf_float+0x462>
 800f4f8:	68e0      	ldr	r0, [r4, #12]
 800f4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4fc:	4298      	cmp	r0, r3
 800f4fe:	bfb8      	it	lt
 800f500:	4618      	movlt	r0, r3
 800f502:	e730      	b.n	800f366 <_printf_float+0xc6>
 800f504:	2301      	movs	r3, #1
 800f506:	464a      	mov	r2, r9
 800f508:	4631      	mov	r1, r6
 800f50a:	4628      	mov	r0, r5
 800f50c:	47b8      	blx	r7
 800f50e:	3001      	adds	r0, #1
 800f510:	f43f af27 	beq.w	800f362 <_printf_float+0xc2>
 800f514:	f108 0801 	add.w	r8, r8, #1
 800f518:	e7e6      	b.n	800f4e8 <_printf_float+0x248>
 800f51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	dc39      	bgt.n	800f594 <_printf_float+0x2f4>
 800f520:	4a1b      	ldr	r2, [pc, #108]	; (800f590 <_printf_float+0x2f0>)
 800f522:	2301      	movs	r3, #1
 800f524:	4631      	mov	r1, r6
 800f526:	4628      	mov	r0, r5
 800f528:	47b8      	blx	r7
 800f52a:	3001      	adds	r0, #1
 800f52c:	f43f af19 	beq.w	800f362 <_printf_float+0xc2>
 800f530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f534:	4313      	orrs	r3, r2
 800f536:	d102      	bne.n	800f53e <_printf_float+0x29e>
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	07d9      	lsls	r1, r3, #31
 800f53c:	d5d8      	bpl.n	800f4f0 <_printf_float+0x250>
 800f53e:	ee18 3a10 	vmov	r3, s16
 800f542:	4652      	mov	r2, sl
 800f544:	4631      	mov	r1, r6
 800f546:	4628      	mov	r0, r5
 800f548:	47b8      	blx	r7
 800f54a:	3001      	adds	r0, #1
 800f54c:	f43f af09 	beq.w	800f362 <_printf_float+0xc2>
 800f550:	f04f 0900 	mov.w	r9, #0
 800f554:	f104 0a1a 	add.w	sl, r4, #26
 800f558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f55a:	425b      	negs	r3, r3
 800f55c:	454b      	cmp	r3, r9
 800f55e:	dc01      	bgt.n	800f564 <_printf_float+0x2c4>
 800f560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f562:	e792      	b.n	800f48a <_printf_float+0x1ea>
 800f564:	2301      	movs	r3, #1
 800f566:	4652      	mov	r2, sl
 800f568:	4631      	mov	r1, r6
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	f43f aef7 	beq.w	800f362 <_printf_float+0xc2>
 800f574:	f109 0901 	add.w	r9, r9, #1
 800f578:	e7ee      	b.n	800f558 <_printf_float+0x2b8>
 800f57a:	bf00      	nop
 800f57c:	7fefffff 	.word	0x7fefffff
 800f580:	08011dac 	.word	0x08011dac
 800f584:	08011db0 	.word	0x08011db0
 800f588:	08011db8 	.word	0x08011db8
 800f58c:	08011db4 	.word	0x08011db4
 800f590:	08011dbc 	.word	0x08011dbc
 800f594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f598:	429a      	cmp	r2, r3
 800f59a:	bfa8      	it	ge
 800f59c:	461a      	movge	r2, r3
 800f59e:	2a00      	cmp	r2, #0
 800f5a0:	4691      	mov	r9, r2
 800f5a2:	dc37      	bgt.n	800f614 <_printf_float+0x374>
 800f5a4:	f04f 0b00 	mov.w	fp, #0
 800f5a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5ac:	f104 021a 	add.w	r2, r4, #26
 800f5b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5b2:	9305      	str	r3, [sp, #20]
 800f5b4:	eba3 0309 	sub.w	r3, r3, r9
 800f5b8:	455b      	cmp	r3, fp
 800f5ba:	dc33      	bgt.n	800f624 <_printf_float+0x384>
 800f5bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	db3b      	blt.n	800f63c <_printf_float+0x39c>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	07da      	lsls	r2, r3, #31
 800f5c8:	d438      	bmi.n	800f63c <_printf_float+0x39c>
 800f5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5cc:	9a05      	ldr	r2, [sp, #20]
 800f5ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5d0:	1a9a      	subs	r2, r3, r2
 800f5d2:	eba3 0901 	sub.w	r9, r3, r1
 800f5d6:	4591      	cmp	r9, r2
 800f5d8:	bfa8      	it	ge
 800f5da:	4691      	movge	r9, r2
 800f5dc:	f1b9 0f00 	cmp.w	r9, #0
 800f5e0:	dc35      	bgt.n	800f64e <_printf_float+0x3ae>
 800f5e2:	f04f 0800 	mov.w	r8, #0
 800f5e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5ea:	f104 0a1a 	add.w	sl, r4, #26
 800f5ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5f2:	1a9b      	subs	r3, r3, r2
 800f5f4:	eba3 0309 	sub.w	r3, r3, r9
 800f5f8:	4543      	cmp	r3, r8
 800f5fa:	f77f af79 	ble.w	800f4f0 <_printf_float+0x250>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4652      	mov	r2, sl
 800f602:	4631      	mov	r1, r6
 800f604:	4628      	mov	r0, r5
 800f606:	47b8      	blx	r7
 800f608:	3001      	adds	r0, #1
 800f60a:	f43f aeaa 	beq.w	800f362 <_printf_float+0xc2>
 800f60e:	f108 0801 	add.w	r8, r8, #1
 800f612:	e7ec      	b.n	800f5ee <_printf_float+0x34e>
 800f614:	4613      	mov	r3, r2
 800f616:	4631      	mov	r1, r6
 800f618:	4642      	mov	r2, r8
 800f61a:	4628      	mov	r0, r5
 800f61c:	47b8      	blx	r7
 800f61e:	3001      	adds	r0, #1
 800f620:	d1c0      	bne.n	800f5a4 <_printf_float+0x304>
 800f622:	e69e      	b.n	800f362 <_printf_float+0xc2>
 800f624:	2301      	movs	r3, #1
 800f626:	4631      	mov	r1, r6
 800f628:	4628      	mov	r0, r5
 800f62a:	9205      	str	r2, [sp, #20]
 800f62c:	47b8      	blx	r7
 800f62e:	3001      	adds	r0, #1
 800f630:	f43f ae97 	beq.w	800f362 <_printf_float+0xc2>
 800f634:	9a05      	ldr	r2, [sp, #20]
 800f636:	f10b 0b01 	add.w	fp, fp, #1
 800f63a:	e7b9      	b.n	800f5b0 <_printf_float+0x310>
 800f63c:	ee18 3a10 	vmov	r3, s16
 800f640:	4652      	mov	r2, sl
 800f642:	4631      	mov	r1, r6
 800f644:	4628      	mov	r0, r5
 800f646:	47b8      	blx	r7
 800f648:	3001      	adds	r0, #1
 800f64a:	d1be      	bne.n	800f5ca <_printf_float+0x32a>
 800f64c:	e689      	b.n	800f362 <_printf_float+0xc2>
 800f64e:	9a05      	ldr	r2, [sp, #20]
 800f650:	464b      	mov	r3, r9
 800f652:	4442      	add	r2, r8
 800f654:	4631      	mov	r1, r6
 800f656:	4628      	mov	r0, r5
 800f658:	47b8      	blx	r7
 800f65a:	3001      	adds	r0, #1
 800f65c:	d1c1      	bne.n	800f5e2 <_printf_float+0x342>
 800f65e:	e680      	b.n	800f362 <_printf_float+0xc2>
 800f660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f662:	2a01      	cmp	r2, #1
 800f664:	dc01      	bgt.n	800f66a <_printf_float+0x3ca>
 800f666:	07db      	lsls	r3, r3, #31
 800f668:	d538      	bpl.n	800f6dc <_printf_float+0x43c>
 800f66a:	2301      	movs	r3, #1
 800f66c:	4642      	mov	r2, r8
 800f66e:	4631      	mov	r1, r6
 800f670:	4628      	mov	r0, r5
 800f672:	47b8      	blx	r7
 800f674:	3001      	adds	r0, #1
 800f676:	f43f ae74 	beq.w	800f362 <_printf_float+0xc2>
 800f67a:	ee18 3a10 	vmov	r3, s16
 800f67e:	4652      	mov	r2, sl
 800f680:	4631      	mov	r1, r6
 800f682:	4628      	mov	r0, r5
 800f684:	47b8      	blx	r7
 800f686:	3001      	adds	r0, #1
 800f688:	f43f ae6b 	beq.w	800f362 <_printf_float+0xc2>
 800f68c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f690:	2200      	movs	r2, #0
 800f692:	2300      	movs	r3, #0
 800f694:	f7f1 fa30 	bl	8000af8 <__aeabi_dcmpeq>
 800f698:	b9d8      	cbnz	r0, 800f6d2 <_printf_float+0x432>
 800f69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f69c:	f108 0201 	add.w	r2, r8, #1
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	47b8      	blx	r7
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	d10e      	bne.n	800f6ca <_printf_float+0x42a>
 800f6ac:	e659      	b.n	800f362 <_printf_float+0xc2>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	47b8      	blx	r7
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	f43f ae52 	beq.w	800f362 <_printf_float+0xc2>
 800f6be:	f108 0801 	add.w	r8, r8, #1
 800f6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	4543      	cmp	r3, r8
 800f6c8:	dcf1      	bgt.n	800f6ae <_printf_float+0x40e>
 800f6ca:	464b      	mov	r3, r9
 800f6cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f6d0:	e6dc      	b.n	800f48c <_printf_float+0x1ec>
 800f6d2:	f04f 0800 	mov.w	r8, #0
 800f6d6:	f104 0a1a 	add.w	sl, r4, #26
 800f6da:	e7f2      	b.n	800f6c2 <_printf_float+0x422>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	4642      	mov	r2, r8
 800f6e0:	e7df      	b.n	800f6a2 <_printf_float+0x402>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	464a      	mov	r2, r9
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	47b8      	blx	r7
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	f43f ae38 	beq.w	800f362 <_printf_float+0xc2>
 800f6f2:	f108 0801 	add.w	r8, r8, #1
 800f6f6:	68e3      	ldr	r3, [r4, #12]
 800f6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6fa:	1a5b      	subs	r3, r3, r1
 800f6fc:	4543      	cmp	r3, r8
 800f6fe:	dcf0      	bgt.n	800f6e2 <_printf_float+0x442>
 800f700:	e6fa      	b.n	800f4f8 <_printf_float+0x258>
 800f702:	f04f 0800 	mov.w	r8, #0
 800f706:	f104 0919 	add.w	r9, r4, #25
 800f70a:	e7f4      	b.n	800f6f6 <_printf_float+0x456>

0800f70c <_printf_common>:
 800f70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	4616      	mov	r6, r2
 800f712:	4699      	mov	r9, r3
 800f714:	688a      	ldr	r2, [r1, #8]
 800f716:	690b      	ldr	r3, [r1, #16]
 800f718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	bfb8      	it	lt
 800f720:	4613      	movlt	r3, r2
 800f722:	6033      	str	r3, [r6, #0]
 800f724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f728:	4607      	mov	r7, r0
 800f72a:	460c      	mov	r4, r1
 800f72c:	b10a      	cbz	r2, 800f732 <_printf_common+0x26>
 800f72e:	3301      	adds	r3, #1
 800f730:	6033      	str	r3, [r6, #0]
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	0699      	lsls	r1, r3, #26
 800f736:	bf42      	ittt	mi
 800f738:	6833      	ldrmi	r3, [r6, #0]
 800f73a:	3302      	addmi	r3, #2
 800f73c:	6033      	strmi	r3, [r6, #0]
 800f73e:	6825      	ldr	r5, [r4, #0]
 800f740:	f015 0506 	ands.w	r5, r5, #6
 800f744:	d106      	bne.n	800f754 <_printf_common+0x48>
 800f746:	f104 0a19 	add.w	sl, r4, #25
 800f74a:	68e3      	ldr	r3, [r4, #12]
 800f74c:	6832      	ldr	r2, [r6, #0]
 800f74e:	1a9b      	subs	r3, r3, r2
 800f750:	42ab      	cmp	r3, r5
 800f752:	dc26      	bgt.n	800f7a2 <_printf_common+0x96>
 800f754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f758:	1e13      	subs	r3, r2, #0
 800f75a:	6822      	ldr	r2, [r4, #0]
 800f75c:	bf18      	it	ne
 800f75e:	2301      	movne	r3, #1
 800f760:	0692      	lsls	r2, r2, #26
 800f762:	d42b      	bmi.n	800f7bc <_printf_common+0xb0>
 800f764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f768:	4649      	mov	r1, r9
 800f76a:	4638      	mov	r0, r7
 800f76c:	47c0      	blx	r8
 800f76e:	3001      	adds	r0, #1
 800f770:	d01e      	beq.n	800f7b0 <_printf_common+0xa4>
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	68e5      	ldr	r5, [r4, #12]
 800f776:	6832      	ldr	r2, [r6, #0]
 800f778:	f003 0306 	and.w	r3, r3, #6
 800f77c:	2b04      	cmp	r3, #4
 800f77e:	bf08      	it	eq
 800f780:	1aad      	subeq	r5, r5, r2
 800f782:	68a3      	ldr	r3, [r4, #8]
 800f784:	6922      	ldr	r2, [r4, #16]
 800f786:	bf0c      	ite	eq
 800f788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f78c:	2500      	movne	r5, #0
 800f78e:	4293      	cmp	r3, r2
 800f790:	bfc4      	itt	gt
 800f792:	1a9b      	subgt	r3, r3, r2
 800f794:	18ed      	addgt	r5, r5, r3
 800f796:	2600      	movs	r6, #0
 800f798:	341a      	adds	r4, #26
 800f79a:	42b5      	cmp	r5, r6
 800f79c:	d11a      	bne.n	800f7d4 <_printf_common+0xc8>
 800f79e:	2000      	movs	r0, #0
 800f7a0:	e008      	b.n	800f7b4 <_printf_common+0xa8>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	4652      	mov	r2, sl
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	47c0      	blx	r8
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	d103      	bne.n	800f7b8 <_printf_common+0xac>
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b8:	3501      	adds	r5, #1
 800f7ba:	e7c6      	b.n	800f74a <_printf_common+0x3e>
 800f7bc:	18e1      	adds	r1, r4, r3
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	2030      	movs	r0, #48	; 0x30
 800f7c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7c6:	4422      	add	r2, r4
 800f7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7d0:	3302      	adds	r3, #2
 800f7d2:	e7c7      	b.n	800f764 <_printf_common+0x58>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	4649      	mov	r1, r9
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c0      	blx	r8
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d0e6      	beq.n	800f7b0 <_printf_common+0xa4>
 800f7e2:	3601      	adds	r6, #1
 800f7e4:	e7d9      	b.n	800f79a <_printf_common+0x8e>
	...

0800f7e8 <_printf_i>:
 800f7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ec:	7e0f      	ldrb	r7, [r1, #24]
 800f7ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7f0:	2f78      	cmp	r7, #120	; 0x78
 800f7f2:	4691      	mov	r9, r2
 800f7f4:	4680      	mov	r8, r0
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	469a      	mov	sl, r3
 800f7fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7fe:	d807      	bhi.n	800f810 <_printf_i+0x28>
 800f800:	2f62      	cmp	r7, #98	; 0x62
 800f802:	d80a      	bhi.n	800f81a <_printf_i+0x32>
 800f804:	2f00      	cmp	r7, #0
 800f806:	f000 80d8 	beq.w	800f9ba <_printf_i+0x1d2>
 800f80a:	2f58      	cmp	r7, #88	; 0x58
 800f80c:	f000 80a3 	beq.w	800f956 <_printf_i+0x16e>
 800f810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f818:	e03a      	b.n	800f890 <_printf_i+0xa8>
 800f81a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f81e:	2b15      	cmp	r3, #21
 800f820:	d8f6      	bhi.n	800f810 <_printf_i+0x28>
 800f822:	a101      	add	r1, pc, #4	; (adr r1, 800f828 <_printf_i+0x40>)
 800f824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f828:	0800f881 	.word	0x0800f881
 800f82c:	0800f895 	.word	0x0800f895
 800f830:	0800f811 	.word	0x0800f811
 800f834:	0800f811 	.word	0x0800f811
 800f838:	0800f811 	.word	0x0800f811
 800f83c:	0800f811 	.word	0x0800f811
 800f840:	0800f895 	.word	0x0800f895
 800f844:	0800f811 	.word	0x0800f811
 800f848:	0800f811 	.word	0x0800f811
 800f84c:	0800f811 	.word	0x0800f811
 800f850:	0800f811 	.word	0x0800f811
 800f854:	0800f9a1 	.word	0x0800f9a1
 800f858:	0800f8c5 	.word	0x0800f8c5
 800f85c:	0800f983 	.word	0x0800f983
 800f860:	0800f811 	.word	0x0800f811
 800f864:	0800f811 	.word	0x0800f811
 800f868:	0800f9c3 	.word	0x0800f9c3
 800f86c:	0800f811 	.word	0x0800f811
 800f870:	0800f8c5 	.word	0x0800f8c5
 800f874:	0800f811 	.word	0x0800f811
 800f878:	0800f811 	.word	0x0800f811
 800f87c:	0800f98b 	.word	0x0800f98b
 800f880:	682b      	ldr	r3, [r5, #0]
 800f882:	1d1a      	adds	r2, r3, #4
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	602a      	str	r2, [r5, #0]
 800f888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f88c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f890:	2301      	movs	r3, #1
 800f892:	e0a3      	b.n	800f9dc <_printf_i+0x1f4>
 800f894:	6820      	ldr	r0, [r4, #0]
 800f896:	6829      	ldr	r1, [r5, #0]
 800f898:	0606      	lsls	r6, r0, #24
 800f89a:	f101 0304 	add.w	r3, r1, #4
 800f89e:	d50a      	bpl.n	800f8b6 <_printf_i+0xce>
 800f8a0:	680e      	ldr	r6, [r1, #0]
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	2e00      	cmp	r6, #0
 800f8a6:	da03      	bge.n	800f8b0 <_printf_i+0xc8>
 800f8a8:	232d      	movs	r3, #45	; 0x2d
 800f8aa:	4276      	negs	r6, r6
 800f8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8b0:	485e      	ldr	r0, [pc, #376]	; (800fa2c <_printf_i+0x244>)
 800f8b2:	230a      	movs	r3, #10
 800f8b4:	e019      	b.n	800f8ea <_printf_i+0x102>
 800f8b6:	680e      	ldr	r6, [r1, #0]
 800f8b8:	602b      	str	r3, [r5, #0]
 800f8ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8be:	bf18      	it	ne
 800f8c0:	b236      	sxthne	r6, r6
 800f8c2:	e7ef      	b.n	800f8a4 <_printf_i+0xbc>
 800f8c4:	682b      	ldr	r3, [r5, #0]
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	1d19      	adds	r1, r3, #4
 800f8ca:	6029      	str	r1, [r5, #0]
 800f8cc:	0601      	lsls	r1, r0, #24
 800f8ce:	d501      	bpl.n	800f8d4 <_printf_i+0xec>
 800f8d0:	681e      	ldr	r6, [r3, #0]
 800f8d2:	e002      	b.n	800f8da <_printf_i+0xf2>
 800f8d4:	0646      	lsls	r6, r0, #25
 800f8d6:	d5fb      	bpl.n	800f8d0 <_printf_i+0xe8>
 800f8d8:	881e      	ldrh	r6, [r3, #0]
 800f8da:	4854      	ldr	r0, [pc, #336]	; (800fa2c <_printf_i+0x244>)
 800f8dc:	2f6f      	cmp	r7, #111	; 0x6f
 800f8de:	bf0c      	ite	eq
 800f8e0:	2308      	moveq	r3, #8
 800f8e2:	230a      	movne	r3, #10
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8ea:	6865      	ldr	r5, [r4, #4]
 800f8ec:	60a5      	str	r5, [r4, #8]
 800f8ee:	2d00      	cmp	r5, #0
 800f8f0:	bfa2      	ittt	ge
 800f8f2:	6821      	ldrge	r1, [r4, #0]
 800f8f4:	f021 0104 	bicge.w	r1, r1, #4
 800f8f8:	6021      	strge	r1, [r4, #0]
 800f8fa:	b90e      	cbnz	r6, 800f900 <_printf_i+0x118>
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	d04d      	beq.n	800f99c <_printf_i+0x1b4>
 800f900:	4615      	mov	r5, r2
 800f902:	fbb6 f1f3 	udiv	r1, r6, r3
 800f906:	fb03 6711 	mls	r7, r3, r1, r6
 800f90a:	5dc7      	ldrb	r7, [r0, r7]
 800f90c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f910:	4637      	mov	r7, r6
 800f912:	42bb      	cmp	r3, r7
 800f914:	460e      	mov	r6, r1
 800f916:	d9f4      	bls.n	800f902 <_printf_i+0x11a>
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d10b      	bne.n	800f934 <_printf_i+0x14c>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	07de      	lsls	r6, r3, #31
 800f920:	d508      	bpl.n	800f934 <_printf_i+0x14c>
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	6861      	ldr	r1, [r4, #4]
 800f926:	4299      	cmp	r1, r3
 800f928:	bfde      	ittt	le
 800f92a:	2330      	movle	r3, #48	; 0x30
 800f92c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f930:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f934:	1b52      	subs	r2, r2, r5
 800f936:	6122      	str	r2, [r4, #16]
 800f938:	f8cd a000 	str.w	sl, [sp]
 800f93c:	464b      	mov	r3, r9
 800f93e:	aa03      	add	r2, sp, #12
 800f940:	4621      	mov	r1, r4
 800f942:	4640      	mov	r0, r8
 800f944:	f7ff fee2 	bl	800f70c <_printf_common>
 800f948:	3001      	adds	r0, #1
 800f94a:	d14c      	bne.n	800f9e6 <_printf_i+0x1fe>
 800f94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f950:	b004      	add	sp, #16
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	4835      	ldr	r0, [pc, #212]	; (800fa2c <_printf_i+0x244>)
 800f958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f95c:	6829      	ldr	r1, [r5, #0]
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	f851 6b04 	ldr.w	r6, [r1], #4
 800f964:	6029      	str	r1, [r5, #0]
 800f966:	061d      	lsls	r5, r3, #24
 800f968:	d514      	bpl.n	800f994 <_printf_i+0x1ac>
 800f96a:	07df      	lsls	r7, r3, #31
 800f96c:	bf44      	itt	mi
 800f96e:	f043 0320 	orrmi.w	r3, r3, #32
 800f972:	6023      	strmi	r3, [r4, #0]
 800f974:	b91e      	cbnz	r6, 800f97e <_printf_i+0x196>
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	f023 0320 	bic.w	r3, r3, #32
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	2310      	movs	r3, #16
 800f980:	e7b0      	b.n	800f8e4 <_printf_i+0xfc>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	f043 0320 	orr.w	r3, r3, #32
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	2378      	movs	r3, #120	; 0x78
 800f98c:	4828      	ldr	r0, [pc, #160]	; (800fa30 <_printf_i+0x248>)
 800f98e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f992:	e7e3      	b.n	800f95c <_printf_i+0x174>
 800f994:	0659      	lsls	r1, r3, #25
 800f996:	bf48      	it	mi
 800f998:	b2b6      	uxthmi	r6, r6
 800f99a:	e7e6      	b.n	800f96a <_printf_i+0x182>
 800f99c:	4615      	mov	r5, r2
 800f99e:	e7bb      	b.n	800f918 <_printf_i+0x130>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	6826      	ldr	r6, [r4, #0]
 800f9a4:	6961      	ldr	r1, [r4, #20]
 800f9a6:	1d18      	adds	r0, r3, #4
 800f9a8:	6028      	str	r0, [r5, #0]
 800f9aa:	0635      	lsls	r5, r6, #24
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	d501      	bpl.n	800f9b4 <_printf_i+0x1cc>
 800f9b0:	6019      	str	r1, [r3, #0]
 800f9b2:	e002      	b.n	800f9ba <_printf_i+0x1d2>
 800f9b4:	0670      	lsls	r0, r6, #25
 800f9b6:	d5fb      	bpl.n	800f9b0 <_printf_i+0x1c8>
 800f9b8:	8019      	strh	r1, [r3, #0]
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	6123      	str	r3, [r4, #16]
 800f9be:	4615      	mov	r5, r2
 800f9c0:	e7ba      	b.n	800f938 <_printf_i+0x150>
 800f9c2:	682b      	ldr	r3, [r5, #0]
 800f9c4:	1d1a      	adds	r2, r3, #4
 800f9c6:	602a      	str	r2, [r5, #0]
 800f9c8:	681d      	ldr	r5, [r3, #0]
 800f9ca:	6862      	ldr	r2, [r4, #4]
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f7f0 fc1e 	bl	8000210 <memchr>
 800f9d4:	b108      	cbz	r0, 800f9da <_printf_i+0x1f2>
 800f9d6:	1b40      	subs	r0, r0, r5
 800f9d8:	6060      	str	r0, [r4, #4]
 800f9da:	6863      	ldr	r3, [r4, #4]
 800f9dc:	6123      	str	r3, [r4, #16]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9e4:	e7a8      	b.n	800f938 <_printf_i+0x150>
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	47d0      	blx	sl
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d0ab      	beq.n	800f94c <_printf_i+0x164>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	079b      	lsls	r3, r3, #30
 800f9f8:	d413      	bmi.n	800fa22 <_printf_i+0x23a>
 800f9fa:	68e0      	ldr	r0, [r4, #12]
 800f9fc:	9b03      	ldr	r3, [sp, #12]
 800f9fe:	4298      	cmp	r0, r3
 800fa00:	bfb8      	it	lt
 800fa02:	4618      	movlt	r0, r3
 800fa04:	e7a4      	b.n	800f950 <_printf_i+0x168>
 800fa06:	2301      	movs	r3, #1
 800fa08:	4632      	mov	r2, r6
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	47d0      	blx	sl
 800fa10:	3001      	adds	r0, #1
 800fa12:	d09b      	beq.n	800f94c <_printf_i+0x164>
 800fa14:	3501      	adds	r5, #1
 800fa16:	68e3      	ldr	r3, [r4, #12]
 800fa18:	9903      	ldr	r1, [sp, #12]
 800fa1a:	1a5b      	subs	r3, r3, r1
 800fa1c:	42ab      	cmp	r3, r5
 800fa1e:	dcf2      	bgt.n	800fa06 <_printf_i+0x21e>
 800fa20:	e7eb      	b.n	800f9fa <_printf_i+0x212>
 800fa22:	2500      	movs	r5, #0
 800fa24:	f104 0619 	add.w	r6, r4, #25
 800fa28:	e7f5      	b.n	800fa16 <_printf_i+0x22e>
 800fa2a:	bf00      	nop
 800fa2c:	08011dbe 	.word	0x08011dbe
 800fa30:	08011dcf 	.word	0x08011dcf

0800fa34 <iprintf>:
 800fa34:	b40f      	push	{r0, r1, r2, r3}
 800fa36:	4b0a      	ldr	r3, [pc, #40]	; (800fa60 <iprintf+0x2c>)
 800fa38:	b513      	push	{r0, r1, r4, lr}
 800fa3a:	681c      	ldr	r4, [r3, #0]
 800fa3c:	b124      	cbz	r4, 800fa48 <iprintf+0x14>
 800fa3e:	69a3      	ldr	r3, [r4, #24]
 800fa40:	b913      	cbnz	r3, 800fa48 <iprintf+0x14>
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 ff0e 	bl	8010864 <__sinit>
 800fa48:	ab05      	add	r3, sp, #20
 800fa4a:	9a04      	ldr	r2, [sp, #16]
 800fa4c:	68a1      	ldr	r1, [r4, #8]
 800fa4e:	9301      	str	r3, [sp, #4]
 800fa50:	4620      	mov	r0, r4
 800fa52:	f001 fba1 	bl	8011198 <_vfiprintf_r>
 800fa56:	b002      	add	sp, #8
 800fa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa5c:	b004      	add	sp, #16
 800fa5e:	4770      	bx	lr
 800fa60:	20000184 	.word	0x20000184

0800fa64 <_sbrk_r>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4d06      	ldr	r5, [pc, #24]	; (800fa80 <_sbrk_r+0x1c>)
 800fa68:	2300      	movs	r3, #0
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	4608      	mov	r0, r1
 800fa6e:	602b      	str	r3, [r5, #0]
 800fa70:	f001 ffe8 	bl	8011a44 <_sbrk>
 800fa74:	1c43      	adds	r3, r0, #1
 800fa76:	d102      	bne.n	800fa7e <_sbrk_r+0x1a>
 800fa78:	682b      	ldr	r3, [r5, #0]
 800fa7a:	b103      	cbz	r3, 800fa7e <_sbrk_r+0x1a>
 800fa7c:	6023      	str	r3, [r4, #0]
 800fa7e:	bd38      	pop	{r3, r4, r5, pc}
 800fa80:	200028e0 	.word	0x200028e0

0800fa84 <__assert_func>:
 800fa84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa86:	4614      	mov	r4, r2
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b09      	ldr	r3, [pc, #36]	; (800fab0 <__assert_func+0x2c>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4605      	mov	r5, r0
 800fa90:	68d8      	ldr	r0, [r3, #12]
 800fa92:	b14c      	cbz	r4, 800faa8 <__assert_func+0x24>
 800fa94:	4b07      	ldr	r3, [pc, #28]	; (800fab4 <__assert_func+0x30>)
 800fa96:	9100      	str	r1, [sp, #0]
 800fa98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa9c:	4906      	ldr	r1, [pc, #24]	; (800fab8 <__assert_func+0x34>)
 800fa9e:	462b      	mov	r3, r5
 800faa0:	f000 ff5e 	bl	8010960 <fiprintf>
 800faa4:	f001 fdcc 	bl	8011640 <abort>
 800faa8:	4b04      	ldr	r3, [pc, #16]	; (800fabc <__assert_func+0x38>)
 800faaa:	461c      	mov	r4, r3
 800faac:	e7f3      	b.n	800fa96 <__assert_func+0x12>
 800faae:	bf00      	nop
 800fab0:	20000184 	.word	0x20000184
 800fab4:	08011de0 	.word	0x08011de0
 800fab8:	08011ded 	.word	0x08011ded
 800fabc:	08011e1b 	.word	0x08011e1b

0800fac0 <quorem>:
 800fac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	6903      	ldr	r3, [r0, #16]
 800fac6:	690c      	ldr	r4, [r1, #16]
 800fac8:	42a3      	cmp	r3, r4
 800faca:	4607      	mov	r7, r0
 800facc:	f2c0 8081 	blt.w	800fbd2 <quorem+0x112>
 800fad0:	3c01      	subs	r4, #1
 800fad2:	f101 0814 	add.w	r8, r1, #20
 800fad6:	f100 0514 	add.w	r5, r0, #20
 800fada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fae8:	3301      	adds	r3, #1
 800faea:	429a      	cmp	r2, r3
 800faec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800faf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800faf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800faf8:	d331      	bcc.n	800fb5e <quorem+0x9e>
 800fafa:	f04f 0e00 	mov.w	lr, #0
 800fafe:	4640      	mov	r0, r8
 800fb00:	46ac      	mov	ip, r5
 800fb02:	46f2      	mov	sl, lr
 800fb04:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb08:	b293      	uxth	r3, r2
 800fb0a:	fb06 e303 	mla	r3, r6, r3, lr
 800fb0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	ebaa 0303 	sub.w	r3, sl, r3
 800fb18:	f8dc a000 	ldr.w	sl, [ip]
 800fb1c:	0c12      	lsrs	r2, r2, #16
 800fb1e:	fa13 f38a 	uxtah	r3, r3, sl
 800fb22:	fb06 e202 	mla	r2, r6, r2, lr
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	9b00      	ldr	r3, [sp, #0]
 800fb2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb2e:	b292      	uxth	r2, r2
 800fb30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb38:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb3c:	4581      	cmp	r9, r0
 800fb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb42:	f84c 3b04 	str.w	r3, [ip], #4
 800fb46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb4a:	d2db      	bcs.n	800fb04 <quorem+0x44>
 800fb4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb50:	b92b      	cbnz	r3, 800fb5e <quorem+0x9e>
 800fb52:	9b01      	ldr	r3, [sp, #4]
 800fb54:	3b04      	subs	r3, #4
 800fb56:	429d      	cmp	r5, r3
 800fb58:	461a      	mov	r2, r3
 800fb5a:	d32e      	bcc.n	800fbba <quorem+0xfa>
 800fb5c:	613c      	str	r4, [r7, #16]
 800fb5e:	4638      	mov	r0, r7
 800fb60:	f001 f9d8 	bl	8010f14 <__mcmp>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	db24      	blt.n	800fbb2 <quorem+0xf2>
 800fb68:	3601      	adds	r6, #1
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f04f 0c00 	mov.w	ip, #0
 800fb70:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb74:	f8d0 e000 	ldr.w	lr, [r0]
 800fb78:	b293      	uxth	r3, r2
 800fb7a:	ebac 0303 	sub.w	r3, ip, r3
 800fb7e:	0c12      	lsrs	r2, r2, #16
 800fb80:	fa13 f38e 	uxtah	r3, r3, lr
 800fb84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb92:	45c1      	cmp	r9, r8
 800fb94:	f840 3b04 	str.w	r3, [r0], #4
 800fb98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb9c:	d2e8      	bcs.n	800fb70 <quorem+0xb0>
 800fb9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fba6:	b922      	cbnz	r2, 800fbb2 <quorem+0xf2>
 800fba8:	3b04      	subs	r3, #4
 800fbaa:	429d      	cmp	r5, r3
 800fbac:	461a      	mov	r2, r3
 800fbae:	d30a      	bcc.n	800fbc6 <quorem+0x106>
 800fbb0:	613c      	str	r4, [r7, #16]
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	b003      	add	sp, #12
 800fbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbba:	6812      	ldr	r2, [r2, #0]
 800fbbc:	3b04      	subs	r3, #4
 800fbbe:	2a00      	cmp	r2, #0
 800fbc0:	d1cc      	bne.n	800fb5c <quorem+0x9c>
 800fbc2:	3c01      	subs	r4, #1
 800fbc4:	e7c7      	b.n	800fb56 <quorem+0x96>
 800fbc6:	6812      	ldr	r2, [r2, #0]
 800fbc8:	3b04      	subs	r3, #4
 800fbca:	2a00      	cmp	r2, #0
 800fbcc:	d1f0      	bne.n	800fbb0 <quorem+0xf0>
 800fbce:	3c01      	subs	r4, #1
 800fbd0:	e7eb      	b.n	800fbaa <quorem+0xea>
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	e7ee      	b.n	800fbb4 <quorem+0xf4>
	...

0800fbd8 <_dtoa_r>:
 800fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbdc:	ed2d 8b04 	vpush	{d8-d9}
 800fbe0:	ec57 6b10 	vmov	r6, r7, d0
 800fbe4:	b093      	sub	sp, #76	; 0x4c
 800fbe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbec:	9106      	str	r1, [sp, #24]
 800fbee:	ee10 aa10 	vmov	sl, s0
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800fbf8:	46bb      	mov	fp, r7
 800fbfa:	b975      	cbnz	r5, 800fc1a <_dtoa_r+0x42>
 800fbfc:	2010      	movs	r0, #16
 800fbfe:	f7ff f9b1 	bl	800ef64 <malloc>
 800fc02:	4602      	mov	r2, r0
 800fc04:	6260      	str	r0, [r4, #36]	; 0x24
 800fc06:	b920      	cbnz	r0, 800fc12 <_dtoa_r+0x3a>
 800fc08:	4ba7      	ldr	r3, [pc, #668]	; (800fea8 <_dtoa_r+0x2d0>)
 800fc0a:	21ea      	movs	r1, #234	; 0xea
 800fc0c:	48a7      	ldr	r0, [pc, #668]	; (800feac <_dtoa_r+0x2d4>)
 800fc0e:	f7ff ff39 	bl	800fa84 <__assert_func>
 800fc12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc16:	6005      	str	r5, [r0, #0]
 800fc18:	60c5      	str	r5, [r0, #12]
 800fc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc1c:	6819      	ldr	r1, [r3, #0]
 800fc1e:	b151      	cbz	r1, 800fc36 <_dtoa_r+0x5e>
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	604a      	str	r2, [r1, #4]
 800fc24:	2301      	movs	r3, #1
 800fc26:	4093      	lsls	r3, r2
 800fc28:	608b      	str	r3, [r1, #8]
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 ff30 	bl	8010a90 <_Bfree>
 800fc30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	1e3b      	subs	r3, r7, #0
 800fc38:	bfaa      	itet	ge
 800fc3a:	2300      	movge	r3, #0
 800fc3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc40:	f8c8 3000 	strge.w	r3, [r8]
 800fc44:	4b9a      	ldr	r3, [pc, #616]	; (800feb0 <_dtoa_r+0x2d8>)
 800fc46:	bfbc      	itt	lt
 800fc48:	2201      	movlt	r2, #1
 800fc4a:	f8c8 2000 	strlt.w	r2, [r8]
 800fc4e:	ea33 030b 	bics.w	r3, r3, fp
 800fc52:	d11b      	bne.n	800fc8c <_dtoa_r+0xb4>
 800fc54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc56:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc60:	4333      	orrs	r3, r6
 800fc62:	f000 8592 	beq.w	801078a <_dtoa_r+0xbb2>
 800fc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc68:	b963      	cbnz	r3, 800fc84 <_dtoa_r+0xac>
 800fc6a:	4b92      	ldr	r3, [pc, #584]	; (800feb4 <_dtoa_r+0x2dc>)
 800fc6c:	e022      	b.n	800fcb4 <_dtoa_r+0xdc>
 800fc6e:	4b92      	ldr	r3, [pc, #584]	; (800feb8 <_dtoa_r+0x2e0>)
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	3308      	adds	r3, #8
 800fc74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	9801      	ldr	r0, [sp, #4]
 800fc7a:	b013      	add	sp, #76	; 0x4c
 800fc7c:	ecbd 8b04 	vpop	{d8-d9}
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc84:	4b8b      	ldr	r3, [pc, #556]	; (800feb4 <_dtoa_r+0x2dc>)
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	3303      	adds	r3, #3
 800fc8a:	e7f3      	b.n	800fc74 <_dtoa_r+0x9c>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2300      	movs	r3, #0
 800fc90:	4650      	mov	r0, sl
 800fc92:	4659      	mov	r1, fp
 800fc94:	f7f0 ff30 	bl	8000af8 <__aeabi_dcmpeq>
 800fc98:	ec4b ab19 	vmov	d9, sl, fp
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	b158      	cbz	r0, 800fcb8 <_dtoa_r+0xe0>
 800fca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fca2:	2301      	movs	r3, #1
 800fca4:	6013      	str	r3, [r2, #0]
 800fca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 856b 	beq.w	8010784 <_dtoa_r+0xbac>
 800fcae:	4883      	ldr	r0, [pc, #524]	; (800febc <_dtoa_r+0x2e4>)
 800fcb0:	6018      	str	r0, [r3, #0]
 800fcb2:	1e43      	subs	r3, r0, #1
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	e7df      	b.n	800fc78 <_dtoa_r+0xa0>
 800fcb8:	ec4b ab10 	vmov	d0, sl, fp
 800fcbc:	aa10      	add	r2, sp, #64	; 0x40
 800fcbe:	a911      	add	r1, sp, #68	; 0x44
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f001 f9cd 	bl	8011060 <__d2b>
 800fcc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fcca:	ee08 0a10 	vmov	s16, r0
 800fcce:	2d00      	cmp	r5, #0
 800fcd0:	f000 8084 	beq.w	800fddc <_dtoa_r+0x204>
 800fcd4:	ee19 3a90 	vmov	r3, s19
 800fcd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fce0:	4656      	mov	r6, sl
 800fce2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fcee:	4b74      	ldr	r3, [pc, #464]	; (800fec0 <_dtoa_r+0x2e8>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	f7f0 fadf 	bl	80002b8 <__aeabi_dsub>
 800fcfa:	a365      	add	r3, pc, #404	; (adr r3, 800fe90 <_dtoa_r+0x2b8>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 fc92 	bl	8000628 <__aeabi_dmul>
 800fd04:	a364      	add	r3, pc, #400	; (adr r3, 800fe98 <_dtoa_r+0x2c0>)
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f7f0 fad7 	bl	80002bc <__adddf3>
 800fd0e:	4606      	mov	r6, r0
 800fd10:	4628      	mov	r0, r5
 800fd12:	460f      	mov	r7, r1
 800fd14:	f7f0 fc1e 	bl	8000554 <__aeabi_i2d>
 800fd18:	a361      	add	r3, pc, #388	; (adr r3, 800fea0 <_dtoa_r+0x2c8>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fc83 	bl	8000628 <__aeabi_dmul>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4630      	mov	r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	f7f0 fac7 	bl	80002bc <__adddf3>
 800fd2e:	4606      	mov	r6, r0
 800fd30:	460f      	mov	r7, r1
 800fd32:	f7f0 ff29 	bl	8000b88 <__aeabi_d2iz>
 800fd36:	2200      	movs	r2, #0
 800fd38:	9000      	str	r0, [sp, #0]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	4639      	mov	r1, r7
 800fd40:	f7f0 fee4 	bl	8000b0c <__aeabi_dcmplt>
 800fd44:	b150      	cbz	r0, 800fd5c <_dtoa_r+0x184>
 800fd46:	9800      	ldr	r0, [sp, #0]
 800fd48:	f7f0 fc04 	bl	8000554 <__aeabi_i2d>
 800fd4c:	4632      	mov	r2, r6
 800fd4e:	463b      	mov	r3, r7
 800fd50:	f7f0 fed2 	bl	8000af8 <__aeabi_dcmpeq>
 800fd54:	b910      	cbnz	r0, 800fd5c <_dtoa_r+0x184>
 800fd56:	9b00      	ldr	r3, [sp, #0]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	9b00      	ldr	r3, [sp, #0]
 800fd5e:	2b16      	cmp	r3, #22
 800fd60:	d85a      	bhi.n	800fe18 <_dtoa_r+0x240>
 800fd62:	9a00      	ldr	r2, [sp, #0]
 800fd64:	4b57      	ldr	r3, [pc, #348]	; (800fec4 <_dtoa_r+0x2ec>)
 800fd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	ec51 0b19 	vmov	r0, r1, d9
 800fd72:	f7f0 fecb 	bl	8000b0c <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d050      	beq.n	800fe1c <_dtoa_r+0x244>
 800fd7a:	9b00      	ldr	r3, [sp, #0]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	2300      	movs	r3, #0
 800fd82:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd86:	1b5d      	subs	r5, r3, r5
 800fd88:	1e6b      	subs	r3, r5, #1
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	bf45      	ittet	mi
 800fd8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd92:	9304      	strmi	r3, [sp, #16]
 800fd94:	2300      	movpl	r3, #0
 800fd96:	2300      	movmi	r3, #0
 800fd98:	bf4c      	ite	mi
 800fd9a:	9305      	strmi	r3, [sp, #20]
 800fd9c:	9304      	strpl	r3, [sp, #16]
 800fd9e:	9b00      	ldr	r3, [sp, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	db3d      	blt.n	800fe20 <_dtoa_r+0x248>
 800fda4:	9b05      	ldr	r3, [sp, #20]
 800fda6:	9a00      	ldr	r2, [sp, #0]
 800fda8:	920a      	str	r2, [sp, #40]	; 0x28
 800fdaa:	4413      	add	r3, r2
 800fdac:	9305      	str	r3, [sp, #20]
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9307      	str	r3, [sp, #28]
 800fdb2:	9b06      	ldr	r3, [sp, #24]
 800fdb4:	2b09      	cmp	r3, #9
 800fdb6:	f200 8089 	bhi.w	800fecc <_dtoa_r+0x2f4>
 800fdba:	2b05      	cmp	r3, #5
 800fdbc:	bfc4      	itt	gt
 800fdbe:	3b04      	subgt	r3, #4
 800fdc0:	9306      	strgt	r3, [sp, #24]
 800fdc2:	9b06      	ldr	r3, [sp, #24]
 800fdc4:	f1a3 0302 	sub.w	r3, r3, #2
 800fdc8:	bfcc      	ite	gt
 800fdca:	2500      	movgt	r5, #0
 800fdcc:	2501      	movle	r5, #1
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	f200 8087 	bhi.w	800fee2 <_dtoa_r+0x30a>
 800fdd4:	e8df f003 	tbb	[pc, r3]
 800fdd8:	59383a2d 	.word	0x59383a2d
 800fddc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fde0:	441d      	add	r5, r3
 800fde2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fde6:	2b20      	cmp	r3, #32
 800fde8:	bfc1      	itttt	gt
 800fdea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fdf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fdf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fdfa:	bfda      	itte	le
 800fdfc:	f1c3 0320 	rsble	r3, r3, #32
 800fe00:	fa06 f003 	lslle.w	r0, r6, r3
 800fe04:	4318      	orrgt	r0, r3
 800fe06:	f7f0 fb95 	bl	8000534 <__aeabi_ui2d>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe12:	3d01      	subs	r5, #1
 800fe14:	930e      	str	r3, [sp, #56]	; 0x38
 800fe16:	e76a      	b.n	800fcee <_dtoa_r+0x116>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e7b2      	b.n	800fd82 <_dtoa_r+0x1aa>
 800fe1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe1e:	e7b1      	b.n	800fd84 <_dtoa_r+0x1ac>
 800fe20:	9b04      	ldr	r3, [sp, #16]
 800fe22:	9a00      	ldr	r2, [sp, #0]
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	9304      	str	r3, [sp, #16]
 800fe28:	4253      	negs	r3, r2
 800fe2a:	9307      	str	r3, [sp, #28]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe30:	e7bf      	b.n	800fdb2 <_dtoa_r+0x1da>
 800fe32:	2300      	movs	r3, #0
 800fe34:	9308      	str	r3, [sp, #32]
 800fe36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc55      	bgt.n	800fee8 <_dtoa_r+0x310>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe42:	461a      	mov	r2, r3
 800fe44:	9209      	str	r2, [sp, #36]	; 0x24
 800fe46:	e00c      	b.n	800fe62 <_dtoa_r+0x28a>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e7f3      	b.n	800fe34 <_dtoa_r+0x25c>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe50:	9308      	str	r3, [sp, #32]
 800fe52:	9b00      	ldr	r3, [sp, #0]
 800fe54:	4413      	add	r3, r2
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	9303      	str	r3, [sp, #12]
 800fe5e:	bfb8      	it	lt
 800fe60:	2301      	movlt	r3, #1
 800fe62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe64:	2200      	movs	r2, #0
 800fe66:	6042      	str	r2, [r0, #4]
 800fe68:	2204      	movs	r2, #4
 800fe6a:	f102 0614 	add.w	r6, r2, #20
 800fe6e:	429e      	cmp	r6, r3
 800fe70:	6841      	ldr	r1, [r0, #4]
 800fe72:	d93d      	bls.n	800fef0 <_dtoa_r+0x318>
 800fe74:	4620      	mov	r0, r4
 800fe76:	f000 fdcb 	bl	8010a10 <_Balloc>
 800fe7a:	9001      	str	r0, [sp, #4]
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d13b      	bne.n	800fef8 <_dtoa_r+0x320>
 800fe80:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <_dtoa_r+0x2f0>)
 800fe82:	4602      	mov	r2, r0
 800fe84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe88:	e6c0      	b.n	800fc0c <_dtoa_r+0x34>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e7df      	b.n	800fe4e <_dtoa_r+0x276>
 800fe8e:	bf00      	nop
 800fe90:	636f4361 	.word	0x636f4361
 800fe94:	3fd287a7 	.word	0x3fd287a7
 800fe98:	8b60c8b3 	.word	0x8b60c8b3
 800fe9c:	3fc68a28 	.word	0x3fc68a28
 800fea0:	509f79fb 	.word	0x509f79fb
 800fea4:	3fd34413 	.word	0x3fd34413
 800fea8:	08011f2a 	.word	0x08011f2a
 800feac:	08011f41 	.word	0x08011f41
 800feb0:	7ff00000 	.word	0x7ff00000
 800feb4:	08011f26 	.word	0x08011f26
 800feb8:	08011f1d 	.word	0x08011f1d
 800febc:	08011dbd 	.word	0x08011dbd
 800fec0:	3ff80000 	.word	0x3ff80000
 800fec4:	080120a0 	.word	0x080120a0
 800fec8:	08011f9c 	.word	0x08011f9c
 800fecc:	2501      	movs	r5, #1
 800fece:	2300      	movs	r3, #0
 800fed0:	9306      	str	r3, [sp, #24]
 800fed2:	9508      	str	r5, [sp, #32]
 800fed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fedc:	2200      	movs	r2, #0
 800fede:	2312      	movs	r3, #18
 800fee0:	e7b0      	b.n	800fe44 <_dtoa_r+0x26c>
 800fee2:	2301      	movs	r3, #1
 800fee4:	9308      	str	r3, [sp, #32]
 800fee6:	e7f5      	b.n	800fed4 <_dtoa_r+0x2fc>
 800fee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800feee:	e7b8      	b.n	800fe62 <_dtoa_r+0x28a>
 800fef0:	3101      	adds	r1, #1
 800fef2:	6041      	str	r1, [r0, #4]
 800fef4:	0052      	lsls	r2, r2, #1
 800fef6:	e7b8      	b.n	800fe6a <_dtoa_r+0x292>
 800fef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	2b0e      	cmp	r3, #14
 800ff02:	f200 809d 	bhi.w	8010040 <_dtoa_r+0x468>
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	f000 809a 	beq.w	8010040 <_dtoa_r+0x468>
 800ff0c:	9b00      	ldr	r3, [sp, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	dd32      	ble.n	800ff78 <_dtoa_r+0x3a0>
 800ff12:	4ab7      	ldr	r2, [pc, #732]	; (80101f0 <_dtoa_r+0x618>)
 800ff14:	f003 030f 	and.w	r3, r3, #15
 800ff18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff20:	9b00      	ldr	r3, [sp, #0]
 800ff22:	05d8      	lsls	r0, r3, #23
 800ff24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff28:	d516      	bpl.n	800ff58 <_dtoa_r+0x380>
 800ff2a:	4bb2      	ldr	r3, [pc, #712]	; (80101f4 <_dtoa_r+0x61c>)
 800ff2c:	ec51 0b19 	vmov	r0, r1, d9
 800ff30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff34:	f7f0 fca2 	bl	800087c <__aeabi_ddiv>
 800ff38:	f007 070f 	and.w	r7, r7, #15
 800ff3c:	4682      	mov	sl, r0
 800ff3e:	468b      	mov	fp, r1
 800ff40:	2503      	movs	r5, #3
 800ff42:	4eac      	ldr	r6, [pc, #688]	; (80101f4 <_dtoa_r+0x61c>)
 800ff44:	b957      	cbnz	r7, 800ff5c <_dtoa_r+0x384>
 800ff46:	4642      	mov	r2, r8
 800ff48:	464b      	mov	r3, r9
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	4659      	mov	r1, fp
 800ff4e:	f7f0 fc95 	bl	800087c <__aeabi_ddiv>
 800ff52:	4682      	mov	sl, r0
 800ff54:	468b      	mov	fp, r1
 800ff56:	e028      	b.n	800ffaa <_dtoa_r+0x3d2>
 800ff58:	2502      	movs	r5, #2
 800ff5a:	e7f2      	b.n	800ff42 <_dtoa_r+0x36a>
 800ff5c:	07f9      	lsls	r1, r7, #31
 800ff5e:	d508      	bpl.n	800ff72 <_dtoa_r+0x39a>
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff68:	f7f0 fb5e 	bl	8000628 <__aeabi_dmul>
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	4680      	mov	r8, r0
 800ff70:	4689      	mov	r9, r1
 800ff72:	107f      	asrs	r7, r7, #1
 800ff74:	3608      	adds	r6, #8
 800ff76:	e7e5      	b.n	800ff44 <_dtoa_r+0x36c>
 800ff78:	f000 809b 	beq.w	80100b2 <_dtoa_r+0x4da>
 800ff7c:	9b00      	ldr	r3, [sp, #0]
 800ff7e:	4f9d      	ldr	r7, [pc, #628]	; (80101f4 <_dtoa_r+0x61c>)
 800ff80:	425e      	negs	r6, r3
 800ff82:	4b9b      	ldr	r3, [pc, #620]	; (80101f0 <_dtoa_r+0x618>)
 800ff84:	f006 020f 	and.w	r2, r6, #15
 800ff88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	ec51 0b19 	vmov	r0, r1, d9
 800ff94:	f7f0 fb48 	bl	8000628 <__aeabi_dmul>
 800ff98:	1136      	asrs	r6, r6, #4
 800ff9a:	4682      	mov	sl, r0
 800ff9c:	468b      	mov	fp, r1
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	2502      	movs	r5, #2
 800ffa2:	2e00      	cmp	r6, #0
 800ffa4:	d17a      	bne.n	801009c <_dtoa_r+0x4c4>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1d3      	bne.n	800ff52 <_dtoa_r+0x37a>
 800ffaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 8082 	beq.w	80100b6 <_dtoa_r+0x4de>
 800ffb2:	4b91      	ldr	r3, [pc, #580]	; (80101f8 <_dtoa_r+0x620>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	4650      	mov	r0, sl
 800ffb8:	4659      	mov	r1, fp
 800ffba:	f7f0 fda7 	bl	8000b0c <__aeabi_dcmplt>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d079      	beq.n	80100b6 <_dtoa_r+0x4de>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d076      	beq.n	80100b6 <_dtoa_r+0x4de>
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	dd36      	ble.n	801003c <_dtoa_r+0x464>
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	4650      	mov	r0, sl
 800ffd2:	4659      	mov	r1, fp
 800ffd4:	1e5f      	subs	r7, r3, #1
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4b88      	ldr	r3, [pc, #544]	; (80101fc <_dtoa_r+0x624>)
 800ffda:	f7f0 fb25 	bl	8000628 <__aeabi_dmul>
 800ffde:	9e02      	ldr	r6, [sp, #8]
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	468b      	mov	fp, r1
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f7f0 fab4 	bl	8000554 <__aeabi_i2d>
 800ffec:	4652      	mov	r2, sl
 800ffee:	465b      	mov	r3, fp
 800fff0:	f7f0 fb1a 	bl	8000628 <__aeabi_dmul>
 800fff4:	4b82      	ldr	r3, [pc, #520]	; (8010200 <_dtoa_r+0x628>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	f7f0 f960 	bl	80002bc <__adddf3>
 800fffc:	46d0      	mov	r8, sl
 800fffe:	46d9      	mov	r9, fp
 8010000:	4682      	mov	sl, r0
 8010002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010006:	2e00      	cmp	r6, #0
 8010008:	d158      	bne.n	80100bc <_dtoa_r+0x4e4>
 801000a:	4b7e      	ldr	r3, [pc, #504]	; (8010204 <_dtoa_r+0x62c>)
 801000c:	2200      	movs	r2, #0
 801000e:	4640      	mov	r0, r8
 8010010:	4649      	mov	r1, r9
 8010012:	f7f0 f951 	bl	80002b8 <__aeabi_dsub>
 8010016:	4652      	mov	r2, sl
 8010018:	465b      	mov	r3, fp
 801001a:	4680      	mov	r8, r0
 801001c:	4689      	mov	r9, r1
 801001e:	f7f0 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 8010022:	2800      	cmp	r0, #0
 8010024:	f040 8295 	bne.w	8010552 <_dtoa_r+0x97a>
 8010028:	4652      	mov	r2, sl
 801002a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801002e:	4640      	mov	r0, r8
 8010030:	4649      	mov	r1, r9
 8010032:	f7f0 fd6b 	bl	8000b0c <__aeabi_dcmplt>
 8010036:	2800      	cmp	r0, #0
 8010038:	f040 8289 	bne.w	801054e <_dtoa_r+0x976>
 801003c:	ec5b ab19 	vmov	sl, fp, d9
 8010040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010042:	2b00      	cmp	r3, #0
 8010044:	f2c0 8148 	blt.w	80102d8 <_dtoa_r+0x700>
 8010048:	9a00      	ldr	r2, [sp, #0]
 801004a:	2a0e      	cmp	r2, #14
 801004c:	f300 8144 	bgt.w	80102d8 <_dtoa_r+0x700>
 8010050:	4b67      	ldr	r3, [pc, #412]	; (80101f0 <_dtoa_r+0x618>)
 8010052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010056:	e9d3 8900 	ldrd	r8, r9, [r3]
 801005a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005c:	2b00      	cmp	r3, #0
 801005e:	f280 80d5 	bge.w	801020c <_dtoa_r+0x634>
 8010062:	9b03      	ldr	r3, [sp, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	f300 80d1 	bgt.w	801020c <_dtoa_r+0x634>
 801006a:	f040 826f 	bne.w	801054c <_dtoa_r+0x974>
 801006e:	4b65      	ldr	r3, [pc, #404]	; (8010204 <_dtoa_r+0x62c>)
 8010070:	2200      	movs	r2, #0
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 fad7 	bl	8000628 <__aeabi_dmul>
 801007a:	4652      	mov	r2, sl
 801007c:	465b      	mov	r3, fp
 801007e:	f7f0 fd59 	bl	8000b34 <__aeabi_dcmpge>
 8010082:	9e03      	ldr	r6, [sp, #12]
 8010084:	4637      	mov	r7, r6
 8010086:	2800      	cmp	r0, #0
 8010088:	f040 8245 	bne.w	8010516 <_dtoa_r+0x93e>
 801008c:	9d01      	ldr	r5, [sp, #4]
 801008e:	2331      	movs	r3, #49	; 0x31
 8010090:	f805 3b01 	strb.w	r3, [r5], #1
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	3301      	adds	r3, #1
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	e240      	b.n	801051e <_dtoa_r+0x946>
 801009c:	07f2      	lsls	r2, r6, #31
 801009e:	d505      	bpl.n	80100ac <_dtoa_r+0x4d4>
 80100a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100a4:	f7f0 fac0 	bl	8000628 <__aeabi_dmul>
 80100a8:	3501      	adds	r5, #1
 80100aa:	2301      	movs	r3, #1
 80100ac:	1076      	asrs	r6, r6, #1
 80100ae:	3708      	adds	r7, #8
 80100b0:	e777      	b.n	800ffa2 <_dtoa_r+0x3ca>
 80100b2:	2502      	movs	r5, #2
 80100b4:	e779      	b.n	800ffaa <_dtoa_r+0x3d2>
 80100b6:	9f00      	ldr	r7, [sp, #0]
 80100b8:	9e03      	ldr	r6, [sp, #12]
 80100ba:	e794      	b.n	800ffe6 <_dtoa_r+0x40e>
 80100bc:	9901      	ldr	r1, [sp, #4]
 80100be:	4b4c      	ldr	r3, [pc, #304]	; (80101f0 <_dtoa_r+0x618>)
 80100c0:	4431      	add	r1, r6
 80100c2:	910d      	str	r1, [sp, #52]	; 0x34
 80100c4:	9908      	ldr	r1, [sp, #32]
 80100c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100ce:	2900      	cmp	r1, #0
 80100d0:	d043      	beq.n	801015a <_dtoa_r+0x582>
 80100d2:	494d      	ldr	r1, [pc, #308]	; (8010208 <_dtoa_r+0x630>)
 80100d4:	2000      	movs	r0, #0
 80100d6:	f7f0 fbd1 	bl	800087c <__aeabi_ddiv>
 80100da:	4652      	mov	r2, sl
 80100dc:	465b      	mov	r3, fp
 80100de:	f7f0 f8eb 	bl	80002b8 <__aeabi_dsub>
 80100e2:	9d01      	ldr	r5, [sp, #4]
 80100e4:	4682      	mov	sl, r0
 80100e6:	468b      	mov	fp, r1
 80100e8:	4649      	mov	r1, r9
 80100ea:	4640      	mov	r0, r8
 80100ec:	f7f0 fd4c 	bl	8000b88 <__aeabi_d2iz>
 80100f0:	4606      	mov	r6, r0
 80100f2:	f7f0 fa2f 	bl	8000554 <__aeabi_i2d>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	4640      	mov	r0, r8
 80100fc:	4649      	mov	r1, r9
 80100fe:	f7f0 f8db 	bl	80002b8 <__aeabi_dsub>
 8010102:	3630      	adds	r6, #48	; 0x30
 8010104:	f805 6b01 	strb.w	r6, [r5], #1
 8010108:	4652      	mov	r2, sl
 801010a:	465b      	mov	r3, fp
 801010c:	4680      	mov	r8, r0
 801010e:	4689      	mov	r9, r1
 8010110:	f7f0 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 8010114:	2800      	cmp	r0, #0
 8010116:	d163      	bne.n	80101e0 <_dtoa_r+0x608>
 8010118:	4642      	mov	r2, r8
 801011a:	464b      	mov	r3, r9
 801011c:	4936      	ldr	r1, [pc, #216]	; (80101f8 <_dtoa_r+0x620>)
 801011e:	2000      	movs	r0, #0
 8010120:	f7f0 f8ca 	bl	80002b8 <__aeabi_dsub>
 8010124:	4652      	mov	r2, sl
 8010126:	465b      	mov	r3, fp
 8010128:	f7f0 fcf0 	bl	8000b0c <__aeabi_dcmplt>
 801012c:	2800      	cmp	r0, #0
 801012e:	f040 80b5 	bne.w	801029c <_dtoa_r+0x6c4>
 8010132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010134:	429d      	cmp	r5, r3
 8010136:	d081      	beq.n	801003c <_dtoa_r+0x464>
 8010138:	4b30      	ldr	r3, [pc, #192]	; (80101fc <_dtoa_r+0x624>)
 801013a:	2200      	movs	r2, #0
 801013c:	4650      	mov	r0, sl
 801013e:	4659      	mov	r1, fp
 8010140:	f7f0 fa72 	bl	8000628 <__aeabi_dmul>
 8010144:	4b2d      	ldr	r3, [pc, #180]	; (80101fc <_dtoa_r+0x624>)
 8010146:	4682      	mov	sl, r0
 8010148:	468b      	mov	fp, r1
 801014a:	4640      	mov	r0, r8
 801014c:	4649      	mov	r1, r9
 801014e:	2200      	movs	r2, #0
 8010150:	f7f0 fa6a 	bl	8000628 <__aeabi_dmul>
 8010154:	4680      	mov	r8, r0
 8010156:	4689      	mov	r9, r1
 8010158:	e7c6      	b.n	80100e8 <_dtoa_r+0x510>
 801015a:	4650      	mov	r0, sl
 801015c:	4659      	mov	r1, fp
 801015e:	f7f0 fa63 	bl	8000628 <__aeabi_dmul>
 8010162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010164:	9d01      	ldr	r5, [sp, #4]
 8010166:	930f      	str	r3, [sp, #60]	; 0x3c
 8010168:	4682      	mov	sl, r0
 801016a:	468b      	mov	fp, r1
 801016c:	4649      	mov	r1, r9
 801016e:	4640      	mov	r0, r8
 8010170:	f7f0 fd0a 	bl	8000b88 <__aeabi_d2iz>
 8010174:	4606      	mov	r6, r0
 8010176:	f7f0 f9ed 	bl	8000554 <__aeabi_i2d>
 801017a:	3630      	adds	r6, #48	; 0x30
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 f898 	bl	80002b8 <__aeabi_dsub>
 8010188:	f805 6b01 	strb.w	r6, [r5], #1
 801018c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801018e:	429d      	cmp	r5, r3
 8010190:	4680      	mov	r8, r0
 8010192:	4689      	mov	r9, r1
 8010194:	f04f 0200 	mov.w	r2, #0
 8010198:	d124      	bne.n	80101e4 <_dtoa_r+0x60c>
 801019a:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <_dtoa_r+0x630>)
 801019c:	4650      	mov	r0, sl
 801019e:	4659      	mov	r1, fp
 80101a0:	f7f0 f88c 	bl	80002bc <__adddf3>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	f7f0 fccc 	bl	8000b48 <__aeabi_dcmpgt>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d173      	bne.n	801029c <_dtoa_r+0x6c4>
 80101b4:	4652      	mov	r2, sl
 80101b6:	465b      	mov	r3, fp
 80101b8:	4913      	ldr	r1, [pc, #76]	; (8010208 <_dtoa_r+0x630>)
 80101ba:	2000      	movs	r0, #0
 80101bc:	f7f0 f87c 	bl	80002b8 <__aeabi_dsub>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4640      	mov	r0, r8
 80101c6:	4649      	mov	r1, r9
 80101c8:	f7f0 fca0 	bl	8000b0c <__aeabi_dcmplt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	f43f af35 	beq.w	801003c <_dtoa_r+0x464>
 80101d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80101d4:	1e6b      	subs	r3, r5, #1
 80101d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101dc:	2b30      	cmp	r3, #48	; 0x30
 80101de:	d0f8      	beq.n	80101d2 <_dtoa_r+0x5fa>
 80101e0:	9700      	str	r7, [sp, #0]
 80101e2:	e049      	b.n	8010278 <_dtoa_r+0x6a0>
 80101e4:	4b05      	ldr	r3, [pc, #20]	; (80101fc <_dtoa_r+0x624>)
 80101e6:	f7f0 fa1f 	bl	8000628 <__aeabi_dmul>
 80101ea:	4680      	mov	r8, r0
 80101ec:	4689      	mov	r9, r1
 80101ee:	e7bd      	b.n	801016c <_dtoa_r+0x594>
 80101f0:	080120a0 	.word	0x080120a0
 80101f4:	08012078 	.word	0x08012078
 80101f8:	3ff00000 	.word	0x3ff00000
 80101fc:	40240000 	.word	0x40240000
 8010200:	401c0000 	.word	0x401c0000
 8010204:	40140000 	.word	0x40140000
 8010208:	3fe00000 	.word	0x3fe00000
 801020c:	9d01      	ldr	r5, [sp, #4]
 801020e:	4656      	mov	r6, sl
 8010210:	465f      	mov	r7, fp
 8010212:	4642      	mov	r2, r8
 8010214:	464b      	mov	r3, r9
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 fb2f 	bl	800087c <__aeabi_ddiv>
 801021e:	f7f0 fcb3 	bl	8000b88 <__aeabi_d2iz>
 8010222:	4682      	mov	sl, r0
 8010224:	f7f0 f996 	bl	8000554 <__aeabi_i2d>
 8010228:	4642      	mov	r2, r8
 801022a:	464b      	mov	r3, r9
 801022c:	f7f0 f9fc 	bl	8000628 <__aeabi_dmul>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	4630      	mov	r0, r6
 8010236:	4639      	mov	r1, r7
 8010238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801023c:	f7f0 f83c 	bl	80002b8 <__aeabi_dsub>
 8010240:	f805 6b01 	strb.w	r6, [r5], #1
 8010244:	9e01      	ldr	r6, [sp, #4]
 8010246:	9f03      	ldr	r7, [sp, #12]
 8010248:	1bae      	subs	r6, r5, r6
 801024a:	42b7      	cmp	r7, r6
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	d135      	bne.n	80102be <_dtoa_r+0x6e6>
 8010252:	f7f0 f833 	bl	80002bc <__adddf3>
 8010256:	4642      	mov	r2, r8
 8010258:	464b      	mov	r3, r9
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	f7f0 fc73 	bl	8000b48 <__aeabi_dcmpgt>
 8010262:	b9d0      	cbnz	r0, 801029a <_dtoa_r+0x6c2>
 8010264:	4642      	mov	r2, r8
 8010266:	464b      	mov	r3, r9
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 fc44 	bl	8000af8 <__aeabi_dcmpeq>
 8010270:	b110      	cbz	r0, 8010278 <_dtoa_r+0x6a0>
 8010272:	f01a 0f01 	tst.w	sl, #1
 8010276:	d110      	bne.n	801029a <_dtoa_r+0x6c2>
 8010278:	4620      	mov	r0, r4
 801027a:	ee18 1a10 	vmov	r1, s16
 801027e:	f000 fc07 	bl	8010a90 <_Bfree>
 8010282:	2300      	movs	r3, #0
 8010284:	9800      	ldr	r0, [sp, #0]
 8010286:	702b      	strb	r3, [r5, #0]
 8010288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028a:	3001      	adds	r0, #1
 801028c:	6018      	str	r0, [r3, #0]
 801028e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010290:	2b00      	cmp	r3, #0
 8010292:	f43f acf1 	beq.w	800fc78 <_dtoa_r+0xa0>
 8010296:	601d      	str	r5, [r3, #0]
 8010298:	e4ee      	b.n	800fc78 <_dtoa_r+0xa0>
 801029a:	9f00      	ldr	r7, [sp, #0]
 801029c:	462b      	mov	r3, r5
 801029e:	461d      	mov	r5, r3
 80102a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a4:	2a39      	cmp	r2, #57	; 0x39
 80102a6:	d106      	bne.n	80102b6 <_dtoa_r+0x6de>
 80102a8:	9a01      	ldr	r2, [sp, #4]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d1f7      	bne.n	801029e <_dtoa_r+0x6c6>
 80102ae:	9901      	ldr	r1, [sp, #4]
 80102b0:	2230      	movs	r2, #48	; 0x30
 80102b2:	3701      	adds	r7, #1
 80102b4:	700a      	strb	r2, [r1, #0]
 80102b6:	781a      	ldrb	r2, [r3, #0]
 80102b8:	3201      	adds	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	e790      	b.n	80101e0 <_dtoa_r+0x608>
 80102be:	4ba6      	ldr	r3, [pc, #664]	; (8010558 <_dtoa_r+0x980>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	f7f0 f9b1 	bl	8000628 <__aeabi_dmul>
 80102c6:	2200      	movs	r2, #0
 80102c8:	2300      	movs	r3, #0
 80102ca:	4606      	mov	r6, r0
 80102cc:	460f      	mov	r7, r1
 80102ce:	f7f0 fc13 	bl	8000af8 <__aeabi_dcmpeq>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d09d      	beq.n	8010212 <_dtoa_r+0x63a>
 80102d6:	e7cf      	b.n	8010278 <_dtoa_r+0x6a0>
 80102d8:	9a08      	ldr	r2, [sp, #32]
 80102da:	2a00      	cmp	r2, #0
 80102dc:	f000 80d7 	beq.w	801048e <_dtoa_r+0x8b6>
 80102e0:	9a06      	ldr	r2, [sp, #24]
 80102e2:	2a01      	cmp	r2, #1
 80102e4:	f300 80ba 	bgt.w	801045c <_dtoa_r+0x884>
 80102e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	f000 80b2 	beq.w	8010454 <_dtoa_r+0x87c>
 80102f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102f4:	9e07      	ldr	r6, [sp, #28]
 80102f6:	9d04      	ldr	r5, [sp, #16]
 80102f8:	9a04      	ldr	r2, [sp, #16]
 80102fa:	441a      	add	r2, r3
 80102fc:	9204      	str	r2, [sp, #16]
 80102fe:	9a05      	ldr	r2, [sp, #20]
 8010300:	2101      	movs	r1, #1
 8010302:	441a      	add	r2, r3
 8010304:	4620      	mov	r0, r4
 8010306:	9205      	str	r2, [sp, #20]
 8010308:	f000 fc7a 	bl	8010c00 <__i2b>
 801030c:	4607      	mov	r7, r0
 801030e:	2d00      	cmp	r5, #0
 8010310:	dd0c      	ble.n	801032c <_dtoa_r+0x754>
 8010312:	9b05      	ldr	r3, [sp, #20]
 8010314:	2b00      	cmp	r3, #0
 8010316:	dd09      	ble.n	801032c <_dtoa_r+0x754>
 8010318:	42ab      	cmp	r3, r5
 801031a:	9a04      	ldr	r2, [sp, #16]
 801031c:	bfa8      	it	ge
 801031e:	462b      	movge	r3, r5
 8010320:	1ad2      	subs	r2, r2, r3
 8010322:	9204      	str	r2, [sp, #16]
 8010324:	9a05      	ldr	r2, [sp, #20]
 8010326:	1aed      	subs	r5, r5, r3
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	9305      	str	r3, [sp, #20]
 801032c:	9b07      	ldr	r3, [sp, #28]
 801032e:	b31b      	cbz	r3, 8010378 <_dtoa_r+0x7a0>
 8010330:	9b08      	ldr	r3, [sp, #32]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 80af 	beq.w	8010496 <_dtoa_r+0x8be>
 8010338:	2e00      	cmp	r6, #0
 801033a:	dd13      	ble.n	8010364 <_dtoa_r+0x78c>
 801033c:	4639      	mov	r1, r7
 801033e:	4632      	mov	r2, r6
 8010340:	4620      	mov	r0, r4
 8010342:	f000 fd1d 	bl	8010d80 <__pow5mult>
 8010346:	ee18 2a10 	vmov	r2, s16
 801034a:	4601      	mov	r1, r0
 801034c:	4607      	mov	r7, r0
 801034e:	4620      	mov	r0, r4
 8010350:	f000 fc6c 	bl	8010c2c <__multiply>
 8010354:	ee18 1a10 	vmov	r1, s16
 8010358:	4680      	mov	r8, r0
 801035a:	4620      	mov	r0, r4
 801035c:	f000 fb98 	bl	8010a90 <_Bfree>
 8010360:	ee08 8a10 	vmov	s16, r8
 8010364:	9b07      	ldr	r3, [sp, #28]
 8010366:	1b9a      	subs	r2, r3, r6
 8010368:	d006      	beq.n	8010378 <_dtoa_r+0x7a0>
 801036a:	ee18 1a10 	vmov	r1, s16
 801036e:	4620      	mov	r0, r4
 8010370:	f000 fd06 	bl	8010d80 <__pow5mult>
 8010374:	ee08 0a10 	vmov	s16, r0
 8010378:	2101      	movs	r1, #1
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fc40 	bl	8010c00 <__i2b>
 8010380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010382:	2b00      	cmp	r3, #0
 8010384:	4606      	mov	r6, r0
 8010386:	f340 8088 	ble.w	801049a <_dtoa_r+0x8c2>
 801038a:	461a      	mov	r2, r3
 801038c:	4601      	mov	r1, r0
 801038e:	4620      	mov	r0, r4
 8010390:	f000 fcf6 	bl	8010d80 <__pow5mult>
 8010394:	9b06      	ldr	r3, [sp, #24]
 8010396:	2b01      	cmp	r3, #1
 8010398:	4606      	mov	r6, r0
 801039a:	f340 8081 	ble.w	80104a0 <_dtoa_r+0x8c8>
 801039e:	f04f 0800 	mov.w	r8, #0
 80103a2:	6933      	ldr	r3, [r6, #16]
 80103a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80103a8:	6918      	ldr	r0, [r3, #16]
 80103aa:	f000 fbd9 	bl	8010b60 <__hi0bits>
 80103ae:	f1c0 0020 	rsb	r0, r0, #32
 80103b2:	9b05      	ldr	r3, [sp, #20]
 80103b4:	4418      	add	r0, r3
 80103b6:	f010 001f 	ands.w	r0, r0, #31
 80103ba:	f000 8092 	beq.w	80104e2 <_dtoa_r+0x90a>
 80103be:	f1c0 0320 	rsb	r3, r0, #32
 80103c2:	2b04      	cmp	r3, #4
 80103c4:	f340 808a 	ble.w	80104dc <_dtoa_r+0x904>
 80103c8:	f1c0 001c 	rsb	r0, r0, #28
 80103cc:	9b04      	ldr	r3, [sp, #16]
 80103ce:	4403      	add	r3, r0
 80103d0:	9304      	str	r3, [sp, #16]
 80103d2:	9b05      	ldr	r3, [sp, #20]
 80103d4:	4403      	add	r3, r0
 80103d6:	4405      	add	r5, r0
 80103d8:	9305      	str	r3, [sp, #20]
 80103da:	9b04      	ldr	r3, [sp, #16]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	dd07      	ble.n	80103f0 <_dtoa_r+0x818>
 80103e0:	ee18 1a10 	vmov	r1, s16
 80103e4:	461a      	mov	r2, r3
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 fd24 	bl	8010e34 <__lshift>
 80103ec:	ee08 0a10 	vmov	s16, r0
 80103f0:	9b05      	ldr	r3, [sp, #20]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dd05      	ble.n	8010402 <_dtoa_r+0x82a>
 80103f6:	4631      	mov	r1, r6
 80103f8:	461a      	mov	r2, r3
 80103fa:	4620      	mov	r0, r4
 80103fc:	f000 fd1a 	bl	8010e34 <__lshift>
 8010400:	4606      	mov	r6, r0
 8010402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d06e      	beq.n	80104e6 <_dtoa_r+0x90e>
 8010408:	ee18 0a10 	vmov	r0, s16
 801040c:	4631      	mov	r1, r6
 801040e:	f000 fd81 	bl	8010f14 <__mcmp>
 8010412:	2800      	cmp	r0, #0
 8010414:	da67      	bge.n	80104e6 <_dtoa_r+0x90e>
 8010416:	9b00      	ldr	r3, [sp, #0]
 8010418:	3b01      	subs	r3, #1
 801041a:	ee18 1a10 	vmov	r1, s16
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	220a      	movs	r2, #10
 8010422:	2300      	movs	r3, #0
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fb55 	bl	8010ad4 <__multadd>
 801042a:	9b08      	ldr	r3, [sp, #32]
 801042c:	ee08 0a10 	vmov	s16, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 81b1 	beq.w	8010798 <_dtoa_r+0xbc0>
 8010436:	2300      	movs	r3, #0
 8010438:	4639      	mov	r1, r7
 801043a:	220a      	movs	r2, #10
 801043c:	4620      	mov	r0, r4
 801043e:	f000 fb49 	bl	8010ad4 <__multadd>
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	4607      	mov	r7, r0
 8010448:	f300 808e 	bgt.w	8010568 <_dtoa_r+0x990>
 801044c:	9b06      	ldr	r3, [sp, #24]
 801044e:	2b02      	cmp	r3, #2
 8010450:	dc51      	bgt.n	80104f6 <_dtoa_r+0x91e>
 8010452:	e089      	b.n	8010568 <_dtoa_r+0x990>
 8010454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801045a:	e74b      	b.n	80102f4 <_dtoa_r+0x71c>
 801045c:	9b03      	ldr	r3, [sp, #12]
 801045e:	1e5e      	subs	r6, r3, #1
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	42b3      	cmp	r3, r6
 8010464:	bfbf      	itttt	lt
 8010466:	9b07      	ldrlt	r3, [sp, #28]
 8010468:	9607      	strlt	r6, [sp, #28]
 801046a:	1af2      	sublt	r2, r6, r3
 801046c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801046e:	bfb6      	itet	lt
 8010470:	189b      	addlt	r3, r3, r2
 8010472:	1b9e      	subge	r6, r3, r6
 8010474:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	bfb8      	it	lt
 801047a:	2600      	movlt	r6, #0
 801047c:	2b00      	cmp	r3, #0
 801047e:	bfb7      	itett	lt
 8010480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010488:	1a9d      	sublt	r5, r3, r2
 801048a:	2300      	movlt	r3, #0
 801048c:	e734      	b.n	80102f8 <_dtoa_r+0x720>
 801048e:	9e07      	ldr	r6, [sp, #28]
 8010490:	9d04      	ldr	r5, [sp, #16]
 8010492:	9f08      	ldr	r7, [sp, #32]
 8010494:	e73b      	b.n	801030e <_dtoa_r+0x736>
 8010496:	9a07      	ldr	r2, [sp, #28]
 8010498:	e767      	b.n	801036a <_dtoa_r+0x792>
 801049a:	9b06      	ldr	r3, [sp, #24]
 801049c:	2b01      	cmp	r3, #1
 801049e:	dc18      	bgt.n	80104d2 <_dtoa_r+0x8fa>
 80104a0:	f1ba 0f00 	cmp.w	sl, #0
 80104a4:	d115      	bne.n	80104d2 <_dtoa_r+0x8fa>
 80104a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104aa:	b993      	cbnz	r3, 80104d2 <_dtoa_r+0x8fa>
 80104ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104b0:	0d1b      	lsrs	r3, r3, #20
 80104b2:	051b      	lsls	r3, r3, #20
 80104b4:	b183      	cbz	r3, 80104d8 <_dtoa_r+0x900>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	3301      	adds	r3, #1
 80104ba:	9304      	str	r3, [sp, #16]
 80104bc:	9b05      	ldr	r3, [sp, #20]
 80104be:	3301      	adds	r3, #1
 80104c0:	9305      	str	r3, [sp, #20]
 80104c2:	f04f 0801 	mov.w	r8, #1
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f47f af6a 	bne.w	80103a2 <_dtoa_r+0x7ca>
 80104ce:	2001      	movs	r0, #1
 80104d0:	e76f      	b.n	80103b2 <_dtoa_r+0x7da>
 80104d2:	f04f 0800 	mov.w	r8, #0
 80104d6:	e7f6      	b.n	80104c6 <_dtoa_r+0x8ee>
 80104d8:	4698      	mov	r8, r3
 80104da:	e7f4      	b.n	80104c6 <_dtoa_r+0x8ee>
 80104dc:	f43f af7d 	beq.w	80103da <_dtoa_r+0x802>
 80104e0:	4618      	mov	r0, r3
 80104e2:	301c      	adds	r0, #28
 80104e4:	e772      	b.n	80103cc <_dtoa_r+0x7f4>
 80104e6:	9b03      	ldr	r3, [sp, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	dc37      	bgt.n	801055c <_dtoa_r+0x984>
 80104ec:	9b06      	ldr	r3, [sp, #24]
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	dd34      	ble.n	801055c <_dtoa_r+0x984>
 80104f2:	9b03      	ldr	r3, [sp, #12]
 80104f4:	9302      	str	r3, [sp, #8]
 80104f6:	9b02      	ldr	r3, [sp, #8]
 80104f8:	b96b      	cbnz	r3, 8010516 <_dtoa_r+0x93e>
 80104fa:	4631      	mov	r1, r6
 80104fc:	2205      	movs	r2, #5
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 fae8 	bl	8010ad4 <__multadd>
 8010504:	4601      	mov	r1, r0
 8010506:	4606      	mov	r6, r0
 8010508:	ee18 0a10 	vmov	r0, s16
 801050c:	f000 fd02 	bl	8010f14 <__mcmp>
 8010510:	2800      	cmp	r0, #0
 8010512:	f73f adbb 	bgt.w	801008c <_dtoa_r+0x4b4>
 8010516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010518:	9d01      	ldr	r5, [sp, #4]
 801051a:	43db      	mvns	r3, r3
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	f04f 0800 	mov.w	r8, #0
 8010522:	4631      	mov	r1, r6
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fab3 	bl	8010a90 <_Bfree>
 801052a:	2f00      	cmp	r7, #0
 801052c:	f43f aea4 	beq.w	8010278 <_dtoa_r+0x6a0>
 8010530:	f1b8 0f00 	cmp.w	r8, #0
 8010534:	d005      	beq.n	8010542 <_dtoa_r+0x96a>
 8010536:	45b8      	cmp	r8, r7
 8010538:	d003      	beq.n	8010542 <_dtoa_r+0x96a>
 801053a:	4641      	mov	r1, r8
 801053c:	4620      	mov	r0, r4
 801053e:	f000 faa7 	bl	8010a90 <_Bfree>
 8010542:	4639      	mov	r1, r7
 8010544:	4620      	mov	r0, r4
 8010546:	f000 faa3 	bl	8010a90 <_Bfree>
 801054a:	e695      	b.n	8010278 <_dtoa_r+0x6a0>
 801054c:	2600      	movs	r6, #0
 801054e:	4637      	mov	r7, r6
 8010550:	e7e1      	b.n	8010516 <_dtoa_r+0x93e>
 8010552:	9700      	str	r7, [sp, #0]
 8010554:	4637      	mov	r7, r6
 8010556:	e599      	b.n	801008c <_dtoa_r+0x4b4>
 8010558:	40240000 	.word	0x40240000
 801055c:	9b08      	ldr	r3, [sp, #32]
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 80ca 	beq.w	80106f8 <_dtoa_r+0xb20>
 8010564:	9b03      	ldr	r3, [sp, #12]
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	2d00      	cmp	r5, #0
 801056a:	dd05      	ble.n	8010578 <_dtoa_r+0x9a0>
 801056c:	4639      	mov	r1, r7
 801056e:	462a      	mov	r2, r5
 8010570:	4620      	mov	r0, r4
 8010572:	f000 fc5f 	bl	8010e34 <__lshift>
 8010576:	4607      	mov	r7, r0
 8010578:	f1b8 0f00 	cmp.w	r8, #0
 801057c:	d05b      	beq.n	8010636 <_dtoa_r+0xa5e>
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fa45 	bl	8010a10 <_Balloc>
 8010586:	4605      	mov	r5, r0
 8010588:	b928      	cbnz	r0, 8010596 <_dtoa_r+0x9be>
 801058a:	4b87      	ldr	r3, [pc, #540]	; (80107a8 <_dtoa_r+0xbd0>)
 801058c:	4602      	mov	r2, r0
 801058e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010592:	f7ff bb3b 	b.w	800fc0c <_dtoa_r+0x34>
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	3202      	adds	r2, #2
 801059a:	0092      	lsls	r2, r2, #2
 801059c:	f107 010c 	add.w	r1, r7, #12
 80105a0:	300c      	adds	r0, #12
 80105a2:	f7fe fce7 	bl	800ef74 <memcpy>
 80105a6:	2201      	movs	r2, #1
 80105a8:	4629      	mov	r1, r5
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 fc42 	bl	8010e34 <__lshift>
 80105b0:	9b01      	ldr	r3, [sp, #4]
 80105b2:	f103 0901 	add.w	r9, r3, #1
 80105b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80105ba:	4413      	add	r3, r2
 80105bc:	9305      	str	r3, [sp, #20]
 80105be:	f00a 0301 	and.w	r3, sl, #1
 80105c2:	46b8      	mov	r8, r7
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	4607      	mov	r7, r0
 80105c8:	4631      	mov	r1, r6
 80105ca:	ee18 0a10 	vmov	r0, s16
 80105ce:	f7ff fa77 	bl	800fac0 <quorem>
 80105d2:	4641      	mov	r1, r8
 80105d4:	9002      	str	r0, [sp, #8]
 80105d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80105da:	ee18 0a10 	vmov	r0, s16
 80105de:	f000 fc99 	bl	8010f14 <__mcmp>
 80105e2:	463a      	mov	r2, r7
 80105e4:	9003      	str	r0, [sp, #12]
 80105e6:	4631      	mov	r1, r6
 80105e8:	4620      	mov	r0, r4
 80105ea:	f000 fcaf 	bl	8010f4c <__mdiff>
 80105ee:	68c2      	ldr	r2, [r0, #12]
 80105f0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80105f4:	4605      	mov	r5, r0
 80105f6:	bb02      	cbnz	r2, 801063a <_dtoa_r+0xa62>
 80105f8:	4601      	mov	r1, r0
 80105fa:	ee18 0a10 	vmov	r0, s16
 80105fe:	f000 fc89 	bl	8010f14 <__mcmp>
 8010602:	4602      	mov	r2, r0
 8010604:	4629      	mov	r1, r5
 8010606:	4620      	mov	r0, r4
 8010608:	9207      	str	r2, [sp, #28]
 801060a:	f000 fa41 	bl	8010a90 <_Bfree>
 801060e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010612:	ea43 0102 	orr.w	r1, r3, r2
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	430b      	orrs	r3, r1
 801061a:	464d      	mov	r5, r9
 801061c:	d10f      	bne.n	801063e <_dtoa_r+0xa66>
 801061e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010622:	d02a      	beq.n	801067a <_dtoa_r+0xaa2>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd02      	ble.n	8010630 <_dtoa_r+0xa58>
 801062a:	9b02      	ldr	r3, [sp, #8]
 801062c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010630:	f88b a000 	strb.w	sl, [fp]
 8010634:	e775      	b.n	8010522 <_dtoa_r+0x94a>
 8010636:	4638      	mov	r0, r7
 8010638:	e7ba      	b.n	80105b0 <_dtoa_r+0x9d8>
 801063a:	2201      	movs	r2, #1
 801063c:	e7e2      	b.n	8010604 <_dtoa_r+0xa2c>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	db04      	blt.n	801064e <_dtoa_r+0xa76>
 8010644:	9906      	ldr	r1, [sp, #24]
 8010646:	430b      	orrs	r3, r1
 8010648:	9904      	ldr	r1, [sp, #16]
 801064a:	430b      	orrs	r3, r1
 801064c:	d122      	bne.n	8010694 <_dtoa_r+0xabc>
 801064e:	2a00      	cmp	r2, #0
 8010650:	ddee      	ble.n	8010630 <_dtoa_r+0xa58>
 8010652:	ee18 1a10 	vmov	r1, s16
 8010656:	2201      	movs	r2, #1
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fbeb 	bl	8010e34 <__lshift>
 801065e:	4631      	mov	r1, r6
 8010660:	ee08 0a10 	vmov	s16, r0
 8010664:	f000 fc56 	bl	8010f14 <__mcmp>
 8010668:	2800      	cmp	r0, #0
 801066a:	dc03      	bgt.n	8010674 <_dtoa_r+0xa9c>
 801066c:	d1e0      	bne.n	8010630 <_dtoa_r+0xa58>
 801066e:	f01a 0f01 	tst.w	sl, #1
 8010672:	d0dd      	beq.n	8010630 <_dtoa_r+0xa58>
 8010674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010678:	d1d7      	bne.n	801062a <_dtoa_r+0xa52>
 801067a:	2339      	movs	r3, #57	; 0x39
 801067c:	f88b 3000 	strb.w	r3, [fp]
 8010680:	462b      	mov	r3, r5
 8010682:	461d      	mov	r5, r3
 8010684:	3b01      	subs	r3, #1
 8010686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801068a:	2a39      	cmp	r2, #57	; 0x39
 801068c:	d071      	beq.n	8010772 <_dtoa_r+0xb9a>
 801068e:	3201      	adds	r2, #1
 8010690:	701a      	strb	r2, [r3, #0]
 8010692:	e746      	b.n	8010522 <_dtoa_r+0x94a>
 8010694:	2a00      	cmp	r2, #0
 8010696:	dd07      	ble.n	80106a8 <_dtoa_r+0xad0>
 8010698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801069c:	d0ed      	beq.n	801067a <_dtoa_r+0xaa2>
 801069e:	f10a 0301 	add.w	r3, sl, #1
 80106a2:	f88b 3000 	strb.w	r3, [fp]
 80106a6:	e73c      	b.n	8010522 <_dtoa_r+0x94a>
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80106ae:	4599      	cmp	r9, r3
 80106b0:	d047      	beq.n	8010742 <_dtoa_r+0xb6a>
 80106b2:	ee18 1a10 	vmov	r1, s16
 80106b6:	2300      	movs	r3, #0
 80106b8:	220a      	movs	r2, #10
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 fa0a 	bl	8010ad4 <__multadd>
 80106c0:	45b8      	cmp	r8, r7
 80106c2:	ee08 0a10 	vmov	s16, r0
 80106c6:	f04f 0300 	mov.w	r3, #0
 80106ca:	f04f 020a 	mov.w	r2, #10
 80106ce:	4641      	mov	r1, r8
 80106d0:	4620      	mov	r0, r4
 80106d2:	d106      	bne.n	80106e2 <_dtoa_r+0xb0a>
 80106d4:	f000 f9fe 	bl	8010ad4 <__multadd>
 80106d8:	4680      	mov	r8, r0
 80106da:	4607      	mov	r7, r0
 80106dc:	f109 0901 	add.w	r9, r9, #1
 80106e0:	e772      	b.n	80105c8 <_dtoa_r+0x9f0>
 80106e2:	f000 f9f7 	bl	8010ad4 <__multadd>
 80106e6:	4639      	mov	r1, r7
 80106e8:	4680      	mov	r8, r0
 80106ea:	2300      	movs	r3, #0
 80106ec:	220a      	movs	r2, #10
 80106ee:	4620      	mov	r0, r4
 80106f0:	f000 f9f0 	bl	8010ad4 <__multadd>
 80106f4:	4607      	mov	r7, r0
 80106f6:	e7f1      	b.n	80106dc <_dtoa_r+0xb04>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	9302      	str	r3, [sp, #8]
 80106fc:	9d01      	ldr	r5, [sp, #4]
 80106fe:	ee18 0a10 	vmov	r0, s16
 8010702:	4631      	mov	r1, r6
 8010704:	f7ff f9dc 	bl	800fac0 <quorem>
 8010708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801070c:	9b01      	ldr	r3, [sp, #4]
 801070e:	f805 ab01 	strb.w	sl, [r5], #1
 8010712:	1aea      	subs	r2, r5, r3
 8010714:	9b02      	ldr	r3, [sp, #8]
 8010716:	4293      	cmp	r3, r2
 8010718:	dd09      	ble.n	801072e <_dtoa_r+0xb56>
 801071a:	ee18 1a10 	vmov	r1, s16
 801071e:	2300      	movs	r3, #0
 8010720:	220a      	movs	r2, #10
 8010722:	4620      	mov	r0, r4
 8010724:	f000 f9d6 	bl	8010ad4 <__multadd>
 8010728:	ee08 0a10 	vmov	s16, r0
 801072c:	e7e7      	b.n	80106fe <_dtoa_r+0xb26>
 801072e:	9b02      	ldr	r3, [sp, #8]
 8010730:	2b00      	cmp	r3, #0
 8010732:	bfc8      	it	gt
 8010734:	461d      	movgt	r5, r3
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	bfd8      	it	le
 801073a:	2501      	movle	r5, #1
 801073c:	441d      	add	r5, r3
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	ee18 1a10 	vmov	r1, s16
 8010746:	2201      	movs	r2, #1
 8010748:	4620      	mov	r0, r4
 801074a:	f000 fb73 	bl	8010e34 <__lshift>
 801074e:	4631      	mov	r1, r6
 8010750:	ee08 0a10 	vmov	s16, r0
 8010754:	f000 fbde 	bl	8010f14 <__mcmp>
 8010758:	2800      	cmp	r0, #0
 801075a:	dc91      	bgt.n	8010680 <_dtoa_r+0xaa8>
 801075c:	d102      	bne.n	8010764 <_dtoa_r+0xb8c>
 801075e:	f01a 0f01 	tst.w	sl, #1
 8010762:	d18d      	bne.n	8010680 <_dtoa_r+0xaa8>
 8010764:	462b      	mov	r3, r5
 8010766:	461d      	mov	r5, r3
 8010768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801076c:	2a30      	cmp	r2, #48	; 0x30
 801076e:	d0fa      	beq.n	8010766 <_dtoa_r+0xb8e>
 8010770:	e6d7      	b.n	8010522 <_dtoa_r+0x94a>
 8010772:	9a01      	ldr	r2, [sp, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d184      	bne.n	8010682 <_dtoa_r+0xaaa>
 8010778:	9b00      	ldr	r3, [sp, #0]
 801077a:	3301      	adds	r3, #1
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	2331      	movs	r3, #49	; 0x31
 8010780:	7013      	strb	r3, [r2, #0]
 8010782:	e6ce      	b.n	8010522 <_dtoa_r+0x94a>
 8010784:	4b09      	ldr	r3, [pc, #36]	; (80107ac <_dtoa_r+0xbd4>)
 8010786:	f7ff ba95 	b.w	800fcb4 <_dtoa_r+0xdc>
 801078a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801078c:	2b00      	cmp	r3, #0
 801078e:	f47f aa6e 	bne.w	800fc6e <_dtoa_r+0x96>
 8010792:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <_dtoa_r+0xbd8>)
 8010794:	f7ff ba8e 	b.w	800fcb4 <_dtoa_r+0xdc>
 8010798:	9b02      	ldr	r3, [sp, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dcae      	bgt.n	80106fc <_dtoa_r+0xb24>
 801079e:	9b06      	ldr	r3, [sp, #24]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	f73f aea8 	bgt.w	80104f6 <_dtoa_r+0x91e>
 80107a6:	e7a9      	b.n	80106fc <_dtoa_r+0xb24>
 80107a8:	08011f9c 	.word	0x08011f9c
 80107ac:	08011dbc 	.word	0x08011dbc
 80107b0:	08011f1d 	.word	0x08011f1d

080107b4 <std>:
 80107b4:	2300      	movs	r3, #0
 80107b6:	b510      	push	{r4, lr}
 80107b8:	4604      	mov	r4, r0
 80107ba:	e9c0 3300 	strd	r3, r3, [r0]
 80107be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107c2:	6083      	str	r3, [r0, #8]
 80107c4:	8181      	strh	r1, [r0, #12]
 80107c6:	6643      	str	r3, [r0, #100]	; 0x64
 80107c8:	81c2      	strh	r2, [r0, #14]
 80107ca:	6183      	str	r3, [r0, #24]
 80107cc:	4619      	mov	r1, r3
 80107ce:	2208      	movs	r2, #8
 80107d0:	305c      	adds	r0, #92	; 0x5c
 80107d2:	f7fe fbdd 	bl	800ef90 <memset>
 80107d6:	4b05      	ldr	r3, [pc, #20]	; (80107ec <std+0x38>)
 80107d8:	6263      	str	r3, [r4, #36]	; 0x24
 80107da:	4b05      	ldr	r3, [pc, #20]	; (80107f0 <std+0x3c>)
 80107dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80107de:	4b05      	ldr	r3, [pc, #20]	; (80107f4 <std+0x40>)
 80107e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107e2:	4b05      	ldr	r3, [pc, #20]	; (80107f8 <std+0x44>)
 80107e4:	6224      	str	r4, [r4, #32]
 80107e6:	6323      	str	r3, [r4, #48]	; 0x30
 80107e8:	bd10      	pop	{r4, pc}
 80107ea:	bf00      	nop
 80107ec:	080113f9 	.word	0x080113f9
 80107f0:	0801141b 	.word	0x0801141b
 80107f4:	08011453 	.word	0x08011453
 80107f8:	08011477 	.word	0x08011477

080107fc <_cleanup_r>:
 80107fc:	4901      	ldr	r1, [pc, #4]	; (8010804 <_cleanup_r+0x8>)
 80107fe:	f000 b8c1 	b.w	8010984 <_fwalk_reent>
 8010802:	bf00      	nop
 8010804:	0801177d 	.word	0x0801177d

08010808 <__sfmoreglue>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	2268      	movs	r2, #104	; 0x68
 801080c:	1e4d      	subs	r5, r1, #1
 801080e:	4355      	muls	r5, r2
 8010810:	460e      	mov	r6, r1
 8010812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010816:	f7fe fc2f 	bl	800f078 <_malloc_r>
 801081a:	4604      	mov	r4, r0
 801081c:	b140      	cbz	r0, 8010830 <__sfmoreglue+0x28>
 801081e:	2100      	movs	r1, #0
 8010820:	e9c0 1600 	strd	r1, r6, [r0]
 8010824:	300c      	adds	r0, #12
 8010826:	60a0      	str	r0, [r4, #8]
 8010828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801082c:	f7fe fbb0 	bl	800ef90 <memset>
 8010830:	4620      	mov	r0, r4
 8010832:	bd70      	pop	{r4, r5, r6, pc}

08010834 <__sfp_lock_acquire>:
 8010834:	4801      	ldr	r0, [pc, #4]	; (801083c <__sfp_lock_acquire+0x8>)
 8010836:	f000 b8ca 	b.w	80109ce <__retarget_lock_acquire_recursive>
 801083a:	bf00      	nop
 801083c:	200028dd 	.word	0x200028dd

08010840 <__sfp_lock_release>:
 8010840:	4801      	ldr	r0, [pc, #4]	; (8010848 <__sfp_lock_release+0x8>)
 8010842:	f000 b8c5 	b.w	80109d0 <__retarget_lock_release_recursive>
 8010846:	bf00      	nop
 8010848:	200028dd 	.word	0x200028dd

0801084c <__sinit_lock_acquire>:
 801084c:	4801      	ldr	r0, [pc, #4]	; (8010854 <__sinit_lock_acquire+0x8>)
 801084e:	f000 b8be 	b.w	80109ce <__retarget_lock_acquire_recursive>
 8010852:	bf00      	nop
 8010854:	200028de 	.word	0x200028de

08010858 <__sinit_lock_release>:
 8010858:	4801      	ldr	r0, [pc, #4]	; (8010860 <__sinit_lock_release+0x8>)
 801085a:	f000 b8b9 	b.w	80109d0 <__retarget_lock_release_recursive>
 801085e:	bf00      	nop
 8010860:	200028de 	.word	0x200028de

08010864 <__sinit>:
 8010864:	b510      	push	{r4, lr}
 8010866:	4604      	mov	r4, r0
 8010868:	f7ff fff0 	bl	801084c <__sinit_lock_acquire>
 801086c:	69a3      	ldr	r3, [r4, #24]
 801086e:	b11b      	cbz	r3, 8010878 <__sinit+0x14>
 8010870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010874:	f7ff bff0 	b.w	8010858 <__sinit_lock_release>
 8010878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801087c:	6523      	str	r3, [r4, #80]	; 0x50
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <__sinit+0x68>)
 8010880:	4a13      	ldr	r2, [pc, #76]	; (80108d0 <__sinit+0x6c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	62a2      	str	r2, [r4, #40]	; 0x28
 8010886:	42a3      	cmp	r3, r4
 8010888:	bf04      	itt	eq
 801088a:	2301      	moveq	r3, #1
 801088c:	61a3      	streq	r3, [r4, #24]
 801088e:	4620      	mov	r0, r4
 8010890:	f000 f820 	bl	80108d4 <__sfp>
 8010894:	6060      	str	r0, [r4, #4]
 8010896:	4620      	mov	r0, r4
 8010898:	f000 f81c 	bl	80108d4 <__sfp>
 801089c:	60a0      	str	r0, [r4, #8]
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 f818 	bl	80108d4 <__sfp>
 80108a4:	2200      	movs	r2, #0
 80108a6:	60e0      	str	r0, [r4, #12]
 80108a8:	2104      	movs	r1, #4
 80108aa:	6860      	ldr	r0, [r4, #4]
 80108ac:	f7ff ff82 	bl	80107b4 <std>
 80108b0:	68a0      	ldr	r0, [r4, #8]
 80108b2:	2201      	movs	r2, #1
 80108b4:	2109      	movs	r1, #9
 80108b6:	f7ff ff7d 	bl	80107b4 <std>
 80108ba:	68e0      	ldr	r0, [r4, #12]
 80108bc:	2202      	movs	r2, #2
 80108be:	2112      	movs	r1, #18
 80108c0:	f7ff ff78 	bl	80107b4 <std>
 80108c4:	2301      	movs	r3, #1
 80108c6:	61a3      	str	r3, [r4, #24]
 80108c8:	e7d2      	b.n	8010870 <__sinit+0xc>
 80108ca:	bf00      	nop
 80108cc:	08011da8 	.word	0x08011da8
 80108d0:	080107fd 	.word	0x080107fd

080108d4 <__sfp>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	4607      	mov	r7, r0
 80108d8:	f7ff ffac 	bl	8010834 <__sfp_lock_acquire>
 80108dc:	4b1e      	ldr	r3, [pc, #120]	; (8010958 <__sfp+0x84>)
 80108de:	681e      	ldr	r6, [r3, #0]
 80108e0:	69b3      	ldr	r3, [r6, #24]
 80108e2:	b913      	cbnz	r3, 80108ea <__sfp+0x16>
 80108e4:	4630      	mov	r0, r6
 80108e6:	f7ff ffbd 	bl	8010864 <__sinit>
 80108ea:	3648      	adds	r6, #72	; 0x48
 80108ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80108f0:	3b01      	subs	r3, #1
 80108f2:	d503      	bpl.n	80108fc <__sfp+0x28>
 80108f4:	6833      	ldr	r3, [r6, #0]
 80108f6:	b30b      	cbz	r3, 801093c <__sfp+0x68>
 80108f8:	6836      	ldr	r6, [r6, #0]
 80108fa:	e7f7      	b.n	80108ec <__sfp+0x18>
 80108fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010900:	b9d5      	cbnz	r5, 8010938 <__sfp+0x64>
 8010902:	4b16      	ldr	r3, [pc, #88]	; (801095c <__sfp+0x88>)
 8010904:	60e3      	str	r3, [r4, #12]
 8010906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801090a:	6665      	str	r5, [r4, #100]	; 0x64
 801090c:	f000 f85e 	bl	80109cc <__retarget_lock_init_recursive>
 8010910:	f7ff ff96 	bl	8010840 <__sfp_lock_release>
 8010914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801091c:	6025      	str	r5, [r4, #0]
 801091e:	61a5      	str	r5, [r4, #24]
 8010920:	2208      	movs	r2, #8
 8010922:	4629      	mov	r1, r5
 8010924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010928:	f7fe fb32 	bl	800ef90 <memset>
 801092c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010934:	4620      	mov	r0, r4
 8010936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010938:	3468      	adds	r4, #104	; 0x68
 801093a:	e7d9      	b.n	80108f0 <__sfp+0x1c>
 801093c:	2104      	movs	r1, #4
 801093e:	4638      	mov	r0, r7
 8010940:	f7ff ff62 	bl	8010808 <__sfmoreglue>
 8010944:	4604      	mov	r4, r0
 8010946:	6030      	str	r0, [r6, #0]
 8010948:	2800      	cmp	r0, #0
 801094a:	d1d5      	bne.n	80108f8 <__sfp+0x24>
 801094c:	f7ff ff78 	bl	8010840 <__sfp_lock_release>
 8010950:	230c      	movs	r3, #12
 8010952:	603b      	str	r3, [r7, #0]
 8010954:	e7ee      	b.n	8010934 <__sfp+0x60>
 8010956:	bf00      	nop
 8010958:	08011da8 	.word	0x08011da8
 801095c:	ffff0001 	.word	0xffff0001

08010960 <fiprintf>:
 8010960:	b40e      	push	{r1, r2, r3}
 8010962:	b503      	push	{r0, r1, lr}
 8010964:	4601      	mov	r1, r0
 8010966:	ab03      	add	r3, sp, #12
 8010968:	4805      	ldr	r0, [pc, #20]	; (8010980 <fiprintf+0x20>)
 801096a:	f853 2b04 	ldr.w	r2, [r3], #4
 801096e:	6800      	ldr	r0, [r0, #0]
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	f000 fc11 	bl	8011198 <_vfiprintf_r>
 8010976:	b002      	add	sp, #8
 8010978:	f85d eb04 	ldr.w	lr, [sp], #4
 801097c:	b003      	add	sp, #12
 801097e:	4770      	bx	lr
 8010980:	20000184 	.word	0x20000184

08010984 <_fwalk_reent>:
 8010984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010988:	4606      	mov	r6, r0
 801098a:	4688      	mov	r8, r1
 801098c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010990:	2700      	movs	r7, #0
 8010992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010996:	f1b9 0901 	subs.w	r9, r9, #1
 801099a:	d505      	bpl.n	80109a8 <_fwalk_reent+0x24>
 801099c:	6824      	ldr	r4, [r4, #0]
 801099e:	2c00      	cmp	r4, #0
 80109a0:	d1f7      	bne.n	8010992 <_fwalk_reent+0xe>
 80109a2:	4638      	mov	r0, r7
 80109a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109a8:	89ab      	ldrh	r3, [r5, #12]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d907      	bls.n	80109be <_fwalk_reent+0x3a>
 80109ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109b2:	3301      	adds	r3, #1
 80109b4:	d003      	beq.n	80109be <_fwalk_reent+0x3a>
 80109b6:	4629      	mov	r1, r5
 80109b8:	4630      	mov	r0, r6
 80109ba:	47c0      	blx	r8
 80109bc:	4307      	orrs	r7, r0
 80109be:	3568      	adds	r5, #104	; 0x68
 80109c0:	e7e9      	b.n	8010996 <_fwalk_reent+0x12>
	...

080109c4 <_localeconv_r>:
 80109c4:	4800      	ldr	r0, [pc, #0]	; (80109c8 <_localeconv_r+0x4>)
 80109c6:	4770      	bx	lr
 80109c8:	200002d8 	.word	0x200002d8

080109cc <__retarget_lock_init_recursive>:
 80109cc:	4770      	bx	lr

080109ce <__retarget_lock_acquire_recursive>:
 80109ce:	4770      	bx	lr

080109d0 <__retarget_lock_release_recursive>:
 80109d0:	4770      	bx	lr

080109d2 <__ascii_mbtowc>:
 80109d2:	b082      	sub	sp, #8
 80109d4:	b901      	cbnz	r1, 80109d8 <__ascii_mbtowc+0x6>
 80109d6:	a901      	add	r1, sp, #4
 80109d8:	b142      	cbz	r2, 80109ec <__ascii_mbtowc+0x1a>
 80109da:	b14b      	cbz	r3, 80109f0 <__ascii_mbtowc+0x1e>
 80109dc:	7813      	ldrb	r3, [r2, #0]
 80109de:	600b      	str	r3, [r1, #0]
 80109e0:	7812      	ldrb	r2, [r2, #0]
 80109e2:	1e10      	subs	r0, r2, #0
 80109e4:	bf18      	it	ne
 80109e6:	2001      	movne	r0, #1
 80109e8:	b002      	add	sp, #8
 80109ea:	4770      	bx	lr
 80109ec:	4610      	mov	r0, r2
 80109ee:	e7fb      	b.n	80109e8 <__ascii_mbtowc+0x16>
 80109f0:	f06f 0001 	mvn.w	r0, #1
 80109f4:	e7f8      	b.n	80109e8 <__ascii_mbtowc+0x16>
	...

080109f8 <__malloc_lock>:
 80109f8:	4801      	ldr	r0, [pc, #4]	; (8010a00 <__malloc_lock+0x8>)
 80109fa:	f7ff bfe8 	b.w	80109ce <__retarget_lock_acquire_recursive>
 80109fe:	bf00      	nop
 8010a00:	200028dc 	.word	0x200028dc

08010a04 <__malloc_unlock>:
 8010a04:	4801      	ldr	r0, [pc, #4]	; (8010a0c <__malloc_unlock+0x8>)
 8010a06:	f7ff bfe3 	b.w	80109d0 <__retarget_lock_release_recursive>
 8010a0a:	bf00      	nop
 8010a0c:	200028dc 	.word	0x200028dc

08010a10 <_Balloc>:
 8010a10:	b570      	push	{r4, r5, r6, lr}
 8010a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a14:	4604      	mov	r4, r0
 8010a16:	460d      	mov	r5, r1
 8010a18:	b976      	cbnz	r6, 8010a38 <_Balloc+0x28>
 8010a1a:	2010      	movs	r0, #16
 8010a1c:	f7fe faa2 	bl	800ef64 <malloc>
 8010a20:	4602      	mov	r2, r0
 8010a22:	6260      	str	r0, [r4, #36]	; 0x24
 8010a24:	b920      	cbnz	r0, 8010a30 <_Balloc+0x20>
 8010a26:	4b18      	ldr	r3, [pc, #96]	; (8010a88 <_Balloc+0x78>)
 8010a28:	4818      	ldr	r0, [pc, #96]	; (8010a8c <_Balloc+0x7c>)
 8010a2a:	2166      	movs	r1, #102	; 0x66
 8010a2c:	f7ff f82a 	bl	800fa84 <__assert_func>
 8010a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a34:	6006      	str	r6, [r0, #0]
 8010a36:	60c6      	str	r6, [r0, #12]
 8010a38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a3a:	68f3      	ldr	r3, [r6, #12]
 8010a3c:	b183      	cbz	r3, 8010a60 <_Balloc+0x50>
 8010a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a46:	b9b8      	cbnz	r0, 8010a78 <_Balloc+0x68>
 8010a48:	2101      	movs	r1, #1
 8010a4a:	fa01 f605 	lsl.w	r6, r1, r5
 8010a4e:	1d72      	adds	r2, r6, #5
 8010a50:	0092      	lsls	r2, r2, #2
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 fb60 	bl	8011118 <_calloc_r>
 8010a58:	b160      	cbz	r0, 8010a74 <_Balloc+0x64>
 8010a5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a5e:	e00e      	b.n	8010a7e <_Balloc+0x6e>
 8010a60:	2221      	movs	r2, #33	; 0x21
 8010a62:	2104      	movs	r1, #4
 8010a64:	4620      	mov	r0, r4
 8010a66:	f000 fb57 	bl	8011118 <_calloc_r>
 8010a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a6c:	60f0      	str	r0, [r6, #12]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1e4      	bne.n	8010a3e <_Balloc+0x2e>
 8010a74:	2000      	movs	r0, #0
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	6802      	ldr	r2, [r0, #0]
 8010a7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a7e:	2300      	movs	r3, #0
 8010a80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a84:	e7f7      	b.n	8010a76 <_Balloc+0x66>
 8010a86:	bf00      	nop
 8010a88:	08011f2a 	.word	0x08011f2a
 8010a8c:	0801201a 	.word	0x0801201a

08010a90 <_Bfree>:
 8010a90:	b570      	push	{r4, r5, r6, lr}
 8010a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a94:	4605      	mov	r5, r0
 8010a96:	460c      	mov	r4, r1
 8010a98:	b976      	cbnz	r6, 8010ab8 <_Bfree+0x28>
 8010a9a:	2010      	movs	r0, #16
 8010a9c:	f7fe fa62 	bl	800ef64 <malloc>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	6268      	str	r0, [r5, #36]	; 0x24
 8010aa4:	b920      	cbnz	r0, 8010ab0 <_Bfree+0x20>
 8010aa6:	4b09      	ldr	r3, [pc, #36]	; (8010acc <_Bfree+0x3c>)
 8010aa8:	4809      	ldr	r0, [pc, #36]	; (8010ad0 <_Bfree+0x40>)
 8010aaa:	218a      	movs	r1, #138	; 0x8a
 8010aac:	f7fe ffea 	bl	800fa84 <__assert_func>
 8010ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ab4:	6006      	str	r6, [r0, #0]
 8010ab6:	60c6      	str	r6, [r0, #12]
 8010ab8:	b13c      	cbz	r4, 8010aca <_Bfree+0x3a>
 8010aba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010abc:	6862      	ldr	r2, [r4, #4]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ac4:	6021      	str	r1, [r4, #0]
 8010ac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010aca:	bd70      	pop	{r4, r5, r6, pc}
 8010acc:	08011f2a 	.word	0x08011f2a
 8010ad0:	0801201a 	.word	0x0801201a

08010ad4 <__multadd>:
 8010ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad8:	690d      	ldr	r5, [r1, #16]
 8010ada:	4607      	mov	r7, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	461e      	mov	r6, r3
 8010ae0:	f101 0c14 	add.w	ip, r1, #20
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	f8dc 3000 	ldr.w	r3, [ip]
 8010aea:	b299      	uxth	r1, r3
 8010aec:	fb02 6101 	mla	r1, r2, r1, r6
 8010af0:	0c1e      	lsrs	r6, r3, #16
 8010af2:	0c0b      	lsrs	r3, r1, #16
 8010af4:	fb02 3306 	mla	r3, r2, r6, r3
 8010af8:	b289      	uxth	r1, r1
 8010afa:	3001      	adds	r0, #1
 8010afc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b00:	4285      	cmp	r5, r0
 8010b02:	f84c 1b04 	str.w	r1, [ip], #4
 8010b06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b0a:	dcec      	bgt.n	8010ae6 <__multadd+0x12>
 8010b0c:	b30e      	cbz	r6, 8010b52 <__multadd+0x7e>
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	42ab      	cmp	r3, r5
 8010b12:	dc19      	bgt.n	8010b48 <__multadd+0x74>
 8010b14:	6861      	ldr	r1, [r4, #4]
 8010b16:	4638      	mov	r0, r7
 8010b18:	3101      	adds	r1, #1
 8010b1a:	f7ff ff79 	bl	8010a10 <_Balloc>
 8010b1e:	4680      	mov	r8, r0
 8010b20:	b928      	cbnz	r0, 8010b2e <__multadd+0x5a>
 8010b22:	4602      	mov	r2, r0
 8010b24:	4b0c      	ldr	r3, [pc, #48]	; (8010b58 <__multadd+0x84>)
 8010b26:	480d      	ldr	r0, [pc, #52]	; (8010b5c <__multadd+0x88>)
 8010b28:	21b5      	movs	r1, #181	; 0xb5
 8010b2a:	f7fe ffab 	bl	800fa84 <__assert_func>
 8010b2e:	6922      	ldr	r2, [r4, #16]
 8010b30:	3202      	adds	r2, #2
 8010b32:	f104 010c 	add.w	r1, r4, #12
 8010b36:	0092      	lsls	r2, r2, #2
 8010b38:	300c      	adds	r0, #12
 8010b3a:	f7fe fa1b 	bl	800ef74 <memcpy>
 8010b3e:	4621      	mov	r1, r4
 8010b40:	4638      	mov	r0, r7
 8010b42:	f7ff ffa5 	bl	8010a90 <_Bfree>
 8010b46:	4644      	mov	r4, r8
 8010b48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b4c:	3501      	adds	r5, #1
 8010b4e:	615e      	str	r6, [r3, #20]
 8010b50:	6125      	str	r5, [r4, #16]
 8010b52:	4620      	mov	r0, r4
 8010b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b58:	08011f9c 	.word	0x08011f9c
 8010b5c:	0801201a 	.word	0x0801201a

08010b60 <__hi0bits>:
 8010b60:	0c03      	lsrs	r3, r0, #16
 8010b62:	041b      	lsls	r3, r3, #16
 8010b64:	b9d3      	cbnz	r3, 8010b9c <__hi0bits+0x3c>
 8010b66:	0400      	lsls	r0, r0, #16
 8010b68:	2310      	movs	r3, #16
 8010b6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b6e:	bf04      	itt	eq
 8010b70:	0200      	lsleq	r0, r0, #8
 8010b72:	3308      	addeq	r3, #8
 8010b74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b78:	bf04      	itt	eq
 8010b7a:	0100      	lsleq	r0, r0, #4
 8010b7c:	3304      	addeq	r3, #4
 8010b7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b82:	bf04      	itt	eq
 8010b84:	0080      	lsleq	r0, r0, #2
 8010b86:	3302      	addeq	r3, #2
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	db05      	blt.n	8010b98 <__hi0bits+0x38>
 8010b8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b90:	f103 0301 	add.w	r3, r3, #1
 8010b94:	bf08      	it	eq
 8010b96:	2320      	moveq	r3, #32
 8010b98:	4618      	mov	r0, r3
 8010b9a:	4770      	bx	lr
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	e7e4      	b.n	8010b6a <__hi0bits+0xa>

08010ba0 <__lo0bits>:
 8010ba0:	6803      	ldr	r3, [r0, #0]
 8010ba2:	f013 0207 	ands.w	r2, r3, #7
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	d00b      	beq.n	8010bc2 <__lo0bits+0x22>
 8010baa:	07da      	lsls	r2, r3, #31
 8010bac:	d423      	bmi.n	8010bf6 <__lo0bits+0x56>
 8010bae:	0798      	lsls	r0, r3, #30
 8010bb0:	bf49      	itett	mi
 8010bb2:	085b      	lsrmi	r3, r3, #1
 8010bb4:	089b      	lsrpl	r3, r3, #2
 8010bb6:	2001      	movmi	r0, #1
 8010bb8:	600b      	strmi	r3, [r1, #0]
 8010bba:	bf5c      	itt	pl
 8010bbc:	600b      	strpl	r3, [r1, #0]
 8010bbe:	2002      	movpl	r0, #2
 8010bc0:	4770      	bx	lr
 8010bc2:	b298      	uxth	r0, r3
 8010bc4:	b9a8      	cbnz	r0, 8010bf2 <__lo0bits+0x52>
 8010bc6:	0c1b      	lsrs	r3, r3, #16
 8010bc8:	2010      	movs	r0, #16
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	b90a      	cbnz	r2, 8010bd2 <__lo0bits+0x32>
 8010bce:	3008      	adds	r0, #8
 8010bd0:	0a1b      	lsrs	r3, r3, #8
 8010bd2:	071a      	lsls	r2, r3, #28
 8010bd4:	bf04      	itt	eq
 8010bd6:	091b      	lsreq	r3, r3, #4
 8010bd8:	3004      	addeq	r0, #4
 8010bda:	079a      	lsls	r2, r3, #30
 8010bdc:	bf04      	itt	eq
 8010bde:	089b      	lsreq	r3, r3, #2
 8010be0:	3002      	addeq	r0, #2
 8010be2:	07da      	lsls	r2, r3, #31
 8010be4:	d403      	bmi.n	8010bee <__lo0bits+0x4e>
 8010be6:	085b      	lsrs	r3, r3, #1
 8010be8:	f100 0001 	add.w	r0, r0, #1
 8010bec:	d005      	beq.n	8010bfa <__lo0bits+0x5a>
 8010bee:	600b      	str	r3, [r1, #0]
 8010bf0:	4770      	bx	lr
 8010bf2:	4610      	mov	r0, r2
 8010bf4:	e7e9      	b.n	8010bca <__lo0bits+0x2a>
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	4770      	bx	lr
 8010bfa:	2020      	movs	r0, #32
 8010bfc:	4770      	bx	lr
	...

08010c00 <__i2b>:
 8010c00:	b510      	push	{r4, lr}
 8010c02:	460c      	mov	r4, r1
 8010c04:	2101      	movs	r1, #1
 8010c06:	f7ff ff03 	bl	8010a10 <_Balloc>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	b928      	cbnz	r0, 8010c1a <__i2b+0x1a>
 8010c0e:	4b05      	ldr	r3, [pc, #20]	; (8010c24 <__i2b+0x24>)
 8010c10:	4805      	ldr	r0, [pc, #20]	; (8010c28 <__i2b+0x28>)
 8010c12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c16:	f7fe ff35 	bl	800fa84 <__assert_func>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	6144      	str	r4, [r0, #20]
 8010c1e:	6103      	str	r3, [r0, #16]
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	bf00      	nop
 8010c24:	08011f9c 	.word	0x08011f9c
 8010c28:	0801201a 	.word	0x0801201a

08010c2c <__multiply>:
 8010c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c30:	4691      	mov	r9, r2
 8010c32:	690a      	ldr	r2, [r1, #16]
 8010c34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	bfb8      	it	lt
 8010c3c:	460b      	movlt	r3, r1
 8010c3e:	460c      	mov	r4, r1
 8010c40:	bfbc      	itt	lt
 8010c42:	464c      	movlt	r4, r9
 8010c44:	4699      	movlt	r9, r3
 8010c46:	6927      	ldr	r7, [r4, #16]
 8010c48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c4c:	68a3      	ldr	r3, [r4, #8]
 8010c4e:	6861      	ldr	r1, [r4, #4]
 8010c50:	eb07 060a 	add.w	r6, r7, sl
 8010c54:	42b3      	cmp	r3, r6
 8010c56:	b085      	sub	sp, #20
 8010c58:	bfb8      	it	lt
 8010c5a:	3101      	addlt	r1, #1
 8010c5c:	f7ff fed8 	bl	8010a10 <_Balloc>
 8010c60:	b930      	cbnz	r0, 8010c70 <__multiply+0x44>
 8010c62:	4602      	mov	r2, r0
 8010c64:	4b44      	ldr	r3, [pc, #272]	; (8010d78 <__multiply+0x14c>)
 8010c66:	4845      	ldr	r0, [pc, #276]	; (8010d7c <__multiply+0x150>)
 8010c68:	f240 115d 	movw	r1, #349	; 0x15d
 8010c6c:	f7fe ff0a 	bl	800fa84 <__assert_func>
 8010c70:	f100 0514 	add.w	r5, r0, #20
 8010c74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c78:	462b      	mov	r3, r5
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	4543      	cmp	r3, r8
 8010c7e:	d321      	bcc.n	8010cc4 <__multiply+0x98>
 8010c80:	f104 0314 	add.w	r3, r4, #20
 8010c84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010c88:	f109 0314 	add.w	r3, r9, #20
 8010c8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010c90:	9202      	str	r2, [sp, #8]
 8010c92:	1b3a      	subs	r2, r7, r4
 8010c94:	3a15      	subs	r2, #21
 8010c96:	f022 0203 	bic.w	r2, r2, #3
 8010c9a:	3204      	adds	r2, #4
 8010c9c:	f104 0115 	add.w	r1, r4, #21
 8010ca0:	428f      	cmp	r7, r1
 8010ca2:	bf38      	it	cc
 8010ca4:	2204      	movcc	r2, #4
 8010ca6:	9201      	str	r2, [sp, #4]
 8010ca8:	9a02      	ldr	r2, [sp, #8]
 8010caa:	9303      	str	r3, [sp, #12]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d80c      	bhi.n	8010cca <__multiply+0x9e>
 8010cb0:	2e00      	cmp	r6, #0
 8010cb2:	dd03      	ble.n	8010cbc <__multiply+0x90>
 8010cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d05a      	beq.n	8010d72 <__multiply+0x146>
 8010cbc:	6106      	str	r6, [r0, #16]
 8010cbe:	b005      	add	sp, #20
 8010cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc4:	f843 2b04 	str.w	r2, [r3], #4
 8010cc8:	e7d8      	b.n	8010c7c <__multiply+0x50>
 8010cca:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cce:	f1ba 0f00 	cmp.w	sl, #0
 8010cd2:	d024      	beq.n	8010d1e <__multiply+0xf2>
 8010cd4:	f104 0e14 	add.w	lr, r4, #20
 8010cd8:	46a9      	mov	r9, r5
 8010cda:	f04f 0c00 	mov.w	ip, #0
 8010cde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010ce2:	f8d9 1000 	ldr.w	r1, [r9]
 8010ce6:	fa1f fb82 	uxth.w	fp, r2
 8010cea:	b289      	uxth	r1, r1
 8010cec:	fb0a 110b 	mla	r1, sl, fp, r1
 8010cf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8010cf8:	4461      	add	r1, ip
 8010cfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d06:	b289      	uxth	r1, r1
 8010d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d0c:	4577      	cmp	r7, lr
 8010d0e:	f849 1b04 	str.w	r1, [r9], #4
 8010d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d16:	d8e2      	bhi.n	8010cde <__multiply+0xb2>
 8010d18:	9a01      	ldr	r2, [sp, #4]
 8010d1a:	f845 c002 	str.w	ip, [r5, r2]
 8010d1e:	9a03      	ldr	r2, [sp, #12]
 8010d20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d24:	3304      	adds	r3, #4
 8010d26:	f1b9 0f00 	cmp.w	r9, #0
 8010d2a:	d020      	beq.n	8010d6e <__multiply+0x142>
 8010d2c:	6829      	ldr	r1, [r5, #0]
 8010d2e:	f104 0c14 	add.w	ip, r4, #20
 8010d32:	46ae      	mov	lr, r5
 8010d34:	f04f 0a00 	mov.w	sl, #0
 8010d38:	f8bc b000 	ldrh.w	fp, [ip]
 8010d3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d40:	fb09 220b 	mla	r2, r9, fp, r2
 8010d44:	4492      	add	sl, r2
 8010d46:	b289      	uxth	r1, r1
 8010d48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d4c:	f84e 1b04 	str.w	r1, [lr], #4
 8010d50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d54:	f8be 1000 	ldrh.w	r1, [lr]
 8010d58:	0c12      	lsrs	r2, r2, #16
 8010d5a:	fb09 1102 	mla	r1, r9, r2, r1
 8010d5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010d62:	4567      	cmp	r7, ip
 8010d64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d68:	d8e6      	bhi.n	8010d38 <__multiply+0x10c>
 8010d6a:	9a01      	ldr	r2, [sp, #4]
 8010d6c:	50a9      	str	r1, [r5, r2]
 8010d6e:	3504      	adds	r5, #4
 8010d70:	e79a      	b.n	8010ca8 <__multiply+0x7c>
 8010d72:	3e01      	subs	r6, #1
 8010d74:	e79c      	b.n	8010cb0 <__multiply+0x84>
 8010d76:	bf00      	nop
 8010d78:	08011f9c 	.word	0x08011f9c
 8010d7c:	0801201a 	.word	0x0801201a

08010d80 <__pow5mult>:
 8010d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d84:	4615      	mov	r5, r2
 8010d86:	f012 0203 	ands.w	r2, r2, #3
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	460f      	mov	r7, r1
 8010d8e:	d007      	beq.n	8010da0 <__pow5mult+0x20>
 8010d90:	4c25      	ldr	r4, [pc, #148]	; (8010e28 <__pow5mult+0xa8>)
 8010d92:	3a01      	subs	r2, #1
 8010d94:	2300      	movs	r3, #0
 8010d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d9a:	f7ff fe9b 	bl	8010ad4 <__multadd>
 8010d9e:	4607      	mov	r7, r0
 8010da0:	10ad      	asrs	r5, r5, #2
 8010da2:	d03d      	beq.n	8010e20 <__pow5mult+0xa0>
 8010da4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010da6:	b97c      	cbnz	r4, 8010dc8 <__pow5mult+0x48>
 8010da8:	2010      	movs	r0, #16
 8010daa:	f7fe f8db 	bl	800ef64 <malloc>
 8010dae:	4602      	mov	r2, r0
 8010db0:	6270      	str	r0, [r6, #36]	; 0x24
 8010db2:	b928      	cbnz	r0, 8010dc0 <__pow5mult+0x40>
 8010db4:	4b1d      	ldr	r3, [pc, #116]	; (8010e2c <__pow5mult+0xac>)
 8010db6:	481e      	ldr	r0, [pc, #120]	; (8010e30 <__pow5mult+0xb0>)
 8010db8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010dbc:	f7fe fe62 	bl	800fa84 <__assert_func>
 8010dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010dc4:	6004      	str	r4, [r0, #0]
 8010dc6:	60c4      	str	r4, [r0, #12]
 8010dc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010dd0:	b94c      	cbnz	r4, 8010de6 <__pow5mult+0x66>
 8010dd2:	f240 2171 	movw	r1, #625	; 0x271
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f7ff ff12 	bl	8010c00 <__i2b>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8010de2:	4604      	mov	r4, r0
 8010de4:	6003      	str	r3, [r0, #0]
 8010de6:	f04f 0900 	mov.w	r9, #0
 8010dea:	07eb      	lsls	r3, r5, #31
 8010dec:	d50a      	bpl.n	8010e04 <__pow5mult+0x84>
 8010dee:	4639      	mov	r1, r7
 8010df0:	4622      	mov	r2, r4
 8010df2:	4630      	mov	r0, r6
 8010df4:	f7ff ff1a 	bl	8010c2c <__multiply>
 8010df8:	4639      	mov	r1, r7
 8010dfa:	4680      	mov	r8, r0
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7ff fe47 	bl	8010a90 <_Bfree>
 8010e02:	4647      	mov	r7, r8
 8010e04:	106d      	asrs	r5, r5, #1
 8010e06:	d00b      	beq.n	8010e20 <__pow5mult+0xa0>
 8010e08:	6820      	ldr	r0, [r4, #0]
 8010e0a:	b938      	cbnz	r0, 8010e1c <__pow5mult+0x9c>
 8010e0c:	4622      	mov	r2, r4
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7ff ff0b 	bl	8010c2c <__multiply>
 8010e16:	6020      	str	r0, [r4, #0]
 8010e18:	f8c0 9000 	str.w	r9, [r0]
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	e7e4      	b.n	8010dea <__pow5mult+0x6a>
 8010e20:	4638      	mov	r0, r7
 8010e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e26:	bf00      	nop
 8010e28:	08012168 	.word	0x08012168
 8010e2c:	08011f2a 	.word	0x08011f2a
 8010e30:	0801201a 	.word	0x0801201a

08010e34 <__lshift>:
 8010e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e38:	460c      	mov	r4, r1
 8010e3a:	6849      	ldr	r1, [r1, #4]
 8010e3c:	6923      	ldr	r3, [r4, #16]
 8010e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	4607      	mov	r7, r0
 8010e46:	4691      	mov	r9, r2
 8010e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e4c:	f108 0601 	add.w	r6, r8, #1
 8010e50:	42b3      	cmp	r3, r6
 8010e52:	db0b      	blt.n	8010e6c <__lshift+0x38>
 8010e54:	4638      	mov	r0, r7
 8010e56:	f7ff fddb 	bl	8010a10 <_Balloc>
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	b948      	cbnz	r0, 8010e72 <__lshift+0x3e>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	4b2a      	ldr	r3, [pc, #168]	; (8010f0c <__lshift+0xd8>)
 8010e62:	482b      	ldr	r0, [pc, #172]	; (8010f10 <__lshift+0xdc>)
 8010e64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e68:	f7fe fe0c 	bl	800fa84 <__assert_func>
 8010e6c:	3101      	adds	r1, #1
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	e7ee      	b.n	8010e50 <__lshift+0x1c>
 8010e72:	2300      	movs	r3, #0
 8010e74:	f100 0114 	add.w	r1, r0, #20
 8010e78:	f100 0210 	add.w	r2, r0, #16
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	4553      	cmp	r3, sl
 8010e80:	db37      	blt.n	8010ef2 <__lshift+0xbe>
 8010e82:	6920      	ldr	r0, [r4, #16]
 8010e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e88:	f104 0314 	add.w	r3, r4, #20
 8010e8c:	f019 091f 	ands.w	r9, r9, #31
 8010e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010e98:	d02f      	beq.n	8010efa <__lshift+0xc6>
 8010e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8010e9e:	468a      	mov	sl, r1
 8010ea0:	f04f 0c00 	mov.w	ip, #0
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	fa02 f209 	lsl.w	r2, r2, r9
 8010eaa:	ea42 020c 	orr.w	r2, r2, ip
 8010eae:	f84a 2b04 	str.w	r2, [sl], #4
 8010eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb6:	4298      	cmp	r0, r3
 8010eb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010ebc:	d8f2      	bhi.n	8010ea4 <__lshift+0x70>
 8010ebe:	1b03      	subs	r3, r0, r4
 8010ec0:	3b15      	subs	r3, #21
 8010ec2:	f023 0303 	bic.w	r3, r3, #3
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	f104 0215 	add.w	r2, r4, #21
 8010ecc:	4290      	cmp	r0, r2
 8010ece:	bf38      	it	cc
 8010ed0:	2304      	movcc	r3, #4
 8010ed2:	f841 c003 	str.w	ip, [r1, r3]
 8010ed6:	f1bc 0f00 	cmp.w	ip, #0
 8010eda:	d001      	beq.n	8010ee0 <__lshift+0xac>
 8010edc:	f108 0602 	add.w	r6, r8, #2
 8010ee0:	3e01      	subs	r6, #1
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	612e      	str	r6, [r5, #16]
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	f7ff fdd2 	bl	8010a90 <_Bfree>
 8010eec:	4628      	mov	r0, r5
 8010eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	e7c1      	b.n	8010e7e <__lshift+0x4a>
 8010efa:	3904      	subs	r1, #4
 8010efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f00:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f04:	4298      	cmp	r0, r3
 8010f06:	d8f9      	bhi.n	8010efc <__lshift+0xc8>
 8010f08:	e7ea      	b.n	8010ee0 <__lshift+0xac>
 8010f0a:	bf00      	nop
 8010f0c:	08011f9c 	.word	0x08011f9c
 8010f10:	0801201a 	.word	0x0801201a

08010f14 <__mcmp>:
 8010f14:	b530      	push	{r4, r5, lr}
 8010f16:	6902      	ldr	r2, [r0, #16]
 8010f18:	690c      	ldr	r4, [r1, #16]
 8010f1a:	1b12      	subs	r2, r2, r4
 8010f1c:	d10e      	bne.n	8010f3c <__mcmp+0x28>
 8010f1e:	f100 0314 	add.w	r3, r0, #20
 8010f22:	3114      	adds	r1, #20
 8010f24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f34:	42a5      	cmp	r5, r4
 8010f36:	d003      	beq.n	8010f40 <__mcmp+0x2c>
 8010f38:	d305      	bcc.n	8010f46 <__mcmp+0x32>
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	4610      	mov	r0, r2
 8010f3e:	bd30      	pop	{r4, r5, pc}
 8010f40:	4283      	cmp	r3, r0
 8010f42:	d3f3      	bcc.n	8010f2c <__mcmp+0x18>
 8010f44:	e7fa      	b.n	8010f3c <__mcmp+0x28>
 8010f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f4a:	e7f7      	b.n	8010f3c <__mcmp+0x28>

08010f4c <__mdiff>:
 8010f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	460c      	mov	r4, r1
 8010f52:	4606      	mov	r6, r0
 8010f54:	4611      	mov	r1, r2
 8010f56:	4620      	mov	r0, r4
 8010f58:	4690      	mov	r8, r2
 8010f5a:	f7ff ffdb 	bl	8010f14 <__mcmp>
 8010f5e:	1e05      	subs	r5, r0, #0
 8010f60:	d110      	bne.n	8010f84 <__mdiff+0x38>
 8010f62:	4629      	mov	r1, r5
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7ff fd53 	bl	8010a10 <_Balloc>
 8010f6a:	b930      	cbnz	r0, 8010f7a <__mdiff+0x2e>
 8010f6c:	4b3a      	ldr	r3, [pc, #232]	; (8011058 <__mdiff+0x10c>)
 8010f6e:	4602      	mov	r2, r0
 8010f70:	f240 2132 	movw	r1, #562	; 0x232
 8010f74:	4839      	ldr	r0, [pc, #228]	; (801105c <__mdiff+0x110>)
 8010f76:	f7fe fd85 	bl	800fa84 <__assert_func>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f84:	bfa4      	itt	ge
 8010f86:	4643      	movge	r3, r8
 8010f88:	46a0      	movge	r8, r4
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f90:	bfa6      	itte	ge
 8010f92:	461c      	movge	r4, r3
 8010f94:	2500      	movge	r5, #0
 8010f96:	2501      	movlt	r5, #1
 8010f98:	f7ff fd3a 	bl	8010a10 <_Balloc>
 8010f9c:	b920      	cbnz	r0, 8010fa8 <__mdiff+0x5c>
 8010f9e:	4b2e      	ldr	r3, [pc, #184]	; (8011058 <__mdiff+0x10c>)
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010fa6:	e7e5      	b.n	8010f74 <__mdiff+0x28>
 8010fa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fac:	6926      	ldr	r6, [r4, #16]
 8010fae:	60c5      	str	r5, [r0, #12]
 8010fb0:	f104 0914 	add.w	r9, r4, #20
 8010fb4:	f108 0514 	add.w	r5, r8, #20
 8010fb8:	f100 0e14 	add.w	lr, r0, #20
 8010fbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010fc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010fc4:	f108 0210 	add.w	r2, r8, #16
 8010fc8:	46f2      	mov	sl, lr
 8010fca:	2100      	movs	r1, #0
 8010fcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010fd4:	fa1f f883 	uxth.w	r8, r3
 8010fd8:	fa11 f18b 	uxtah	r1, r1, fp
 8010fdc:	0c1b      	lsrs	r3, r3, #16
 8010fde:	eba1 0808 	sub.w	r8, r1, r8
 8010fe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010fe6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fea:	fa1f f888 	uxth.w	r8, r8
 8010fee:	1419      	asrs	r1, r3, #16
 8010ff0:	454e      	cmp	r6, r9
 8010ff2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ff6:	f84a 3b04 	str.w	r3, [sl], #4
 8010ffa:	d8e7      	bhi.n	8010fcc <__mdiff+0x80>
 8010ffc:	1b33      	subs	r3, r6, r4
 8010ffe:	3b15      	subs	r3, #21
 8011000:	f023 0303 	bic.w	r3, r3, #3
 8011004:	3304      	adds	r3, #4
 8011006:	3415      	adds	r4, #21
 8011008:	42a6      	cmp	r6, r4
 801100a:	bf38      	it	cc
 801100c:	2304      	movcc	r3, #4
 801100e:	441d      	add	r5, r3
 8011010:	4473      	add	r3, lr
 8011012:	469e      	mov	lr, r3
 8011014:	462e      	mov	r6, r5
 8011016:	4566      	cmp	r6, ip
 8011018:	d30e      	bcc.n	8011038 <__mdiff+0xec>
 801101a:	f10c 0203 	add.w	r2, ip, #3
 801101e:	1b52      	subs	r2, r2, r5
 8011020:	f022 0203 	bic.w	r2, r2, #3
 8011024:	3d03      	subs	r5, #3
 8011026:	45ac      	cmp	ip, r5
 8011028:	bf38      	it	cc
 801102a:	2200      	movcc	r2, #0
 801102c:	441a      	add	r2, r3
 801102e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011032:	b17b      	cbz	r3, 8011054 <__mdiff+0x108>
 8011034:	6107      	str	r7, [r0, #16]
 8011036:	e7a3      	b.n	8010f80 <__mdiff+0x34>
 8011038:	f856 8b04 	ldr.w	r8, [r6], #4
 801103c:	fa11 f288 	uxtah	r2, r1, r8
 8011040:	1414      	asrs	r4, r2, #16
 8011042:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011046:	b292      	uxth	r2, r2
 8011048:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801104c:	f84e 2b04 	str.w	r2, [lr], #4
 8011050:	1421      	asrs	r1, r4, #16
 8011052:	e7e0      	b.n	8011016 <__mdiff+0xca>
 8011054:	3f01      	subs	r7, #1
 8011056:	e7ea      	b.n	801102e <__mdiff+0xe2>
 8011058:	08011f9c 	.word	0x08011f9c
 801105c:	0801201a 	.word	0x0801201a

08011060 <__d2b>:
 8011060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011064:	4689      	mov	r9, r1
 8011066:	2101      	movs	r1, #1
 8011068:	ec57 6b10 	vmov	r6, r7, d0
 801106c:	4690      	mov	r8, r2
 801106e:	f7ff fccf 	bl	8010a10 <_Balloc>
 8011072:	4604      	mov	r4, r0
 8011074:	b930      	cbnz	r0, 8011084 <__d2b+0x24>
 8011076:	4602      	mov	r2, r0
 8011078:	4b25      	ldr	r3, [pc, #148]	; (8011110 <__d2b+0xb0>)
 801107a:	4826      	ldr	r0, [pc, #152]	; (8011114 <__d2b+0xb4>)
 801107c:	f240 310a 	movw	r1, #778	; 0x30a
 8011080:	f7fe fd00 	bl	800fa84 <__assert_func>
 8011084:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801108c:	bb35      	cbnz	r5, 80110dc <__d2b+0x7c>
 801108e:	2e00      	cmp	r6, #0
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	d028      	beq.n	80110e6 <__d2b+0x86>
 8011094:	4668      	mov	r0, sp
 8011096:	9600      	str	r6, [sp, #0]
 8011098:	f7ff fd82 	bl	8010ba0 <__lo0bits>
 801109c:	9900      	ldr	r1, [sp, #0]
 801109e:	b300      	cbz	r0, 80110e2 <__d2b+0x82>
 80110a0:	9a01      	ldr	r2, [sp, #4]
 80110a2:	f1c0 0320 	rsb	r3, r0, #32
 80110a6:	fa02 f303 	lsl.w	r3, r2, r3
 80110aa:	430b      	orrs	r3, r1
 80110ac:	40c2      	lsrs	r2, r0
 80110ae:	6163      	str	r3, [r4, #20]
 80110b0:	9201      	str	r2, [sp, #4]
 80110b2:	9b01      	ldr	r3, [sp, #4]
 80110b4:	61a3      	str	r3, [r4, #24]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	bf14      	ite	ne
 80110ba:	2202      	movne	r2, #2
 80110bc:	2201      	moveq	r2, #1
 80110be:	6122      	str	r2, [r4, #16]
 80110c0:	b1d5      	cbz	r5, 80110f8 <__d2b+0x98>
 80110c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110c6:	4405      	add	r5, r0
 80110c8:	f8c9 5000 	str.w	r5, [r9]
 80110cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110d0:	f8c8 0000 	str.w	r0, [r8]
 80110d4:	4620      	mov	r0, r4
 80110d6:	b003      	add	sp, #12
 80110d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110e0:	e7d5      	b.n	801108e <__d2b+0x2e>
 80110e2:	6161      	str	r1, [r4, #20]
 80110e4:	e7e5      	b.n	80110b2 <__d2b+0x52>
 80110e6:	a801      	add	r0, sp, #4
 80110e8:	f7ff fd5a 	bl	8010ba0 <__lo0bits>
 80110ec:	9b01      	ldr	r3, [sp, #4]
 80110ee:	6163      	str	r3, [r4, #20]
 80110f0:	2201      	movs	r2, #1
 80110f2:	6122      	str	r2, [r4, #16]
 80110f4:	3020      	adds	r0, #32
 80110f6:	e7e3      	b.n	80110c0 <__d2b+0x60>
 80110f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011100:	f8c9 0000 	str.w	r0, [r9]
 8011104:	6918      	ldr	r0, [r3, #16]
 8011106:	f7ff fd2b 	bl	8010b60 <__hi0bits>
 801110a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801110e:	e7df      	b.n	80110d0 <__d2b+0x70>
 8011110:	08011f9c 	.word	0x08011f9c
 8011114:	0801201a 	.word	0x0801201a

08011118 <_calloc_r>:
 8011118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801111a:	fba1 2402 	umull	r2, r4, r1, r2
 801111e:	b94c      	cbnz	r4, 8011134 <_calloc_r+0x1c>
 8011120:	4611      	mov	r1, r2
 8011122:	9201      	str	r2, [sp, #4]
 8011124:	f7fd ffa8 	bl	800f078 <_malloc_r>
 8011128:	9a01      	ldr	r2, [sp, #4]
 801112a:	4605      	mov	r5, r0
 801112c:	b930      	cbnz	r0, 801113c <_calloc_r+0x24>
 801112e:	4628      	mov	r0, r5
 8011130:	b003      	add	sp, #12
 8011132:	bd30      	pop	{r4, r5, pc}
 8011134:	220c      	movs	r2, #12
 8011136:	6002      	str	r2, [r0, #0]
 8011138:	2500      	movs	r5, #0
 801113a:	e7f8      	b.n	801112e <_calloc_r+0x16>
 801113c:	4621      	mov	r1, r4
 801113e:	f7fd ff27 	bl	800ef90 <memset>
 8011142:	e7f4      	b.n	801112e <_calloc_r+0x16>

08011144 <__sfputc_r>:
 8011144:	6893      	ldr	r3, [r2, #8]
 8011146:	3b01      	subs	r3, #1
 8011148:	2b00      	cmp	r3, #0
 801114a:	b410      	push	{r4}
 801114c:	6093      	str	r3, [r2, #8]
 801114e:	da08      	bge.n	8011162 <__sfputc_r+0x1e>
 8011150:	6994      	ldr	r4, [r2, #24]
 8011152:	42a3      	cmp	r3, r4
 8011154:	db01      	blt.n	801115a <__sfputc_r+0x16>
 8011156:	290a      	cmp	r1, #10
 8011158:	d103      	bne.n	8011162 <__sfputc_r+0x1e>
 801115a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801115e:	f000 b98f 	b.w	8011480 <__swbuf_r>
 8011162:	6813      	ldr	r3, [r2, #0]
 8011164:	1c58      	adds	r0, r3, #1
 8011166:	6010      	str	r0, [r2, #0]
 8011168:	7019      	strb	r1, [r3, #0]
 801116a:	4608      	mov	r0, r1
 801116c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011170:	4770      	bx	lr

08011172 <__sfputs_r>:
 8011172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011174:	4606      	mov	r6, r0
 8011176:	460f      	mov	r7, r1
 8011178:	4614      	mov	r4, r2
 801117a:	18d5      	adds	r5, r2, r3
 801117c:	42ac      	cmp	r4, r5
 801117e:	d101      	bne.n	8011184 <__sfputs_r+0x12>
 8011180:	2000      	movs	r0, #0
 8011182:	e007      	b.n	8011194 <__sfputs_r+0x22>
 8011184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011188:	463a      	mov	r2, r7
 801118a:	4630      	mov	r0, r6
 801118c:	f7ff ffda 	bl	8011144 <__sfputc_r>
 8011190:	1c43      	adds	r3, r0, #1
 8011192:	d1f3      	bne.n	801117c <__sfputs_r+0xa>
 8011194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011198 <_vfiprintf_r>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	460d      	mov	r5, r1
 801119e:	b09d      	sub	sp, #116	; 0x74
 80111a0:	4614      	mov	r4, r2
 80111a2:	4698      	mov	r8, r3
 80111a4:	4606      	mov	r6, r0
 80111a6:	b118      	cbz	r0, 80111b0 <_vfiprintf_r+0x18>
 80111a8:	6983      	ldr	r3, [r0, #24]
 80111aa:	b90b      	cbnz	r3, 80111b0 <_vfiprintf_r+0x18>
 80111ac:	f7ff fb5a 	bl	8010864 <__sinit>
 80111b0:	4b89      	ldr	r3, [pc, #548]	; (80113d8 <_vfiprintf_r+0x240>)
 80111b2:	429d      	cmp	r5, r3
 80111b4:	d11b      	bne.n	80111ee <_vfiprintf_r+0x56>
 80111b6:	6875      	ldr	r5, [r6, #4]
 80111b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111ba:	07d9      	lsls	r1, r3, #31
 80111bc:	d405      	bmi.n	80111ca <_vfiprintf_r+0x32>
 80111be:	89ab      	ldrh	r3, [r5, #12]
 80111c0:	059a      	lsls	r2, r3, #22
 80111c2:	d402      	bmi.n	80111ca <_vfiprintf_r+0x32>
 80111c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111c6:	f7ff fc02 	bl	80109ce <__retarget_lock_acquire_recursive>
 80111ca:	89ab      	ldrh	r3, [r5, #12]
 80111cc:	071b      	lsls	r3, r3, #28
 80111ce:	d501      	bpl.n	80111d4 <_vfiprintf_r+0x3c>
 80111d0:	692b      	ldr	r3, [r5, #16]
 80111d2:	b9eb      	cbnz	r3, 8011210 <_vfiprintf_r+0x78>
 80111d4:	4629      	mov	r1, r5
 80111d6:	4630      	mov	r0, r6
 80111d8:	f000 f9c4 	bl	8011564 <__swsetup_r>
 80111dc:	b1c0      	cbz	r0, 8011210 <_vfiprintf_r+0x78>
 80111de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111e0:	07dc      	lsls	r4, r3, #31
 80111e2:	d50e      	bpl.n	8011202 <_vfiprintf_r+0x6a>
 80111e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e8:	b01d      	add	sp, #116	; 0x74
 80111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ee:	4b7b      	ldr	r3, [pc, #492]	; (80113dc <_vfiprintf_r+0x244>)
 80111f0:	429d      	cmp	r5, r3
 80111f2:	d101      	bne.n	80111f8 <_vfiprintf_r+0x60>
 80111f4:	68b5      	ldr	r5, [r6, #8]
 80111f6:	e7df      	b.n	80111b8 <_vfiprintf_r+0x20>
 80111f8:	4b79      	ldr	r3, [pc, #484]	; (80113e0 <_vfiprintf_r+0x248>)
 80111fa:	429d      	cmp	r5, r3
 80111fc:	bf08      	it	eq
 80111fe:	68f5      	ldreq	r5, [r6, #12]
 8011200:	e7da      	b.n	80111b8 <_vfiprintf_r+0x20>
 8011202:	89ab      	ldrh	r3, [r5, #12]
 8011204:	0598      	lsls	r0, r3, #22
 8011206:	d4ed      	bmi.n	80111e4 <_vfiprintf_r+0x4c>
 8011208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801120a:	f7ff fbe1 	bl	80109d0 <__retarget_lock_release_recursive>
 801120e:	e7e9      	b.n	80111e4 <_vfiprintf_r+0x4c>
 8011210:	2300      	movs	r3, #0
 8011212:	9309      	str	r3, [sp, #36]	; 0x24
 8011214:	2320      	movs	r3, #32
 8011216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801121a:	f8cd 800c 	str.w	r8, [sp, #12]
 801121e:	2330      	movs	r3, #48	; 0x30
 8011220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113e4 <_vfiprintf_r+0x24c>
 8011224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011228:	f04f 0901 	mov.w	r9, #1
 801122c:	4623      	mov	r3, r4
 801122e:	469a      	mov	sl, r3
 8011230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011234:	b10a      	cbz	r2, 801123a <_vfiprintf_r+0xa2>
 8011236:	2a25      	cmp	r2, #37	; 0x25
 8011238:	d1f9      	bne.n	801122e <_vfiprintf_r+0x96>
 801123a:	ebba 0b04 	subs.w	fp, sl, r4
 801123e:	d00b      	beq.n	8011258 <_vfiprintf_r+0xc0>
 8011240:	465b      	mov	r3, fp
 8011242:	4622      	mov	r2, r4
 8011244:	4629      	mov	r1, r5
 8011246:	4630      	mov	r0, r6
 8011248:	f7ff ff93 	bl	8011172 <__sfputs_r>
 801124c:	3001      	adds	r0, #1
 801124e:	f000 80aa 	beq.w	80113a6 <_vfiprintf_r+0x20e>
 8011252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011254:	445a      	add	r2, fp
 8011256:	9209      	str	r2, [sp, #36]	; 0x24
 8011258:	f89a 3000 	ldrb.w	r3, [sl]
 801125c:	2b00      	cmp	r3, #0
 801125e:	f000 80a2 	beq.w	80113a6 <_vfiprintf_r+0x20e>
 8011262:	2300      	movs	r3, #0
 8011264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801126c:	f10a 0a01 	add.w	sl, sl, #1
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	9307      	str	r3, [sp, #28]
 8011274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011278:	931a      	str	r3, [sp, #104]	; 0x68
 801127a:	4654      	mov	r4, sl
 801127c:	2205      	movs	r2, #5
 801127e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011282:	4858      	ldr	r0, [pc, #352]	; (80113e4 <_vfiprintf_r+0x24c>)
 8011284:	f7ee ffc4 	bl	8000210 <memchr>
 8011288:	9a04      	ldr	r2, [sp, #16]
 801128a:	b9d8      	cbnz	r0, 80112c4 <_vfiprintf_r+0x12c>
 801128c:	06d1      	lsls	r1, r2, #27
 801128e:	bf44      	itt	mi
 8011290:	2320      	movmi	r3, #32
 8011292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011296:	0713      	lsls	r3, r2, #28
 8011298:	bf44      	itt	mi
 801129a:	232b      	movmi	r3, #43	; 0x2b
 801129c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112a0:	f89a 3000 	ldrb.w	r3, [sl]
 80112a4:	2b2a      	cmp	r3, #42	; 0x2a
 80112a6:	d015      	beq.n	80112d4 <_vfiprintf_r+0x13c>
 80112a8:	9a07      	ldr	r2, [sp, #28]
 80112aa:	4654      	mov	r4, sl
 80112ac:	2000      	movs	r0, #0
 80112ae:	f04f 0c0a 	mov.w	ip, #10
 80112b2:	4621      	mov	r1, r4
 80112b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112b8:	3b30      	subs	r3, #48	; 0x30
 80112ba:	2b09      	cmp	r3, #9
 80112bc:	d94e      	bls.n	801135c <_vfiprintf_r+0x1c4>
 80112be:	b1b0      	cbz	r0, 80112ee <_vfiprintf_r+0x156>
 80112c0:	9207      	str	r2, [sp, #28]
 80112c2:	e014      	b.n	80112ee <_vfiprintf_r+0x156>
 80112c4:	eba0 0308 	sub.w	r3, r0, r8
 80112c8:	fa09 f303 	lsl.w	r3, r9, r3
 80112cc:	4313      	orrs	r3, r2
 80112ce:	9304      	str	r3, [sp, #16]
 80112d0:	46a2      	mov	sl, r4
 80112d2:	e7d2      	b.n	801127a <_vfiprintf_r+0xe2>
 80112d4:	9b03      	ldr	r3, [sp, #12]
 80112d6:	1d19      	adds	r1, r3, #4
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	9103      	str	r1, [sp, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	bfbb      	ittet	lt
 80112e0:	425b      	neglt	r3, r3
 80112e2:	f042 0202 	orrlt.w	r2, r2, #2
 80112e6:	9307      	strge	r3, [sp, #28]
 80112e8:	9307      	strlt	r3, [sp, #28]
 80112ea:	bfb8      	it	lt
 80112ec:	9204      	strlt	r2, [sp, #16]
 80112ee:	7823      	ldrb	r3, [r4, #0]
 80112f0:	2b2e      	cmp	r3, #46	; 0x2e
 80112f2:	d10c      	bne.n	801130e <_vfiprintf_r+0x176>
 80112f4:	7863      	ldrb	r3, [r4, #1]
 80112f6:	2b2a      	cmp	r3, #42	; 0x2a
 80112f8:	d135      	bne.n	8011366 <_vfiprintf_r+0x1ce>
 80112fa:	9b03      	ldr	r3, [sp, #12]
 80112fc:	1d1a      	adds	r2, r3, #4
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	9203      	str	r2, [sp, #12]
 8011302:	2b00      	cmp	r3, #0
 8011304:	bfb8      	it	lt
 8011306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801130a:	3402      	adds	r4, #2
 801130c:	9305      	str	r3, [sp, #20]
 801130e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113f4 <_vfiprintf_r+0x25c>
 8011312:	7821      	ldrb	r1, [r4, #0]
 8011314:	2203      	movs	r2, #3
 8011316:	4650      	mov	r0, sl
 8011318:	f7ee ff7a 	bl	8000210 <memchr>
 801131c:	b140      	cbz	r0, 8011330 <_vfiprintf_r+0x198>
 801131e:	2340      	movs	r3, #64	; 0x40
 8011320:	eba0 000a 	sub.w	r0, r0, sl
 8011324:	fa03 f000 	lsl.w	r0, r3, r0
 8011328:	9b04      	ldr	r3, [sp, #16]
 801132a:	4303      	orrs	r3, r0
 801132c:	3401      	adds	r4, #1
 801132e:	9304      	str	r3, [sp, #16]
 8011330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011334:	482c      	ldr	r0, [pc, #176]	; (80113e8 <_vfiprintf_r+0x250>)
 8011336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801133a:	2206      	movs	r2, #6
 801133c:	f7ee ff68 	bl	8000210 <memchr>
 8011340:	2800      	cmp	r0, #0
 8011342:	d03f      	beq.n	80113c4 <_vfiprintf_r+0x22c>
 8011344:	4b29      	ldr	r3, [pc, #164]	; (80113ec <_vfiprintf_r+0x254>)
 8011346:	bb1b      	cbnz	r3, 8011390 <_vfiprintf_r+0x1f8>
 8011348:	9b03      	ldr	r3, [sp, #12]
 801134a:	3307      	adds	r3, #7
 801134c:	f023 0307 	bic.w	r3, r3, #7
 8011350:	3308      	adds	r3, #8
 8011352:	9303      	str	r3, [sp, #12]
 8011354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011356:	443b      	add	r3, r7
 8011358:	9309      	str	r3, [sp, #36]	; 0x24
 801135a:	e767      	b.n	801122c <_vfiprintf_r+0x94>
 801135c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011360:	460c      	mov	r4, r1
 8011362:	2001      	movs	r0, #1
 8011364:	e7a5      	b.n	80112b2 <_vfiprintf_r+0x11a>
 8011366:	2300      	movs	r3, #0
 8011368:	3401      	adds	r4, #1
 801136a:	9305      	str	r3, [sp, #20]
 801136c:	4619      	mov	r1, r3
 801136e:	f04f 0c0a 	mov.w	ip, #10
 8011372:	4620      	mov	r0, r4
 8011374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011378:	3a30      	subs	r2, #48	; 0x30
 801137a:	2a09      	cmp	r2, #9
 801137c:	d903      	bls.n	8011386 <_vfiprintf_r+0x1ee>
 801137e:	2b00      	cmp	r3, #0
 8011380:	d0c5      	beq.n	801130e <_vfiprintf_r+0x176>
 8011382:	9105      	str	r1, [sp, #20]
 8011384:	e7c3      	b.n	801130e <_vfiprintf_r+0x176>
 8011386:	fb0c 2101 	mla	r1, ip, r1, r2
 801138a:	4604      	mov	r4, r0
 801138c:	2301      	movs	r3, #1
 801138e:	e7f0      	b.n	8011372 <_vfiprintf_r+0x1da>
 8011390:	ab03      	add	r3, sp, #12
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	462a      	mov	r2, r5
 8011396:	4b16      	ldr	r3, [pc, #88]	; (80113f0 <_vfiprintf_r+0x258>)
 8011398:	a904      	add	r1, sp, #16
 801139a:	4630      	mov	r0, r6
 801139c:	f7fd ff80 	bl	800f2a0 <_printf_float>
 80113a0:	4607      	mov	r7, r0
 80113a2:	1c78      	adds	r0, r7, #1
 80113a4:	d1d6      	bne.n	8011354 <_vfiprintf_r+0x1bc>
 80113a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113a8:	07d9      	lsls	r1, r3, #31
 80113aa:	d405      	bmi.n	80113b8 <_vfiprintf_r+0x220>
 80113ac:	89ab      	ldrh	r3, [r5, #12]
 80113ae:	059a      	lsls	r2, r3, #22
 80113b0:	d402      	bmi.n	80113b8 <_vfiprintf_r+0x220>
 80113b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113b4:	f7ff fb0c 	bl	80109d0 <__retarget_lock_release_recursive>
 80113b8:	89ab      	ldrh	r3, [r5, #12]
 80113ba:	065b      	lsls	r3, r3, #25
 80113bc:	f53f af12 	bmi.w	80111e4 <_vfiprintf_r+0x4c>
 80113c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113c2:	e711      	b.n	80111e8 <_vfiprintf_r+0x50>
 80113c4:	ab03      	add	r3, sp, #12
 80113c6:	9300      	str	r3, [sp, #0]
 80113c8:	462a      	mov	r2, r5
 80113ca:	4b09      	ldr	r3, [pc, #36]	; (80113f0 <_vfiprintf_r+0x258>)
 80113cc:	a904      	add	r1, sp, #16
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7fe fa0a 	bl	800f7e8 <_printf_i>
 80113d4:	e7e4      	b.n	80113a0 <_vfiprintf_r+0x208>
 80113d6:	bf00      	nop
 80113d8:	08011fd0 	.word	0x08011fd0
 80113dc:	08011ff0 	.word	0x08011ff0
 80113e0:	08011fb0 	.word	0x08011fb0
 80113e4:	08012174 	.word	0x08012174
 80113e8:	0801217e 	.word	0x0801217e
 80113ec:	0800f2a1 	.word	0x0800f2a1
 80113f0:	08011173 	.word	0x08011173
 80113f4:	0801217a 	.word	0x0801217a

080113f8 <__sread>:
 80113f8:	b510      	push	{r4, lr}
 80113fa:	460c      	mov	r4, r1
 80113fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011400:	f000 fa70 	bl	80118e4 <_read_r>
 8011404:	2800      	cmp	r0, #0
 8011406:	bfab      	itete	ge
 8011408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801140a:	89a3      	ldrhlt	r3, [r4, #12]
 801140c:	181b      	addge	r3, r3, r0
 801140e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011412:	bfac      	ite	ge
 8011414:	6563      	strge	r3, [r4, #84]	; 0x54
 8011416:	81a3      	strhlt	r3, [r4, #12]
 8011418:	bd10      	pop	{r4, pc}

0801141a <__swrite>:
 801141a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801141e:	461f      	mov	r7, r3
 8011420:	898b      	ldrh	r3, [r1, #12]
 8011422:	05db      	lsls	r3, r3, #23
 8011424:	4605      	mov	r5, r0
 8011426:	460c      	mov	r4, r1
 8011428:	4616      	mov	r6, r2
 801142a:	d505      	bpl.n	8011438 <__swrite+0x1e>
 801142c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011430:	2302      	movs	r3, #2
 8011432:	2200      	movs	r2, #0
 8011434:	f000 f9de 	bl	80117f4 <_lseek_r>
 8011438:	89a3      	ldrh	r3, [r4, #12]
 801143a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801143e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011442:	81a3      	strh	r3, [r4, #12]
 8011444:	4632      	mov	r2, r6
 8011446:	463b      	mov	r3, r7
 8011448:	4628      	mov	r0, r5
 801144a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801144e:	f000 b877 	b.w	8011540 <_write_r>

08011452 <__sseek>:
 8011452:	b510      	push	{r4, lr}
 8011454:	460c      	mov	r4, r1
 8011456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801145a:	f000 f9cb 	bl	80117f4 <_lseek_r>
 801145e:	1c43      	adds	r3, r0, #1
 8011460:	89a3      	ldrh	r3, [r4, #12]
 8011462:	bf15      	itete	ne
 8011464:	6560      	strne	r0, [r4, #84]	; 0x54
 8011466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801146a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801146e:	81a3      	strheq	r3, [r4, #12]
 8011470:	bf18      	it	ne
 8011472:	81a3      	strhne	r3, [r4, #12]
 8011474:	bd10      	pop	{r4, pc}

08011476 <__sclose>:
 8011476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801147a:	f000 b8e9 	b.w	8011650 <_close_r>
	...

08011480 <__swbuf_r>:
 8011480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011482:	460e      	mov	r6, r1
 8011484:	4614      	mov	r4, r2
 8011486:	4605      	mov	r5, r0
 8011488:	b118      	cbz	r0, 8011492 <__swbuf_r+0x12>
 801148a:	6983      	ldr	r3, [r0, #24]
 801148c:	b90b      	cbnz	r3, 8011492 <__swbuf_r+0x12>
 801148e:	f7ff f9e9 	bl	8010864 <__sinit>
 8011492:	4b21      	ldr	r3, [pc, #132]	; (8011518 <__swbuf_r+0x98>)
 8011494:	429c      	cmp	r4, r3
 8011496:	d12b      	bne.n	80114f0 <__swbuf_r+0x70>
 8011498:	686c      	ldr	r4, [r5, #4]
 801149a:	69a3      	ldr	r3, [r4, #24]
 801149c:	60a3      	str	r3, [r4, #8]
 801149e:	89a3      	ldrh	r3, [r4, #12]
 80114a0:	071a      	lsls	r2, r3, #28
 80114a2:	d52f      	bpl.n	8011504 <__swbuf_r+0x84>
 80114a4:	6923      	ldr	r3, [r4, #16]
 80114a6:	b36b      	cbz	r3, 8011504 <__swbuf_r+0x84>
 80114a8:	6923      	ldr	r3, [r4, #16]
 80114aa:	6820      	ldr	r0, [r4, #0]
 80114ac:	1ac0      	subs	r0, r0, r3
 80114ae:	6963      	ldr	r3, [r4, #20]
 80114b0:	b2f6      	uxtb	r6, r6
 80114b2:	4283      	cmp	r3, r0
 80114b4:	4637      	mov	r7, r6
 80114b6:	dc04      	bgt.n	80114c2 <__swbuf_r+0x42>
 80114b8:	4621      	mov	r1, r4
 80114ba:	4628      	mov	r0, r5
 80114bc:	f000 f95e 	bl	801177c <_fflush_r>
 80114c0:	bb30      	cbnz	r0, 8011510 <__swbuf_r+0x90>
 80114c2:	68a3      	ldr	r3, [r4, #8]
 80114c4:	3b01      	subs	r3, #1
 80114c6:	60a3      	str	r3, [r4, #8]
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	1c5a      	adds	r2, r3, #1
 80114cc:	6022      	str	r2, [r4, #0]
 80114ce:	701e      	strb	r6, [r3, #0]
 80114d0:	6963      	ldr	r3, [r4, #20]
 80114d2:	3001      	adds	r0, #1
 80114d4:	4283      	cmp	r3, r0
 80114d6:	d004      	beq.n	80114e2 <__swbuf_r+0x62>
 80114d8:	89a3      	ldrh	r3, [r4, #12]
 80114da:	07db      	lsls	r3, r3, #31
 80114dc:	d506      	bpl.n	80114ec <__swbuf_r+0x6c>
 80114de:	2e0a      	cmp	r6, #10
 80114e0:	d104      	bne.n	80114ec <__swbuf_r+0x6c>
 80114e2:	4621      	mov	r1, r4
 80114e4:	4628      	mov	r0, r5
 80114e6:	f000 f949 	bl	801177c <_fflush_r>
 80114ea:	b988      	cbnz	r0, 8011510 <__swbuf_r+0x90>
 80114ec:	4638      	mov	r0, r7
 80114ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f0:	4b0a      	ldr	r3, [pc, #40]	; (801151c <__swbuf_r+0x9c>)
 80114f2:	429c      	cmp	r4, r3
 80114f4:	d101      	bne.n	80114fa <__swbuf_r+0x7a>
 80114f6:	68ac      	ldr	r4, [r5, #8]
 80114f8:	e7cf      	b.n	801149a <__swbuf_r+0x1a>
 80114fa:	4b09      	ldr	r3, [pc, #36]	; (8011520 <__swbuf_r+0xa0>)
 80114fc:	429c      	cmp	r4, r3
 80114fe:	bf08      	it	eq
 8011500:	68ec      	ldreq	r4, [r5, #12]
 8011502:	e7ca      	b.n	801149a <__swbuf_r+0x1a>
 8011504:	4621      	mov	r1, r4
 8011506:	4628      	mov	r0, r5
 8011508:	f000 f82c 	bl	8011564 <__swsetup_r>
 801150c:	2800      	cmp	r0, #0
 801150e:	d0cb      	beq.n	80114a8 <__swbuf_r+0x28>
 8011510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011514:	e7ea      	b.n	80114ec <__swbuf_r+0x6c>
 8011516:	bf00      	nop
 8011518:	08011fd0 	.word	0x08011fd0
 801151c:	08011ff0 	.word	0x08011ff0
 8011520:	08011fb0 	.word	0x08011fb0

08011524 <__ascii_wctomb>:
 8011524:	b149      	cbz	r1, 801153a <__ascii_wctomb+0x16>
 8011526:	2aff      	cmp	r2, #255	; 0xff
 8011528:	bf85      	ittet	hi
 801152a:	238a      	movhi	r3, #138	; 0x8a
 801152c:	6003      	strhi	r3, [r0, #0]
 801152e:	700a      	strbls	r2, [r1, #0]
 8011530:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011534:	bf98      	it	ls
 8011536:	2001      	movls	r0, #1
 8011538:	4770      	bx	lr
 801153a:	4608      	mov	r0, r1
 801153c:	4770      	bx	lr
	...

08011540 <_write_r>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	4d07      	ldr	r5, [pc, #28]	; (8011560 <_write_r+0x20>)
 8011544:	4604      	mov	r4, r0
 8011546:	4608      	mov	r0, r1
 8011548:	4611      	mov	r1, r2
 801154a:	2200      	movs	r2, #0
 801154c:	602a      	str	r2, [r5, #0]
 801154e:	461a      	mov	r2, r3
 8011550:	f000 fa86 	bl	8011a60 <_write>
 8011554:	1c43      	adds	r3, r0, #1
 8011556:	d102      	bne.n	801155e <_write_r+0x1e>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	b103      	cbz	r3, 801155e <_write_r+0x1e>
 801155c:	6023      	str	r3, [r4, #0]
 801155e:	bd38      	pop	{r3, r4, r5, pc}
 8011560:	200028e0 	.word	0x200028e0

08011564 <__swsetup_r>:
 8011564:	4b32      	ldr	r3, [pc, #200]	; (8011630 <__swsetup_r+0xcc>)
 8011566:	b570      	push	{r4, r5, r6, lr}
 8011568:	681d      	ldr	r5, [r3, #0]
 801156a:	4606      	mov	r6, r0
 801156c:	460c      	mov	r4, r1
 801156e:	b125      	cbz	r5, 801157a <__swsetup_r+0x16>
 8011570:	69ab      	ldr	r3, [r5, #24]
 8011572:	b913      	cbnz	r3, 801157a <__swsetup_r+0x16>
 8011574:	4628      	mov	r0, r5
 8011576:	f7ff f975 	bl	8010864 <__sinit>
 801157a:	4b2e      	ldr	r3, [pc, #184]	; (8011634 <__swsetup_r+0xd0>)
 801157c:	429c      	cmp	r4, r3
 801157e:	d10f      	bne.n	80115a0 <__swsetup_r+0x3c>
 8011580:	686c      	ldr	r4, [r5, #4]
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011588:	0719      	lsls	r1, r3, #28
 801158a:	d42c      	bmi.n	80115e6 <__swsetup_r+0x82>
 801158c:	06dd      	lsls	r5, r3, #27
 801158e:	d411      	bmi.n	80115b4 <__swsetup_r+0x50>
 8011590:	2309      	movs	r3, #9
 8011592:	6033      	str	r3, [r6, #0]
 8011594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801159e:	e03e      	b.n	801161e <__swsetup_r+0xba>
 80115a0:	4b25      	ldr	r3, [pc, #148]	; (8011638 <__swsetup_r+0xd4>)
 80115a2:	429c      	cmp	r4, r3
 80115a4:	d101      	bne.n	80115aa <__swsetup_r+0x46>
 80115a6:	68ac      	ldr	r4, [r5, #8]
 80115a8:	e7eb      	b.n	8011582 <__swsetup_r+0x1e>
 80115aa:	4b24      	ldr	r3, [pc, #144]	; (801163c <__swsetup_r+0xd8>)
 80115ac:	429c      	cmp	r4, r3
 80115ae:	bf08      	it	eq
 80115b0:	68ec      	ldreq	r4, [r5, #12]
 80115b2:	e7e6      	b.n	8011582 <__swsetup_r+0x1e>
 80115b4:	0758      	lsls	r0, r3, #29
 80115b6:	d512      	bpl.n	80115de <__swsetup_r+0x7a>
 80115b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115ba:	b141      	cbz	r1, 80115ce <__swsetup_r+0x6a>
 80115bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115c0:	4299      	cmp	r1, r3
 80115c2:	d002      	beq.n	80115ca <__swsetup_r+0x66>
 80115c4:	4630      	mov	r0, r6
 80115c6:	f7fd fceb 	bl	800efa0 <_free_r>
 80115ca:	2300      	movs	r3, #0
 80115cc:	6363      	str	r3, [r4, #52]	; 0x34
 80115ce:	89a3      	ldrh	r3, [r4, #12]
 80115d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	2300      	movs	r3, #0
 80115d8:	6063      	str	r3, [r4, #4]
 80115da:	6923      	ldr	r3, [r4, #16]
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	f043 0308 	orr.w	r3, r3, #8
 80115e4:	81a3      	strh	r3, [r4, #12]
 80115e6:	6923      	ldr	r3, [r4, #16]
 80115e8:	b94b      	cbnz	r3, 80115fe <__swsetup_r+0x9a>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115f4:	d003      	beq.n	80115fe <__swsetup_r+0x9a>
 80115f6:	4621      	mov	r1, r4
 80115f8:	4630      	mov	r0, r6
 80115fa:	f000 f933 	bl	8011864 <__smakebuf_r>
 80115fe:	89a0      	ldrh	r0, [r4, #12]
 8011600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011604:	f010 0301 	ands.w	r3, r0, #1
 8011608:	d00a      	beq.n	8011620 <__swsetup_r+0xbc>
 801160a:	2300      	movs	r3, #0
 801160c:	60a3      	str	r3, [r4, #8]
 801160e:	6963      	ldr	r3, [r4, #20]
 8011610:	425b      	negs	r3, r3
 8011612:	61a3      	str	r3, [r4, #24]
 8011614:	6923      	ldr	r3, [r4, #16]
 8011616:	b943      	cbnz	r3, 801162a <__swsetup_r+0xc6>
 8011618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801161c:	d1ba      	bne.n	8011594 <__swsetup_r+0x30>
 801161e:	bd70      	pop	{r4, r5, r6, pc}
 8011620:	0781      	lsls	r1, r0, #30
 8011622:	bf58      	it	pl
 8011624:	6963      	ldrpl	r3, [r4, #20]
 8011626:	60a3      	str	r3, [r4, #8]
 8011628:	e7f4      	b.n	8011614 <__swsetup_r+0xb0>
 801162a:	2000      	movs	r0, #0
 801162c:	e7f7      	b.n	801161e <__swsetup_r+0xba>
 801162e:	bf00      	nop
 8011630:	20000184 	.word	0x20000184
 8011634:	08011fd0 	.word	0x08011fd0
 8011638:	08011ff0 	.word	0x08011ff0
 801163c:	08011fb0 	.word	0x08011fb0

08011640 <abort>:
 8011640:	b508      	push	{r3, lr}
 8011642:	2006      	movs	r0, #6
 8011644:	f000 f988 	bl	8011958 <raise>
 8011648:	2001      	movs	r0, #1
 801164a:	f000 fa11 	bl	8011a70 <_exit>
	...

08011650 <_close_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4d06      	ldr	r5, [pc, #24]	; (801166c <_close_r+0x1c>)
 8011654:	2300      	movs	r3, #0
 8011656:	4604      	mov	r4, r0
 8011658:	4608      	mov	r0, r1
 801165a:	602b      	str	r3, [r5, #0]
 801165c:	f000 f9ba 	bl	80119d4 <_close>
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	d102      	bne.n	801166a <_close_r+0x1a>
 8011664:	682b      	ldr	r3, [r5, #0]
 8011666:	b103      	cbz	r3, 801166a <_close_r+0x1a>
 8011668:	6023      	str	r3, [r4, #0]
 801166a:	bd38      	pop	{r3, r4, r5, pc}
 801166c:	200028e0 	.word	0x200028e0

08011670 <__sflush_r>:
 8011670:	898a      	ldrh	r2, [r1, #12]
 8011672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011676:	4605      	mov	r5, r0
 8011678:	0710      	lsls	r0, r2, #28
 801167a:	460c      	mov	r4, r1
 801167c:	d458      	bmi.n	8011730 <__sflush_r+0xc0>
 801167e:	684b      	ldr	r3, [r1, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	dc05      	bgt.n	8011690 <__sflush_r+0x20>
 8011684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011686:	2b00      	cmp	r3, #0
 8011688:	dc02      	bgt.n	8011690 <__sflush_r+0x20>
 801168a:	2000      	movs	r0, #0
 801168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011692:	2e00      	cmp	r6, #0
 8011694:	d0f9      	beq.n	801168a <__sflush_r+0x1a>
 8011696:	2300      	movs	r3, #0
 8011698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801169c:	682f      	ldr	r7, [r5, #0]
 801169e:	602b      	str	r3, [r5, #0]
 80116a0:	d032      	beq.n	8011708 <__sflush_r+0x98>
 80116a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	075a      	lsls	r2, r3, #29
 80116a8:	d505      	bpl.n	80116b6 <__sflush_r+0x46>
 80116aa:	6863      	ldr	r3, [r4, #4]
 80116ac:	1ac0      	subs	r0, r0, r3
 80116ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116b0:	b10b      	cbz	r3, 80116b6 <__sflush_r+0x46>
 80116b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116b4:	1ac0      	subs	r0, r0, r3
 80116b6:	2300      	movs	r3, #0
 80116b8:	4602      	mov	r2, r0
 80116ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116bc:	6a21      	ldr	r1, [r4, #32]
 80116be:	4628      	mov	r0, r5
 80116c0:	47b0      	blx	r6
 80116c2:	1c43      	adds	r3, r0, #1
 80116c4:	89a3      	ldrh	r3, [r4, #12]
 80116c6:	d106      	bne.n	80116d6 <__sflush_r+0x66>
 80116c8:	6829      	ldr	r1, [r5, #0]
 80116ca:	291d      	cmp	r1, #29
 80116cc:	d82c      	bhi.n	8011728 <__sflush_r+0xb8>
 80116ce:	4a2a      	ldr	r2, [pc, #168]	; (8011778 <__sflush_r+0x108>)
 80116d0:	40ca      	lsrs	r2, r1
 80116d2:	07d6      	lsls	r6, r2, #31
 80116d4:	d528      	bpl.n	8011728 <__sflush_r+0xb8>
 80116d6:	2200      	movs	r2, #0
 80116d8:	6062      	str	r2, [r4, #4]
 80116da:	04d9      	lsls	r1, r3, #19
 80116dc:	6922      	ldr	r2, [r4, #16]
 80116de:	6022      	str	r2, [r4, #0]
 80116e0:	d504      	bpl.n	80116ec <__sflush_r+0x7c>
 80116e2:	1c42      	adds	r2, r0, #1
 80116e4:	d101      	bne.n	80116ea <__sflush_r+0x7a>
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	b903      	cbnz	r3, 80116ec <__sflush_r+0x7c>
 80116ea:	6560      	str	r0, [r4, #84]	; 0x54
 80116ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116ee:	602f      	str	r7, [r5, #0]
 80116f0:	2900      	cmp	r1, #0
 80116f2:	d0ca      	beq.n	801168a <__sflush_r+0x1a>
 80116f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116f8:	4299      	cmp	r1, r3
 80116fa:	d002      	beq.n	8011702 <__sflush_r+0x92>
 80116fc:	4628      	mov	r0, r5
 80116fe:	f7fd fc4f 	bl	800efa0 <_free_r>
 8011702:	2000      	movs	r0, #0
 8011704:	6360      	str	r0, [r4, #52]	; 0x34
 8011706:	e7c1      	b.n	801168c <__sflush_r+0x1c>
 8011708:	6a21      	ldr	r1, [r4, #32]
 801170a:	2301      	movs	r3, #1
 801170c:	4628      	mov	r0, r5
 801170e:	47b0      	blx	r6
 8011710:	1c41      	adds	r1, r0, #1
 8011712:	d1c7      	bne.n	80116a4 <__sflush_r+0x34>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0c4      	beq.n	80116a4 <__sflush_r+0x34>
 801171a:	2b1d      	cmp	r3, #29
 801171c:	d001      	beq.n	8011722 <__sflush_r+0xb2>
 801171e:	2b16      	cmp	r3, #22
 8011720:	d101      	bne.n	8011726 <__sflush_r+0xb6>
 8011722:	602f      	str	r7, [r5, #0]
 8011724:	e7b1      	b.n	801168a <__sflush_r+0x1a>
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801172c:	81a3      	strh	r3, [r4, #12]
 801172e:	e7ad      	b.n	801168c <__sflush_r+0x1c>
 8011730:	690f      	ldr	r7, [r1, #16]
 8011732:	2f00      	cmp	r7, #0
 8011734:	d0a9      	beq.n	801168a <__sflush_r+0x1a>
 8011736:	0793      	lsls	r3, r2, #30
 8011738:	680e      	ldr	r6, [r1, #0]
 801173a:	bf08      	it	eq
 801173c:	694b      	ldreq	r3, [r1, #20]
 801173e:	600f      	str	r7, [r1, #0]
 8011740:	bf18      	it	ne
 8011742:	2300      	movne	r3, #0
 8011744:	eba6 0807 	sub.w	r8, r6, r7
 8011748:	608b      	str	r3, [r1, #8]
 801174a:	f1b8 0f00 	cmp.w	r8, #0
 801174e:	dd9c      	ble.n	801168a <__sflush_r+0x1a>
 8011750:	6a21      	ldr	r1, [r4, #32]
 8011752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011754:	4643      	mov	r3, r8
 8011756:	463a      	mov	r2, r7
 8011758:	4628      	mov	r0, r5
 801175a:	47b0      	blx	r6
 801175c:	2800      	cmp	r0, #0
 801175e:	dc06      	bgt.n	801176e <__sflush_r+0xfe>
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011766:	81a3      	strh	r3, [r4, #12]
 8011768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801176c:	e78e      	b.n	801168c <__sflush_r+0x1c>
 801176e:	4407      	add	r7, r0
 8011770:	eba8 0800 	sub.w	r8, r8, r0
 8011774:	e7e9      	b.n	801174a <__sflush_r+0xda>
 8011776:	bf00      	nop
 8011778:	20400001 	.word	0x20400001

0801177c <_fflush_r>:
 801177c:	b538      	push	{r3, r4, r5, lr}
 801177e:	690b      	ldr	r3, [r1, #16]
 8011780:	4605      	mov	r5, r0
 8011782:	460c      	mov	r4, r1
 8011784:	b913      	cbnz	r3, 801178c <_fflush_r+0x10>
 8011786:	2500      	movs	r5, #0
 8011788:	4628      	mov	r0, r5
 801178a:	bd38      	pop	{r3, r4, r5, pc}
 801178c:	b118      	cbz	r0, 8011796 <_fflush_r+0x1a>
 801178e:	6983      	ldr	r3, [r0, #24]
 8011790:	b90b      	cbnz	r3, 8011796 <_fflush_r+0x1a>
 8011792:	f7ff f867 	bl	8010864 <__sinit>
 8011796:	4b14      	ldr	r3, [pc, #80]	; (80117e8 <_fflush_r+0x6c>)
 8011798:	429c      	cmp	r4, r3
 801179a:	d11b      	bne.n	80117d4 <_fflush_r+0x58>
 801179c:	686c      	ldr	r4, [r5, #4]
 801179e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d0ef      	beq.n	8011786 <_fflush_r+0xa>
 80117a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117a8:	07d0      	lsls	r0, r2, #31
 80117aa:	d404      	bmi.n	80117b6 <_fflush_r+0x3a>
 80117ac:	0599      	lsls	r1, r3, #22
 80117ae:	d402      	bmi.n	80117b6 <_fflush_r+0x3a>
 80117b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117b2:	f7ff f90c 	bl	80109ce <__retarget_lock_acquire_recursive>
 80117b6:	4628      	mov	r0, r5
 80117b8:	4621      	mov	r1, r4
 80117ba:	f7ff ff59 	bl	8011670 <__sflush_r>
 80117be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117c0:	07da      	lsls	r2, r3, #31
 80117c2:	4605      	mov	r5, r0
 80117c4:	d4e0      	bmi.n	8011788 <_fflush_r+0xc>
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	059b      	lsls	r3, r3, #22
 80117ca:	d4dd      	bmi.n	8011788 <_fflush_r+0xc>
 80117cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117ce:	f7ff f8ff 	bl	80109d0 <__retarget_lock_release_recursive>
 80117d2:	e7d9      	b.n	8011788 <_fflush_r+0xc>
 80117d4:	4b05      	ldr	r3, [pc, #20]	; (80117ec <_fflush_r+0x70>)
 80117d6:	429c      	cmp	r4, r3
 80117d8:	d101      	bne.n	80117de <_fflush_r+0x62>
 80117da:	68ac      	ldr	r4, [r5, #8]
 80117dc:	e7df      	b.n	801179e <_fflush_r+0x22>
 80117de:	4b04      	ldr	r3, [pc, #16]	; (80117f0 <_fflush_r+0x74>)
 80117e0:	429c      	cmp	r4, r3
 80117e2:	bf08      	it	eq
 80117e4:	68ec      	ldreq	r4, [r5, #12]
 80117e6:	e7da      	b.n	801179e <_fflush_r+0x22>
 80117e8:	08011fd0 	.word	0x08011fd0
 80117ec:	08011ff0 	.word	0x08011ff0
 80117f0:	08011fb0 	.word	0x08011fb0

080117f4 <_lseek_r>:
 80117f4:	b538      	push	{r3, r4, r5, lr}
 80117f6:	4d07      	ldr	r5, [pc, #28]	; (8011814 <_lseek_r+0x20>)
 80117f8:	4604      	mov	r4, r0
 80117fa:	4608      	mov	r0, r1
 80117fc:	4611      	mov	r1, r2
 80117fe:	2200      	movs	r2, #0
 8011800:	602a      	str	r2, [r5, #0]
 8011802:	461a      	mov	r2, r3
 8011804:	f000 f90e 	bl	8011a24 <_lseek>
 8011808:	1c43      	adds	r3, r0, #1
 801180a:	d102      	bne.n	8011812 <_lseek_r+0x1e>
 801180c:	682b      	ldr	r3, [r5, #0]
 801180e:	b103      	cbz	r3, 8011812 <_lseek_r+0x1e>
 8011810:	6023      	str	r3, [r4, #0]
 8011812:	bd38      	pop	{r3, r4, r5, pc}
 8011814:	200028e0 	.word	0x200028e0

08011818 <__swhatbuf_r>:
 8011818:	b570      	push	{r4, r5, r6, lr}
 801181a:	460e      	mov	r6, r1
 801181c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011820:	2900      	cmp	r1, #0
 8011822:	b096      	sub	sp, #88	; 0x58
 8011824:	4614      	mov	r4, r2
 8011826:	461d      	mov	r5, r3
 8011828:	da08      	bge.n	801183c <__swhatbuf_r+0x24>
 801182a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801182e:	2200      	movs	r2, #0
 8011830:	602a      	str	r2, [r5, #0]
 8011832:	061a      	lsls	r2, r3, #24
 8011834:	d410      	bmi.n	8011858 <__swhatbuf_r+0x40>
 8011836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183a:	e00e      	b.n	801185a <__swhatbuf_r+0x42>
 801183c:	466a      	mov	r2, sp
 801183e:	f000 f8a7 	bl	8011990 <_fstat_r>
 8011842:	2800      	cmp	r0, #0
 8011844:	dbf1      	blt.n	801182a <__swhatbuf_r+0x12>
 8011846:	9a01      	ldr	r2, [sp, #4]
 8011848:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801184c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011850:	425a      	negs	r2, r3
 8011852:	415a      	adcs	r2, r3
 8011854:	602a      	str	r2, [r5, #0]
 8011856:	e7ee      	b.n	8011836 <__swhatbuf_r+0x1e>
 8011858:	2340      	movs	r3, #64	; 0x40
 801185a:	2000      	movs	r0, #0
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	b016      	add	sp, #88	; 0x58
 8011860:	bd70      	pop	{r4, r5, r6, pc}
	...

08011864 <__smakebuf_r>:
 8011864:	898b      	ldrh	r3, [r1, #12]
 8011866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011868:	079d      	lsls	r5, r3, #30
 801186a:	4606      	mov	r6, r0
 801186c:	460c      	mov	r4, r1
 801186e:	d507      	bpl.n	8011880 <__smakebuf_r+0x1c>
 8011870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	6123      	str	r3, [r4, #16]
 8011878:	2301      	movs	r3, #1
 801187a:	6163      	str	r3, [r4, #20]
 801187c:	b002      	add	sp, #8
 801187e:	bd70      	pop	{r4, r5, r6, pc}
 8011880:	ab01      	add	r3, sp, #4
 8011882:	466a      	mov	r2, sp
 8011884:	f7ff ffc8 	bl	8011818 <__swhatbuf_r>
 8011888:	9900      	ldr	r1, [sp, #0]
 801188a:	4605      	mov	r5, r0
 801188c:	4630      	mov	r0, r6
 801188e:	f7fd fbf3 	bl	800f078 <_malloc_r>
 8011892:	b948      	cbnz	r0, 80118a8 <__smakebuf_r+0x44>
 8011894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011898:	059a      	lsls	r2, r3, #22
 801189a:	d4ef      	bmi.n	801187c <__smakebuf_r+0x18>
 801189c:	f023 0303 	bic.w	r3, r3, #3
 80118a0:	f043 0302 	orr.w	r3, r3, #2
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	e7e3      	b.n	8011870 <__smakebuf_r+0xc>
 80118a8:	4b0d      	ldr	r3, [pc, #52]	; (80118e0 <__smakebuf_r+0x7c>)
 80118aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80118ac:	89a3      	ldrh	r3, [r4, #12]
 80118ae:	6020      	str	r0, [r4, #0]
 80118b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	9b00      	ldr	r3, [sp, #0]
 80118b8:	6163      	str	r3, [r4, #20]
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	6120      	str	r0, [r4, #16]
 80118be:	b15b      	cbz	r3, 80118d8 <__smakebuf_r+0x74>
 80118c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 f875 	bl	80119b4 <_isatty_r>
 80118ca:	b128      	cbz	r0, 80118d8 <__smakebuf_r+0x74>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	f023 0303 	bic.w	r3, r3, #3
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	89a0      	ldrh	r0, [r4, #12]
 80118da:	4305      	orrs	r5, r0
 80118dc:	81a5      	strh	r5, [r4, #12]
 80118de:	e7cd      	b.n	801187c <__smakebuf_r+0x18>
 80118e0:	080107fd 	.word	0x080107fd

080118e4 <_read_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4d07      	ldr	r5, [pc, #28]	; (8011904 <_read_r+0x20>)
 80118e8:	4604      	mov	r4, r0
 80118ea:	4608      	mov	r0, r1
 80118ec:	4611      	mov	r1, r2
 80118ee:	2200      	movs	r2, #0
 80118f0:	602a      	str	r2, [r5, #0]
 80118f2:	461a      	mov	r2, r3
 80118f4:	f000 f89e 	bl	8011a34 <_read>
 80118f8:	1c43      	adds	r3, r0, #1
 80118fa:	d102      	bne.n	8011902 <_read_r+0x1e>
 80118fc:	682b      	ldr	r3, [r5, #0]
 80118fe:	b103      	cbz	r3, 8011902 <_read_r+0x1e>
 8011900:	6023      	str	r3, [r4, #0]
 8011902:	bd38      	pop	{r3, r4, r5, pc}
 8011904:	200028e0 	.word	0x200028e0

08011908 <_raise_r>:
 8011908:	291f      	cmp	r1, #31
 801190a:	b538      	push	{r3, r4, r5, lr}
 801190c:	4604      	mov	r4, r0
 801190e:	460d      	mov	r5, r1
 8011910:	d904      	bls.n	801191c <_raise_r+0x14>
 8011912:	2316      	movs	r3, #22
 8011914:	6003      	str	r3, [r0, #0]
 8011916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801191e:	b112      	cbz	r2, 8011926 <_raise_r+0x1e>
 8011920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011924:	b94b      	cbnz	r3, 801193a <_raise_r+0x32>
 8011926:	4620      	mov	r0, r4
 8011928:	f000 f830 	bl	801198c <_getpid_r>
 801192c:	462a      	mov	r2, r5
 801192e:	4601      	mov	r1, r0
 8011930:	4620      	mov	r0, r4
 8011932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011936:	f000 b817 	b.w	8011968 <_kill_r>
 801193a:	2b01      	cmp	r3, #1
 801193c:	d00a      	beq.n	8011954 <_raise_r+0x4c>
 801193e:	1c59      	adds	r1, r3, #1
 8011940:	d103      	bne.n	801194a <_raise_r+0x42>
 8011942:	2316      	movs	r3, #22
 8011944:	6003      	str	r3, [r0, #0]
 8011946:	2001      	movs	r0, #1
 8011948:	e7e7      	b.n	801191a <_raise_r+0x12>
 801194a:	2400      	movs	r4, #0
 801194c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011950:	4628      	mov	r0, r5
 8011952:	4798      	blx	r3
 8011954:	2000      	movs	r0, #0
 8011956:	e7e0      	b.n	801191a <_raise_r+0x12>

08011958 <raise>:
 8011958:	4b02      	ldr	r3, [pc, #8]	; (8011964 <raise+0xc>)
 801195a:	4601      	mov	r1, r0
 801195c:	6818      	ldr	r0, [r3, #0]
 801195e:	f7ff bfd3 	b.w	8011908 <_raise_r>
 8011962:	bf00      	nop
 8011964:	20000184 	.word	0x20000184

08011968 <_kill_r>:
 8011968:	b538      	push	{r3, r4, r5, lr}
 801196a:	4d07      	ldr	r5, [pc, #28]	; (8011988 <_kill_r+0x20>)
 801196c:	2300      	movs	r3, #0
 801196e:	4604      	mov	r4, r0
 8011970:	4608      	mov	r0, r1
 8011972:	4611      	mov	r1, r2
 8011974:	602b      	str	r3, [r5, #0]
 8011976:	f000 f84d 	bl	8011a14 <_kill>
 801197a:	1c43      	adds	r3, r0, #1
 801197c:	d102      	bne.n	8011984 <_kill_r+0x1c>
 801197e:	682b      	ldr	r3, [r5, #0]
 8011980:	b103      	cbz	r3, 8011984 <_kill_r+0x1c>
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	bd38      	pop	{r3, r4, r5, pc}
 8011986:	bf00      	nop
 8011988:	200028e0 	.word	0x200028e0

0801198c <_getpid_r>:
 801198c:	f000 b832 	b.w	80119f4 <_getpid>

08011990 <_fstat_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4d07      	ldr	r5, [pc, #28]	; (80119b0 <_fstat_r+0x20>)
 8011994:	2300      	movs	r3, #0
 8011996:	4604      	mov	r4, r0
 8011998:	4608      	mov	r0, r1
 801199a:	4611      	mov	r1, r2
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	f000 f821 	bl	80119e4 <_fstat>
 80119a2:	1c43      	adds	r3, r0, #1
 80119a4:	d102      	bne.n	80119ac <_fstat_r+0x1c>
 80119a6:	682b      	ldr	r3, [r5, #0]
 80119a8:	b103      	cbz	r3, 80119ac <_fstat_r+0x1c>
 80119aa:	6023      	str	r3, [r4, #0]
 80119ac:	bd38      	pop	{r3, r4, r5, pc}
 80119ae:	bf00      	nop
 80119b0:	200028e0 	.word	0x200028e0

080119b4 <_isatty_r>:
 80119b4:	b538      	push	{r3, r4, r5, lr}
 80119b6:	4d06      	ldr	r5, [pc, #24]	; (80119d0 <_isatty_r+0x1c>)
 80119b8:	2300      	movs	r3, #0
 80119ba:	4604      	mov	r4, r0
 80119bc:	4608      	mov	r0, r1
 80119be:	602b      	str	r3, [r5, #0]
 80119c0:	f000 f820 	bl	8011a04 <_isatty>
 80119c4:	1c43      	adds	r3, r0, #1
 80119c6:	d102      	bne.n	80119ce <_isatty_r+0x1a>
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	b103      	cbz	r3, 80119ce <_isatty_r+0x1a>
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	bd38      	pop	{r3, r4, r5, pc}
 80119d0:	200028e0 	.word	0x200028e0

080119d4 <_close>:
 80119d4:	4b02      	ldr	r3, [pc, #8]	; (80119e0 <_close+0xc>)
 80119d6:	2258      	movs	r2, #88	; 0x58
 80119d8:	601a      	str	r2, [r3, #0]
 80119da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119de:	4770      	bx	lr
 80119e0:	200028e0 	.word	0x200028e0

080119e4 <_fstat>:
 80119e4:	4b02      	ldr	r3, [pc, #8]	; (80119f0 <_fstat+0xc>)
 80119e6:	2258      	movs	r2, #88	; 0x58
 80119e8:	601a      	str	r2, [r3, #0]
 80119ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ee:	4770      	bx	lr
 80119f0:	200028e0 	.word	0x200028e0

080119f4 <_getpid>:
 80119f4:	4b02      	ldr	r3, [pc, #8]	; (8011a00 <_getpid+0xc>)
 80119f6:	2258      	movs	r2, #88	; 0x58
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119fe:	4770      	bx	lr
 8011a00:	200028e0 	.word	0x200028e0

08011a04 <_isatty>:
 8011a04:	4b02      	ldr	r3, [pc, #8]	; (8011a10 <_isatty+0xc>)
 8011a06:	2258      	movs	r2, #88	; 0x58
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	200028e0 	.word	0x200028e0

08011a14 <_kill>:
 8011a14:	4b02      	ldr	r3, [pc, #8]	; (8011a20 <_kill+0xc>)
 8011a16:	2258      	movs	r2, #88	; 0x58
 8011a18:	601a      	str	r2, [r3, #0]
 8011a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a1e:	4770      	bx	lr
 8011a20:	200028e0 	.word	0x200028e0

08011a24 <_lseek>:
 8011a24:	4b02      	ldr	r3, [pc, #8]	; (8011a30 <_lseek+0xc>)
 8011a26:	2258      	movs	r2, #88	; 0x58
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a2e:	4770      	bx	lr
 8011a30:	200028e0 	.word	0x200028e0

08011a34 <_read>:
 8011a34:	4b02      	ldr	r3, [pc, #8]	; (8011a40 <_read+0xc>)
 8011a36:	2258      	movs	r2, #88	; 0x58
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a3e:	4770      	bx	lr
 8011a40:	200028e0 	.word	0x200028e0

08011a44 <_sbrk>:
 8011a44:	4a04      	ldr	r2, [pc, #16]	; (8011a58 <_sbrk+0x14>)
 8011a46:	6811      	ldr	r1, [r2, #0]
 8011a48:	4603      	mov	r3, r0
 8011a4a:	b909      	cbnz	r1, 8011a50 <_sbrk+0xc>
 8011a4c:	4903      	ldr	r1, [pc, #12]	; (8011a5c <_sbrk+0x18>)
 8011a4e:	6011      	str	r1, [r2, #0]
 8011a50:	6810      	ldr	r0, [r2, #0]
 8011a52:	4403      	add	r3, r0
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	4770      	bx	lr
 8011a58:	200028e4 	.word	0x200028e4
 8011a5c:	200028e8 	.word	0x200028e8

08011a60 <_write>:
 8011a60:	4b02      	ldr	r3, [pc, #8]	; (8011a6c <_write+0xc>)
 8011a62:	2258      	movs	r2, #88	; 0x58
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a6a:	4770      	bx	lr
 8011a6c:	200028e0 	.word	0x200028e0

08011a70 <_exit>:
 8011a70:	e7fe      	b.n	8011a70 <_exit>
	...

08011a74 <_init>:
 8011a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a76:	bf00      	nop
 8011a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a7a:	bc08      	pop	{r3}
 8011a7c:	469e      	mov	lr, r3
 8011a7e:	4770      	bx	lr

08011a80 <_fini>:
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a82:	bf00      	nop
 8011a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a86:	bc08      	pop	{r3}
 8011a88:	469e      	mov	lr, r3
 8011a8a:	4770      	bx	lr
