
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001253c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08012700  08012700  00022700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012df8  08012df8  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08012df8  08012df8  00022df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e00  08012e00  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e00  08012e00  00022e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e04  08012e04  00022e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08012e08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002654  20000358  08013160  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200029ac  08013160  000329ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be37  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057de  00000000  00000000  0005c1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002220  00000000  00000000  000619a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd8  00000000  00000000  00063bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008790  00000000  00000000  00065b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c6f6  00000000  00000000  0006e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001205d6  00000000  00000000  0009aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001baff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1f8  00000000  00000000  001bb044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c523c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c5308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000358 	.word	0x20000358
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080126e4 	.word	0x080126e4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	080126e4 	.word	0x080126e4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 f8d7 	bl	80030ae <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 f8ce 	bl	80030ca <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000374 	.word	0x20000374
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c8 	.word	0x200003c8

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fff8 	bl	8002f90 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 f88c 	bl	80030ca <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f8ce 	bl	8003160 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00e fe05 	bl	800fc00 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fa9c 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fdc6 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 fdb0 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <HAL_UART_RxCpltCallback>:
	put_one_char(x + 48);

	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <HAL_UART_RxCpltCallback+0x2c>)
 80010ae:	f001 ff3d 	bl	8002f2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_UART_RxCpltCallback+0x2c>)
 80010b8:	f001 ff38 	bl	8002f2c <HAL_GPIO_WritePin>
		mira_ready_for_comm = 1;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_UART_RxCpltCallback+0x30>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	48001000 	.word	0x48001000
 80010d0:	20000000 	.word	0x20000000

080010d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	f6ad 3d38 	subw	sp, sp, #2872	; 0xb38
 80010da:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80010dc:	4ba7      	ldr	r3, [pc, #668]	; (800137c <main+0x2a8>)
 80010de:	f507 642e 	add.w	r4, r7, #2784	; 0xae0
 80010e2:	461d      	mov	r5, r3
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	c403      	stmia	r4!, {r0, r1}
 80010ee:	7022      	strb	r2, [r4, #0]
 80010f0:	f607 23f9 	addw	r3, r7, #2809	; 0xaf9
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8001104:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001108:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 800110c:	461a      	mov	r2, r3
 800110e:	2300      	movs	r3, #0
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	6053      	str	r3, [r2, #4]
 8001114:	6093      	str	r3, [r2, #8]
 8001116:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 8001118:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800111c:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 800112a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800112e:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 800113a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800113e:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	3304      	adds	r3, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001156:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800115a:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8001172:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001176:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	3304      	adds	r3, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 800118e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001192:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8001196:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <main+0x2ac>)
 8001198:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800119a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800119e:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	3304      	adds	r3, #4
 80011a8:	2224      	movs	r2, #36	; 0x24
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00e fd27 	bl	800fc00 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80011b2:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011b6:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	2224      	movs	r2, #36	; 0x24
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e fd1b 	bl	800fc00 <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_command_code = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 3b1f 	strb.w	r3, [r7, #2847]	; 0xb1f
	uint8_t mira_target_reg = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x01};
 80011d6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011da:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 80011de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011e2:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80011f0:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 80011f4:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80011f8:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001210:	f001 f809 	bl	8002226 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8001214:	f000 fc90 	bl	8001b38 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001218:	f7ff fe60 	bl	8000edc <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 800121c:	4859      	ldr	r0, [pc, #356]	; (8001384 <main+0x2b0>)
 800121e:	f000 fdf3 	bl	8001e08 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8001222:	4859      	ldr	r0, [pc, #356]	; (8001388 <main+0x2b4>)
 8001224:	f000 fdf0 	bl	8001e08 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001228:	f000 f8b6 	bl	8001398 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800122c:	f000 fafe 	bl	800182c <MX_GPIO_Init>
	MX_DMA_Init();
 8001230:	f000 faca 	bl	80017c8 <MX_DMA_Init>
	MX_I2C1_Init();
 8001234:	f000 f916 	bl	8001464 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 8001238:	f000 f954 	bl	80014e4 <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 800123c:	f000 f974 	bl	8001528 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001240:	f000 fa26 	bl	8001690 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001244:	f000 fa70 	bl	8001728 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001248:	f00c f82c 	bl	800d2a4 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 800124c:	f00d feb4 	bl	800efb8 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 8001250:	f000 f9a8 	bl	80015a4 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001254:	f000 f8f2 	bl	800143c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////

	// enable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2110      	movs	r1, #16
 800125c:	484b      	ldr	r0, [pc, #300]	; (800138c <main+0x2b8>)
 800125e:	f001 fe65 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	4849      	ldr	r0, [pc, #292]	; (800138c <main+0x2b8>)
 8001268:	f001 fe60 	bl	8002f2c <HAL_GPIO_WritePin>

	while(1){

		mira_target_reg = 0x02;
 800126c:	2302      	movs	r3, #2
 800126e:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
		mira_Tx_payload[3] = 0x00;
 8001272:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001276:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 800127a:	2200      	movs	r2, #0
 800127c:	70da      	strb	r2, [r3, #3]

		status = mira_command(&huart1, WRITE_REGISTER, mira_target_reg, mira_Tx_payload, mira_Rx_buffer, 5000);
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <main+0x2bc>)
 8001280:	7819      	ldrb	r1, [r3, #0]
 8001282:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001286:	f897 2b2e 	ldrb.w	r2, [r7, #2862]	; 0xb2e
 800128a:	f241 3388 	movw	r3, #5000	; 0x1388
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	483a      	ldr	r0, [pc, #232]	; (8001384 <main+0x2b0>)
 800129a:	f000 fbcb 	bl	8001a34 <mira_command>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3b2f 	strb.w	r3, [r7, #2863]	; 0xb2f
		HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f001 f833 	bl	8002310 <HAL_Delay>
		while (CDC_Transmit_FS (mira_Rx_buffer, sizeof(mira_Rx_buffer)) == USBD_BUSY);
 80012aa:	bf00      	nop
 80012ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012b0:	210a      	movs	r1, #10
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00d ff3e 	bl	800f134 <CDC_Transmit_FS>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d0f6      	beq.n	80012ac <main+0x1d8>
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80012be:	2108      	movs	r1, #8
 80012c0:	4834      	ldr	r0, [pc, #208]	; (8001394 <main+0x2c0>)
 80012c2:	f001 fe4b 	bl	8002f5c <HAL_GPIO_TogglePin>

		mira_target_reg = 0x01;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
		mira_Tx_payload[3] = 0x00;
 80012cc:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80012d0:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 80012d4:	2200      	movs	r2, #0
 80012d6:	70da      	strb	r2, [r3, #3]

		status = mira_command(&huart1, WRITE_REGISTER, mira_target_reg, mira_Tx_payload, mira_Rx_buffer, 5000);
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <main+0x2bc>)
 80012da:	7819      	ldrb	r1, [r3, #0]
 80012dc:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80012e0:	f897 2b2e 	ldrb.w	r2, [r7, #2862]	; 0xb2e
 80012e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4603      	mov	r3, r0
 80012f2:	4824      	ldr	r0, [pc, #144]	; (8001384 <main+0x2b0>)
 80012f4:	f000 fb9e 	bl	8001a34 <mira_command>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3b2f 	strb.w	r3, [r7, #2863]	; 0xb2f
		HAL_Delay(100);
 80012fe:	2064      	movs	r0, #100	; 0x64
 8001300:	f001 f806 	bl	8002310 <HAL_Delay>
		while (CDC_Transmit_FS (mira_Rx_buffer, sizeof(mira_Rx_buffer)) == USBD_BUSY);
 8001304:	bf00      	nop
 8001306:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800130a:	210a      	movs	r1, #10
 800130c:	4618      	mov	r0, r3
 800130e:	f00d ff11 	bl	800f134 <CDC_Transmit_FS>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d0f6      	beq.n	8001306 <main+0x232>
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001318:	2110      	movs	r1, #16
 800131a:	481e      	ldr	r0, [pc, #120]	; (8001394 <main+0x2c0>)
 800131c:	f001 fe1e 	bl	8002f5c <HAL_GPIO_TogglePin>

		mira_target_reg = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3b2e 	strb.w	r3, [r7, #2862]	; 0xb2e
		mira_Tx_payload[3] = 0x05;
 8001326:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800132a:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 800132e:	2205      	movs	r2, #5
 8001330:	70da      	strb	r2, [r3, #3]

		status = mira_command(&huart1, WRITE_REGISTER, mira_target_reg, mira_Tx_payload, mira_Rx_buffer,  5000);
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <main+0x2bc>)
 8001334:	7819      	ldrb	r1, [r3, #0]
 8001336:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800133a:	f897 2b2e 	ldrb.w	r2, [r7, #2862]	; 0xb2e
 800133e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4603      	mov	r3, r0
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <main+0x2b0>)
 800134e:	f000 fb71 	bl	8001a34 <mira_command>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3b2f 	strb.w	r3, [r7, #2863]	; 0xb2f
		HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f000 ffd9 	bl	8002310 <HAL_Delay>
		while (CDC_Transmit_FS (mira_Rx_buffer, sizeof(mira_Rx_buffer)) == USBD_BUSY);
 800135e:	bf00      	nop
 8001360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001364:	210a      	movs	r1, #10
 8001366:	4618      	mov	r0, r3
 8001368:	f00d fee4 	bl	800f134 <CDC_Transmit_FS>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d0f6      	beq.n	8001360 <main+0x28c>
		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 8001372:	2120      	movs	r1, #32
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <main+0x2c0>)
 8001376:	f001 fdf1 	bl	8002f5c <HAL_GPIO_TogglePin>
		mira_target_reg = 0x02;
 800137a:	e777      	b.n	800126c <main+0x198>
 800137c:	08012700 	.word	0x08012700
 8001380:	00202d20 	.word	0x00202d20
 8001384:	20000550 	.word	0x20000550
 8001388:	200005e0 	.word	0x200005e0
 800138c:	48001000 	.word	0x48001000
 8001390:	08012792 	.word	0x08012792
 8001394:	48000c00 	.word	0x48000c00

08001398 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	; 0x58
 800139c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2244      	movs	r2, #68	; 0x44
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00e fc2a 	bl	800fc00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f003 f908 	bl	80045d0 <HAL_PWREx_ControlVoltageScaling>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x32>
	{
		Error_Handler();
 80013c6:	f000 fb01 	bl	80019cc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013ca:	2321      	movs	r3, #33	; 0x21
 80013cc:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	2303      	movs	r3, #3
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 80013e4:	231e      	movs	r3, #30
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 f99d 	bl	8004738 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001404:	f000 fae2 	bl	80019cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2303      	movs	r3, #3
 800140e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2105      	movs	r1, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fda3 	bl	8004f6c <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800142c:	f000 face 	bl	80019cc <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001430:	f003 ff9a 	bl	8005368 <HAL_RCC_EnableCSS>
}
 8001434:	bf00      	nop
 8001436:	3758      	adds	r7, #88	; 0x58
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	201a      	movs	r0, #26
 8001446:	f001 f862 	bl	800250e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800144a:	201a      	movs	r0, #26
 800144c:	f001 f87b 	bl	8002546 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2026      	movs	r0, #38	; 0x26
 8001456:	f001 f85a 	bl	800250e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800145a:	2026      	movs	r0, #38	; 0x26
 800145c:	f001 f873 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_I2C1_Init+0x74>)
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <MX_I2C1_Init+0x78>)
 800146c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <MX_I2C1_Init+0x7c>)
 8001472:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_I2C1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014a0:	f001 fd76 	bl	8002f90 <HAL_I2C_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80014aa:	f000 fa8f 	bl	80019cc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014b2:	f001 fe0a 	bl	80030ca <HAL_I2CEx_ConfigAnalogFilter>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80014bc:	f000 fa86 	bl	80019cc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014c0:	2100      	movs	r1, #0
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014c4:	f001 fe4c 	bl	8003160 <HAL_I2CEx_ConfigDigitalFilter>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80014ce:	f000 fa7d 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003cc 	.word	0x200003cc
 80014dc:	40005400 	.word	0x40005400
 80014e0:	307075b1 	.word	0x307075b1

080014e4 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <MX_SDMMC1_SD_Init+0x40>)
 80014ec:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 80014fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001500:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <MX_SDMMC1_SD_Init+0x3c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000420 	.word	0x20000420
 8001524:	50062400 	.word	0x50062400

08001528 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_SPI1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_SPI1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_SPI1_Init+0x74>)
 8001534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001538:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_SPI1_Init+0x74>)
 8001542:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001546:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_SPI1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_SPI1_Init+0x74>)
 8001556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_SPI1_Init+0x74>)
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_SPI1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_SPI1_Init+0x74>)
 8001576:	2207      	movs	r2, #7
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SPI1_Init+0x74>)
 8001582:	2208      	movs	r2, #8
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_SPI1_Init+0x74>)
 8001588:	f007 f965 	bl	8008856 <HAL_SPI_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001592:	f000 fa1b 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200004a0 	.word	0x200004a0
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b092      	sub	sp, #72	; 0x48
 80015a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	222c      	movs	r2, #44	; 0x2c
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00e fb1b 	bl	800fc00 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015cc:	4a2f      	ldr	r2, [pc, #188]	; (800168c <MX_TIM17_Init+0xe8>)
 80015ce:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d6:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015e0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80015e4:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <MX_TIM17_Init+0xe4>)
 80015fa:	f007 f9cf 	bl	800899c <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8001604:	f000 f9e2 	bl	80019cc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001608:	481f      	ldr	r0, [pc, #124]	; (8001688 <MX_TIM17_Init+0xe4>)
 800160a:	f007 fa1e 	bl	8008a4a <HAL_TIM_OC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8001614:	f000 f9da 	bl	80019cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001624:	2300      	movs	r3, #0
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4812      	ldr	r0, [pc, #72]	; (8001688 <MX_TIM17_Init+0xe4>)
 800163e:	f007 fb85 	bl	8008d4c <HAL_TIM_OC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8001648:	f000 f9c0 	bl	80019cc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM17_Init+0xe4>)
 8001670:	f007 ff88 	bl	8009584 <HAL_TIMEx_ConfigBreakDeadTime>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 800167a:	f000 f9a7 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3748      	adds	r7, #72	; 0x48
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000504 	.word	0x20000504
 800168c:	40014800 	.word	0x40014800

08001690 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_USART1_UART_Init+0x90>)
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_USART1_UART_Init+0x94>)
 8001698:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_USART1_UART_Init+0x90>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016da:	f007 ffef 	bl	80096bc <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80016e4:	f000 f972 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016ec:	f009 fbee 	bl	800aecc <HAL_UARTEx_SetTxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 80016f6:	f000 f969 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <MX_USART1_UART_Init+0x90>)
 80016fe:	f009 fc23 	bl	800af48 <HAL_UARTEx_SetRxFifoThreshold>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001708:	f000 f960 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_USART1_UART_Init+0x90>)
 800170e:	f009 fba4 	bl	800ae5a <HAL_UARTEx_DisableFifoMode>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001718:	f000 f958 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000550 	.word	0x20000550
 8001724:	40013800 	.word	0x40013800

08001728 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <MX_USART2_UART_Init+0x9c>)
 8001730:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001738:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800176c:	2210      	movs	r2, #16
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 8001772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800177a:	f007 ff9f 	bl	80096bc <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 8001784:	f000 f922 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800178c:	f009 fb9e 	bl	800aecc <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 8001796:	f000 f919 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 800179e:	f009 fbd3 	bl	800af48 <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80017a8:	f000 f910 	bl	80019cc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_USART2_UART_Init+0x98>)
 80017ae:	f009 fb54 	bl	800ae5a <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 80017b8:	f000 f908 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200005e0 	.word	0x200005e0
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_DMA_Init+0x60>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <MX_DMA_Init+0x60>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6493      	str	r3, [r2, #72]	; 0x48
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_DMA_Init+0x60>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_DMA_Init+0x60>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <MX_DMA_Init+0x60>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6493      	str	r3, [r2, #72]	; 0x48
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_DMA_Init+0x60>)
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	200b      	movs	r0, #11
 8001804:	f000 fe83 	bl	800250e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001808:	200b      	movs	r0, #11
 800180a:	f000 fe9c 	bl	8002546 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	200c      	movs	r0, #12
 8001814:	f000 fe7b 	bl	800250e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001818:	200c      	movs	r0, #12
 800181a:	f000 fe94 	bl	8002546 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a5c      	ldr	r2, [pc, #368]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <MX_GPIO_Init+0x18c>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <MX_GPIO_Init+0x18c>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a4a      	ldr	r2, [pc, #296]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <MX_GPIO_Init+0x18c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <MX_GPIO_Init+0x18c>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80018d2:	2200      	movs	r2, #0
 80018d4:	f641 013c 	movw	r1, #6204	; 0x183c
 80018d8:	4838      	ldr	r0, [pc, #224]	; (80019bc <MX_GPIO_Init+0x190>)
 80018da:	f001 fb27 	bl	8002f2c <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	2130      	movs	r1, #48	; 0x30
 80018e2:	4837      	ldr	r0, [pc, #220]	; (80019c0 <MX_GPIO_Init+0x194>)
 80018e4:	f001 fb22 	bl	8002f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2178      	movs	r1, #120	; 0x78
 80018ec:	4835      	ldr	r0, [pc, #212]	; (80019c4 <MX_GPIO_Init+0x198>)
 80018ee:	f001 fb1d 	bl	8002f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80018f2:	f641 033c 	movw	r3, #6204	; 0x183c
 80018f6:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	482c      	ldr	r0, [pc, #176]	; (80019bc <MX_GPIO_Init+0x190>)
 800190c:	f001 f964 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <MX_GPIO_Init+0x194>)
 8001926:	f001 f957 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 800192a:	f248 0302 	movw	r3, #32770	; 0x8002
 800192e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f001 f949 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001946:	2330      	movs	r3, #48	; 0x30
 8001948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4818      	ldr	r0, [pc, #96]	; (80019c0 <MX_GPIO_Init+0x194>)
 800195e:	f001 f93b 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001966:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_GPIO_Init+0x190>)
 8001978:	f001 f92e 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800197c:	2378      	movs	r3, #120	; 0x78
 800197e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_GPIO_Init+0x198>)
 8001994:	f001 f920 	bl	8002bd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001998:	2320      	movs	r3, #32
 800199a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <MX_GPIO_Init+0x19c>)
 80019ac:	f001 f914 	bl	8002bd8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48001000 	.word	0x48001000
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	48000400 	.word	0x48000400

080019cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 80019d4:	4801      	ldr	r0, [pc, #4]	; (80019dc <Error_Handler+0x10>)
 80019d6:	f00e fe65 	bl	80106a4 <iprintf>
	while (1)
 80019da:	e7fe      	b.n	80019da <Error_Handler+0xe>
 80019dc:	08012734 	.word	0x08012734

080019e0 <CRC16>:
//MIRA communication status
volatile uint8_t mira_ready_for_comm = 1;


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 80019ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f0:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80019f2:	e011      	b.n	8001a18 <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4053      	eors	r3, r2
 8001a02:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 8001a0a:	7b7b      	ldrb	r3, [r7, #13]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <CRC16+0x50>)
 8001a0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	4053      	eors	r3, r2
 8001a16:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	1e5a      	subs	r2, r3, #1
 8001a1c:	807a      	strh	r2, [r7, #2]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e8      	bne.n	80019f4 <CRC16+0x14>
	}
	return wCRCWord;
 8001a22:	89fb      	ldrh	r3, [r7, #14]

}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	08012794 	.word	0x08012794

08001a34 <mira_command>:


HAL_StatusTypeDef mira_command(UART_HandleTypeDef *huart, uint8_t command, uint8_t reg, uint8_t *data, uint8_t *rxBuffer, uint32_t Timeout){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	72fb      	strb	r3, [r7, #11]
 8001a42:	4613      	mov	r3, r2
 8001a44:	72bb      	strb	r3, [r7, #10]

	//Wait that previous instance of communication is done (toggled by HAL_UART_RxCpltCallback)
	while (mira_ready_for_comm == 0);
 8001a46:	bf00      	nop
 8001a48:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <mira_command+0xfc>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0fa      	beq.n	8001a48 <mira_command+0x14>

	HAL_StatusTypeDef status;
	uint8_t message[14];

	uint8_t sync[2] = {0x5a, 0xce};
 8001a52:	f64c 635a 	movw	r3, #52826	; 0xce5a
 8001a56:	843b      	strh	r3, [r7, #32]
	uint8_t length[2] = {0x00, 0x05};
 8001a58:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a5c:	83bb      	strh	r3, [r7, #28]
	uint8_t src[1] = {0xc1};
 8001a5e:	23c1      	movs	r3, #193	; 0xc1
 8001a60:	763b      	strb	r3, [r7, #24]
	uint8_t dest[1] = {0xe1};
 8001a62:	23e1      	movs	r3, #225	; 0xe1
 8001a64:	753b      	strb	r3, [r7, #20]
	uint16_t sum = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[0] = sync[0];
 8001a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	message[1] = sync[1];
 8001a72:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	message[2] = length[0];
 8001a7a:	7f3b      	ldrb	r3, [r7, #28]
 8001a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	message[3] = length[1];
 8001a80:	7f7b      	ldrb	r3, [r7, #29]
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[4] = src[0];
 8001a86:	7e3b      	ldrb	r3, [r7, #24]
 8001a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	message[5] = dest[0];
 8001a8c:	7d3b      	ldrb	r3, [r7, #20]
 8001a8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	message[6] = command;
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	message[7] = reg;
 8001a98:	7abb      	ldrb	r3, [r7, #10]
 8001a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	message[8] = data[0];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message[9] = data[1];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	message[10] = data[2];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	789b      	ldrb	r3, [r3, #2]
 8001ab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	message[11] = data[3];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	78db      	ldrb	r3, [r3, #3]
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	sum = CRC16(message+2, 10);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff8a 	bl	80019e0 <CRC16>
 8001acc:	4603      	mov	r3, r0
 8001ace:	86fb      	strh	r3, [r7, #54]	; 0x36

	message[12] = (sum&0xFF00)>>8;
 8001ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	message[13] = (sum&0x00FF);
 8001adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	// write given value to register at given address
	status = HAL_UART_Transmit(huart, message, sizeof(message), Timeout);
 8001ae4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	220e      	movs	r2, #14
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f007 fe35 	bl	800975c <HAL_UART_Transmit>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	status = HAL_UART_Receive_DMA(huart, rxBuffer, sizeof(rxBuffer));
 8001af8:	2204      	movs	r2, #4
 8001afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f007 fec5 	bl	800988c <HAL_UART_Receive_DMA>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// Enable receiver and disable transmitter, remember to flip after receive (currently done by HAL_UART_RxCpltCallback)
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <mira_command+0x100>)
 8001b0e:	f001 fa0d 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2120      	movs	r1, #32
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <mira_command+0x100>)
 8001b18:	f001 fa08 	bl	8002f2c <HAL_GPIO_WritePin>

	mira_ready_for_comm = 0;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <mira_command+0xfc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]

	return status;
 8001b22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35

}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000
 8001b34:	48001000 	.word	0x48001000

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x44>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_MspInit+0x44>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_MspInit+0x44>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_MspInit+0x44>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_MspInit+0x44>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6593      	str	r3, [r2, #88]	; 0x58
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_MspInit+0x44>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	; 0xb8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2294      	movs	r2, #148	; 0x94
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00e f82d 	bl	800fc00 <memset>
  if(hi2c->Instance==I2C1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <HAL_I2C_MspInit+0xb0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13a      	bne.n	8001c26 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bb0:	2340      	movs	r3, #64	; 0x40
 8001bb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fcbf 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff ff00 	bl	80019cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_I2C_MspInit+0xb8>)
 8001c0a:	f000 ffe5 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c18:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_I2C_MspInit+0xb4>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	37b8      	adds	r7, #184	; 0xb8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400

08001c3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0b0      	sub	sp, #192	; 0xc0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	2294      	movs	r2, #148	; 0x94
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00d ffcf 	bl	800fc00 <memset>
  if(hsd->Instance==SDMMC1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <HAL_SD_MspInit+0xf8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d15e      	bne.n	8001d2a <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001c6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fc5f 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001c88:	f7ff fea0 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_SD_MspInit+0xfc>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cd4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4810      	ldr	r0, [pc, #64]	; (8001d3c <HAL_SD_MspInit+0x100>)
 8001cfc:	f000 ff6c 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d00:	2304      	movs	r3, #4
 8001d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d22:	4619      	mov	r1, r3
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <HAL_SD_MspInit+0x104>)
 8001d26:	f000 ff57 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	37c0      	adds	r7, #192	; 0xc0
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	50062400 	.word	0x50062400
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_SPI_MspInit+0x7c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d128      	bne.n	8001db8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8001d96:	23f0      	movs	r3, #240	; 0xf0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da6:	2305      	movs	r3, #5
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f000 ff10 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013000 	.word	0x40013000
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_TIM_Base_MspInit+0x38>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10b      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_TIM_Base_MspInit+0x3c>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_TIM_Base_MspInit+0x3c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6613      	str	r3, [r2, #96]	; 0x60
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_TIM_Base_MspInit+0x3c>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40014800 	.word	0x40014800
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b0      	sub	sp, #192	; 0xc0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	2294      	movs	r2, #148	; 0x94
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00d fee9 	bl	800fc00 <memset>
  if(huart->Instance==USART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a70      	ldr	r2, [pc, #448]	; (8001ff4 <HAL_UART_MspInit+0x1ec>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f040 8098 	bne.w	8001f6a <HAL_UART_MspInit+0x162>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fb7a 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e52:	f7ff fdbb 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001e86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f000 fe92 	bl	8002bd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001eb4:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001eb6:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_UART_MspInit+0x1f8>)
 8001eb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001eba:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ebc:	2218      	movs	r2, #24
 8001ebe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed8:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee4:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eea:	4844      	ldr	r0, [pc, #272]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001eec:	f000 fb46 	bl	800257c <HAL_DMA_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001ef6:	f7ff fd69 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001efe:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f00:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_UART_MspInit+0x1f4>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f08:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_UART_MspInit+0x200>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f0e:	2219      	movs	r2, #25
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f14:	2210      	movs	r2, #16
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f24:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f3c:	4831      	ldr	r0, [pc, #196]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f3e:	f000 fb1d 	bl	800257c <HAL_DMA_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8001f48:	f7ff fd40 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f50:	679a      	str	r2, [r3, #120]	; 0x78
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <HAL_UART_MspInit+0x1fc>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2025      	movs	r0, #37	; 0x25
 8001f5e:	f000 fad6 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f62:	2025      	movs	r0, #37	; 0x25
 8001f64:	f000 faef 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f68:	e040      	b.n	8001fec <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_UART_MspInit+0x204>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d13b      	bne.n	8001fec <HAL_UART_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fadd 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001f8c:	f7ff fd1e 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_UART_MspInit+0x1f0>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f000 fdf6 	bl	8002bd8 <HAL_GPIO_Init>
}
 8001fec:	bf00      	nop
 8001fee:	37c0      	adds	r7, #192	; 0xc0
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	20000670 	.word	0x20000670
 8002000:	40020008 	.word	0x40020008
 8002004:	200006d0 	.word	0x200006d0
 8002008:	4002001c 	.word	0x4002001c
 800200c:	40004400 	.word	0x40004400

08002010 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 8002014:	f003 f9b8 	bl	8005388 <HAL_RCC_NMI_IRQHandler>
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x8>

0800201a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002060:	f000 f936 	bl	80022d0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA1_Channel1_IRQHandler+0x10>)
 800206e:	f000 fc63 	bl	8002938 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000670 	.word	0x20000670

0800207c <DMA1_Channel2_IRQHandler>:

/**
 * @brief This function handles DMA1 channel2 global interrupt.
 */
void DMA1_Channel2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

	/* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <DMA1_Channel2_IRQHandler+0x10>)
 8002082:	f000 fc59 	bl	8002938 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	/* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200006d0 	.word	0x200006d0

08002090 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
 */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80020aa:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80020c2:	701a      	strb	r2, [r3, #0]
	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
	HAL_TIM_IRQHandler(&htim17);
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 80020c6:	f006 fd21 	bl	8008b0c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000d7c 	.word	0x20000d7c
 80020d4:	20000d7d 	.word	0x20000d7d
 80020d8:	20000504 	.word	0x20000504

080020dc <USART1_IRQHandler>:
/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)

{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <USART1_IRQHandler+0x10>)
 80020e2:	f007 fc29 	bl	8009938 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000550 	.word	0x20000550

080020f0 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <USART2_IRQHandler+0x90>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <USART2_IRQHandler+0x94>)
 8002102:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <USART2_IRQHandler+0x98>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <USART2_IRQHandler+0x94>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	b2c8      	uxtb	r0, r1
 8002112:	491c      	ldr	r1, [pc, #112]	; (8002184 <USART2_IRQHandler+0x94>)
 8002114:	7008      	strb	r0, [r1, #0]
 8002116:	4413      	add	r3, r2
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b0a      	cmp	r3, #10
 8002120:	d126      	bne.n	8002170 <USART2_IRQHandler+0x80>
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <USART2_IRQHandler+0x9c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d022      	beq.n	8002170 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <USART2_IRQHandler+0x98>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <USART2_IRQHandler+0x94>)
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <USART2_IRQHandler+0xa0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <USART2_IRQHandler+0xa0>)
 8002144:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <USART2_IRQHandler+0x9c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <USART2_IRQHandler+0x9c>)
 8002150:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <USART2_IRQHandler+0x94>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <USART2_IRQHandler+0x98>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <USART2_IRQHandler+0xa4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d103      	bne.n	800216a <USART2_IRQHandler+0x7a>
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <USART2_IRQHandler+0x98>)
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <USART2_IRQHandler+0xa8>)
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e002      	b.n	8002170 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <USART2_IRQHandler+0x98>)
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <USART2_IRQHandler+0xa4>)
 800216e:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <USART2_IRQHandler+0x90>)
 8002172:	f007 fbe1 	bl	8009938 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
	/* USER CODE END USART2_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200005e0 	.word	0x200005e0
 8002184:	20000d74 	.word	0x20000d74
 8002188:	20000d70 	.word	0x20000d70
 800218c:	20000004 	.word	0x20000004
 8002190:	20000d78 	.word	0x20000d78
 8002194:	20000730 	.word	0x20000730
 8002198:	20000a50 	.word	0x20000a50

0800219c <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB OTG FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <OTG_FS_IRQHandler+0x10>)
 80021a2:	f001 f97c 	bl	800349e <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000226c 	.word	0x2000226c

080021b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d8:	f7ff ffea 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <LoopForever+0x6>)
  ldr r1, =_edata
 80021de:	490d      	ldr	r1, [pc, #52]	; (8002214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <LoopForever+0xe>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f4:	4c0a      	ldr	r4, [pc, #40]	; (8002220 <LoopForever+0x16>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002202:	f00d fcc3 	bl	800fb8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002206:	f7fe ff65 	bl	80010d4 <main>

0800220a <LoopForever>:

LoopForever:
    b LoopForever
 800220a:	e7fe      	b.n	800220a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002218:	08012e08 	.word	0x08012e08
  ldr r2, =_sbss
 800221c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002220:	200029ac 	.word	0x200029ac

08002224 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_IRQHandler>

08002226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 f961 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	200f      	movs	r0, #15
 8002238:	f000 f80e 	bl	8002258 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	e001      	b.n	800224c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002248:	f7ff fc76 	bl	8001b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224c:	79fb      	ldrb	r3, [r7, #7]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_InitTick+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d023      	beq.n	80022b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_InitTick+0x70>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_InitTick+0x6c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f96d 	bl	8002562 <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d809      	bhi.n	80022a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800229c:	f000 f937 	bl	800250e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_InitTick+0x74>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e004      	b.n	80022b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e001      	b.n	80022b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000010 	.word	0x20000010
 80022c8:	20000008 	.word	0x20000008
 80022cc:	2000000c 	.word	0x2000000c

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010
 80022f4:	20000d80 	.word	0x20000d80

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000d80 	.word	0x20000d80

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000010 	.word	0x20000010

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff3e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff31 	bl	80023bc <__NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffa2 	bl	80024b4 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08d      	b.n	80026aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_DMA_Init+0x138>)
 8002596:	429a      	cmp	r2, r3
 8002598:	d80f      	bhi.n	80025ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <HAL_DMA_Init+0x13c>)
 80025a2:	4413      	add	r3, r2
 80025a4:	4a45      	ldr	r2, [pc, #276]	; (80026bc <HAL_DMA_Init+0x140>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <HAL_DMA_Init+0x144>)
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
 80025b8:	e00e      	b.n	80025d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <HAL_DMA_Init+0x148>)
 80025c2:	4413      	add	r3, r2
 80025c4:	4a3d      	ldr	r2, [pc, #244]	; (80026bc <HAL_DMA_Init+0x140>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	009a      	lsls	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a3c      	ldr	r2, [pc, #240]	; (80026c8 <HAL_DMA_Init+0x14c>)
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa72 	bl	8002b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002638:	d102      	bne.n	8002640 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002654:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_DMA_Init+0x104>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d80c      	bhi.n	8002680 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa92 	bl	8002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e008      	b.n	8002692 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40020407 	.word	0x40020407
 80026b8:	bffdfff8 	.word	0xbffdfff8
 80026bc:	cccccccd 	.word	0xcccccccd
 80026c0:	40020000 	.word	0x40020000
 80026c4:	bffdfbf8 	.word	0xbffdfbf8
 80026c8:	40020400 	.word	0x40020400

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Start_IT+0x20>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e066      	b.n	80027ba <HAL_DMA_Start_IT+0xee>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d155      	bne.n	80027ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f9b6 	bl	8002a96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 020e 	orr.w	r2, r2, #14
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e00f      	b.n	8002764 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 020a 	orr.w	r2, r2, #10
 8002762:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002780:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002798:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e005      	b.n	80027b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d008      	beq.n	80027ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e040      	b.n	800286e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020e 	bic.w	r2, r2, #14
 80027fa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f003 021c 	and.w	r2, r3, #28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002838:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800285a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d005      	beq.n	800289e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e047      	b.n	800292e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 020e 	bic.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f003 021c 	and.w	r2, r3, #28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00c      	beq.n	800290e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002902:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800290c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
    }
  }
  return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	f003 031c 	and.w	r3, r3, #28
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d026      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x7a>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d021      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	f003 021c 	and.w	r2, r3, #28
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2104      	movs	r1, #4
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d071      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029b0:	e06c      	b.n	8002a8c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 031c 	and.w	r3, r3, #28
 80029ba:	2202      	movs	r2, #2
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02e      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xec>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d029      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 020a 	bic.w	r2, r2, #10
 80029ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 021c 	and.w	r2, r3, #28
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2102      	movs	r1, #2
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d038      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a22:	e033      	b.n	8002a8c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 031c 	and.w	r3, r3, #28
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02a      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x156>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d025      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 020e 	bic.w	r2, r2, #14
 8002a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f003 021c 	and.w	r2, r3, #28
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
}
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aac:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002abe:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f003 021c 	and.w	r2, r3, #28
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d108      	bne.n	8002af6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002af4:	e007      	b.n	8002b06 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d80a      	bhi.n	8002b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b34:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6493      	str	r3, [r2, #72]	; 0x48
 8002b3c:	e007      	b.n	8002b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3b08      	subs	r3, #8
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40020407 	.word	0x40020407
 8002b84:	4002081c 	.word	0x4002081c
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	40020880 	.word	0x40020880

08002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	1000823f 	.word	0x1000823f
 8002bd4:	40020940 	.word	0x40020940

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be6:	e166      	b.n	8002eb6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8158 	beq.w	8002eb0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d005      	beq.n	8002c18 <HAL_GPIO_Init+0x40>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d130      	bne.n	8002c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c4e:	2201      	movs	r2, #1
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 0201 	and.w	r2, r3, #1
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d017      	beq.n	8002cb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d123      	bne.n	8002d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	6939      	ldr	r1, [r7, #16]
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80b2 	beq.w	8002eb0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <HAL_GPIO_Init+0x2fc>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_GPIO_Init+0x2fc>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6613      	str	r3, [r2, #96]	; 0x60
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_GPIO_Init+0x2fc>)
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d64:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d8e:	d02b      	beq.n	8002de8 <HAL_GPIO_Init+0x210>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_GPIO_Init+0x304>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d025      	beq.n	8002de4 <HAL_GPIO_Init+0x20c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <HAL_GPIO_Init+0x308>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d01f      	beq.n	8002de0 <HAL_GPIO_Init+0x208>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a50      	ldr	r2, [pc, #320]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d019      	beq.n	8002ddc <HAL_GPIO_Init+0x204>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a4f      	ldr	r2, [pc, #316]	; (8002ee8 <HAL_GPIO_Init+0x310>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_GPIO_Init+0x200>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a4e      	ldr	r2, [pc, #312]	; (8002eec <HAL_GPIO_Init+0x314>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00d      	beq.n	8002dd4 <HAL_GPIO_Init+0x1fc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a4d      	ldr	r2, [pc, #308]	; (8002ef0 <HAL_GPIO_Init+0x318>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <HAL_GPIO_Init+0x1f8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_GPIO_Init+0x1f4>
 8002dc8:	2307      	movs	r3, #7
 8002dca:	e00e      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002dcc:	2308      	movs	r3, #8
 8002dce:	e00c      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002dd0:	2306      	movs	r3, #6
 8002dd2:	e00a      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	e008      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e006      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e004      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e002      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_GPIO_Init+0x212>
 8002de8:	2300      	movs	r3, #0
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	f002 0203 	and.w	r2, r2, #3
 8002df0:	0092      	lsls	r2, r2, #2
 8002df2:	4093      	lsls	r3, r2
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dfa:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_GPIO_Init+0x300>)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	3302      	adds	r3, #2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e2c:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f47f ae91 	bne.w	8002be8 <HAL_GPIO_Init+0x10>
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	48001000 	.word	0x48001000
 8002eec:	48001400 	.word	0x48001400
 8002ef0:	48001800 	.word	0x48001800
 8002ef4:	48001c00 	.word	0x48001c00
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43d9      	mvns	r1, r3
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e081      	b.n	80030a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fde2 	bl	8001b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	; 0x24
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	e006      	b.n	8003018 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003016:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d104      	bne.n	800302a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69d9      	ldr	r1, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030bc:	b2db      	uxtb	r3, r3
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d138      	bne.n	8003152 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e032      	b.n	8003154 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800311c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d139      	bne.n	80031ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003180:	2302      	movs	r3, #2
 8003182:	e033      	b.n	80031ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b08f      	sub	sp, #60	; 0x3c
 80031fc:	af0a      	add	r7, sp, #40	; 0x28
 80031fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e116      	b.n	8003438 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f00c f8cd 	bl	800f3c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f008 fdc8 	bl	800bdde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	687e      	ldr	r6, [r7, #4]
 8003256:	466d      	mov	r5, sp
 8003258:	f106 0410 	add.w	r4, r6, #16
 800325c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003264:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003268:	e885 0003 	stmia.w	r5, {r0, r1}
 800326c:	1d33      	adds	r3, r6, #4
 800326e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f008 fcdb 	bl	800bc2c <USB_CoreInit>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d7      	b.n	8003438 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f008 fdb6 	bl	800be00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e04a      	b.n	8003330 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333d      	adds	r3, #61	; 0x3d
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333c      	adds	r3, #60	; 0x3c
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	b298      	uxth	r0, r3
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3344      	adds	r3, #68	; 0x44
 80032d6:	4602      	mov	r2, r0
 80032d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3340      	adds	r3, #64	; 0x40
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3348      	adds	r3, #72	; 0x48
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334c      	adds	r3, #76	; 0x4c
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3354      	adds	r3, #84	; 0x54
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3301      	adds	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3af      	bcc.n	800329a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e044      	b.n	80033ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3b5      	bcc.n	8003340 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	687e      	ldr	r6, [r7, #4]
 80033dc:	466d      	mov	r5, sp
 80033de:	f106 0410 	add.w	r4, r6, #16
 80033e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80033f2:	1d33      	adds	r3, r6, #4
 80033f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f008 fd4e 	bl	800be98 <USB_DevInit>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e014      	b.n	8003438 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f001 f882 	bl	8004530 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f009 fdd6 	bl	800cfe2 <USB_DevDisconnect>

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_PCD_Start+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e01c      	b.n	8003496 <HAL_PCD_Start+0x56>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f008 fc9d 	bl	800bdbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f009 fd8a 	bl	800cfa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800349e:	b590      	push	{r4, r7, lr}
 80034a0:	b08d      	sub	sp, #52	; 0x34
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f009 fe48 	bl	800d14a <USB_GetMode>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 847e 	bne.w	8003dbe <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f009 fdac 	bl	800d024 <USB_ReadInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8474 	beq.w	8003dbc <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f009 fd99 	bl	800d024 <USB_ReadInterrupts>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d107      	bne.n	800350c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f002 0202 	and.w	r2, r2, #2
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f009 fd87 	bl	800d024 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d161      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0c5b      	lsrs	r3, r3, #17
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2b02      	cmp	r3, #2
 800355a:	d124      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d035      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6a38      	ldr	r0, [r7, #32]
 800357c:	f009 fbbe 	bl	800ccfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800358c:	441a      	add	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359e:	441a      	add	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
 80035a4:	e016      	b.n	80035d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	0c5b      	lsrs	r3, r3, #17
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d110      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b8:	2208      	movs	r2, #8
 80035ba:	4619      	mov	r1, r3
 80035bc:	6a38      	ldr	r0, [r7, #32]
 80035be:	f009 fb9d 	bl	800ccfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ce:	441a      	add	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0210 	orr.w	r2, r2, #16
 80035e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f009 fd1b 	bl	800d024 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035f8:	f040 80a7 	bne.w	800374a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f009 fd20 	bl	800d04a <USB_ReadDevAllOutEpInterrupt>
 800360a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800360c:	e099      	b.n	8003742 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 808e 	beq.w	8003736 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f009 fd44 	bl	800d0b2 <USB_ReadDevOutEPInterrupt>
 800362a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2301      	movs	r3, #1
 8003646:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fe96 	bl	800437c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	2308      	movs	r3, #8
 800366a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fed2 	bl	8004418 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2310      	movs	r3, #16
 800368e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d030      	beq.n	80036fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d109      	bne.n	80036ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	78db      	ldrb	r3, [r3, #3]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f00b ffb1 	bl	800f64c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	2302      	movs	r3, #2
 80036fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	461a      	mov	r2, r3
 8003730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003734:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	3301      	adds	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af62 	bne.w	800360e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f009 fc68 	bl	800d024 <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800375e:	f040 80a4 	bne.w	80038aa <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f009 fc89 	bl	800d07e <USB_ReadDevAllInEpInterrupt>
 800376c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003772:	e096      	b.n	80038a2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 808b 	beq.w	8003896 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f009 fcaf 	bl	800d0ee <USB_ReadDevInEPInterrupt>
 8003790:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037bc:	4013      	ands	r3, r2
 80037be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	2301      	movs	r3, #1
 80037d0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f00b fea2 	bl	800f522 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	2308      	movs	r3, #8
 80037f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	2310      	movs	r3, #16
 8003814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	461a      	mov	r2, r3
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800383c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800383e:	6a38      	ldr	r0, [r7, #32]
 8003840:	f008 fc76 	bl	800c130 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3338      	adds	r3, #56	; 0x38
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f00b feff 	bl	800f670 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	461a      	mov	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800388e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fcea 	bl	800426a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f af65 	bne.w	8003774 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 fbb8 	bl	800d024 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038be:	d122      	bne.n	8003906 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038e6:	2100      	movs	r1, #0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fe45 	bl	8004578 <HAL_PCDEx_LPM_Callback>
 80038ee:	e002      	b.n	80038f6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f00b fe83 	bl	800f5fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f009 fb8a 	bl	800d024 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391a:	d112      	bne.n	8003942 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f00b fe3f 	bl	800f5b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003940:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f009 fb6c 	bl	800d024 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003956:	d121      	bne.n	800399c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003966:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d111      	bne.n	8003996 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800398c:	2101      	movs	r1, #1
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fdf2 	bl	8004578 <HAL_PCDEx_LPM_Callback>
 8003994:	e002      	b.n	800399c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f00b fe0a 	bl	800f5b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f009 fb3f 	bl	800d024 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	f040 80b5 	bne.w	8003b1e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2110      	movs	r1, #16
 80039ce:	4618      	mov	r0, r3
 80039d0:	f008 fbae 	bl	800c130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d8:	e046      	b.n	8003a68 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	461a      	mov	r2, r3
 80039e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	3301      	adds	r3, #1
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3b3      	bcc.n	80039da <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d016      	beq.n	8003abc <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9e:	f043 030b 	orr.w	r3, r3, #11
 8003aa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab4:	f043 030b 	orr.w	r3, r3, #11
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	e015      	b.n	8003ae8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ace:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ad2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae2:	f043 030b 	orr.w	r3, r3, #11
 8003ae6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003afa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f009 fb4f 	bl	800d1ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f009 fa7e 	bl	800d024 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b32:	d124      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f009 fb14 	bl	800d166 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f008 fb71 	bl	800c22a <USB_GetDevSpeed>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681c      	ldr	r4, [r3, #0]
 8003b54:	f001 fbd0 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8003b58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	4620      	mov	r0, r4
 8003b64:	f008 f88e 	bl	800bc84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f00b fd02 	bl	800f572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f009 fa4e 	bl	800d024 <USB_ReadInterrupts>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d10a      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f00b fcdf 	bl	800f556 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f002 0208 	and.w	r2, r2, #8
 8003ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f009 fa39 	bl	800d024 <USB_ReadInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d122      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc8:	2301      	movs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	e014      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb0b 	bl	8004208 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3e5      	bcc.n	8003bce <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f009 fa0c 	bl	800d024 <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d13b      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c18:	2301      	movs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e02b      	b.n	8003c76 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3340      	adds	r3, #64	; 0x40
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d115      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da12      	bge.n	8003c70 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	333f      	adds	r3, #63	; 0x3f
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 facc 	bl	8004208 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	3301      	adds	r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d3ce      	bcc.n	8003c1e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f009 f9c5 	bl	800d024 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca4:	d155      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e045      	b.n	8003d38 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d12e      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da2b      	bge.n	8003d32 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d121      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2e:	6053      	str	r3, [r2, #4]
            break;
 8003d30:	e007      	b.n	8003d42 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	3301      	adds	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b4      	bcc.n	8003cac <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f009 f964 	bl	800d024 <USB_ReadInterrupts>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d10a      	bne.n	8003d7e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f00b fc93 	bl	800f694 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f009 f94e 	bl	800d024 <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d115      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f00b fc83 	bl	800f6b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	e000      	b.n	8003dbe <HAL_PCD_IRQHandler+0x920>
      return;
 8003dbc:	bf00      	nop
    }
  }
}
 8003dbe:	3734      	adds	r7, #52	; 0x34
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd90      	pop	{r4, r7, pc}

08003dc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_SetAddress+0x1a>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e013      	b.n	8003e06 <HAL_PCD_SetAddress+0x42>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f009 f8ac 	bl	800cf54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	4608      	mov	r0, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	70fb      	strb	r3, [r7, #3]
 8003e20:	460b      	mov	r3, r1
 8003e22:	803b      	strh	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da0f      	bge.n	8003e54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	3338      	adds	r3, #56	; 0x38
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	3304      	adds	r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	705a      	strb	r2, [r3, #1]
 8003e52:	e00f      	b.n	8003e74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e80:	883a      	ldrh	r2, [r7, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	78ba      	ldrb	r2, [r7, #2]
 8003e8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e9e:	78bb      	ldrb	r3, [r7, #2]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d102      	bne.n	8003eaa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_PCD_EP_Open+0xaa>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e00e      	b.n	8003ed6 <HAL_PCD_EP_Open+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f008 f9ce 	bl	800c268 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da0f      	bge.n	8003f12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3338      	adds	r3, #56	; 0x38
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	705a      	strb	r2, [r3, #1]
 8003f10:	e00f      	b.n	8003f32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_PCD_EP_Close+0x6e>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e00e      	b.n	8003f6a <HAL_PCD_EP_Close+0x8c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f008 fa0c 	bl	800c378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f003 020f 	and.w	r2, r3, #15
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f008 fc8d 	bl	800c8f0 <USB_EP0StartXfer>
 8003fd6:	e005      	b.n	8003fe4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f008 faa6 	bl	800c530 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004010:	681b      	ldr	r3, [r3, #0]
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	460b      	mov	r3, r1
 800402c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	3338      	adds	r3, #56	; 0x38
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	3304      	adds	r3, #4
 8004044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2201      	movs	r2, #1
 800405c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800406a:	7afb      	ldrb	r3, [r7, #11]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	4618      	mov	r0, r3
 800407c:	f008 fc38 	bl	800c8f0 <USB_EP0StartXfer>
 8004080:	e005      	b.n	800408e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	4618      	mov	r0, r3
 800408a:	f008 fa51 	bl	800c530 <USB_EPStartXfer>
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d901      	bls.n	80040b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e04e      	b.n	8004154 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da0f      	bge.n	80040de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	3338      	adds	r3, #56	; 0x38
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	705a      	strb	r2, [r3, #1]
 80040dc:	e00d      	b.n	80040fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_PCD_EP_SetStall+0x82>
 8004116:	2302      	movs	r3, #2
 8004118:	e01c      	b.n	8004154 <HAL_PCD_EP_SetStall+0xbc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	4618      	mov	r0, r3
 800412a:	f008 fe3f 	bl	800cdac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f009 f831 	bl	800d1ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 020f 	and.w	r2, r3, #15
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d901      	bls.n	800417a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e042      	b.n	8004200 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800417a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da0f      	bge.n	80041a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	3338      	adds	r3, #56	; 0x38
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	705a      	strb	r2, [r3, #1]
 80041a0:	e00f      	b.n	80041c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_PCD_EP_ClrStall+0x86>
 80041de:	2302      	movs	r3, #2
 80041e0:	e00e      	b.n	8004200 <HAL_PCD_EP_ClrStall+0xa4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f008 fe49 	bl	800ce88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004218:	2b00      	cmp	r3, #0
 800421a:	da0c      	bge.n	8004236 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	3338      	adds	r3, #56	; 0x38
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e00c      	b.n	8004250 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	4618      	mov	r0, r3
 8004258:	f008 fc6c 	bl	800cb34 <USB_EPStopXfer>
 800425c:	4603      	mov	r3, r0
 800425e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004260:	7afb      	ldrb	r3, [r7, #11]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	3338      	adds	r3, #56	; 0x38
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	429a      	cmp	r2, r3
 800429c:	d901      	bls.n	80042a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d902      	bls.n	80042be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3303      	adds	r3, #3
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042c6:	e026      	b.n	8004316 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d902      	bls.n	80042e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3303      	adds	r3, #3
 80042e8:	089b      	lsrs	r3, r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6919      	ldr	r1, [r3, #16]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	6978      	ldr	r0, [r7, #20]
 80042fa:	f008 fcc5 	bl	800cc88 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	b29b      	uxth	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	429a      	cmp	r2, r3
 800432a:	d809      	bhi.n	8004340 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004334:	429a      	cmp	r2, r3
 8004336:	d203      	bcs.n	8004340 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1c3      	bne.n	80042c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	429a      	cmp	r2, r3
 800434a:	d811      	bhi.n	8004370 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	2201      	movs	r2, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	43db      	mvns	r3, r3
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436c:	4013      	ands	r3, r2
 800436e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	333c      	adds	r3, #60	; 0x3c
 8004394:	3304      	adds	r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <PCD_EP_OutXfrComplete_int+0x98>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d124      	bne.n	80043fc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e01a      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	461a      	mov	r2, r3
 80043ea:	2320      	movs	r3, #32
 80043ec:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f00b f879 	bl	800f4ec <HAL_PCD_DataOutStageCallback>
 80043fa:	e005      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f00b f872 	bl	800f4ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	4f54310a 	.word	0x4f54310a

08004418 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	333c      	adds	r3, #60	; 0x3c
 8004430:	3304      	adds	r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a0c      	ldr	r2, [pc, #48]	; (800447c <PCD_EP_OutSetupPacket_int+0x64>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d90e      	bls.n	800446c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	461a      	mov	r2, r3
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f00b f82b 	bl	800f4c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	4f54300a 	.word	0x4f54300a

08004480 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
 800448c:	4613      	mov	r3, r2
 800448e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d107      	bne.n	80044ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800449e:	883b      	ldrh	r3, [r7, #0]
 80044a0:	0419      	lsls	r1, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
 80044ac:	e028      	b.n	8004500 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4413      	add	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e00d      	b.n	80044de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	3340      	adds	r3, #64	; 0x40
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	3301      	adds	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d3ec      	bcc.n	80044c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044e8:	883b      	ldrh	r3, [r7, #0]
 80044ea:	0418      	lsls	r0, r3, #16
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4302      	orrs	r2, r0
 80044f8:	3340      	adds	r3, #64	; 0x40
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	f043 0303 	orr.w	r3, r3, #3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d102      	bne.n	80045a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80045a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a6:	e00b      	b.n	80045c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d102      	bne.n	80045be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045bc:	e000      	b.n	80045c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40007000 	.word	0x40007000

080045d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d141      	bne.n	8004662 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d131      	bne.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045ec:	4b47      	ldr	r3, [pc, #284]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f2:	4a46      	ldr	r2, [pc, #280]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004604:	4a41      	ldr	r2, [pc, #260]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800460a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2232      	movs	r2, #50	; 0x32
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	0c9b      	lsrs	r3, r3, #18
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004622:	e002      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b01      	subs	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800462a:	4b38      	ldr	r3, [pc, #224]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d102      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f2      	bne.n	8004624 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d158      	bne.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e057      	b.n	8004700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004660:	e04d      	b.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d141      	bne.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d131      	bne.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004678:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004688:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2232      	movs	r2, #50	; 0x32
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	0c9b      	lsrs	r3, r3, #18
 80046aa:	3301      	adds	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ae:	e002      	b.n	80046b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c2:	d102      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f2      	bne.n	80046b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d112      	bne.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e011      	b.n	8004700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046ec:	e007      	b.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f6:	4a05      	ldr	r2, [pc, #20]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40007000 	.word	0x40007000
 8004710:	20000008 	.word	0x20000008
 8004714:	431bde83 	.word	0x431bde83

08004718 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_PWREx_EnableVddUSB+0x1c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004726:	6053      	str	r3, [r2, #4]
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40007000 	.word	0x40007000

08004738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f000 bc08 	b.w	8004f5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474c:	4b96      	ldr	r3, [pc, #600]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004756:	4b94      	ldr	r3, [pc, #592]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80e4 	beq.w	8004936 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_RCC_OscConfig+0x4c>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	f040 808b 	bne.w	8004892 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 8087 	bne.w	8004892 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004784:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_OscConfig+0x64>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e3df      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <HAL_RCC_OscConfig+0x7e>
 80047ac:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_OscConfig+0x8a>
 80047b6:	4b7c      	ldr	r3, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d223      	bcs.n	800480e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fdf8 	bl	80053c0 <RCC_SetFlashLatencyFromMSIRange>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e3c0      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047da:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a72      	ldr	r2, [pc, #456]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	f043 0308 	orr.w	r3, r3, #8
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	496d      	ldr	r1, [pc, #436]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f8:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4968      	ldr	r1, [pc, #416]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	e025      	b.n	800485a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480e:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4960      	ldr	r1, [pc, #384]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482c:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	495b      	ldr	r1, [pc, #364]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fdb8 	bl	80053c0 <RCC_SetFlashLatencyFromMSIRange>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e380      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f000 fcc1 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	4950      	ldr	r1, [pc, #320]	; (80049ac <HAL_RCC_OscConfig+0x274>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <HAL_RCC_OscConfig+0x278>)
 8004878:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800487a:	4b4e      	ldr	r3, [pc, #312]	; (80049b4 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fcea 	bl	8002258 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d052      	beq.n	8004934 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	e364      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d032      	beq.n	8004900 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800489a:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048a6:	f7fd fd27 	bl	80022f8 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ae:	f7fd fd23 	bl	80022f8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e34d      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048d2:	f043 0308 	orr.w	r3, r3, #8
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4930      	ldr	r1, [pc, #192]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ea:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	492b      	ldr	r1, [pc, #172]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
 80048fe:	e01a      	b.n	8004936 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004900:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800490c:	f7fd fcf4 	bl	80022f8 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004914:	f7fd fcf0 	bl	80022f8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e31a      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1dc>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d073      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x21c>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d10e      	bne.n	800496c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d063      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d15f      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e2f7      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x24c>
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e025      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d114      	bne.n	80049b8 <HAL_RCC_OscConfig+0x280>
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a02      	ldr	r2, [pc, #8]	; (80049a8 <HAL_RCC_OscConfig+0x270>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e013      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	08012994 	.word	0x08012994
 80049b0:	20000008 	.word	0x20000008
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	4ba0      	ldr	r3, [pc, #640]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a9f      	ldr	r2, [pc, #636]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b9d      	ldr	r3, [pc, #628]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a9c      	ldr	r2, [pc, #624]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fc8e 	bl	80022f8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fd fc8a 	bl	80022f8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e2b4      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f2:	4b92      	ldr	r3, [pc, #584]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2a8>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fd fc7a 	bl	80022f8 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fd fc76 	bl	80022f8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e2a0      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1a:	4b88      	ldr	r3, [pc, #544]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x2d0>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d060      	beq.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x310>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d116      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x328>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e27d      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4973      	ldr	r1, [pc, #460]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	e040      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d023      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fc35 	bl	80022f8 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fd fc31 	bl	80022f8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e25b      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa4:	4b65      	ldr	r3, [pc, #404]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b62      	ldr	r3, [pc, #392]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	495f      	ldr	r1, [pc, #380]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
 8004ac4:	e018      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5c      	ldr	r2, [pc, #368]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fc11 	bl	80022f8 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd fc0d 	bl	80022f8 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e237      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d03c      	beq.n	8004b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b12:	4a4a      	ldr	r2, [pc, #296]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fbec 	bl	80022f8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fd fbe8 	bl	80022f8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e212      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCC_OscConfig+0x3ec>
 8004b44:	e01b      	b.n	8004b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd fbcf 	bl	80022f8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fbcb 	bl	80022f8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1f5      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b70:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ef      	bne.n	8004b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80a6 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b90:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d118      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fb92 	bl	80022f8 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd8:	f7fd fb8e 	bl	80022f8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1b8      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4d8>
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c0e:	e029      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_OscConfig+0x50c>
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	4a03      	ldr	r2, [pc, #12]	; (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40007000 	.word	0x40007000
 8004c44:	4b9d      	ldr	r3, [pc, #628]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	4a9c      	ldr	r2, [pc, #624]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c54:	4b99      	ldr	r3, [pc, #612]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a98      	ldr	r2, [pc, #608]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d016      	beq.n	8004c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fb44 	bl	80022f8 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fd fb40 	bl	80022f8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e168      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8a:	4b8c      	ldr	r3, [pc, #560]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ed      	beq.n	8004c74 <HAL_RCC_OscConfig+0x53c>
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fd fb2d 	bl	80022f8 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd fb29 	bl	80022f8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e151      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ed      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	4a7a      	ldr	r2, [pc, #488]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cec:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf2:	4a72      	ldr	r2, [pc, #456]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd fafc 	bl	80022f8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d04:	f7fd faf8 	bl	80022f8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e122      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d16:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <HAL_RCC_OscConfig+0x5cc>
 8004d24:	e01b      	b.n	8004d5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d26:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2c:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd fadf 	bl	80022f8 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fd fadb 	bl	80022f8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e105      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d50:	4b5a      	ldr	r3, [pc, #360]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ef      	bne.n	8004d3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80f9 	beq.w	8004f5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f040 80cf 	bne.w	8004f10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d72:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0203 	and.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d12c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	3b01      	subs	r3, #1
 8004d92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d123      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d11b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d113      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d109      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d071      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d068      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004de6:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004df2:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0ac      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e02:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e0e:	f7fd fa73 	bl	80022f8 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fd fa6f 	bl	80022f8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e099      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e28:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e34:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_OscConfig+0x788>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e4e:	0212      	lsls	r2, r2, #8
 8004e50:	4311      	orrs	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0552      	lsls	r2, r2, #21
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e62:	0852      	lsrs	r2, r2, #1
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0652      	lsls	r2, r2, #25
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e6e:	06d2      	lsls	r2, r2, #27
 8004e70:	430a      	orrs	r2, r1
 8004e72:	4912      	ldr	r1, [pc, #72]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e90:	f7fd fa32 	bl	80022f8 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fa2e 	bl	80022f8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e058      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb6:	e050      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e04f      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d144      	bne.n	8004f5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ee8:	f7fd fa06 	bl	80022f8 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fd fa02 	bl	80022f8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e02c      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x7b8>
 8004f0e:	e024      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d01f      	beq.n	8004f56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fd f9e9 	bl	80022f8 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fd f9e5 	bl	80022f8 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e00f      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	4905      	ldr	r1, [pc, #20]	; (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_OscConfig+0x830>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	60cb      	str	r3, [r1, #12]
 8004f54:	e001      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	feeefffc 	.word	0xfeeefffc

08004f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e11d      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b90      	ldr	r3, [pc, #576]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	498b      	ldr	r1, [pc, #556]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e105      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d010      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4b81      	ldr	r3, [pc, #516]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d908      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b7e      	ldr	r3, [pc, #504]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	497b      	ldr	r1, [pc, #492]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d079      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d11e      	bne.n	8005034 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b75      	ldr	r3, [pc, #468]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0dc      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005006:	f000 fa35 	bl	8005474 <RCC_GetSysClockFreqFromPLLSource>
 800500a:	4603      	mov	r3, r0
 800500c:	4a70      	ldr	r2, [pc, #448]	; (80051d0 <HAL_RCC_ClockConfig+0x264>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d946      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005012:	4b6e      	ldr	r3, [pc, #440]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d140      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800501e:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005026:	4a69      	ldr	r2, [pc, #420]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e035      	b.n	80050a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503c:	4b63      	ldr	r3, [pc, #396]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d115      	bne.n	8005074 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0b9      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005054:	4b5d      	ldr	r3, [pc, #372]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0ad      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005064:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0a5      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005074:	f000 f8b4 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8005078:	4603      	mov	r3, r0
 800507a:	4a55      	ldr	r2, [pc, #340]	; (80051d0 <HAL_RCC_ClockConfig+0x264>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d90f      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005080:	4b52      	ldr	r3, [pc, #328]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800508c:	4b4f      	ldr	r3, [pc, #316]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005094:	4a4d      	ldr	r2, [pc, #308]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050a0:	4b4a      	ldr	r3, [pc, #296]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 0203 	bic.w	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4947      	ldr	r1, [pc, #284]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b2:	f7fd f921 	bl	80022f8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ba:	f7fd f91d 	bl	80022f8 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e077      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 020c 	and.w	r2, r3, #12
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	429a      	cmp	r2, r3
 80050e0:	d1eb      	bne.n	80050ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050e8:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a37      	ldr	r2, [pc, #220]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510c:	429a      	cmp	r2, r3
 800510e:	d208      	bcs.n	8005122 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	492b      	ldr	r1, [pc, #172]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d210      	bcs.n	8005152 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 020f 	bic.w	r2, r3, #15
 8005138:	4923      	ldr	r1, [pc, #140]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005140:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <HAL_RCC_ClockConfig+0x25c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e036      	b.n	80051c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4918      	ldr	r1, [pc, #96]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4910      	ldr	r1, [pc, #64]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005190:	f000 f826 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <HAL_RCC_ClockConfig+0x260>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	490c      	ldr	r1, [pc, #48]	; (80051d4 <HAL_RCC_ClockConfig+0x268>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_RCC_ClockConfig+0x26c>)
 80051ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCC_ClockConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd f84f 	bl	8002258 <HAL_InitTick>
 80051ba:	4603      	mov	r3, r0
 80051bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40021000 	.word	0x40021000
 80051d0:	04c4b400 	.word	0x04c4b400
 80051d4:	08012994 	.word	0x08012994
 80051d8:	20000008 	.word	0x20000008
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ee:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f8:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x34>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d121      	bne.n	8005252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d11e      	bne.n	8005252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d107      	bne.n	8005230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	e005      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800523c:	4a2b      	ldr	r2, [pc, #172]	; (80052ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10d      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d102      	bne.n	800525e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005258:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e004      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d101      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d134      	bne.n	80052d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0xa6>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d003      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0xac>
 8005284:	e005      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005288:	617b      	str	r3, [r7, #20]
      break;
 800528a:	e005      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800528e:	617b      	str	r3, [r7, #20]
      break;
 8005290:	e002      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	617b      	str	r3, [r7, #20]
      break;
 8005296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005298:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3301      	adds	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	fb03 f202 	mul.w	r2, r3, r2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	0e5b      	lsrs	r3, r3, #25
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	3301      	adds	r3, #1
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052d8:	69bb      	ldr	r3, [r7, #24]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3724      	adds	r7, #36	; 0x24
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	080129ac 	.word	0x080129ac
 80052f0:	00f42400 	.word	0x00f42400
 80052f4:	007a1200 	.word	0x007a1200

080052f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_RCC_GetHCLKFreq+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000008 	.word	0x20000008

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005314:	f7ff fff0 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4904      	ldr	r1, [pc, #16]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	080129a4 	.word	0x080129a4

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005340:	f7ff ffda 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0adb      	lsrs	r3, r3, #11
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4904      	ldr	r1, [pc, #16]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000
 8005364:	080129a4 	.word	0x080129a4

08005368 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_EnableCSS+0x1c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <HAL_RCC_EnableCSS+0x1c>)
 8005372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005376:	6013      	str	r3, [r2, #0]
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000

08005388 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005398:	d105      	bne.n	80053a6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800539a:	f000 f809 	bl	80053b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800539e:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_NMI_IRQHandler+0x24>)
 80053a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a4:	621a      	str	r2, [r3, #32]
  }
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053d8:	f7ff f8da 	bl	8004590 <HAL_PWREx_GetVoltageRange>
 80053dc:	6178      	str	r0, [r7, #20]
 80053de:	e014      	b.n	800540a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e0:	4b22      	ldr	r3, [pc, #136]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ea:	6593      	str	r3, [r2, #88]	; 0x58
 80053ec:	4b1f      	ldr	r3, [pc, #124]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053f8:	f7ff f8ca 	bl	8004590 <HAL_PWREx_GetVoltageRange>
 80053fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005410:	d10b      	bne.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d913      	bls.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2ba0      	cmp	r3, #160	; 0xa0
 800541c:	d902      	bls.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800541e:	2302      	movs	r3, #2
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e00d      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005424:	2301      	movs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e00a      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b7f      	cmp	r3, #127	; 0x7f
 800542e:	d902      	bls.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005430:	2302      	movs	r3, #2
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e004      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b70      	cmp	r3, #112	; 0x70
 800543a:	d101      	bne.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800543c:	2301      	movs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 020f 	bic.w	r2, r3, #15
 8005448:	4909      	ldr	r1, [pc, #36]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	40022000 	.word	0x40022000

08005474 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547a:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d00b      	beq.n	80054a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d825      	bhi.n	80054dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d008      	beq.n	80054a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d11f      	bne.n	80054dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800549e:	613b      	str	r3, [r7, #16]
    break;
 80054a0:	e01f      	b.n	80054e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80054a4:	613b      	str	r3, [r7, #16]
    break;
 80054a6:	e01c      	b.n	80054e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054b4:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e005      	b.n	80054d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80054d0:	4a1a      	ldr	r2, [pc, #104]	; (800553c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	613b      	str	r3, [r7, #16]
    break;
 80054da:	e002      	b.n	80054e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
    break;
 80054e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e2:	4b13      	ldr	r3, [pc, #76]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	3301      	adds	r3, #1
 80054ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	fb03 f202 	mul.w	r2, r3, r2
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0e5b      	lsrs	r3, r3, #25
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	3301      	adds	r3, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005522:	683b      	ldr	r3, [r7, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40021000 	.word	0x40021000
 8005534:	00f42400 	.word	0x00f42400
 8005538:	007a1200 	.word	0x007a1200
 800553c:	080129ac 	.word	0x080129ac

08005540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005548:	2300      	movs	r3, #0
 800554a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800554c:	2300      	movs	r3, #0
 800554e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d040      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d02a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d825      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d026      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d821      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d006      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d81d      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d010      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005580:	e018      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	4a88      	ldr	r2, [pc, #544]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800558e:	e015      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f001 fa24 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a0:	e00c      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3320      	adds	r3, #32
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fb0f 	bl	8006bcc <RCCEx_PLLSAI2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	74fb      	strb	r3, [r7, #19]
      break;
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80055ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c2:	4b79      	ldr	r3, [pc, #484]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d0:	4975      	ldr	r1, [pc, #468]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d047      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f2:	d030      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d82a      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fe:	d02a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005604:	d824      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560a:	d008      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800560c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005610:	d81e      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561a:	d010      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800561c:	e018      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800561e:	4b62      	ldr	r3, [pc, #392]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4a61      	ldr	r2, [pc, #388]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005628:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800562a:	e015      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f9d6 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800563c:	e00c      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3320      	adds	r3, #32
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fac1 	bl	8006bcc <RCCEx_PLLSAI2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	74fb      	strb	r3, [r7, #19]
      break;
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800565e:	4b52      	ldr	r3, [pc, #328]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005660:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	494e      	ldr	r1, [pc, #312]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005674:	e001      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	7cfb      	ldrb	r3, [r7, #19]
 8005678:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 809f 	beq.w	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005688:	2300      	movs	r3, #0
 800568a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6593      	str	r3, [r2, #88]	; 0x58
 80056ae:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ba:	2301      	movs	r3, #1
 80056bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056be:	4b3b      	ldr	r3, [pc, #236]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ca:	f7fc fe15 	bl	80022f8 <HAL_GetTick>
 80056ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d0:	e009      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fc fe11 	bl	80022f8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d902      	bls.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	74fb      	strb	r3, [r7, #19]
        break;
 80056e4:	e005      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056e6:	4b31      	ldr	r3, [pc, #196]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ef      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80056f2:	7cfb      	ldrb	r3, [r7, #19]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d15b      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	429a      	cmp	r2, r3
 8005714:	d019      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005716:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005722:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800572a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005742:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d016      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc fdd0 	bl	80022f8 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575a:	e00b      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575c:	f7fc fdcc 	bl	80022f8 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d902      	bls.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	74fb      	strb	r3, [r7, #19]
            break;
 8005772:	e006      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ec      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	4903      	ldr	r1, [pc, #12]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	74bb      	strb	r3, [r7, #18]
 80057a6:	e005      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057b4:	7c7b      	ldrb	r3, [r7, #17]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4ba0      	ldr	r3, [pc, #640]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4a9f      	ldr	r2, [pc, #636]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057d2:	4b9a      	ldr	r3, [pc, #616]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f023 0203 	bic.w	r2, r3, #3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	4996      	ldr	r1, [pc, #600]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f4:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f023 020c 	bic.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	498e      	ldr	r1, [pc, #568]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005816:	4b89      	ldr	r3, [pc, #548]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	4985      	ldr	r1, [pc, #532]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005838:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005846:	497d      	ldr	r1, [pc, #500]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800585a:	4b78      	ldr	r3, [pc, #480]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	4974      	ldr	r1, [pc, #464]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	496c      	ldr	r1, [pc, #432]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800589e:	4b67      	ldr	r3, [pc, #412]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ac:	4963      	ldr	r1, [pc, #396]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058c0:	4b5e      	ldr	r3, [pc, #376]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ce:	495b      	ldr	r1, [pc, #364]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e2:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	4952      	ldr	r1, [pc, #328]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005904:	4b4d      	ldr	r3, [pc, #308]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	494a      	ldr	r1, [pc, #296]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005926:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	4941      	ldr	r1, [pc, #260]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005948:	4b3c      	ldr	r3, [pc, #240]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800594e:	f023 0203 	bic.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005956:	4939      	ldr	r1, [pc, #228]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d028      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800596a:	4b34      	ldr	r3, [pc, #208]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	4930      	ldr	r1, [pc, #192]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d106      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005994:	60d3      	str	r3, [r2, #12]
 8005996:	e011      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059a0:	d10c      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f81b 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80059b8:	7cfb      	ldrb	r3, [r7, #19]
 80059ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d04d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d0:	d108      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d8:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059e2:	e012      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ea:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a02:	490e      	ldr	r1, [pc, #56]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a12:	d106      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a14:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a1e:	60d3      	str	r3, [r2, #12]
 8005a20:	e020      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a2a:	d109      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a02      	ldr	r2, [pc, #8]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a36:	60d3      	str	r3, [r2, #12]
 8005a38:	e014      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 ffc7 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d028      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a70:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	4947      	ldr	r1, [pc, #284]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a41      	ldr	r2, [pc, #260]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e011      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	2101      	movs	r1, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ff98 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01e      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ace:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ade:	492f      	ldr	r1, [pc, #188]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2102      	movs	r1, #2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 ff73 	bl	80069e4 <RCCEx_PLLSAI1_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b1e:	f023 0204 	bic.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b28:	491c      	ldr	r1, [pc, #112]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b42:	f023 0218 	bic.w	r2, r3, #24
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	4913      	ldr	r1, [pc, #76]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d017      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b70:	490a      	ldr	r1, [pc, #40]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b82:	d105      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b90:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bb2:	d13e      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bb4:	4bb6      	ldr	r3, [pc, #728]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc6:	d028      	beq.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bce:	f200 86f4 	bhi.w	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d005      	beq.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be0:	d00e      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005be2:	f000 beea 	b.w	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005be6:	4baa      	ldr	r3, [pc, #680]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	f040 86e4 	bne.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfa:	61fb      	str	r3, [r7, #28]
      break;
 8005bfc:	f000 bedf 	b.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c00:	4ba3      	ldr	r3, [pc, #652]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f040 86d9 	bne.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005c10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c14:	61fb      	str	r3, [r7, #28]
      break;
 8005c16:	f000 bed4 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c1a:	4b9d      	ldr	r3, [pc, #628]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c26:	f040 86ce 	bne.w	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005c2a:	4b9a      	ldr	r3, [pc, #616]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005c2c:	61fb      	str	r3, [r7, #28]
      break;
 8005c2e:	f000 beca 	b.w	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c32:	4b97      	ldr	r3, [pc, #604]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d036      	beq.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d840      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d020      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005c54:	e039      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c56:	4b8e      	ldr	r3, [pc, #568]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d116      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c62:	4b8b      	ldr	r3, [pc, #556]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005c6e:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	e005      	b.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005c7a:	4b85      	ldr	r3, [pc, #532]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	4a84      	ldr	r2, [pc, #528]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005c8e:	e01f      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
      break;
 8005c94:	e01c      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c96:	4b7e      	ldr	r3, [pc, #504]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d102      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005ca4:	4b7d      	ldr	r3, [pc, #500]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005ca6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005ca8:	e012      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
      break;
 8005cae:	e00f      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cb0:	4b77      	ldr	r3, [pc, #476]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005cbe:	4b78      	ldr	r3, [pc, #480]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005cc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
      break;
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
      break;
 8005cce:	bf00      	nop
    }

    switch(PeriphClk)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd6:	f000 8606 	beq.w	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce0:	f200 8673 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cea:	f000 8469 	beq.w	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cf4:	f200 8669 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfe:	f000 8531 	beq.w	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d08:	f200 865f 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d12:	f000 8187 	beq.w	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d1c:	f200 8655 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d26:	f000 80cd 	beq.w	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d30:	f200 864b 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	f000 8430 	beq.w	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	f200 8641 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d4e:	f000 83e4 	beq.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d58:	f200 8637 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d62:	f000 80af 	beq.w	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6c:	f200 862d 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	f000 809d 	beq.w	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	f200 8623 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8a:	f000 808b 	beq.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d94:	f200 8619 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9e:	f000 8554 	beq.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	f200 860f 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	f000 8500 	beq.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	f200 8605 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc6:	f000 84a1 	beq.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd0:	f200 85fb 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	f000 846c 	beq.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	f200 85f3 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d84c      	bhi.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 85ec 	beq.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	2b1f      	cmp	r3, #31
 8005df8:	f200 85e7 	bhi.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08006219 	.word	0x08006219
 8005e08:	08006287 	.word	0x08006287
 8005e0c:	080069cb 	.word	0x080069cb
 8005e10:	0800631b 	.word	0x0800631b
 8005e14:	080069cb 	.word	0x080069cb
 8005e18:	080069cb 	.word	0x080069cb
 8005e1c:	080069cb 	.word	0x080069cb
 8005e20:	08006393 	.word	0x08006393
 8005e24:	080069cb 	.word	0x080069cb
 8005e28:	080069cb 	.word	0x080069cb
 8005e2c:	080069cb 	.word	0x080069cb
 8005e30:	080069cb 	.word	0x080069cb
 8005e34:	080069cb 	.word	0x080069cb
 8005e38:	080069cb 	.word	0x080069cb
 8005e3c:	080069cb 	.word	0x080069cb
 8005e40:	08006417 	.word	0x08006417
 8005e44:	080069cb 	.word	0x080069cb
 8005e48:	080069cb 	.word	0x080069cb
 8005e4c:	080069cb 	.word	0x080069cb
 8005e50:	080069cb 	.word	0x080069cb
 8005e54:	080069cb 	.word	0x080069cb
 8005e58:	080069cb 	.word	0x080069cb
 8005e5c:	080069cb 	.word	0x080069cb
 8005e60:	080069cb 	.word	0x080069cb
 8005e64:	080069cb 	.word	0x080069cb
 8005e68:	080069cb 	.word	0x080069cb
 8005e6c:	080069cb 	.word	0x080069cb
 8005e70:	080069cb 	.word	0x080069cb
 8005e74:	080069cb 	.word	0x080069cb
 8005e78:	080069cb 	.word	0x080069cb
 8005e7c:	080069cb 	.word	0x080069cb
 8005e80:	08006499 	.word	0x08006499
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	f000 83e8 	beq.w	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005e8c:	f000 bd9d 	b.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e90:	40021000 	.word	0x40021000
 8005e94:	0003d090 	.word	0x0003d090
 8005e98:	080129ac 	.word	0x080129ac
 8005e9c:	00f42400 	.word	0x00f42400
 8005ea0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005ea4:	69b9      	ldr	r1, [r7, #24]
 8005ea6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005eaa:	f000 ff83 	bl	8006db4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005eae:	61f8      	str	r0, [r7, #28]
      break;
 8005eb0:	f000 bd8e 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005eba:	f000 ff7b 	bl	8006db4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005ebe:	61f8      	str	r0, [r7, #28]
      break;
 8005ec0:	f000 bd86 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005ec4:	4b9a      	ldr	r3, [pc, #616]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ede:	f200 8092 	bhi.w	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee8:	d029      	beq.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef0:	f200 8089 	bhi.w	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d07b      	beq.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f00:	d04a      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005f02:	e080      	b.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f04:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d17d      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f10:	4b87      	ldr	r3, [pc, #540]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005f1c:	4b84      	ldr	r3, [pc, #528]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005f28:	4b81      	ldr	r3, [pc, #516]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	4a7f      	ldr	r2, [pc, #508]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3a:	61fb      	str	r3, [r7, #28]
          break;
 8005f3c:	e066      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f3e:	4b7c      	ldr	r3, [pc, #496]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f4a:	d162      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005f4c:	4b78      	ldr	r3, [pc, #480]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f58:	d15b      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f5a:	4b75      	ldr	r3, [pc, #468]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f64:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	fb03 f202 	mul.w	r2, r3, r2
 8005f6e:	4b70      	ldr	r3, [pc, #448]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	091b      	lsrs	r3, r3, #4
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	3301      	adds	r3, #1
 8005f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005f80:	4b6b      	ldr	r3, [pc, #428]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	0d5b      	lsrs	r3, r3, #21
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	61fb      	str	r3, [r7, #28]
          break;
 8005f96:	e03c      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005f98:	4b65      	ldr	r3, [pc, #404]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa4:	d138      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005fa6:	4b62      	ldr	r3, [pc, #392]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb2:	d131      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005fb4:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	0a1b      	lsrs	r3, r3, #8
 8005fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	fb03 f202 	mul.w	r2, r3, r2
 8005fc8:	4b59      	ldr	r3, [pc, #356]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005fda:	4b55      	ldr	r3, [pc, #340]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	0d5b      	lsrs	r3, r3, #21
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	61fb      	str	r3, [r7, #28]
          break;
 8005ff0:	e012      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005ff2:	4b4f      	ldr	r3, [pc, #316]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d10e      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006000:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006002:	61fb      	str	r3, [r7, #28]
          break;
 8006004:	e00b      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006006:	bf00      	nop
 8006008:	f000 bce2 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800600c:	bf00      	nop
 800600e:	f000 bcdf 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006012:	bf00      	nop
 8006014:	f000 bcdc 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006018:	bf00      	nop
 800601a:	f000 bcd9 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800601e:	bf00      	nop
        break;
 8006020:	f000 bcd6 	b.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006024:	4b42      	ldr	r3, [pc, #264]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006032:	d13d      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006034:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006040:	f040 84c5 	bne.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006044:	4b3a      	ldr	r3, [pc, #232]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	f040 84bd 	bne.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006054:	4b36      	ldr	r3, [pc, #216]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	fb03 f202 	mul.w	r2, r3, r2
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	3301      	adds	r3, #1
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	0edb      	lsrs	r3, r3, #27
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800608c:	4b28      	ldr	r3, [pc, #160]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006098:	2311      	movs	r3, #17
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e001      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800609e:	2307      	movs	r3, #7
 80060a0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	61fb      	str	r3, [r7, #28]
      break;
 80060ac:	f000 bc8f 	b.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80060b0:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060c2:	d016      	beq.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060ca:	f200 809b 	bhi.w	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d4:	d032      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060dc:	f200 8092 	bhi.w	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8084 	beq.w	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ee:	d052      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80060f0:	e088      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	f040 8084 	bne.w	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	091b      	lsrs	r3, r3, #4
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	e005      	b.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800611a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4a03      	ldr	r2, [pc, #12]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612a:	61fb      	str	r3, [r7, #28]
          break;
 800612c:	e06c      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000
 8006134:	080129ac 	.word	0x080129ac
 8006138:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800613c:	4ba5      	ldr	r3, [pc, #660]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006148:	d160      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800614a:	4ba2      	ldr	r3, [pc, #648]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d159      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006158:	4b9e      	ldr	r3, [pc, #632]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	fb03 f202 	mul.w	r2, r3, r2
 800616c:	4b99      	ldr	r3, [pc, #612]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	3301      	adds	r3, #1
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800617e:	4b95      	ldr	r3, [pc, #596]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	0d5b      	lsrs	r3, r3, #21
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	3301      	adds	r3, #1
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	61fb      	str	r3, [r7, #28]
          break;
 8006194:	e03a      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006196:	4b8f      	ldr	r3, [pc, #572]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a2:	d135      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80061a4:	4b8b      	ldr	r3, [pc, #556]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b0:	d12e      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061b2:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	fb03 f202 	mul.w	r2, r3, r2
 80061c6:	4b83      	ldr	r3, [pc, #524]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	3301      	adds	r3, #1
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80061d8:	4b7e      	ldr	r3, [pc, #504]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	0d5b      	lsrs	r3, r3, #21
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	3301      	adds	r3, #1
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	61fb      	str	r3, [r7, #28]
          break;
 80061ee:	e00f      	b.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80061f0:	4b78      	ldr	r3, [pc, #480]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d10a      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80061fe:	4b76      	ldr	r3, [pc, #472]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006200:	61fb      	str	r3, [r7, #28]
          break;
 8006202:	e007      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006204:	bf00      	nop
 8006206:	e3e2      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006208:	bf00      	nop
 800620a:	e3e0      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800620c:	bf00      	nop
 800620e:	e3de      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006210:	bf00      	nop
 8006212:	e3dc      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006214:	bf00      	nop
      break;
 8006216:	e3da      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006218:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d827      	bhi.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006241 	.word	0x08006241
 8006234:	08006249 	.word	0x08006249
 8006238:	08006251 	.word	0x08006251
 800623c:	08006265 	.word	0x08006265
          frequency = HAL_RCC_GetPCLK2Freq();
 8006240:	f7ff f87c 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8006244:	61f8      	str	r0, [r7, #28]
          break;
 8006246:	e01d      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006248:	f7fe ffca 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800624c:	61f8      	str	r0, [r7, #28]
          break;
 800624e:	e019      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006250:	4b60      	ldr	r3, [pc, #384]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d10f      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800625e:	4b5f      	ldr	r3, [pc, #380]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006260:	61fb      	str	r3, [r7, #28]
          break;
 8006262:	e00c      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006264:	4b5b      	ldr	r3, [pc, #364]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d107      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006276:	61fb      	str	r3, [r7, #28]
          break;
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800627a:	bf00      	nop
 800627c:	e3a8      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800627e:	bf00      	nop
 8006280:	e3a6      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006282:	bf00      	nop
        break;
 8006284:	e3a4      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006286:	4b53      	ldr	r3, [pc, #332]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f003 030c 	and.w	r3, r3, #12
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d83a      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062d5 	.word	0x080062d5
 80062a4:	0800630f 	.word	0x0800630f
 80062a8:	0800630f 	.word	0x0800630f
 80062ac:	0800630f 	.word	0x0800630f
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	0800630f 	.word	0x0800630f
 80062b8:	0800630f 	.word	0x0800630f
 80062bc:	0800630f 	.word	0x0800630f
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	0800630f 	.word	0x0800630f
 80062c8:	0800630f 	.word	0x0800630f
 80062cc:	0800630f 	.word	0x0800630f
 80062d0:	080062f9 	.word	0x080062f9
          frequency = HAL_RCC_GetPCLK1Freq();
 80062d4:	f7ff f81c 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
          break;
 80062da:	e01d      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80062dc:	f7fe ff80 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 80062e0:	61f8      	str	r0, [r7, #28]
          break;
 80062e2:	e019      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e4:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f0:	d10f      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80062f2:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062f4:	61fb      	str	r3, [r7, #28]
          break;
 80062f6:	e00c      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b02      	cmp	r3, #2
 8006304:	d107      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	61fb      	str	r3, [r7, #28]
          break;
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800630e:	bf00      	nop
 8006310:	e35e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006312:	bf00      	nop
 8006314:	e35c      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006316:	bf00      	nop
        break;
 8006318:	e35a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b30      	cmp	r3, #48	; 0x30
 800632a:	d021      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b30      	cmp	r3, #48	; 0x30
 8006330:	d829      	bhi.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b20      	cmp	r3, #32
 8006336:	d011      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b20      	cmp	r3, #32
 800633c:	d823      	bhi.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b10      	cmp	r3, #16
 8006348:	d004      	beq.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800634a:	e01c      	b.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fe ffe0 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8006350:	61f8      	str	r0, [r7, #28]
          break;
 8006352:	e01d      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006354:	f7fe ff44 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006358:	61f8      	str	r0, [r7, #28]
          break;
 800635a:	e019      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006368:	d10f      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800636c:	61fb      	str	r3, [r7, #28]
          break;
 800636e:	e00c      	b.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006370:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d107      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800637e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006382:	61fb      	str	r3, [r7, #28]
          break;
 8006384:	e003      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006386:	bf00      	nop
 8006388:	e322      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800638a:	bf00      	nop
 800638c:	e320      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800638e:	bf00      	nop
        break;
 8006390:	e31e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006392:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2bc0      	cmp	r3, #192	; 0xc0
 80063a2:	d027      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2bc0      	cmp	r3, #192	; 0xc0
 80063a8:	d82f      	bhi.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d017      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d829      	bhi.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d004      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80063c2:	e022      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7fe ffa4 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80063c8:	61f8      	str	r0, [r7, #28]
          break;
 80063ca:	e023      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80063cc:	f7fe ff08 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 80063d0:	61f8      	str	r0, [r7, #28]
          break;
 80063d2:	e01f      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80063d4:	40021000 	.word	0x40021000
 80063d8:	02dc6c00 	.word	0x02dc6c00
 80063dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063e0:	4b9b      	ldr	r3, [pc, #620]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d10f      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80063ee:	4b99      	ldr	r3, [pc, #612]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80063f0:	61fb      	str	r3, [r7, #28]
          break;
 80063f2:	e00c      	b.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063f4:	4b96      	ldr	r3, [pc, #600]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d107      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	61fb      	str	r3, [r7, #28]
          break;
 8006408:	e003      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800640a:	bf00      	nop
 800640c:	e2e0      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800640e:	bf00      	nop
 8006410:	e2de      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006412:	bf00      	nop
        break;
 8006414:	e2dc      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006416:	4b8e      	ldr	r3, [pc, #568]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006428:	d025      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006430:	d82c      	bhi.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d013      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006440:	d824      	bhi.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644e:	d004      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006450:	e01c      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006452:	f7fe ff5d 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8006456:	61f8      	str	r0, [r7, #28]
          break;
 8006458:	e01d      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800645a:	f7fe fec1 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800645e:	61f8      	str	r0, [r7, #28]
          break;
 8006460:	e019      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006462:	4b7b      	ldr	r3, [pc, #492]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d10f      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006470:	4b78      	ldr	r3, [pc, #480]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006472:	61fb      	str	r3, [r7, #28]
          break;
 8006474:	e00c      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006476:	4b76      	ldr	r3, [pc, #472]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d107      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006488:	61fb      	str	r3, [r7, #28]
          break;
 800648a:	e003      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800648c:	bf00      	nop
 800648e:	e29f      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006490:	bf00      	nop
 8006492:	e29d      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006494:	bf00      	nop
        break;
 8006496:	e29b      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006498:	4b6d      	ldr	r3, [pc, #436]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064aa:	d025      	beq.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b2:	d82c      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ba:	d013      	beq.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c2:	d824      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d004      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80064d2:	e01c      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fe ff1c 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
          break;
 80064da:	e01d      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80064dc:	f7fe fe80 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 80064e0:	61f8      	str	r0, [r7, #28]
          break;
 80064e2:	e019      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064e4:	4b5a      	ldr	r3, [pc, #360]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d10f      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80064f2:	4b58      	ldr	r3, [pc, #352]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80064f4:	61fb      	str	r3, [r7, #28]
          break;
 80064f6:	e00c      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064f8:	4b55      	ldr	r3, [pc, #340]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61fb      	str	r3, [r7, #28]
          break;
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800650e:	bf00      	nop
 8006510:	e25e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006512:	bf00      	nop
 8006514:	e25c      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006516:	bf00      	nop
        break;
 8006518:	e25a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800651a:	4b4d      	ldr	r3, [pc, #308]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800652c:	d007      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006534:	d12f      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006536:	f7fe fe53 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800653a:	61f8      	str	r0, [r7, #28]
          break;
 800653c:	e02e      	b.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800653e:	4b44      	ldr	r3, [pc, #272]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800654a:	d126      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800654c:	4b40      	ldr	r3, [pc, #256]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d020      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006558:	4b3d      	ldr	r3, [pc, #244]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006562:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	fb03 f202 	mul.w	r2, r3, r2
 800656c:	4b38      	ldr	r3, [pc, #224]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	3301      	adds	r3, #1
 8006578:	fbb2 f3f3 	udiv	r3, r2, r3
 800657c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800657e:	4b34      	ldr	r3, [pc, #208]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	0e5b      	lsrs	r3, r3, #25
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	3301      	adds	r3, #1
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	61fb      	str	r3, [r7, #28]
          break;
 8006594:	e001      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006596:	bf00      	nop
 8006598:	e21a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800659a:	bf00      	nop
        break;
 800659c:	e218      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800659e:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80065b0:	f7fe fec4 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 80065b4:	61f8      	str	r0, [r7, #28]
        break;
 80065b6:	e20b      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80065b8:	f7fe fe12 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 80065bc:	61f8      	str	r0, [r7, #28]
        break;
 80065be:	e207      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80065c0:	4b23      	ldr	r3, [pc, #140]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c6:	f003 0318 	and.w	r3, r3, #24
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d010      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d834      	bhi.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d024      	beq.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80065e4:	e02d      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80065e6:	69b9      	ldr	r1, [r7, #24]
 80065e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80065ec:	f000 fbe2 	bl	8006db4 <RCCEx_GetSAIxPeriphCLKFreq>
 80065f0:	61f8      	str	r0, [r7, #28]
          break;
 80065f2:	e02b      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d122      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006600:	4b13      	ldr	r3, [pc, #76]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800660c:	4b10      	ldr	r3, [pc, #64]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	e005      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006618:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800661a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	61fb      	str	r3, [r7, #28]
          break;
 800662c:	e00b      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800663e:	61fb      	str	r3, [r7, #28]
          break;
 8006640:	e003      	b.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006642:	bf00      	nop
 8006644:	e1c4      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006646:	bf00      	nop
 8006648:	e1c2      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800664a:	bf00      	nop
        break;
 800664c:	e1c0      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000
 8006654:	00f42400 	.word	0x00f42400
 8006658:	080129ac 	.word	0x080129ac
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800665c:	4b96      	ldr	r3, [pc, #600]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666e:	d013      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006676:	d819      	bhi.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d004      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006686:	e011      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fe fe42 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800668c:	61f8      	str	r0, [r7, #28]
          break;
 800668e:	e010      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006690:	f7fe fda6 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006694:	61f8      	str	r0, [r7, #28]
          break;
 8006696:	e00c      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006698:	4b87      	ldr	r3, [pc, #540]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d104      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80066a6:	4b85      	ldr	r3, [pc, #532]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80066a8:	61fb      	str	r3, [r7, #28]
          break;
 80066aa:	e001      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80066ac:	bf00      	nop
 80066ae:	e18f      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066b0:	bf00      	nop
        break;
 80066b2:	e18d      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80066b4:	4b80      	ldr	r3, [pc, #512]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c6:	d013      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ce:	d819      	bhi.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80066de:	e011      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fe fe16 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80066e4:	61f8      	str	r0, [r7, #28]
          break;
 80066e6:	e010      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80066e8:	f7fe fd7a 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 80066ec:	61f8      	str	r0, [r7, #28]
          break;
 80066ee:	e00c      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066f0:	4b71      	ldr	r3, [pc, #452]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d104      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80066fe:	4b6f      	ldr	r3, [pc, #444]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006700:	61fb      	str	r3, [r7, #28]
          break;
 8006702:	e001      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006704:	bf00      	nop
 8006706:	e163      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006708:	bf00      	nop
        break;
 800670a:	e161      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671e:	d013      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006726:	d819      	bhi.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d004      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006736:	e011      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fe fdea 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800673c:	61f8      	str	r0, [r7, #28]
          break;
 800673e:	e010      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006740:	f7fe fd4e 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006744:	61f8      	str	r0, [r7, #28]
          break;
 8006746:	e00c      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006748:	4b5b      	ldr	r3, [pc, #364]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d104      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006756:	4b59      	ldr	r3, [pc, #356]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006758:	61fb      	str	r3, [r7, #28]
          break;
 800675a:	e001      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800675c:	bf00      	nop
 800675e:	e137      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006760:	bf00      	nop
        break;
 8006762:	e135      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006764:	4b54      	ldr	r3, [pc, #336]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d011      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d818      	bhi.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d004      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006788:	e011      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800678a:	f7fe fdc1 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800678e:	61f8      	str	r0, [r7, #28]
          break;
 8006790:	e010      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006792:	f7fe fd25 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006796:	61f8      	str	r0, [r7, #28]
          break;
 8006798:	e00c      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679a:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d104      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80067a8:	4b44      	ldr	r3, [pc, #272]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067aa:	61fb      	str	r3, [r7, #28]
          break;
 80067ac:	e001      	b.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80067ae:	bf00      	nop
 80067b0:	e10e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067b2:	bf00      	nop
        break;
 80067b4:	e10c      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80067b6:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067c8:	d02c      	beq.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067d0:	d833      	bhi.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d8:	d01a      	beq.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067e0:	d82b      	bhi.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ee:	d004      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80067f0:	e023      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067f2:	f7fe fd8d 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80067f6:	61f8      	str	r0, [r7, #28]
          break;
 80067f8:	e026      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80067fa:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d11a      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006808:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800680c:	61fb      	str	r3, [r7, #28]
          break;
 800680e:	e016      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006810:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681c:	d111      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800681e:	4b27      	ldr	r3, [pc, #156]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006820:	61fb      	str	r3, [r7, #28]
          break;
 8006822:	e00e      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006824:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d109      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006836:	61fb      	str	r3, [r7, #28]
          break;
 8006838:	e005      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800683a:	bf00      	nop
 800683c:	e0c8      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800683e:	bf00      	nop
 8006840:	e0c6      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006842:	bf00      	nop
 8006844:	e0c4      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006846:	bf00      	nop
        break;
 8006848:	e0c2      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800685c:	d030      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006864:	d837      	bhi.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800686c:	d01a      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006874:	d82f      	bhi.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006882:	d004      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006884:	e027      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006886:	f7fe fd43 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800688a:	61f8      	str	r0, [r7, #28]
          break;
 800688c:	e02a      	b.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11e      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800689c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068a0:	61fb      	str	r3, [r7, #28]
          break;
 80068a2:	e01a      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d115      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80068b2:	4b02      	ldr	r3, [pc, #8]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068b4:	61fb      	str	r3, [r7, #28]
          break;
 80068b6:	e012      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80068b8:	40021000 	.word	0x40021000
 80068bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068c0:	4b46      	ldr	r3, [pc, #280]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d109      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80068ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d2:	61fb      	str	r3, [r7, #28]
          break;
 80068d4:	e005      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80068d6:	bf00      	nop
 80068d8:	e07a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068da:	bf00      	nop
 80068dc:	e078      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068de:	bf00      	nop
 80068e0:	e076      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068e2:	bf00      	nop
        break;
 80068e4:	e074      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80068e6:	4b3d      	ldr	r3, [pc, #244]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f8:	d02c      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006900:	d855      	bhi.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690e:	d004      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006910:	e04d      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006912:	f7fe fc65 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006916:	61f8      	str	r0, [r7, #28]
          break;
 8006918:	e04e      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800691a:	4b30      	ldr	r3, [pc, #192]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d145      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	e005      	b.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800694c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006950:	61fb      	str	r3, [r7, #28]
          break;
 8006952:	e02e      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006954:	4b21      	ldr	r3, [pc, #132]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006960:	d129      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006962:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696e:	d122      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	fb03 f202 	mul.w	r2, r3, r2
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	3301      	adds	r3, #1
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	0d5b      	lsrs	r3, r3, #21
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	3301      	adds	r3, #1
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	61fb      	str	r3, [r7, #28]
          break;
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80069ae:	bf00      	nop
 80069b0:	e00e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b2:	bf00      	nop
 80069b4:	e00c      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b6:	bf00      	nop
        break;
 80069b8:	e00a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069ba:	bf00      	nop
 80069bc:	e008      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069be:	bf00      	nop
 80069c0:	e006      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069c2:	bf00      	nop
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069ce:	bf00      	nop
    }
  }

  return(frequency);
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000
 80069e0:	080129ac 	.word	0x080129ac

080069e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069f2:	4b72      	ldr	r3, [pc, #456]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069fe:	4b6f      	ldr	r3, [pc, #444]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0203 	and.w	r2, r3, #3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d103      	bne.n	8006a16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
       ||
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d142      	bne.n	8006a9c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
 8006a1a:	e03f      	b.n	8006a9c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d018      	beq.n	8006a56 <RCCEx_PLLSAI1_Config+0x72>
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d825      	bhi.n	8006a74 <RCCEx_PLLSAI1_Config+0x90>
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d002      	beq.n	8006a32 <RCCEx_PLLSAI1_Config+0x4e>
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d009      	beq.n	8006a44 <RCCEx_PLLSAI1_Config+0x60>
 8006a30:	e020      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a32:	4b62      	ldr	r3, [pc, #392]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11d      	bne.n	8006a7a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a42:	e01a      	b.n	8006a7a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a44:	4b5d      	ldr	r3, [pc, #372]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d116      	bne.n	8006a7e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a54:	e013      	b.n	8006a7e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a56:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a62:	4b56      	ldr	r3, [pc, #344]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a72:	e006      	b.n	8006a82 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	e004      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006a8a:	4b4c      	ldr	r3, [pc, #304]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f023 0203 	bic.w	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4949      	ldr	r1, [pc, #292]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8086 	bne.w	8006bb0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006aa4:	4b45      	ldr	r3, [pc, #276]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a44      	ldr	r2, [pc, #272]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fb fc22 	bl	80022f8 <HAL_GetTick>
 8006ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ab6:	e009      	b.n	8006acc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ab8:	f7fb fc1e 	bl	80022f8 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d902      	bls.n	8006acc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aca:	e005      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006acc:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1ef      	bne.n	8006ab8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d168      	bne.n	8006bb0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d113      	bne.n	8006b0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ae4:	4b35      	ldr	r3, [pc, #212]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	4b35      	ldr	r3, [pc, #212]	; (8006bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6892      	ldr	r2, [r2, #8]
 8006af0:	0211      	lsls	r1, r2, #8
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68d2      	ldr	r2, [r2, #12]
 8006af6:	06d2      	lsls	r2, r2, #27
 8006af8:	4311      	orrs	r1, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6852      	ldr	r2, [r2, #4]
 8006afe:	3a01      	subs	r2, #1
 8006b00:	0112      	lsls	r2, r2, #4
 8006b02:	430a      	orrs	r2, r1
 8006b04:	492d      	ldr	r1, [pc, #180]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	610b      	str	r3, [r1, #16]
 8006b0a:	e02d      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d115      	bne.n	8006b3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b12:	4b2a      	ldr	r3, [pc, #168]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6892      	ldr	r2, [r2, #8]
 8006b1e:	0211      	lsls	r1, r2, #8
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6912      	ldr	r2, [r2, #16]
 8006b24:	0852      	lsrs	r2, r2, #1
 8006b26:	3a01      	subs	r2, #1
 8006b28:	0552      	lsls	r2, r2, #21
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6852      	ldr	r2, [r2, #4]
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0112      	lsls	r2, r2, #4
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4921      	ldr	r1, [pc, #132]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
 8006b3c:	e014      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b3e:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6892      	ldr	r2, [r2, #8]
 8006b4a:	0211      	lsls	r1, r2, #8
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6952      	ldr	r2, [r2, #20]
 8006b50:	0852      	lsrs	r2, r2, #1
 8006b52:	3a01      	subs	r2, #1
 8006b54:	0652      	lsls	r2, r2, #25
 8006b56:	4311      	orrs	r1, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6852      	ldr	r2, [r2, #4]
 8006b5c:	3a01      	subs	r2, #1
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	430a      	orrs	r2, r1
 8006b62:	4916      	ldr	r1, [pc, #88]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b68:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b74:	f7fb fbc0 	bl	80022f8 <HAL_GetTick>
 8006b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b7a:	e009      	b.n	8006b90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b7c:	f7fb fbbc 	bl	80022f8 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d902      	bls.n	8006b90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	73fb      	strb	r3, [r7, #15]
          break;
 8006b8e:	e005      	b.n	8006b9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0ef      	beq.n	8006b7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4904      	ldr	r1, [pc, #16]	; (8006bbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	07ff800f 	.word	0x07ff800f
 8006bc4:	ff9f800f 	.word	0xff9f800f
 8006bc8:	f9ff800f 	.word	0xf9ff800f

08006bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bda:	4b72      	ldr	r3, [pc, #456]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006be6:	4b6f      	ldr	r3, [pc, #444]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0203 	and.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d103      	bne.n	8006bfe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d142      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e03f      	b.n	8006c84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d018      	beq.n	8006c3e <RCCEx_PLLSAI2_Config+0x72>
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d825      	bhi.n	8006c5c <RCCEx_PLLSAI2_Config+0x90>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d002      	beq.n	8006c1a <RCCEx_PLLSAI2_Config+0x4e>
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d009      	beq.n	8006c2c <RCCEx_PLLSAI2_Config+0x60>
 8006c18:	e020      	b.n	8006c5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c1a:	4b62      	ldr	r3, [pc, #392]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11d      	bne.n	8006c62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2a:	e01a      	b.n	8006c62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c2c:	4b5d      	ldr	r3, [pc, #372]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d116      	bne.n	8006c66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c3c:	e013      	b.n	8006c66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c3e:	4b59      	ldr	r3, [pc, #356]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c4a:	4b56      	ldr	r3, [pc, #344]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c5a:	e006      	b.n	8006c6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e004      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006c72:	4b4c      	ldr	r3, [pc, #304]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f023 0203 	bic.w	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4949      	ldr	r1, [pc, #292]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 8086 	bne.w	8006d98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c8c:	4b45      	ldr	r3, [pc, #276]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a44      	ldr	r2, [pc, #272]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c98:	f7fb fb2e 	bl	80022f8 <HAL_GetTick>
 8006c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c9e:	e009      	b.n	8006cb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ca0:	f7fb fb2a 	bl	80022f8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d902      	bls.n	8006cb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8006cb2:	e005      	b.n	8006cc0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cb4:	4b3b      	ldr	r3, [pc, #236]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ef      	bne.n	8006ca0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d168      	bne.n	8006d98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d113      	bne.n	8006cf4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	4b35      	ldr	r3, [pc, #212]	; (8006da8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6892      	ldr	r2, [r2, #8]
 8006cd8:	0211      	lsls	r1, r2, #8
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68d2      	ldr	r2, [r2, #12]
 8006cde:	06d2      	lsls	r2, r2, #27
 8006ce0:	4311      	orrs	r1, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6852      	ldr	r2, [r2, #4]
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	0112      	lsls	r2, r2, #4
 8006cea:	430a      	orrs	r2, r1
 8006cec:	492d      	ldr	r1, [pc, #180]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	614b      	str	r3, [r1, #20]
 8006cf2:	e02d      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d115      	bne.n	8006d26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cfa:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cfc:	695a      	ldr	r2, [r3, #20]
 8006cfe:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <RCCEx_PLLSAI2_Config+0x1e0>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6892      	ldr	r2, [r2, #8]
 8006d06:	0211      	lsls	r1, r2, #8
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6912      	ldr	r2, [r2, #16]
 8006d0c:	0852      	lsrs	r2, r2, #1
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	0552      	lsls	r2, r2, #21
 8006d12:	4311      	orrs	r1, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6852      	ldr	r2, [r2, #4]
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	0112      	lsls	r2, r2, #4
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	4921      	ldr	r1, [pc, #132]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	614b      	str	r3, [r1, #20]
 8006d24:	e014      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d26:	4b1f      	ldr	r3, [pc, #124]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6892      	ldr	r2, [r2, #8]
 8006d32:	0211      	lsls	r1, r2, #8
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6952      	ldr	r2, [r2, #20]
 8006d38:	0852      	lsrs	r2, r2, #1
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	0652      	lsls	r2, r2, #25
 8006d3e:	4311      	orrs	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6852      	ldr	r2, [r2, #4]
 8006d44:	3a01      	subs	r2, #1
 8006d46:	0112      	lsls	r2, r2, #4
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	4916      	ldr	r1, [pc, #88]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d50:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a13      	ldr	r2, [pc, #76]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7fb facc 	bl	80022f8 <HAL_GetTick>
 8006d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d62:	e009      	b.n	8006d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d64:	f7fb fac8 	bl	80022f8 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d902      	bls.n	8006d78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	73fb      	strb	r3, [r7, #15]
          break;
 8006d76:	e005      	b.n	8006d84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ef      	beq.n	8006d64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d8a:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8c:	695a      	ldr	r2, [r3, #20]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	4904      	ldr	r1, [pc, #16]	; (8006da4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
 8006da8:	07ff800f 	.word	0x07ff800f
 8006dac:	ff9f800f 	.word	0xff9f800f
 8006db0:	f9ff800f 	.word	0xf9ff800f

08006db4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	; 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	d10b      	bne.n	8006dea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006dd2:	4b7e      	ldr	r3, [pc, #504]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dd8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006ddc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d112      	bne.n	8006e0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006de4:	4b7a      	ldr	r3, [pc, #488]	; (8006fd0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e00f      	b.n	8006e0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d10b      	bne.n	8006e0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006df2:	4b76      	ldr	r3, [pc, #472]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfc:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e04:	d101      	bne.n	8006e0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006e06:	4b72      	ldr	r3, [pc, #456]	; (8006fd0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e08:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 80d6 	bne.w	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d003      	beq.n	8006e24 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e22:	d13b      	bne.n	8006e9c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e24:	4b69      	ldr	r3, [pc, #420]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e30:	f040 80c4 	bne.w	8006fbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006e34:	4b65      	ldr	r3, [pc, #404]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80bd 	beq.w	8006fbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e42:	4b62      	ldr	r3, [pc, #392]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	091b      	lsrs	r3, r3, #4
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006e56:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e60:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006e62:	4b5a      	ldr	r3, [pc, #360]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	0edb      	lsrs	r3, r3, #27
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006e74:	4b55      	ldr	r3, [pc, #340]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006e80:	2311      	movs	r3, #17
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e001      	b.n	8006e8a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006e86:	2307      	movs	r3, #7
 8006e88:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	fb03 f202 	mul.w	r2, r3, r2
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e9a:	e08f      	b.n	8006fbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d13a      	bne.n	8006f18 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eae:	f040 8086 	bne.w	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006eb2:	4b46      	ldr	r3, [pc, #280]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d07f      	beq.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006ebe:	4b43      	ldr	r3, [pc, #268]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	091b      	lsrs	r3, r3, #4
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	3301      	adds	r3, #1
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ed2:	4b3e      	ldr	r3, [pc, #248]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006edc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006ede:	4b3b      	ldr	r3, [pc, #236]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	0edb      	lsrs	r3, r3, #27
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006ef0:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006efc:	2311      	movs	r3, #17
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e001      	b.n	8006f06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006f02:	2307      	movs	r3, #7
 8006f04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	fb03 f202 	mul.w	r2, r3, r2
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	e052      	b.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b80      	cmp	r3, #128	; 0x80
 8006f1c:	d003      	beq.n	8006f26 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f24:	d109      	bne.n	8006f3a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f26:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d144      	bne.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006f36:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f38:	e041      	b.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d003      	beq.n	8006f48 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d13a      	bne.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006f48:	4b20      	ldr	r3, [pc, #128]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f54:	d133      	bne.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006f56:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d02d      	beq.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006f62:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f80:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	0edb      	lsrs	r3, r3, #27
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006f94:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006fa0:	2311      	movs	r3, #17
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e001      	b.n	8006faa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	fb03 f202 	mul.w	r2, r3, r2
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	e000      	b.n	8006fbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fbc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3724      	adds	r7, #36	; 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	001fff68 	.word	0x001fff68
 8006fd4:	00f42400 	.word	0x00f42400

08006fd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e078      	b.n	80070dc <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7fa fe1d 	bl	8001c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2203      	movs	r2, #3
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f86a 	bl	80070e4 <HAL_SD_InitCard>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e060      	b.n	80070dc <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fdcd 	bl	8007bc0 <HAL_SD_GetCardStatus>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e055      	b.n	80070dc <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007030:	7e3b      	ldrb	r3, [r7, #24]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007036:	7e7b      	ldrb	r3, [r7, #25]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d10a      	bne.n	800705a <HAL_SD_Init+0x82>
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <HAL_SD_Init+0x78>
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007056:	65da      	str	r2, [r3, #92]	; 0x5c
 8007058:	e00b      	b.n	8007072 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	2b01      	cmp	r3, #1
 8007060:	d104      	bne.n	800706c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007068:	65da      	str	r2, [r3, #92]	; 0x5c
 800706a:	e002      	b.n	8007072 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fe83 	bl	8007d84 <HAL_SD_ConfigWideBusOperation>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e029      	b.n	80070dc <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007088:	f7fb f936 	bl	80022f8 <HAL_GetTick>
 800708c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800708e:	e014      	b.n	80070ba <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007090:	f7fb f932 	bl	80022f8 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709e:	d10c      	bne.n	80070ba <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e010      	b.n	80070dc <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 ff76 	bl	8007fac <HAL_SD_GetCardState>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d1e4      	bne.n	8007090 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3728      	adds	r7, #40	; 0x28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80070e4:	b5b0      	push	{r4, r5, r7, lr}
 80070e6:	b08e      	sub	sp, #56	; 0x38
 80070e8:	af04      	add	r7, sp, #16
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80070fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007100:	f7fe fd4e 	bl	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007104:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800711a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e079      	b.n	8007214 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	4a3d      	ldr	r2, [pc, #244]	; (800721c <HAL_SD_InitCard+0x138>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	091b      	lsrs	r3, r3, #4
 800712c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d107      	bne.n	800714c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0210 	orr.w	r2, r2, #16
 800714a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681d      	ldr	r5, [r3, #0]
 8007150:	466c      	mov	r4, sp
 8007152:	f107 0314 	add.w	r3, r7, #20
 8007156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800715a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800715e:	f107 0308 	add.w	r3, r7, #8
 8007162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007164:	4628      	mov	r0, r5
 8007166:	f003 ff7b 	bl	800b060 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f003 ffbe 	bl	800b0f0 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007180:	4a27      	ldr	r2, [pc, #156]	; (8007220 <HAL_SD_InitCard+0x13c>)
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	3301      	adds	r3, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb f8c0 	bl	8002310 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 ffeb 	bl	800816c <SD_PowerON>
 8007196:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e02e      	b.n	8007214 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 ff18 	bl	8007fec <SD_InitCard>
 80071bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e01b      	b.n	8007214 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071e4:	4618      	mov	r0, r3
 80071e6:	f004 f819 	bl	800b21c <SDMMC_CmdBlockLength>
 80071ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00f      	beq.n	8007212 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <HAL_SD_InitCard+0x140>)
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3728      	adds	r7, #40	; 0x28
 8007218:	46bd      	mov	sp, r7
 800721a:	bdb0      	pop	{r4, r5, r7, pc}
 800721c:	014f8b59 	.word	0x014f8b59
 8007220:	00012110 	.word	0x00012110
 8007224:	1fe00fff 	.word	0x1fe00fff

08007228 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b092      	sub	sp, #72	; 0x48
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007236:	f7fb f85f 	bl	80022f8 <HAL_GetTick>
 800723a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d107      	bne.n	800725a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e170      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	f040 8163 	bne.w	800752e <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800726e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	429a      	cmp	r2, r3
 800727a:	d907      	bls.n	800728c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e157      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2203      	movs	r2, #3
 8007290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2200      	movs	r2, #0
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d002      	beq.n	80072aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	025b      	lsls	r3, r3, #9
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	025b      	lsls	r3, r3, #9
 80072b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80072b6:	2390      	movs	r3, #144	; 0x90
 80072b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80072ba:	2302      	movs	r3, #2
 80072bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f107 0214 	add.w	r2, r7, #20
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f003 ff77 	bl	800b1c4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d90a      	bls.n	8007302 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2202      	movs	r2, #2
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 ffd5 	bl	800b2a8 <SDMMC_CmdReadMultiBlock>
 80072fe:	6478      	str	r0, [r7, #68]	; 0x44
 8007300:	e009      	b.n	8007316 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800730e:	4618      	mov	r0, r3
 8007310:	f003 ffa7 	bl	800b262 <SDMMC_CmdReadSingleBlock>
 8007314:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007318:	2b00      	cmp	r3, #0
 800731a:	d012      	beq.n	8007342 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a88      	ldr	r2, [pc, #544]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 8007322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	431a      	orrs	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e0fc      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007346:	e061      	b.n	800740c <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d03c      	beq.n	80073d0 <HAL_SD_ReadBlocks+0x1a8>
 8007356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d039      	beq.n	80073d0 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800735c:	2300      	movs	r3, #0
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
 8007360:	e033      	b.n	80073ca <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f003 fea4 	bl	800b0b4 <SDMMC_ReadFIFO>
 800736c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	b2da      	uxtb	r2, r3
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	3301      	adds	r3, #1
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800737c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737e:	3b01      	subs	r3, #1
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b2da      	uxtb	r2, r3
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	3301      	adds	r3, #1
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007394:	3b01      	subs	r3, #1
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	3301      	adds	r3, #1
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	3b01      	subs	r3, #1
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	3301      	adds	r3, #1
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	3b01      	subs	r3, #1
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	3301      	adds	r3, #1
 80073c8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	d9c8      	bls.n	8007362 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80073d0:	f7fa ff92 	bl	80022f8 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073dc:	429a      	cmp	r2, r3
 80073de:	d902      	bls.n	80073e6 <HAL_SD_ReadBlocks+0x1be>
 80073e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d112      	bne.n	800740c <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a56      	ldr	r2, [pc, #344]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e097      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007416:	2b00      	cmp	r3, #0
 8007418:	d096      	beq.n	8007348 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007428:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d022      	beq.n	800747e <HAL_SD_ReadBlocks+0x256>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d91f      	bls.n	800747e <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007442:	2b03      	cmp	r3, #3
 8007444:	d01b      	beq.n	800747e <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f003 ff96 	bl	800b37c <SDMMC_CmdStopTransfer>
 8007450:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007454:	2b00      	cmp	r3, #0
 8007456:	d012      	beq.n	800747e <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a39      	ldr	r2, [pc, #228]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	431a      	orrs	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e05e      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d012      	beq.n	80074b2 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2c      	ldr	r2, [pc, #176]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	f043 0208 	orr.w	r2, r3, #8
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e044      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d012      	beq.n	80074e6 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	f043 0202 	orr.w	r2, r3, #2
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e02a      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a12      	ldr	r2, [pc, #72]	; (8007544 <HAL_SD_ReadBlocks+0x31c>)
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	f043 0220 	orr.w	r2, r3, #32
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e010      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <HAL_SD_ReadBlocks+0x320>)
 8007520:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e006      	b.n	800753c <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3748      	adds	r7, #72	; 0x48
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	1fe00fff 	.word	0x1fe00fff
 8007548:	18000f3a 	.word	0x18000f3a

0800754c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b092      	sub	sp, #72	; 0x48
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800755a:	f7fa fecd 	bl	80022f8 <HAL_GetTick>
 800755e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e174      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	f040 8167 	bne.w	800785a <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	429a      	cmp	r2, r3
 800759e:	d907      	bls.n	80075b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e15b      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2203      	movs	r2, #3
 80075b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d002      	beq.n	80075ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	025b      	lsls	r3, r3, #9
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	025b      	lsls	r3, r3, #9
 80075d8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80075da:	2390      	movs	r3, #144	; 0x90
 80075dc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f107 0218 	add.w	r2, r7, #24
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f003 fde5 	bl	800b1c4 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007608:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d90a      	bls.n	8007626 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800761c:	4618      	mov	r0, r3
 800761e:	f003 fe89 	bl	800b334 <SDMMC_CmdWriteMultiBlock>
 8007622:	6478      	str	r0, [r7, #68]	; 0x44
 8007624:	e009      	b.n	800763a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2210      	movs	r2, #16
 800762a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007632:	4618      	mov	r0, r3
 8007634:	f003 fe5b 	bl	800b2ee <SDMMC_CmdWriteSingleBlock>
 8007638:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800763a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a8a      	ldr	r2, [pc, #552]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764e:	431a      	orrs	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e100      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800766a:	e065      	b.n	8007738 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d040      	beq.n	80076fc <HAL_SD_WriteBlocks+0x1b0>
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d03d      	beq.n	80076fc <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007680:	2300      	movs	r3, #0
 8007682:	643b      	str	r3, [r7, #64]	; 0x40
 8007684:	e037      	b.n	80076f6 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	3301      	adds	r3, #1
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	3b01      	subs	r3, #1
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	3301      	adds	r3, #1
 80076a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	041a      	lsls	r2, r3, #16
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	3301      	adds	r3, #1
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	3b01      	subs	r3, #1
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80076c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	061a      	lsls	r2, r3, #24
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	3301      	adds	r3, #1
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076dc:	3b01      	subs	r3, #1
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f107 0214 	add.w	r2, r7, #20
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f003 fcef 	bl	800b0ce <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80076f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f2:	3301      	adds	r3, #1
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
 80076f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f8:	2b07      	cmp	r3, #7
 80076fa:	d9c4      	bls.n	8007686 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80076fc:	f7fa fdfc 	bl	80022f8 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007708:	429a      	cmp	r2, r3
 800770a:	d902      	bls.n	8007712 <HAL_SD_WriteBlocks+0x1c6>
 800770c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770e:	2b00      	cmp	r3, #0
 8007710:	d112      	bne.n	8007738 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a56      	ldr	r2, [pc, #344]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007720:	431a      	orrs	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e097      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007742:	2b00      	cmp	r3, #0
 8007744:	d092      	beq.n	800766c <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007754:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d022      	beq.n	80077aa <HAL_SD_WriteBlocks+0x25e>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d91f      	bls.n	80077aa <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	2b03      	cmp	r3, #3
 8007770:	d01b      	beq.n	80077aa <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f003 fe00 	bl	800b37c <SDMMC_CmdStopTransfer>
 800777c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800777e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a39      	ldr	r2, [pc, #228]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007792:	431a      	orrs	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e05e      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d012      	beq.n	80077de <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2c      	ldr	r2, [pc, #176]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	f043 0208 	orr.w	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e044      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d012      	beq.n	8007812 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	f043 0202 	orr.w	r2, r3, #2
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e02a      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	d012      	beq.n	8007846 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a12      	ldr	r2, [pc, #72]	; (8007870 <HAL_SD_WriteBlocks+0x324>)
 8007826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	f043 0210 	orr.w	r2, r3, #16
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e010      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <HAL_SD_WriteBlocks+0x328>)
 800784c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e006      	b.n	8007868 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3748      	adds	r7, #72	; 0x48
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	1fe00fff 	.word	0x1fe00fff
 8007874:	18000f3a 	.word	0x18000f3a

08007878 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	0f9b      	lsrs	r3, r3, #30
 8007888:	b2da      	uxtb	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007892:	0e9b      	lsrs	r3, r3, #26
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	b2da      	uxtb	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d8:	0d1b      	lsrs	r3, r3, #20
 80078da:	b29a      	uxth	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f6:	0bdb      	lsrs	r3, r3, #15
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	0b9b      	lsrs	r3, r3, #14
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800791a:	0b5b      	lsrs	r3, r3, #13
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792c:	0b1b      	lsrs	r3, r3, #12
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2200      	movs	r2, #0
 800793e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d163      	bne.n	8007a10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794c:	009a      	lsls	r2, r3, #2
 800794e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007952:	4013      	ands	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007958:	0f92      	lsrs	r2, r2, #30
 800795a:	431a      	orrs	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007964:	0edb      	lsrs	r3, r3, #27
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	b2da      	uxtb	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007976:	0e1b      	lsrs	r3, r3, #24
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	b2da      	uxtb	r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007988:	0d5b      	lsrs	r3, r3, #21
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	b2da      	uxtb	r2, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799a:	0c9b      	lsrs	r3, r3, #18
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ac:	0bdb      	lsrs	r3, r3, #15
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	7e1b      	ldrb	r3, [r3, #24]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	3302      	adds	r3, #2
 80079d0:	2201      	movs	r2, #1
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079da:	fb03 f202 	mul.w	r2, r3, r2
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	7a1b      	ldrb	r3, [r3, #8]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	2201      	movs	r2, #1
 80079ee:	409a      	lsls	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079fc:	0a52      	lsrs	r2, r2, #9
 80079fe:	fb03 f202 	mul.w	r2, r3, r2
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007a0e:	e031      	b.n	8007a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d11d      	bne.n	8007a54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	3301      	adds	r3, #1
 8007a34:	029a      	lsls	r2, r3, #10
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	659a      	str	r2, [r3, #88]	; 0x58
 8007a52:	e00f      	b.n	8007a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a58      	ldr	r2, [pc, #352]	; (8007bbc <HAL_SD_GetCardCSD+0x344>)
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e09d      	b.n	8007bb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a78:	0b9b      	lsrs	r3, r3, #14
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8a:	09db      	lsrs	r3, r3, #7
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aac:	0fdb      	lsrs	r3, r3, #31
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	0f5b      	lsrs	r3, r3, #29
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aca:	0e9b      	lsrs	r3, r3, #26
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007adc:	0d9b      	lsrs	r3, r3, #22
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aee:	0d5b      	lsrs	r3, r3, #21
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1e:	0bdb      	lsrs	r3, r3, #15
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	0b9b      	lsrs	r3, r3, #14
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b46:	0b5b      	lsrs	r3, r3, #13
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5a:	0b1b      	lsrs	r3, r3, #12
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b6e:	0a9b      	lsrs	r3, r3, #10
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	1fe00fff 	.word	0x1fe00fff

08007bc0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b094      	sub	sp, #80	; 0x50
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007bd0:	f107 0308 	add.w	r3, r7, #8
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fbd4 	bl	8008384 <SD_SendSDStatus>
 8007bdc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a4f      	ldr	r2, [pc, #316]	; (8007d28 <HAL_SD_GetCardStatus+0x168>)
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007c06:	e070      	b.n	8007cea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	099b      	lsrs	r3, r3, #6
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	0e1b      	lsrs	r3, r3, #24
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c4e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	0e1b      	lsrs	r3, r3, #24
 8007c5e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	0c1b      	lsrs	r3, r3, #16
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	0a9b      	lsrs	r3, r3, #10
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	0e1b      	lsrs	r3, r3, #24
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f003 fa92 	bl	800b21c <SDMMC_CmdBlockLength>
 8007cf8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <HAL_SD_GetCardStatus+0x168>)
 8007d06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007d1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3750      	adds	r7, #80	; 0x50
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	1fe00fff 	.word	0x1fe00fff

08007d2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d84:	b5b0      	push	{r4, r5, r7, lr}
 8007d86:	b090      	sub	sp, #64	; 0x40
 8007d88:	af04      	add	r7, sp, #16
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2203      	movs	r2, #3
 8007d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d02e      	beq.n	8007e02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007daa:	d106      	bne.n	8007dba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
 8007db8:	e029      	b.n	8007e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc0:	d10a      	bne.n	8007dd8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fbd6 	bl	8008574 <SD_WideBus_Enable>
 8007dc8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8007dd6:	e01a      	b.n	8007e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fc13 	bl	800860a <SD_WideBus_Disable>
 8007de4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
 8007df2:	e00c      	b.n	8007e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8007e00:	e005      	b.n	8007e0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a60      	ldr	r2, [pc, #384]	; (8007f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e24:	e097      	b.n	8007f56 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007e26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007e2a:	f7fd feb9 	bl	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e2e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8086 	beq.w	8007f44 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	4952      	ldr	r1, [pc, #328]	; (8007fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e56:	fba1 1303 	umull	r1, r3, r1, r3
 8007e5a:	0e1b      	lsrs	r3, r3, #24
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d303      	bcc.n	8007e68 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	e05a      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e70:	d103      	bne.n	8007e7a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e051      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	d126      	bne.n	8007ed2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10e      	bne.n	8007eaa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	4a45      	ldr	r2, [pc, #276]	; (8007fa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d906      	bls.n	8007ea2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	4a42      	ldr	r2, [pc, #264]	; (8007fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	0e5b      	lsrs	r3, r3, #25
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e03d      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e039      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb6:	4a3b      	ldr	r2, [pc, #236]	; (8007fa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d906      	bls.n	8007eca <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	4a38      	ldr	r2, [pc, #224]	; (8007fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec4:	0e5b      	lsrs	r3, r3, #25
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	e029      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	e025      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	4a32      	ldr	r2, [pc, #200]	; (8007fa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d906      	bls.n	8007ef0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	4a2e      	ldr	r2, [pc, #184]	; (8007fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	0e1b      	lsrs	r3, r3, #24
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	e016      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	e012      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f04:	4a28      	ldr	r2, [pc, #160]	; (8007fa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d906      	bls.n	8007f18 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	4a24      	ldr	r2, [pc, #144]	; (8007fa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f12:	0e1b      	lsrs	r3, r3, #24
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	e002      	b.n	8007f1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681d      	ldr	r5, [r3, #0]
 8007f28:	466c      	mov	r4, sp
 8007f2a:	f107 0318 	add.w	r3, r7, #24
 8007f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f36:	f107 030c 	add.w	r3, r7, #12
 8007f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f003 f88f 	bl	800b060 <SDMMC_Init>
 8007f42:	e008      	b.n	8007f56 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f003 f95c 	bl	800b21c <SDMMC_CmdBlockLength>
 8007f64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00c      	beq.n	8007f86 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3730      	adds	r7, #48	; 0x30
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	1fe00fff 	.word	0x1fe00fff
 8007fa0:	55e63b89 	.word	0x55e63b89
 8007fa4:	02faf080 	.word	0x02faf080
 8007fa8:	017d7840 	.word	0x017d7840

08007fac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007fb8:	f107 030c 	add.w	r3, r7, #12
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fab0 	bl	8008524 <SD_SendStatus>
 8007fc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	0a5b      	lsrs	r3, r3, #9
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007fe2:	693b      	ldr	r3, [r7, #16]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fec:	b5b0      	push	{r4, r5, r7, lr}
 8007fee:	b090      	sub	sp, #64	; 0x40
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f003 f889 	bl	800b114 <SDMMC_GetPowerState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800800c:	e0a9      	b.n	8008162 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008012:	2b03      	cmp	r3, #3
 8008014:	d02e      	beq.n	8008074 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f003 face 	bl	800b5bc <SDMMC_CmdSendCID>
 8008020:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_InitCard+0x40>
    {
      return errorstate;
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	e09a      	b.n	8008162 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f003 f8b3 	bl	800b19e <SDMMC_GetResponse>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2104      	movs	r1, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f003 f8aa 	bl	800b19e <SDMMC_GetResponse>
 800804a:	4602      	mov	r2, r0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2108      	movs	r1, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f003 f8a1 	bl	800b19e <SDMMC_GetResponse>
 800805c:	4602      	mov	r2, r0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	210c      	movs	r1, #12
 8008068:	4618      	mov	r0, r3
 800806a:	f003 f898 	bl	800b19e <SDMMC_GetResponse>
 800806e:	4602      	mov	r2, r0
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	2b03      	cmp	r3, #3
 800807a:	d00d      	beq.n	8008098 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f107 020e 	add.w	r2, r7, #14
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f003 fad7 	bl	800b63a <SDMMC_CmdSetRelAdd>
 800808c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800808e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <SD_InitCard+0xac>
    {
      return errorstate;
 8008094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008096:	e064      	b.n	8008162 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	2b03      	cmp	r3, #3
 800809e:	d036      	beq.n	800810e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80080a0:	89fb      	ldrh	r3, [r7, #14]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f003 faa0 	bl	800b5fa <SDMMC_CmdSendCSD>
 80080ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <SD_InitCard+0xda>
    {
      return errorstate;
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	e04d      	b.n	8008162 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f003 f866 	bl	800b19e <SDMMC_GetResponse>
 80080d2:	4602      	mov	r2, r0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2104      	movs	r1, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f003 f85d 	bl	800b19e <SDMMC_GetResponse>
 80080e4:	4602      	mov	r2, r0
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2108      	movs	r1, #8
 80080f0:	4618      	mov	r0, r3
 80080f2:	f003 f854 	bl	800b19e <SDMMC_GetResponse>
 80080f6:	4602      	mov	r2, r0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	210c      	movs	r1, #12
 8008102:	4618      	mov	r0, r3
 8008104:	f003 f84b 	bl	800b19e <SDMMC_GetResponse>
 8008108:	4602      	mov	r2, r0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2104      	movs	r1, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f003 f842 	bl	800b19e <SDMMC_GetResponse>
 800811a:	4603      	mov	r3, r0
 800811c:	0d1a      	lsrs	r2, r3, #20
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008122:	f107 0310 	add.w	r3, r7, #16
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff fba5 	bl	8007878 <HAL_SD_GetCardCSD>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008138:	e013      	b.n	8008162 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	2200      	movs	r2, #0
 8008146:	461c      	mov	r4, r3
 8008148:	4615      	mov	r5, r2
 800814a:	4622      	mov	r2, r4
 800814c:	462b      	mov	r3, r5
 800814e:	4608      	mov	r0, r1
 8008150:	f003 f94a 	bl	800b3e8 <SDMMC_CmdSelDesel>
 8008154:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <SD_InitCard+0x174>
  {
    return errorstate;
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	e000      	b.n	8008162 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3740      	adds	r7, #64	; 0x40
 8008166:	46bd      	mov	sp, r7
 8008168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800816c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	2300      	movs	r3, #0
 800817e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008180:	f7fa f8ba 	bl	80022f8 <HAL_GetTick>
 8008184:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f003 f950 	bl	800b430 <SDMMC_CmdGoIdleState>
 8008190:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SD_PowerON+0x30>
  {
    return errorstate;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	e0ed      	b.n	8008378 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f003 f963 	bl	800b46c <SDMMC_CmdOperCond>
 80081a6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f003 f939 	bl	800b430 <SDMMC_CmdGoIdleState>
 80081be:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <SD_PowerON+0x64>
    {
      return errorstate;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	e0d6      	b.n	8008378 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d137      	bne.n	8008248 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f003 f964 	bl	800b4ac <SDMMC_CmdAppCommand>
 80081e4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d02d      	beq.n	8008248 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081f0:	e0c2      	b.n	8008378 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f003 f957 	bl	800b4ac <SDMMC_CmdAppCommand>
 80081fe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <SD_PowerON+0x9e>
    {
      return errorstate;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	e0b6      	b.n	8008378 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	495c      	ldr	r1, [pc, #368]	; (8008380 <SD_PowerON+0x214>)
 8008210:	4618      	mov	r0, r3
 8008212:	f003 f96e 	bl	800b4f2 <SDMMC_CmdAppOperCommand>
 8008216:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008222:	e0a9      	b.n	8008378 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f002 ffb7 	bl	800b19e <SDMMC_GetResponse>
 8008230:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	0fdb      	lsrs	r3, r3, #31
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <SD_PowerON+0xd2>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <SD_PowerON+0xd4>
 800823e:	2300      	movs	r3, #0
 8008240:	61bb      	str	r3, [r7, #24]

    count++;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800824e:	4293      	cmp	r3, r2
 8008250:	d802      	bhi.n	8008258 <SD_PowerON+0xec>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0cc      	beq.n	80081f2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800825e:	4293      	cmp	r3, r2
 8008260:	d902      	bls.n	8008268 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008266:	e087      	b.n	8008378 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d07e      	beq.n	8008370 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d17a      	bne.n	8008376 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d075      	beq.n	8008376 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008290:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0208 	orr.w	r2, r2, #8
 80082a0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f003 fa2e 	bl	800b708 <SDMMC_CmdVoltageSwitch>
 80082ac:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00c      	beq.n	80082ce <SD_PowerON+0x162>
        {
          return errorstate;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e05f      	b.n	8008378 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082b8:	f7fa f81e 	bl	80022f8 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c6:	d102      	bne.n	80082ce <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80082c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082cc:	e054      	b.n	8008378 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082dc:	d1ec      	bne.n	80082b8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f6:	d002      	beq.n	80082fe <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80082f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082fc:	e03c      	b.n	8008378 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80082fe:	2001      	movs	r0, #1
 8008300:	f000 fa9e 	bl	8008840 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0204 	orr.w	r2, r2, #4
 8008312:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008314:	e00a      	b.n	800832c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008316:	f7f9 ffef 	bl	80022f8 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008324:	d102      	bne.n	800832c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800832a:	e025      	b.n	8008378 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800833a:	d1ec      	bne.n	8008316 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008344:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008354:	d102      	bne.n	800835c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800835a:	e00d      	b.n	8008378 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2213      	movs	r2, #19
 8008362:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
 800836e:	e002      	b.n	8008376 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	c1100000 	.word	0xc1100000

08008384 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	; 0x30
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800838e:	f7f9 ffb3 	bl	80022f8 <HAL_GetTick>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2100      	movs	r1, #0
 800839e:	4618      	mov	r0, r3
 80083a0:	f002 fefd 	bl	800b19e <SDMMC_GetResponse>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ae:	d102      	bne.n	80083b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083b4:	e0b0      	b.n	8008518 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2140      	movs	r1, #64	; 0x40
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 ff2d 	bl	800b21c <SDMMC_CmdBlockLength>
 80083c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d005      	beq.n	80083d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	e0a0      	b.n	8008518 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f003 f862 	bl	800b4ac <SDMMC_CmdAppCommand>
 80083e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	e08d      	b.n	8008518 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008400:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008402:	2340      	movs	r3, #64	; 0x40
 8008404:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008406:	2360      	movs	r3, #96	; 0x60
 8008408:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800840a:	2302      	movs	r3, #2
 800840c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008412:	2301      	movs	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f107 0208 	add.w	r2, r7, #8
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f002 fecf 	bl	800b1c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f003 f94a 	bl	800b6c4 <SDMMC_CmdStatusRegister>
 8008430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d02b      	beq.n	8008490 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	e069      	b.n	8008518 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d013      	beq.n	800847a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008452:	2300      	movs	r3, #0
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008456:	e00d      	b.n	8008474 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f002 fe29 	bl	800b0b4 <SDMMC_ReadFIFO>
 8008462:	4602      	mov	r2, r0
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	601a      	str	r2, [r3, #0]
        pData++;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	3304      	adds	r3, #4
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	3301      	adds	r3, #1
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	2b07      	cmp	r3, #7
 8008478:	d9ee      	bls.n	8008458 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800847a:	f7f9 ff3d 	bl	80022f8 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008488:	d102      	bne.n	8008490 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800848a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800848e:	e043      	b.n	8008518 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0d2      	beq.n	8008444 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80084ac:	2308      	movs	r3, #8
 80084ae:	e033      	b.n	8008518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	e02a      	b.n	8008518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80084d0:	2320      	movs	r3, #32
 80084d2:	e021      	b.n	8008518 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f002 fdeb 	bl	800b0b4 <SDMMC_ReadFIFO>
 80084de:	4602      	mov	r2, r0
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	601a      	str	r2, [r3, #0]
    pData++;
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	3304      	adds	r3, #4
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80084ea:	f7f9 ff05 	bl	80022f8 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f8:	d102      	bne.n	8008500 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80084fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084fe:	e00b      	b.n	8008518 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e2      	bne.n	80084d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a03      	ldr	r2, [pc, #12]	; (8008520 <SD_SendSDStatus+0x19c>)
 8008514:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3730      	adds	r7, #48	; 0x30
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	18000f3a 	.word	0x18000f3a

08008524 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008538:	e018      	b.n	800856c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f003 f899 	bl	800b67e <SDMMC_CmdSendStatus>
 800854c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	e009      	b.n	800856c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f002 fe1d 	bl	800b19e <SDMMC_GetResponse>
 8008564:	4602      	mov	r2, r0
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f002 fe07 	bl	800b19e <SDMMC_GetResponse>
 8008590:	4603      	mov	r3, r0
 8008592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800859a:	d102      	bne.n	80085a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800859c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085a0:	e02f      	b.n	8008602 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f879 	bl	80086a0 <SD_FindSCR>
 80085ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	e023      	b.n	8008602 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01c      	beq.n	80085fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f002 ff6b 	bl	800b4ac <SDMMC_CmdAppCommand>
 80085d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	e00f      	b.n	8008602 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 ffa2 	bl	800b532 <SDMMC_CmdBusWidth>
 80085ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	e003      	b.n	8008602 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	e001      	b.n	8008602 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	2300      	movs	r3, #0
 8008618:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f002 fdbc 	bl	800b19e <SDMMC_GetResponse>
 8008626:	4603      	mov	r3, r0
 8008628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008630:	d102      	bne.n	8008638 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008636:	e02f      	b.n	8008698 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f82e 	bl	80086a0 <SD_FindSCR>
 8008644:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	e023      	b.n	8008698 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01c      	beq.n	8008694 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f002 ff20 	bl	800b4ac <SDMMC_CmdAppCommand>
 800866c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	e00f      	b.n	8008698 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f002 ff57 	bl	800b532 <SDMMC_CmdBusWidth>
 8008684:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	e003      	b.n	8008698 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008690:	2300      	movs	r3, #0
 8008692:	e001      	b.n	8008698 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086aa:	f7f9 fe25 	bl	80022f8 <HAL_GetTick>
 80086ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80086b4:	2300      	movs	r3, #0
 80086b6:	60bb      	str	r3, [r7, #8]
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2108      	movs	r1, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f002 fda8 	bl	800b21c <SDMMC_CmdBlockLength>
 80086cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	e0ad      	b.n	8008834 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f002 fee1 	bl	800b4ac <SDMMC_CmdAppCommand>
 80086ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	e09e      	b.n	8008834 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80086fc:	2308      	movs	r3, #8
 80086fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008700:	2330      	movs	r3, #48	; 0x30
 8008702:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008704:	2302      	movs	r3, #2
 8008706:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800870c:	2301      	movs	r3, #1
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f107 0210 	add.w	r2, r7, #16
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f002 fd52 	bl	800b1c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f002 ff27 	bl	800b578 <SDMMC_CmdSendSCR>
 800872a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d027      	beq.n	8008782 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	e07e      	b.n	8008834 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d113      	bne.n	800876c <SD_FindSCR+0xcc>
 8008744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	d110      	bne.n	800876c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f002 fcb0 	bl	800b0b4 <SDMMC_ReadFIFO>
 8008754:	4603      	mov	r3, r0
 8008756:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f002 fca9 	bl	800b0b4 <SDMMC_ReadFIFO>
 8008762:	4603      	mov	r3, r0
 8008764:	60fb      	str	r3, [r7, #12]
      index++;
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	3301      	adds	r3, #1
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800876c:	f7f9 fdc4 	bl	80022f8 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800877a:	d102      	bne.n	8008782 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800877c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008780:	e058      	b.n	8008834 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008788:	f240 532a 	movw	r3, #1322	; 0x52a
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0d1      	beq.n	8008736 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2208      	movs	r2, #8
 80087a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80087a8:	2308      	movs	r3, #8
 80087aa:	e043      	b.n	8008834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2202      	movs	r2, #2
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80087c2:	2302      	movs	r3, #2
 80087c4:	e036      	b.n	8008834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2220      	movs	r2, #32
 80087da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80087dc:	2320      	movs	r3, #32
 80087de:	e029      	b.n	8008834 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <SD_FindSCR+0x19c>)
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	061a      	lsls	r2, r3, #24
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	0e1b      	lsrs	r3, r3, #24
 8008804:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	601a      	str	r2, [r3, #0]
    scr++;
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	3304      	adds	r3, #4
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	061a      	lsls	r2, r3, #24
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800881c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	0a1b      	lsrs	r3, r3, #8
 8008822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008826:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	0e1b      	lsrs	r3, r3, #24
 800882c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3738      	adds	r7, #56	; 0x38
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	18000f3a 	.word	0x18000f3a

08008840 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e095      	b.n	8008994 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d108      	bne.n	8008882 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008878:	d009      	beq.n	800888e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	61da      	str	r2, [r3, #28]
 8008880:	e005      	b.n	800888e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d106      	bne.n	80088ae <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7f9 fa4b 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ce:	d902      	bls.n	80088d6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e002      	b.n	80088dc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088e4:	d007      	beq.n	80088f6 <HAL_SPI_Init+0xa0>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ee:	d002      	beq.n	80088f6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	431a      	orrs	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008938:	ea42 0103 	orr.w	r1, r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	f003 0204 	and.w	r2, r3, #4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008972:	ea42 0103 	orr.w	r1, r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e049      	b.n	8008a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7f9 fa00 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f000 fa62 	bl	8008ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e049      	b.n	8008af0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f841 	bl	8008af8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f000 fa0b 	bl	8008ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d122      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d11b      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0202 	mvn.w	r2, #2
 8008b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f98a 	bl	8008e68 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f97c 	bl	8008e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f98d 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d122      	bne.n	8008bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d11b      	bne.n	8008bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0204 	mvn.w	r2, #4
 8008b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f960 	bl	8008e68 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f952 	bl	8008e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f963 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d122      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d11b      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0208 	mvn.w	r2, #8
 8008be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2204      	movs	r2, #4
 8008be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f936 	bl	8008e68 <HAL_TIM_IC_CaptureCallback>
 8008bfc:	e005      	b.n	8008c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f928 	bl	8008e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f939 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d122      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d11b      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0210 	mvn.w	r2, #16
 8008c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f90c 	bl	8008e68 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f8fe 	bl	8008e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f90f 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10e      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d107      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0201 	mvn.w	r2, #1
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8d8 	bl	8008e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9a:	2b80      	cmp	r3, #128	; 0x80
 8008c9c:	d10e      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d107      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fcec 	bl	8009694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cca:	d10e      	bne.n	8008cea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b80      	cmp	r3, #128	; 0x80
 8008cd8:	d107      	bne.n	8008cea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fcdf 	bl	80096a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d10e      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d107      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8bd 	bl	8008e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0320 	and.w	r3, r3, #32
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d10e      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d107      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0220 	mvn.w	r2, #32
 8008d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fc9f 	bl	8009680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e066      	b.n	8008e38 <HAL_TIM_OC_ConfigChannel+0xec>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b14      	cmp	r3, #20
 8008d76:	d857      	bhi.n	8008e28 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008e29 	.word	0x08008e29
 8008d88:	08008e29 	.word	0x08008e29
 8008d8c:	08008e29 	.word	0x08008e29
 8008d90:	08008de3 	.word	0x08008de3
 8008d94:	08008e29 	.word	0x08008e29
 8008d98:	08008e29 	.word	0x08008e29
 8008d9c:	08008e29 	.word	0x08008e29
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	08008e29 	.word	0x08008e29
 8008da8:	08008e29 	.word	0x08008e29
 8008dac:	08008e29 	.word	0x08008e29
 8008db0:	08008dff 	.word	0x08008dff
 8008db4:	08008e29 	.word	0x08008e29
 8008db8:	08008e29 	.word	0x08008e29
 8008dbc:	08008e29 	.word	0x08008e29
 8008dc0:	08008e0d 	.word	0x08008e0d
 8008dc4:	08008e29 	.word	0x08008e29
 8008dc8:	08008e29 	.word	0x08008e29
 8008dcc:	08008e29 	.word	0x08008e29
 8008dd0:	08008e1b 	.word	0x08008e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f8fc 	bl	8008fd8 <TIM_OC1_SetConfig>
      break;
 8008de0:	e025      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f985 	bl	80090f8 <TIM_OC2_SetConfig>
      break;
 8008dee:	e01e      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fa08 	bl	800920c <TIM_OC3_SetConfig>
      break;
 8008dfc:	e017      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fa89 	bl	800931c <TIM_OC4_SetConfig>
      break;
 8008e0a:	e010      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 faec 	bl	80093f0 <TIM_OC5_SetConfig>
      break;
 8008e18:	e009      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fb49 	bl	80094b8 <TIM_OC6_SetConfig>
      break;
 8008e26:	e002      	b.n	8008e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a40      	ldr	r2, [pc, #256]	; (8008fb8 <TIM_Base_SetConfig+0x114>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d013      	beq.n	8008ee4 <TIM_Base_SetConfig+0x40>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec2:	d00f      	beq.n	8008ee4 <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a3d      	ldr	r2, [pc, #244]	; (8008fbc <TIM_Base_SetConfig+0x118>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00b      	beq.n	8008ee4 <TIM_Base_SetConfig+0x40>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a3c      	ldr	r2, [pc, #240]	; (8008fc0 <TIM_Base_SetConfig+0x11c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d007      	beq.n	8008ee4 <TIM_Base_SetConfig+0x40>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a3b      	ldr	r2, [pc, #236]	; (8008fc4 <TIM_Base_SetConfig+0x120>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_Base_SetConfig+0x40>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a3a      	ldr	r2, [pc, #232]	; (8008fc8 <TIM_Base_SetConfig+0x124>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d108      	bne.n	8008ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a2f      	ldr	r2, [pc, #188]	; (8008fb8 <TIM_Base_SetConfig+0x114>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d01f      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f04:	d01b      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a2c      	ldr	r2, [pc, #176]	; (8008fbc <TIM_Base_SetConfig+0x118>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d017      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a2b      	ldr	r2, [pc, #172]	; (8008fc0 <TIM_Base_SetConfig+0x11c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a2a      	ldr	r2, [pc, #168]	; (8008fc4 <TIM_Base_SetConfig+0x120>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00f      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a29      	ldr	r2, [pc, #164]	; (8008fc8 <TIM_Base_SetConfig+0x124>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00b      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a28      	ldr	r2, [pc, #160]	; (8008fcc <TIM_Base_SetConfig+0x128>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d007      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a27      	ldr	r2, [pc, #156]	; (8008fd0 <TIM_Base_SetConfig+0x12c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d003      	beq.n	8008f3e <TIM_Base_SetConfig+0x9a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a26      	ldr	r2, [pc, #152]	; (8008fd4 <TIM_Base_SetConfig+0x130>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d108      	bne.n	8008f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a10      	ldr	r2, [pc, #64]	; (8008fb8 <TIM_Base_SetConfig+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00f      	beq.n	8008f9c <TIM_Base_SetConfig+0xf8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a12      	ldr	r2, [pc, #72]	; (8008fc8 <TIM_Base_SetConfig+0x124>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_Base_SetConfig+0xf8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <TIM_Base_SetConfig+0x128>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d007      	beq.n	8008f9c <TIM_Base_SetConfig+0xf8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a10      	ldr	r2, [pc, #64]	; (8008fd0 <TIM_Base_SetConfig+0x12c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_Base_SetConfig+0xf8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a0f      	ldr	r2, [pc, #60]	; (8008fd4 <TIM_Base_SetConfig+0x130>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d103      	bne.n	8008fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	691a      	ldr	r2, [r3, #16]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	615a      	str	r2, [r3, #20]
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	40012c00 	.word	0x40012c00
 8008fbc:	40000400 	.word	0x40000400
 8008fc0:	40000800 	.word	0x40000800
 8008fc4:	40000c00 	.word	0x40000c00
 8008fc8:	40013400 	.word	0x40013400
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400
 8008fd4:	40014800 	.word	0x40014800

08008fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f023 0201 	bic.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0302 	bic.w	r3, r3, #2
 8009024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a2c      	ldr	r2, [pc, #176]	; (80090e4 <TIM_OC1_SetConfig+0x10c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00f      	beq.n	8009058 <TIM_OC1_SetConfig+0x80>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a2b      	ldr	r2, [pc, #172]	; (80090e8 <TIM_OC1_SetConfig+0x110>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00b      	beq.n	8009058 <TIM_OC1_SetConfig+0x80>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a2a      	ldr	r2, [pc, #168]	; (80090ec <TIM_OC1_SetConfig+0x114>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <TIM_OC1_SetConfig+0x80>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a29      	ldr	r2, [pc, #164]	; (80090f0 <TIM_OC1_SetConfig+0x118>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_OC1_SetConfig+0x80>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a28      	ldr	r2, [pc, #160]	; (80090f4 <TIM_OC1_SetConfig+0x11c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d10c      	bne.n	8009072 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0308 	bic.w	r3, r3, #8
 800905e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f023 0304 	bic.w	r3, r3, #4
 8009070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <TIM_OC1_SetConfig+0x10c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00f      	beq.n	800909a <TIM_OC1_SetConfig+0xc2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1a      	ldr	r2, [pc, #104]	; (80090e8 <TIM_OC1_SetConfig+0x110>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00b      	beq.n	800909a <TIM_OC1_SetConfig+0xc2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a19      	ldr	r2, [pc, #100]	; (80090ec <TIM_OC1_SetConfig+0x114>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d007      	beq.n	800909a <TIM_OC1_SetConfig+0xc2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a18      	ldr	r2, [pc, #96]	; (80090f0 <TIM_OC1_SetConfig+0x118>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d003      	beq.n	800909a <TIM_OC1_SetConfig+0xc2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a17      	ldr	r2, [pc, #92]	; (80090f4 <TIM_OC1_SetConfig+0x11c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d111      	bne.n	80090be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40013400 	.word	0x40013400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40014400 	.word	0x40014400
 80090f4:	40014800 	.word	0x40014800

080090f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f023 0210 	bic.w	r2, r3, #16
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 0320 	bic.w	r3, r3, #32
 8009146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a28      	ldr	r2, [pc, #160]	; (80091f8 <TIM_OC2_SetConfig+0x100>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d003      	beq.n	8009164 <TIM_OC2_SetConfig+0x6c>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a27      	ldr	r2, [pc, #156]	; (80091fc <TIM_OC2_SetConfig+0x104>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d10d      	bne.n	8009180 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <TIM_OC2_SetConfig+0x100>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00f      	beq.n	80091a8 <TIM_OC2_SetConfig+0xb0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a1c      	ldr	r2, [pc, #112]	; (80091fc <TIM_OC2_SetConfig+0x104>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00b      	beq.n	80091a8 <TIM_OC2_SetConfig+0xb0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a1b      	ldr	r2, [pc, #108]	; (8009200 <TIM_OC2_SetConfig+0x108>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d007      	beq.n	80091a8 <TIM_OC2_SetConfig+0xb0>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a1a      	ldr	r2, [pc, #104]	; (8009204 <TIM_OC2_SetConfig+0x10c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d003      	beq.n	80091a8 <TIM_OC2_SetConfig+0xb0>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a19      	ldr	r2, [pc, #100]	; (8009208 <TIM_OC2_SetConfig+0x110>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d113      	bne.n	80091d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	621a      	str	r2, [r3, #32]
}
 80091ea:	bf00      	nop
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00
 80091fc:	40013400 	.word	0x40013400
 8009200:	40014000 	.word	0x40014000
 8009204:	40014400 	.word	0x40014400
 8009208:	40014800 	.word	0x40014800

0800920c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0303 	bic.w	r3, r3, #3
 8009246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a27      	ldr	r2, [pc, #156]	; (8009308 <TIM_OC3_SetConfig+0xfc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d003      	beq.n	8009276 <TIM_OC3_SetConfig+0x6a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a26      	ldr	r2, [pc, #152]	; (800930c <TIM_OC3_SetConfig+0x100>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d10d      	bne.n	8009292 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800927c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <TIM_OC3_SetConfig+0xfc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_OC3_SetConfig+0xae>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a1b      	ldr	r2, [pc, #108]	; (800930c <TIM_OC3_SetConfig+0x100>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_OC3_SetConfig+0xae>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a1a      	ldr	r2, [pc, #104]	; (8009310 <TIM_OC3_SetConfig+0x104>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_OC3_SetConfig+0xae>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a19      	ldr	r2, [pc, #100]	; (8009314 <TIM_OC3_SetConfig+0x108>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_OC3_SetConfig+0xae>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a18      	ldr	r2, [pc, #96]	; (8009318 <TIM_OC3_SetConfig+0x10c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d113      	bne.n	80092e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	011b      	lsls	r3, r3, #4
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4313      	orrs	r3, r2
 80092e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	621a      	str	r2, [r3, #32]
}
 80092fc:	bf00      	nop
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	40012c00 	.word	0x40012c00
 800930c:	40013400 	.word	0x40013400
 8009310:	40014000 	.word	0x40014000
 8009314:	40014400 	.word	0x40014400
 8009318:	40014800 	.word	0x40014800

0800931c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800934a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800936a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	031b      	lsls	r3, r3, #12
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a18      	ldr	r2, [pc, #96]	; (80093dc <TIM_OC4_SetConfig+0xc0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00f      	beq.n	80093a0 <TIM_OC4_SetConfig+0x84>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <TIM_OC4_SetConfig+0xc4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00b      	beq.n	80093a0 <TIM_OC4_SetConfig+0x84>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a16      	ldr	r2, [pc, #88]	; (80093e4 <TIM_OC4_SetConfig+0xc8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <TIM_OC4_SetConfig+0x84>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <TIM_OC4_SetConfig+0xcc>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d003      	beq.n	80093a0 <TIM_OC4_SetConfig+0x84>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a14      	ldr	r2, [pc, #80]	; (80093ec <TIM_OC4_SetConfig+0xd0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d109      	bne.n	80093b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	019b      	lsls	r3, r3, #6
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	40013400 	.word	0x40013400
 80093e4:	40014000 	.word	0x40014000
 80093e8:	40014400 	.word	0x40014400
 80093ec:	40014800 	.word	0x40014800

080093f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800941e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	041b      	lsls	r3, r3, #16
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a17      	ldr	r2, [pc, #92]	; (80094a4 <TIM_OC5_SetConfig+0xb4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00f      	beq.n	800946a <TIM_OC5_SetConfig+0x7a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a16      	ldr	r2, [pc, #88]	; (80094a8 <TIM_OC5_SetConfig+0xb8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d00b      	beq.n	800946a <TIM_OC5_SetConfig+0x7a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a15      	ldr	r2, [pc, #84]	; (80094ac <TIM_OC5_SetConfig+0xbc>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d007      	beq.n	800946a <TIM_OC5_SetConfig+0x7a>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a14      	ldr	r2, [pc, #80]	; (80094b0 <TIM_OC5_SetConfig+0xc0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d003      	beq.n	800946a <TIM_OC5_SetConfig+0x7a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <TIM_OC5_SetConfig+0xc4>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d109      	bne.n	800947e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	621a      	str	r2, [r3, #32]
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40012c00 	.word	0x40012c00
 80094a8:	40013400 	.word	0x40013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800

080094b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	051b      	lsls	r3, r3, #20
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a18      	ldr	r2, [pc, #96]	; (8009570 <TIM_OC6_SetConfig+0xb8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00f      	beq.n	8009534 <TIM_OC6_SetConfig+0x7c>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a17      	ldr	r2, [pc, #92]	; (8009574 <TIM_OC6_SetConfig+0xbc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00b      	beq.n	8009534 <TIM_OC6_SetConfig+0x7c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a16      	ldr	r2, [pc, #88]	; (8009578 <TIM_OC6_SetConfig+0xc0>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d007      	beq.n	8009534 <TIM_OC6_SetConfig+0x7c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a15      	ldr	r2, [pc, #84]	; (800957c <TIM_OC6_SetConfig+0xc4>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d003      	beq.n	8009534 <TIM_OC6_SetConfig+0x7c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a14      	ldr	r2, [pc, #80]	; (8009580 <TIM_OC6_SetConfig+0xc8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d109      	bne.n	8009548 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800953a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	029b      	lsls	r3, r3, #10
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40012c00 	.word	0x40012c00
 8009574:	40013400 	.word	0x40013400
 8009578:	40014000 	.word	0x40014000
 800957c:	40014400 	.word	0x40014400
 8009580:	40014800 	.word	0x40014800

08009584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800959c:	2302      	movs	r3, #2
 800959e:	e065      	b.n	800966c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	041b      	lsls	r3, r3, #16
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a16      	ldr	r2, [pc, #88]	; (8009678 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d004      	beq.n	800962e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a14      	ldr	r2, [pc, #80]	; (800967c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d115      	bne.n	800965a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	051b      	lsls	r3, r3, #20
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	40012c00 	.word	0x40012c00
 800967c:	40013400 	.word	0x40013400

08009680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e042      	b.n	8009754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7f8 fb91 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2224      	movs	r2, #36	; 0x24
 80096ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fc5c 	bl	8009fbc <UART_SetConfig>
 8009704:	4603      	mov	r3, r0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e022      	b.n	8009754 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 ff4c 	bl	800a5b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800972a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800973a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 ffd3 	bl	800a6f8 <UART_CheckIdleState>
 8009752:	4603      	mov	r3, r0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009772:	2b20      	cmp	r3, #32
 8009774:	f040 8084 	bne.w	8009880 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <HAL_UART_Transmit+0x28>
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e07c      	b.n	8009882 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <HAL_UART_Transmit+0x3a>
 8009792:	2302      	movs	r3, #2
 8009794:	e075      	b.n	8009882 <HAL_UART_Transmit+0x126>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2221      	movs	r2, #33	; 0x21
 80097aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097ae:	f7f8 fda3 	bl	80022f8 <HAL_GetTick>
 80097b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	88fa      	ldrh	r2, [r7, #6]
 80097c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097cc:	d108      	bne.n	80097e0 <HAL_UART_Transmit+0x84>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e003      	b.n	80097e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80097f0:	e02d      	b.n	800984e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2180      	movs	r1, #128	; 0x80
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 ffc6 	bl	800a78e <UART_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e03a      	b.n	8009882 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	881a      	ldrh	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800981e:	b292      	uxth	r2, r2
 8009820:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	3302      	adds	r3, #2
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e008      	b.n	800983c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	b292      	uxth	r2, r2
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	3301      	adds	r3, #1
 800983a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009842:	b29b      	uxth	r3, r3
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1cb      	bne.n	80097f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2200      	movs	r2, #0
 8009862:	2140      	movs	r1, #64	; 0x40
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 ff92 	bl	800a78e <UART_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e006      	b.n	8009882 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e000      	b.n	8009882 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	; 0x28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	d142      	bne.n	800992a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_UART_Receive_DMA+0x24>
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e03b      	b.n	800992c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Receive_DMA+0x36>
 80098be:	2302      	movs	r3, #2
 80098c0:	e034      	b.n	800992c <HAL_UART_Receive_DMA+0xa0>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a17      	ldr	r2, [pc, #92]	; (8009934 <HAL_UART_Receive_DMA+0xa8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d01f      	beq.n	800991a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d018      	beq.n	800991a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	613b      	str	r3, [r7, #16]
   return(result);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	623b      	str	r3, [r7, #32]
 8009908:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	69f9      	ldr	r1, [r7, #28]
 800990c:	6a3a      	ldr	r2, [r7, #32]
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	61bb      	str	r3, [r7, #24]
   return(result);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	461a      	mov	r2, r3
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fffd 	bl	800a920 <UART_Start_Receive_DMA>
 8009926:	4603      	mov	r3, r0
 8009928:	e000      	b.n	800992c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800992a:	2302      	movs	r3, #2
  }
}
 800992c:	4618      	mov	r0, r3
 800992e:	3728      	adds	r7, #40	; 0x28
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40008000 	.word	0x40008000

08009938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b0ba      	sub	sp, #232	; 0xe8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800995e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009962:	f640 030f 	movw	r3, #2063	; 0x80f
 8009966:	4013      	ands	r3, r2
 8009968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800996c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11b      	bne.n	80099ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b00      	cmp	r3, #0
 800997e:	d015      	beq.n	80099ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d105      	bne.n	8009998 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800998c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 82d6 	beq.w	8009f4e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
      }
      return;
 80099aa:	e2d0      	b.n	8009f4e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80099ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 811f 	beq.w	8009bf4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80099b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80099ba:	4b8b      	ldr	r3, [pc, #556]	; (8009be8 <HAL_UART_IRQHandler+0x2b0>)
 80099bc:	4013      	ands	r3, r2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80099c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80099c6:	4b89      	ldr	r3, [pc, #548]	; (8009bec <HAL_UART_IRQHandler+0x2b4>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 8112 	beq.w	8009bf4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d011      	beq.n	8009a00 <HAL_UART_IRQHandler+0xc8>
 80099dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00b      	beq.n	8009a00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2201      	movs	r2, #1
 80099ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f6:	f043 0201 	orr.w	r2, r3, #1
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d011      	beq.n	8009a30 <HAL_UART_IRQHandler+0xf8>
 8009a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a26:	f043 0204 	orr.w	r2, r3, #4
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d011      	beq.n	8009a60 <HAL_UART_IRQHandler+0x128>
 8009a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a56:	f043 0202 	orr.w	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d017      	beq.n	8009a9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a7c:	4b5a      	ldr	r3, [pc, #360]	; (8009be8 <HAL_UART_IRQHandler+0x2b0>)
 8009a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2208      	movs	r2, #8
 8009a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a92:	f043 0208 	orr.w	r2, r3, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d012      	beq.n	8009ace <HAL_UART_IRQHandler+0x196>
 8009aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00c      	beq.n	8009ace <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac4:	f043 0220 	orr.w	r2, r3, #32
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 823c 	beq.w	8009f52 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d013      	beq.n	8009b0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d007      	beq.n	8009b0e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	d005      	beq.n	8009b32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d04f      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 ffdd 	bl	800aaf2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b40      	cmp	r3, #64	; 0x40
 8009b44:	d141      	bne.n	8009bca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1d9      	bne.n	8009b46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d013      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b9e:	4a14      	ldr	r2, [pc, #80]	; (8009bf0 <HAL_UART_IRQHandler+0x2b8>)
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f8 fe67 	bl	800287a <HAL_DMA_Abort_IT>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d017      	beq.n	8009be2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc0:	e00f      	b.n	8009be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9e4 	bl	8009f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	e00b      	b.n	8009be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9e0 	bl	8009f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd0:	e007      	b.n	8009be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9dc 	bl	8009f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009be0:	e1b7      	b.n	8009f52 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be2:	bf00      	nop
    return;
 8009be4:	e1b5      	b.n	8009f52 <HAL_UART_IRQHandler+0x61a>
 8009be6:	bf00      	nop
 8009be8:	10000001 	.word	0x10000001
 8009bec:	04000120 	.word	0x04000120
 8009bf0:	0800ad9d 	.word	0x0800ad9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	f040 814a 	bne.w	8009e92 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c02:	f003 0310 	and.w	r3, r3, #16
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 8143 	beq.w	8009e92 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 813c 	beq.w	8009e92 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	f040 80b5 	bne.w	8009d9c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 8187 	beq.w	8009f56 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f080 817f 	bcs.w	8009f56 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 8086 	bne.w	8009d80 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ca2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1da      	bne.n	8009c74 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cd0:	f023 0301 	bic.w	r3, r3, #1
 8009cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ce2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e1      	bne.n	8009cbe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3308      	adds	r3, #8
 8009d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d50:	f023 0310 	bic.w	r3, r3, #16
 8009d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e4      	bne.n	8009d40 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7f8 fd21 	bl	80027c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f905 	bl	8009fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d9a:	e0dc      	b.n	8009f56 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80ce 	beq.w	8009f5a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009dbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 80c9 	beq.w	8009f5a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dea:	647b      	str	r3, [r7, #68]	; 0x44
 8009dec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df2:	e841 2300 	strex	r3, r2, [r1]
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1e4      	bne.n	8009dc8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3308      	adds	r3, #8
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e26:	633a      	str	r2, [r7, #48]	; 0x30
 8009e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e1      	bne.n	8009dfe <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0310 	bic.w	r3, r3, #16
 8009e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e4      	bne.n	8009e4e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f88a 	bl	8009fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e90:	e063      	b.n	8009f5a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00e      	beq.n	8009ebc <HAL_UART_IRQHandler+0x584>
 8009e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d008      	beq.n	8009ebc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 ffb2 	bl	800ae1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eba:	e051      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d014      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d03a      	beq.n	8009f5e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
    }
    return;
 8009ef0:	e035      	b.n	8009f5e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d009      	beq.n	8009f12 <HAL_UART_IRQHandler+0x5da>
 8009efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 ff5c 	bl	800adc8 <UART_EndTransmit_IT>
    return;
 8009f10:	e026      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <HAL_UART_IRQHandler+0x5fa>
 8009f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 ff8b 	bl	800ae46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f30:	e016      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d010      	beq.n	8009f60 <HAL_UART_IRQHandler+0x628>
 8009f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da0c      	bge.n	8009f60 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 ff73 	bl	800ae32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f4c:	e008      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
      return;
 8009f4e:	bf00      	nop
 8009f50:	e006      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
    return;
 8009f52:	bf00      	nop
 8009f54:	e004      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
      return;
 8009f56:	bf00      	nop
 8009f58:	e002      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
      return;
 8009f5a:	bf00      	nop
 8009f5c:	e000      	b.n	8009f60 <HAL_UART_IRQHandler+0x628>
    return;
 8009f5e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009f60:	37e8      	adds	r7, #232	; 0xe8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop

08009f68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc0:	b08c      	sub	sp, #48	; 0x30
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4baa      	ldr	r3, [pc, #680]	; (800a294 <UART_SetConfig+0x2d8>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a9f      	ldr	r2, [pc, #636]	; (800a298 <UART_SetConfig+0x2dc>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d004      	beq.n	800a028 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a024:	4313      	orrs	r3, r2
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a032:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	f023 010f 	bic.w	r1, r3, #15
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a90      	ldr	r2, [pc, #576]	; (800a29c <UART_SetConfig+0x2e0>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d125      	bne.n	800a0ac <UART_SetConfig+0xf0>
 800a060:	4b8f      	ldr	r3, [pc, #572]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d81a      	bhi.n	800a0a4 <UART_SetConfig+0xe8>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <UART_SetConfig+0xb8>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a095 	.word	0x0800a095
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a09d 	.word	0x0800a09d
 800a084:	2301      	movs	r3, #1
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a08a:	e116      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a08c:	2302      	movs	r3, #2
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a092:	e112      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a094:	2304      	movs	r3, #4
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a09a:	e10e      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a09c:	2308      	movs	r3, #8
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0a2:	e10a      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0aa:	e106      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a7c      	ldr	r2, [pc, #496]	; (800a2a4 <UART_SetConfig+0x2e8>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d138      	bne.n	800a128 <UART_SetConfig+0x16c>
 800a0b6:	4b7a      	ldr	r3, [pc, #488]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0bc:	f003 030c 	and.w	r3, r3, #12
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	d82d      	bhi.n	800a120 <UART_SetConfig+0x164>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <UART_SetConfig+0x110>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a121 	.word	0x0800a121
 800a0d4:	0800a121 	.word	0x0800a121
 800a0d8:	0800a121 	.word	0x0800a121
 800a0dc:	0800a111 	.word	0x0800a111
 800a0e0:	0800a121 	.word	0x0800a121
 800a0e4:	0800a121 	.word	0x0800a121
 800a0e8:	0800a121 	.word	0x0800a121
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a121 	.word	0x0800a121
 800a0f4:	0800a121 	.word	0x0800a121
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	2300      	movs	r3, #0
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a106:	e0d8      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a108:	2302      	movs	r3, #2
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a10e:	e0d4      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a116:	e0d0      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a11e:	e0cc      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a126:	e0c8      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a5e      	ldr	r2, [pc, #376]	; (800a2a8 <UART_SetConfig+0x2ec>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d125      	bne.n	800a17e <UART_SetConfig+0x1c2>
 800a132:	4b5b      	ldr	r3, [pc, #364]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a13c:	2b30      	cmp	r3, #48	; 0x30
 800a13e:	d016      	beq.n	800a16e <UART_SetConfig+0x1b2>
 800a140:	2b30      	cmp	r3, #48	; 0x30
 800a142:	d818      	bhi.n	800a176 <UART_SetConfig+0x1ba>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d00a      	beq.n	800a15e <UART_SetConfig+0x1a2>
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d814      	bhi.n	800a176 <UART_SetConfig+0x1ba>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <UART_SetConfig+0x19a>
 800a150:	2b10      	cmp	r3, #16
 800a152:	d008      	beq.n	800a166 <UART_SetConfig+0x1aa>
 800a154:	e00f      	b.n	800a176 <UART_SetConfig+0x1ba>
 800a156:	2300      	movs	r3, #0
 800a158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a15c:	e0ad      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a15e:	2302      	movs	r3, #2
 800a160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a164:	e0a9      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a166:	2304      	movs	r3, #4
 800a168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a16c:	e0a5      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a16e:	2308      	movs	r3, #8
 800a170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a174:	e0a1      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a176:	2310      	movs	r3, #16
 800a178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a17c:	e09d      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a4a      	ldr	r2, [pc, #296]	; (800a2ac <UART_SetConfig+0x2f0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d125      	bne.n	800a1d4 <UART_SetConfig+0x218>
 800a188:	4b45      	ldr	r3, [pc, #276]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a18e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a192:	2bc0      	cmp	r3, #192	; 0xc0
 800a194:	d016      	beq.n	800a1c4 <UART_SetConfig+0x208>
 800a196:	2bc0      	cmp	r3, #192	; 0xc0
 800a198:	d818      	bhi.n	800a1cc <UART_SetConfig+0x210>
 800a19a:	2b80      	cmp	r3, #128	; 0x80
 800a19c:	d00a      	beq.n	800a1b4 <UART_SetConfig+0x1f8>
 800a19e:	2b80      	cmp	r3, #128	; 0x80
 800a1a0:	d814      	bhi.n	800a1cc <UART_SetConfig+0x210>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <UART_SetConfig+0x1f0>
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d008      	beq.n	800a1bc <UART_SetConfig+0x200>
 800a1aa:	e00f      	b.n	800a1cc <UART_SetConfig+0x210>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1b2:	e082      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ba:	e07e      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1c2:	e07a      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ca:	e076      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1d2:	e072      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a35      	ldr	r2, [pc, #212]	; (800a2b0 <UART_SetConfig+0x2f4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d12a      	bne.n	800a234 <UART_SetConfig+0x278>
 800a1de:	4b30      	ldr	r3, [pc, #192]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ec:	d01a      	beq.n	800a224 <UART_SetConfig+0x268>
 800a1ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1f2:	d81b      	bhi.n	800a22c <UART_SetConfig+0x270>
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f8:	d00c      	beq.n	800a214 <UART_SetConfig+0x258>
 800a1fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1fe:	d815      	bhi.n	800a22c <UART_SetConfig+0x270>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <UART_SetConfig+0x250>
 800a204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a208:	d008      	beq.n	800a21c <UART_SetConfig+0x260>
 800a20a:	e00f      	b.n	800a22c <UART_SetConfig+0x270>
 800a20c:	2300      	movs	r3, #0
 800a20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a212:	e052      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a214:	2302      	movs	r3, #2
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a21a:	e04e      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a222:	e04a      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a22a:	e046      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a232:	e042      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a17      	ldr	r2, [pc, #92]	; (800a298 <UART_SetConfig+0x2dc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d13a      	bne.n	800a2b4 <UART_SetConfig+0x2f8>
 800a23e:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <UART_SetConfig+0x2e4>)
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a248:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a24c:	d01a      	beq.n	800a284 <UART_SetConfig+0x2c8>
 800a24e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a252:	d81b      	bhi.n	800a28c <UART_SetConfig+0x2d0>
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a258:	d00c      	beq.n	800a274 <UART_SetConfig+0x2b8>
 800a25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25e:	d815      	bhi.n	800a28c <UART_SetConfig+0x2d0>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <UART_SetConfig+0x2b0>
 800a264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a268:	d008      	beq.n	800a27c <UART_SetConfig+0x2c0>
 800a26a:	e00f      	b.n	800a28c <UART_SetConfig+0x2d0>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a272:	e022      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a274:	2302      	movs	r3, #2
 800a276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a27a:	e01e      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a27c:	2304      	movs	r3, #4
 800a27e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a282:	e01a      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a284:	2308      	movs	r3, #8
 800a286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a28a:	e016      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a28c:	2310      	movs	r3, #16
 800a28e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a292:	e012      	b.n	800a2ba <UART_SetConfig+0x2fe>
 800a294:	cfff69f3 	.word	0xcfff69f3
 800a298:	40008000 	.word	0x40008000
 800a29c:	40013800 	.word	0x40013800
 800a2a0:	40021000 	.word	0x40021000
 800a2a4:	40004400 	.word	0x40004400
 800a2a8:	40004800 	.word	0x40004800
 800a2ac:	40004c00 	.word	0x40004c00
 800a2b0:	40005000 	.word	0x40005000
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4aae      	ldr	r2, [pc, #696]	; (800a578 <UART_SetConfig+0x5bc>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	f040 8097 	bne.w	800a3f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2ca:	2b08      	cmp	r3, #8
 800a2cc:	d823      	bhi.n	800a316 <UART_SetConfig+0x35a>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x318>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a317 	.word	0x0800a317
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a317 	.word	0x0800a317
 800a2e4:	0800a307 	.word	0x0800a307
 800a2e8:	0800a317 	.word	0x0800a317
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	0800a317 	.word	0x0800a317
 800a2f4:	0800a30f 	.word	0x0800a30f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f8:	f7fb f80a 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800a2fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2fe:	e010      	b.n	800a322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a300:	4b9e      	ldr	r3, [pc, #632]	; (800a57c <UART_SetConfig+0x5c0>)
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a304:	e00d      	b.n	800a322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a306:	f7fa ff6b 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800a30a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a30c:	e009      	b.n	800a322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a30e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a314:	e005      	b.n	800a322 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8130 	beq.w	800a58a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	4a94      	ldr	r2, [pc, #592]	; (800a580 <UART_SetConfig+0x5c4>)
 800a330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a334:	461a      	mov	r2, r3
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4413      	add	r3, r2
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d305      	bcc.n	800a35a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	429a      	cmp	r2, r3
 800a358:	d903      	bls.n	800a362 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a360:	e113      	b.n	800a58a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	2200      	movs	r2, #0
 800a366:	60bb      	str	r3, [r7, #8]
 800a368:	60fa      	str	r2, [r7, #12]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	4a84      	ldr	r2, [pc, #528]	; (800a580 <UART_SetConfig+0x5c4>)
 800a370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a374:	b29b      	uxth	r3, r3
 800a376:	2200      	movs	r2, #0
 800a378:	603b      	str	r3, [r7, #0]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a384:	f7f6 fc28 	bl	8000bd8 <__aeabi_uldivmod>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4610      	mov	r0, r2
 800a38e:	4619      	mov	r1, r3
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 0300 	mov.w	r3, #0
 800a398:	020b      	lsls	r3, r1, #8
 800a39a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a39e:	0202      	lsls	r2, r0, #8
 800a3a0:	6979      	ldr	r1, [r7, #20]
 800a3a2:	6849      	ldr	r1, [r1, #4]
 800a3a4:	0849      	lsrs	r1, r1, #1
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	eb12 0804 	adds.w	r8, r2, r4
 800a3b0:	eb43 0905 	adc.w	r9, r3, r5
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	4693      	mov	fp, r2
 800a3be:	4652      	mov	r2, sl
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f6 fc07 	bl	8000bd8 <__aeabi_uldivmod>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3d8:	d308      	bcc.n	800a3ec <UART_SetConfig+0x430>
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3e0:	d204      	bcs.n	800a3ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6a3a      	ldr	r2, [r7, #32]
 800a3e8:	60da      	str	r2, [r3, #12]
 800a3ea:	e0ce      	b.n	800a58a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a3f2:	e0ca      	b.n	800a58a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3fc:	d166      	bne.n	800a4cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a3fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a402:	2b08      	cmp	r3, #8
 800a404:	d827      	bhi.n	800a456 <UART_SetConfig+0x49a>
 800a406:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <UART_SetConfig+0x450>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a431 	.word	0x0800a431
 800a410:	0800a439 	.word	0x0800a439
 800a414:	0800a441 	.word	0x0800a441
 800a418:	0800a457 	.word	0x0800a457
 800a41c:	0800a447 	.word	0x0800a447
 800a420:	0800a457 	.word	0x0800a457
 800a424:	0800a457 	.word	0x0800a457
 800a428:	0800a457 	.word	0x0800a457
 800a42c:	0800a44f 	.word	0x0800a44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a430:	f7fa ff6e 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800a434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a436:	e014      	b.n	800a462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a438:	f7fa ff80 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 800a43c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a43e:	e010      	b.n	800a462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a440:	4b4e      	ldr	r3, [pc, #312]	; (800a57c <UART_SetConfig+0x5c0>)
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a444:	e00d      	b.n	800a462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a446:	f7fa fecb 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a44c:	e009      	b.n	800a462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a454:	e005      	b.n	800a462 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8090 	beq.w	800a58a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	4a44      	ldr	r2, [pc, #272]	; (800a580 <UART_SetConfig+0x5c4>)
 800a470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a474:	461a      	mov	r2, r3
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47c:	005a      	lsls	r2, r3, #1
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	085b      	lsrs	r3, r3, #1
 800a484:	441a      	add	r2, r3
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	2b0f      	cmp	r3, #15
 800a494:	d916      	bls.n	800a4c4 <UART_SetConfig+0x508>
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a49c:	d212      	bcs.n	800a4c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f023 030f 	bic.w	r3, r3, #15
 800a4a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	085b      	lsrs	r3, r3, #1
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	8bfb      	ldrh	r3, [r7, #30]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	8bfa      	ldrh	r2, [r7, #30]
 800a4c0:	60da      	str	r2, [r3, #12]
 800a4c2:	e062      	b.n	800a58a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a4ca:	e05e      	b.n	800a58a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d828      	bhi.n	800a526 <UART_SetConfig+0x56a>
 800a4d4:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <UART_SetConfig+0x520>)
 800a4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4da:	bf00      	nop
 800a4dc:	0800a501 	.word	0x0800a501
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	0800a527 	.word	0x0800a527
 800a4ec:	0800a517 	.word	0x0800a517
 800a4f0:	0800a527 	.word	0x0800a527
 800a4f4:	0800a527 	.word	0x0800a527
 800a4f8:	0800a527 	.word	0x0800a527
 800a4fc:	0800a51f 	.word	0x0800a51f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a500:	f7fa ff06 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800a504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a506:	e014      	b.n	800a532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a508:	f7fa ff18 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 800a50c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a50e:	e010      	b.n	800a532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a510:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <UART_SetConfig+0x5c0>)
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a514:	e00d      	b.n	800a532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a516:	f7fa fe63 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800a51a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a51c:	e009      	b.n	800a532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a524:	e005      	b.n	800a532 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a526:	2300      	movs	r3, #0
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a530:	bf00      	nop
    }

    if (pclk != 0U)
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	d028      	beq.n	800a58a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	4a10      	ldr	r2, [pc, #64]	; (800a580 <UART_SetConfig+0x5c4>)
 800a53e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a542:	461a      	mov	r2, r3
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	fbb3 f2f2 	udiv	r2, r3, r2
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	085b      	lsrs	r3, r3, #1
 800a550:	441a      	add	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	2b0f      	cmp	r3, #15
 800a560:	d910      	bls.n	800a584 <UART_SetConfig+0x5c8>
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a568:	d20c      	bcs.n	800a584 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60da      	str	r2, [r3, #12]
 800a574:	e009      	b.n	800a58a <UART_SetConfig+0x5ce>
 800a576:	bf00      	nop
 800a578:	40008000 	.word	0x40008000
 800a57c:	00f42400 	.word	0x00f42400
 800a580:	080129dc 	.word	0x080129dc
      }
      else
      {
        ret = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2201      	movs	r2, #1
 800a596:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2200      	movs	r2, #0
 800a59e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a5a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3730      	adds	r7, #48	; 0x30
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a5b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00a      	beq.n	800a5de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	f003 0308 	and.w	r3, r3, #8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00a      	beq.n	800a666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01a      	beq.n	800a6ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6b2:	d10a      	bne.n	800a6ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	605a      	str	r2, [r3, #4]
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a708:	f7f7 fdf6 	bl	80022f8 <HAL_GetTick>
 800a70c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0308 	and.w	r3, r3, #8
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d10e      	bne.n	800a73a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a71c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f82f 	bl	800a78e <UART_WaitOnFlagUntilTimeout>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e025      	b.n	800a786 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b04      	cmp	r3, #4
 800a746:	d10e      	bne.n	800a766 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f819 	bl	800a78e <UART_WaitOnFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e00f      	b.n	800a786 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b09c      	sub	sp, #112	; 0x70
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	4613      	mov	r3, r2
 800a79c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79e:	e0a9      	b.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a6:	f000 80a5 	beq.w	800a8f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7aa:	f7f7 fda5 	bl	80022f8 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d140      	bne.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	663b      	str	r3, [r7, #96]	; 0x60
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a812:	64ba      	str	r2, [r7, #72]	; 0x48
 800a814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2220      	movs	r2, #32
 800a82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e069      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d051      	beq.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a85a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a85e:	d149      	bne.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a868:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	e853 3f00 	ldrex	r3, [r3]
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a87e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
 800a88a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e6      	bne.n	800a86a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f023 0301 	bic.w	r3, r3, #1
 800a8b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8bc:	623a      	str	r2, [r7, #32]
 800a8be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69f9      	ldr	r1, [r7, #28]
 800a8c2:	6a3a      	ldr	r2, [r7, #32]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e5      	bne.n	800a89c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e010      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	69da      	ldr	r2, [r3, #28]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	429a      	cmp	r2, r3
 800a902:	bf0c      	ite	eq
 800a904:	2301      	moveq	r3, #1
 800a906:	2300      	movne	r3, #0
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	461a      	mov	r2, r3
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	429a      	cmp	r2, r3
 800a910:	f43f af46 	beq.w	800a7a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3770      	adds	r7, #112	; 0x70
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b096      	sub	sp, #88	; 0x58
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	88fa      	ldrh	r2, [r7, #6]
 800a938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2222      	movs	r2, #34	; 0x22
 800a948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d02c      	beq.n	800a9ae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a958:	4a42      	ldr	r2, [pc, #264]	; (800aa64 <UART_Start_Receive_DMA+0x144>)
 800a95a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a960:	4a41      	ldr	r2, [pc, #260]	; (800aa68 <UART_Start_Receive_DMA+0x148>)
 800a962:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a968:	4a40      	ldr	r2, [pc, #256]	; (800aa6c <UART_Start_Receive_DMA+0x14c>)
 800a96a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a970:	2200      	movs	r2, #0
 800a972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3324      	adds	r3, #36	; 0x24
 800a97e:	4619      	mov	r1, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a984:	461a      	mov	r2, r3
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	f7f7 fea0 	bl	80026cc <HAL_DMA_Start_IT>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00d      	beq.n	800a9ae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2210      	movs	r2, #16
 800a996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e055      	b.n	800aa5a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d018      	beq.n	800a9f0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c6:	e853 3f00 	ldrex	r3, [r3]
 800a9ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d2:	657b      	str	r3, [r7, #84]	; 0x54
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e6      	bne.n	800a9be <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	653b      	str	r3, [r7, #80]	; 0x50
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa10:	637a      	str	r2, [r7, #52]	; 0x34
 800aa12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e5      	bne.n	800a9f0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	613b      	str	r3, [r7, #16]
   return(result);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3308      	adds	r3, #8
 800aa42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa44:	623a      	str	r2, [r7, #32]
 800aa46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	69f9      	ldr	r1, [r7, #28]
 800aa4a:	6a3a      	ldr	r2, [r7, #32]
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3758      	adds	r7, #88	; 0x58
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	0800abbf 	.word	0x0800abbf
 800aa68:	0800ace5 	.word	0x0800ace5
 800aa6c:	0800ad1d 	.word	0x0800ad1d

0800aa70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b08f      	sub	sp, #60	; 0x3c
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e6      	bne.n	800aa78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaca:	61ba      	str	r2, [r7, #24]
 800aacc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6979      	ldr	r1, [r7, #20]
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	613b      	str	r3, [r7, #16]
   return(result);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e5      	bne.n	800aaaa <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aae6:	bf00      	nop
 800aae8:	373c      	adds	r7, #60	; 0x3c
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b095      	sub	sp, #84	; 0x54
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab18:	643b      	str	r3, [r7, #64]	; 0x40
 800ab1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e6      	bne.n	800aafa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3308      	adds	r3, #8
 800ab32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab42:	f023 0301 	bic.w	r3, r3, #1
 800ab46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab58:	e841 2300 	strex	r3, r2, [r1]
 800ab5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e3      	bne.n	800ab2c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d118      	bne.n	800ab9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	e853 3f00 	ldrex	r3, [r3]
 800ab78:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f023 0310 	bic.w	r3, r3, #16
 800ab80:	647b      	str	r3, [r7, #68]	; 0x44
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6979      	ldr	r1, [r7, #20]
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	613b      	str	r3, [r7, #16]
   return(result);
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e6      	bne.n	800ab6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2220      	movs	r2, #32
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800abb2:	bf00      	nop
 800abb4:	3754      	adds	r7, #84	; 0x54
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b09c      	sub	sp, #112	; 0x70
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d171      	bne.n	800acbe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	2200      	movs	r2, #0
 800abde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e6      	bne.n	800abe2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac26:	f023 0301 	bic.w	r3, r3, #1
 800ac2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ac2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3308      	adds	r3, #8
 800ac32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac34:	647a      	str	r2, [r7, #68]	; 0x44
 800ac36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e5      	bne.n	800ac14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	623b      	str	r3, [r7, #32]
   return(result);
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac5e:	663b      	str	r3, [r7, #96]	; 0x60
 800ac60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3308      	adds	r3, #8
 800ac66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac68:	633a      	str	r2, [r7, #48]	; 0x30
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e5      	bne.n	800ac48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7e:	2220      	movs	r2, #32
 800ac80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d118      	bne.n	800acbe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f023 0310 	bic.w	r3, r3, #16
 800aca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	69b9      	ldr	r1, [r7, #24]
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	617b      	str	r3, [r7, #20]
   return(result);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e6      	bne.n	800ac8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d107      	bne.n	800acd6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800accc:	4619      	mov	r1, r3
 800acce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acd0:	f7ff f968 	bl	8009fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acd4:	e002      	b.n	800acdc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800acd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acd8:	f7f6 f9e2 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 800acdc:	bf00      	nop
 800acde:	3770      	adds	r7, #112	; 0x70
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d109      	bne.n	800ad0e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad00:	085b      	lsrs	r3, r3, #1
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4619      	mov	r1, r3
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff f94c 	bl	8009fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad0c:	e002      	b.n	800ad14 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff f934 	bl	8009f7c <HAL_UART_RxHalfCpltCallback>
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad44:	2b80      	cmp	r3, #128	; 0x80
 800ad46:	d109      	bne.n	800ad5c <UART_DMAError+0x40>
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b21      	cmp	r3, #33	; 0x21
 800ad4c:	d106      	bne.n	800ad5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ad56:	6978      	ldr	r0, [r7, #20]
 800ad58:	f7ff fe8a 	bl	800aa70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad66:	2b40      	cmp	r3, #64	; 0x40
 800ad68:	d109      	bne.n	800ad7e <UART_DMAError+0x62>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b22      	cmp	r3, #34	; 0x22
 800ad6e:	d106      	bne.n	800ad7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ad78:	6978      	ldr	r0, [r7, #20]
 800ad7a:	f7ff feba 	bl	800aaf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad84:	f043 0210 	orr.w	r2, r3, #16
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f7ff f8fe 	bl	8009f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad94:	bf00      	nop
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff f8e8 	bl	8009f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	60bb      	str	r3, [r7, #8]
   return(result);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade4:	61fb      	str	r3, [r7, #28]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	6979      	ldr	r1, [r7, #20]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	613b      	str	r3, [r7, #16]
   return(result);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e6      	bne.n	800add0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2220      	movs	r2, #32
 800ae06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff f8a9 	bl	8009f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae16:	bf00      	nop
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae4e:	bf00      	nop
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d101      	bne.n	800ae70 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e027      	b.n	800aec0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2224      	movs	r2, #36	; 0x24
 800ae7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0201 	bic.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d101      	bne.n	800aee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aee0:	2302      	movs	r3, #2
 800aee2:	e02d      	b.n	800af40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2224      	movs	r2, #36	; 0x24
 800aef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0201 	bic.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f84f 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d101      	bne.n	800af60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af5c:	2302      	movs	r3, #2
 800af5e:	e02d      	b.n	800afbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0201 	bic.w	r2, r2, #1
 800af86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f811 	bl	800afc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d108      	bne.n	800afe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afe4:	e031      	b.n	800b04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afe6:	2308      	movs	r3, #8
 800afe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afea:	2308      	movs	r3, #8
 800afec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	0e5b      	lsrs	r3, r3, #25
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	0f5b      	lsrs	r3, r3, #29
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	7b3a      	ldrb	r2, [r7, #12]
 800b012:	4911      	ldr	r1, [pc, #68]	; (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b014:	5c8a      	ldrb	r2, [r1, r2]
 800b016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b01a:	7b3a      	ldrb	r2, [r7, #12]
 800b01c:	490f      	ldr	r1, [pc, #60]	; (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b020:	fb93 f3f2 	sdiv	r3, r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	7b7a      	ldrb	r2, [r7, #13]
 800b030:	4909      	ldr	r1, [pc, #36]	; (800b058 <UARTEx_SetNbDataToProcess+0x94>)
 800b032:	5c8a      	ldrb	r2, [r1, r2]
 800b034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b038:	7b7a      	ldrb	r2, [r7, #13]
 800b03a:	4908      	ldr	r1, [pc, #32]	; (800b05c <UARTEx_SetNbDataToProcess+0x98>)
 800b03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	080129f4 	.word	0x080129f4
 800b05c:	080129fc 	.word	0x080129fc

0800b060 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b060:	b084      	sub	sp, #16
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	f107 001c 	add.w	r0, r7, #28
 800b06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b076:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b078:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b07a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b07e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b082:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b086:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <SDMMC_Init+0x50>)
 800b094:	4013      	ands	r3, r2
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	431a      	orrs	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	b004      	add	sp, #16
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	ffc02c00 	.word	0xffc02c00

0800b0b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f043 0203 	orr.w	r2, r3, #3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b104:	2002      	movs	r0, #2
 800b106:	f7f7 f903 	bl	8002310 <HAL_Delay>

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 0303 	and.w	r3, r3, #3
}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b14e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b154:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b15a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	4b06      	ldr	r3, [pc, #24]	; (800b180 <SDMMC_SendCommand+0x50>)
 800b168:	4013      	ands	r3, r2
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	431a      	orrs	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	fffee0c0 	.word	0xfffee0c0

0800b184 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	b2db      	uxtb	r3, r3
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3314      	adds	r3, #20
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3714      	adds	r7, #20
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b1f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b1f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0

}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b22a:	2310      	movs	r3, #16
 800b22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b22e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b234:	2300      	movs	r3, #0
 800b236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b23c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b23e:	f107 0308 	add.w	r3, r7, #8
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff ff73 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b24e:	2110      	movs	r1, #16
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa7b 	bl	800b74c <SDMMC_GetCmdResp1>
 800b256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b258:	69fb      	ldr	r3, [r7, #28]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b270:	2311      	movs	r3, #17
 800b272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b27a:	2300      	movs	r3, #0
 800b27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b284:	f107 0308 	add.w	r3, r7, #8
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff ff50 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b290:	f241 3288 	movw	r2, #5000	; 0x1388
 800b294:	2111      	movs	r1, #17
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fa58 	bl	800b74c <SDMMC_GetCmdResp1>
 800b29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b29e:	69fb      	ldr	r3, [r7, #28]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b2b6:	2312      	movs	r3, #18
 800b2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff2d 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2da:	2112      	movs	r1, #18
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fa35 	bl	800b74c <SDMMC_GetCmdResp1>
 800b2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b088      	sub	sp, #32
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b2fc:	2318      	movs	r3, #24
 800b2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b300:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b30a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b30e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b310:	f107 0308 	add.w	r3, r7, #8
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff ff0a 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	2118      	movs	r1, #24
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa12 	bl	800b74c <SDMMC_GetCmdResp1>
 800b328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32a:	69fb      	ldr	r3, [r7, #28]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b342:	2319      	movs	r3, #25
 800b344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fee7 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b362:	f241 3288 	movw	r2, #5000	; 0x1388
 800b366:	2119      	movs	r1, #25
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f9ef 	bl	800b74c <SDMMC_GetCmdResp1>
 800b36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b370:	69fb      	ldr	r3, [r7, #28]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b388:	230c      	movs	r3, #12
 800b38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b392:	2300      	movs	r3, #0
 800b394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b39a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3b4:	f107 0308 	add.w	r3, r7, #8
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff feb8 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b3c0:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <SDMMC_CmdStopTransfer+0x68>)
 800b3c2:	210c      	movs	r1, #12
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f9c1 	bl	800b74c <SDMMC_GetCmdResp1>
 800b3ca:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3720      	adds	r7, #32
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	05f5e100 	.word	0x05f5e100

0800b3e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b3f8:	2307      	movs	r3, #7
 800b3fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b400:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b402:	2300      	movs	r3, #0
 800b404:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b40a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40c:	f107 0310 	add.w	r3, r7, #16
 800b410:	4619      	mov	r1, r3
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f7ff fe8c 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b418:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41c:	2107      	movs	r1, #7
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f000 f994 	bl	800b74c <SDMMC_GetCmdResp1>
 800b424:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3728      	adds	r7, #40	; 0x28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b444:	2300      	movs	r3, #0
 800b446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b44c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b44e:	f107 0308 	add.w	r3, r7, #8
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff fe6b 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fbb8 	bl	800bbd0 <SDMMC_GetCmdError>
 800b460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b462:	69fb      	ldr	r3, [r7, #28]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3720      	adds	r7, #32
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b474:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b47a:	2308      	movs	r3, #8
 800b47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b47e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b48c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff fe4b 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fb4a 	bl	800bb34 <SDMMC_GetCmdResp7>
 800b4a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3720      	adds	r7, #32
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b4ba:	2337      	movs	r3, #55	; 0x37
 800b4bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fe2b 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4de:	2137      	movs	r1, #55	; 0x37
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f933 	bl	800b74c <SDMMC_GetCmdResp1>
 800b4e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3720      	adds	r7, #32
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b088      	sub	sp, #32
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b500:	2329      	movs	r3, #41	; 0x29
 800b502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b50a:	2300      	movs	r3, #0
 800b50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b50e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b514:	f107 0308 	add.w	r3, r7, #8
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fe08 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa4f 	bl	800b9c4 <SDMMC_GetCmdResp3>
 800b526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b528:	69fb      	ldr	r3, [r7, #28]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3720      	adds	r7, #32
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b088      	sub	sp, #32
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b540:	2306      	movs	r3, #6
 800b542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b544:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b54e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff fde8 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b560:	f241 3288 	movw	r2, #5000	; 0x1388
 800b564:	2106      	movs	r1, #6
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f8f0 	bl	800b74c <SDMMC_GetCmdResp1>
 800b56c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b56e:	69fb      	ldr	r3, [r7, #28]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b584:	2333      	movs	r3, #51	; 0x33
 800b586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b58e:	2300      	movs	r3, #0
 800b590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b598:	f107 0308 	add.w	r3, r7, #8
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fdc6 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a8:	2133      	movs	r1, #51	; 0x33
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f8ce 	bl	800b74c <SDMMC_GetCmdResp1>
 800b5b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3720      	adds	r7, #32
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b5cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b5d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5dc:	f107 0308 	add.w	r3, r7, #8
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fda4 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9a1 	bl	800b930 <SDMMC_GetCmdResp2>
 800b5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b608:	2309      	movs	r3, #9
 800b60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b60c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fd84 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f981 	bl	800b930 <SDMMC_GetCmdResp2>
 800b62e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b630:	69fb      	ldr	r3, [r7, #28]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3720      	adds	r7, #32
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b088      	sub	sp, #32
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b648:	2303      	movs	r3, #3
 800b64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b64c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b65c:	f107 0308 	add.w	r3, r7, #8
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff fd64 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	2103      	movs	r1, #3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f9e9 	bl	800ba44 <SDMMC_GetCmdResp6>
 800b672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b674:	69fb      	ldr	r3, [r7, #28]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3720      	adds	r7, #32
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b088      	sub	sp, #32
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b68c:	230d      	movs	r3, #13
 800b68e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b690:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b696:	2300      	movs	r3, #0
 800b698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b69e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a0:	f107 0308 	add.w	r3, r7, #8
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fd42 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b0:	210d      	movs	r1, #13
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f84a 	bl	800b74c <SDMMC_GetCmdResp1>
 800b6b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b6d0:	230d      	movs	r3, #13
 800b6d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e4:	f107 0308 	add.w	r3, r7, #8
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff fd20 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f4:	210d      	movs	r1, #13
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f828 	bl	800b74c <SDMMC_GetCmdResp1>
 800b6fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3720      	adds	r7, #32
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b710:	2300      	movs	r3, #0
 800b712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b714:	230b      	movs	r3, #11
 800b716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff fcfe 	bl	800b130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b734:	f241 3288 	movw	r2, #5000	; 0x1388
 800b738:	210b      	movs	r1, #11
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f806 	bl	800b74c <SDMMC_GetCmdResp1>
 800b740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b742:	69fb      	ldr	r3, [r7, #28]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	460b      	mov	r3, r1
 800b756:	607a      	str	r2, [r7, #4]
 800b758:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b75a:	4b70      	ldr	r3, [pc, #448]	; (800b91c <SDMMC_GetCmdResp1+0x1d0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a70      	ldr	r2, [pc, #448]	; (800b920 <SDMMC_GetCmdResp1+0x1d4>)
 800b760:	fba2 2303 	umull	r2, r3, r2, r3
 800b764:	0a5a      	lsrs	r2, r3, #9
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	fb02 f303 	mul.w	r3, r2, r3
 800b76c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	1e5a      	subs	r2, r3, #1
 800b772:	61fa      	str	r2, [r7, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b77c:	e0c9      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b782:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b784:	69ba      	ldr	r2, [r7, #24]
 800b786:	4b67      	ldr	r3, [pc, #412]	; (800b924 <SDMMC_GetCmdResp1+0x1d8>)
 800b788:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0ef      	beq.n	800b76e <SDMMC_GetCmdResp1+0x22>
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1ea      	bne.n	800b76e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	e0b1      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e0a6      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	4a58      	ldr	r2, [pc, #352]	; (800b928 <SDMMC_GetCmdResp1+0x1dc>)
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff fcda 	bl	800b184 <SDMMC_GetCommandResponse>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	7afb      	ldrb	r3, [r7, #11]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d001      	beq.n	800b7de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e099      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b7de:	2100      	movs	r1, #0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f7ff fcdc 	bl	800b19e <SDMMC_GetResponse>
 800b7e6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	4b50      	ldr	r3, [pc, #320]	; (800b92c <SDMMC_GetCmdResp1+0x1e0>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e08d      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	da02      	bge.n	800b802 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b7fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b800:	e087      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b80c:	2340      	movs	r3, #64	; 0x40
 800b80e:	e080      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b81a:	2380      	movs	r3, #128	; 0x80
 800b81c:	e079      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82c:	e071      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b83c:	e069      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84c:	e061      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b85c:	e059      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b86c:	e051      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b87c:	e049      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b88c:	e041      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b89c:	e039      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8ac:	e031      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8bc:	e029      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8cc:	e021      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8dc:	e019      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b8e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b8ec:	e011      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b8f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b8fc:	e009      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f003 0308 	and.w	r3, r3, #8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b908:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b90c:	e001      	b.n	800b912 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000008 	.word	0x20000008
 800b920:	10624dd3 	.word	0x10624dd3
 800b924:	00200045 	.word	0x00200045
 800b928:	002000c5 	.word	0x002000c5
 800b92c:	fdffe008 	.word	0xfdffe008

0800b930 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b938:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <SDMMC_GetCmdResp2+0x88>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a1f      	ldr	r2, [pc, #124]	; (800b9bc <SDMMC_GetCmdResp2+0x8c>)
 800b93e:	fba2 2303 	umull	r2, r3, r2, r3
 800b942:	0a5b      	lsrs	r3, r3, #9
 800b944:	f241 3288 	movw	r2, #5000	; 0x1388
 800b948:	fb02 f303 	mul.w	r3, r2, r3
 800b94c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1e5a      	subs	r2, r3, #1
 800b952:	60fa      	str	r2, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b95c:	e026      	b.n	800b9ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0ef      	beq.n	800b94e <SDMMC_GetCmdResp2+0x1e>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1ea      	bne.n	800b94e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2204      	movs	r2, #4
 800b988:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b98a:	2304      	movs	r3, #4
 800b98c:	e00e      	b.n	800b9ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e003      	b.n	800b9ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a06      	ldr	r2, [pc, #24]	; (800b9c0 <SDMMC_GetCmdResp2+0x90>)
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	20000008 	.word	0x20000008
 800b9bc:	10624dd3 	.word	0x10624dd3
 800b9c0:	002000c5 	.word	0x002000c5

0800b9c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <SDMMC_GetCmdResp3+0x74>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ba3c <SDMMC_GetCmdResp3+0x78>)
 800b9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d6:	0a5b      	lsrs	r3, r3, #9
 800b9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9dc:	fb02 f303 	mul.w	r3, r2, r3
 800b9e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1e5a      	subs	r2, r3, #1
 800b9e6:	60fa      	str	r2, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f0:	e01b      	b.n	800ba2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0ef      	beq.n	800b9e2 <SDMMC_GetCmdResp3+0x1e>
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1ea      	bne.n	800b9e2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d004      	beq.n	800ba22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1e:	2304      	movs	r3, #4
 800ba20:	e003      	b.n	800ba2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a06      	ldr	r2, [pc, #24]	; (800ba40 <SDMMC_GetCmdResp3+0x7c>)
 800ba26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	20000008 	.word	0x20000008
 800ba3c:	10624dd3 	.word	0x10624dd3
 800ba40:	002000c5 	.word	0x002000c5

0800ba44 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba52:	4b35      	ldr	r3, [pc, #212]	; (800bb28 <SDMMC_GetCmdResp6+0xe4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a35      	ldr	r2, [pc, #212]	; (800bb2c <SDMMC_GetCmdResp6+0xe8>)
 800ba58:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5c:	0a5b      	lsrs	r3, r3, #9
 800ba5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	61fa      	str	r2, [r7, #28]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba76:	e052      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0ef      	beq.n	800ba68 <SDMMC_GetCmdResp6+0x24>
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1ea      	bne.n	800ba68 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2204      	movs	r2, #4
 800baa2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baa4:	2304      	movs	r3, #4
 800baa6:	e03a      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2201      	movs	r2, #1
 800bab8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baba:	2301      	movs	r3, #1
 800babc:	e02f      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7ff fb60 	bl	800b184 <SDMMC_GetCommandResponse>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	4293      	cmp	r3, r2
 800bacc:	d001      	beq.n	800bad2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bace:	2301      	movs	r3, #1
 800bad0:	e025      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4a16      	ldr	r2, [pc, #88]	; (800bb30 <SDMMC_GetCmdResp6+0xec>)
 800bad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bad8:	2100      	movs	r1, #0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fb5f 	bl	800b19e <SDMMC_GetResponse>
 800bae0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d106      	bne.n	800bafa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	0c1b      	lsrs	r3, r3, #16
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	e011      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb08:	e009      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb18:	e001      	b.n	800bb1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000008 	.word	0x20000008
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	002000c5 	.word	0x002000c5

0800bb34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb3c:	4b22      	ldr	r3, [pc, #136]	; (800bbc8 <SDMMC_GetCmdResp7+0x94>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a22      	ldr	r2, [pc, #136]	; (800bbcc <SDMMC_GetCmdResp7+0x98>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	0a5b      	lsrs	r3, r3, #9
 800bb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb4c:	fb02 f303 	mul.w	r3, r2, r3
 800bb50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	1e5a      	subs	r2, r3, #1
 800bb56:	60fa      	str	r2, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb60:	e02c      	b.n	800bbbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0ef      	beq.n	800bb52 <SDMMC_GetCmdResp7+0x1e>
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1ea      	bne.n	800bb52 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2204      	movs	r2, #4
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb8e:	2304      	movs	r3, #4
 800bb90:	e014      	b.n	800bbbc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e009      	b.n	800bbbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2240      	movs	r2, #64	; 0x40
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbba:	2300      	movs	r3, #0

}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	20000008 	.word	0x20000008
 800bbcc:	10624dd3 	.word	0x10624dd3

0800bbd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbd8:	4b11      	ldr	r3, [pc, #68]	; (800bc20 <SDMMC_GetCmdError+0x50>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a11      	ldr	r2, [pc, #68]	; (800bc24 <SDMMC_GetCmdError+0x54>)
 800bbde:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe2:	0a5b      	lsrs	r3, r3, #9
 800bbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	1e5a      	subs	r2, r3, #1
 800bbf2:	60fa      	str	r2, [r7, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbfc:	e009      	b.n	800bc12 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0f1      	beq.n	800bbee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a06      	ldr	r2, [pc, #24]	; (800bc28 <SDMMC_GetCmdError+0x58>)
 800bc0e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000008 	.word	0x20000008
 800bc24:	10624dd3 	.word	0x10624dd3
 800bc28:	002000c5 	.word	0x002000c5

0800bc2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	f107 001c 	add.w	r0, r7, #28
 800bc3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 faf6 	bl	800d23c <USB_CoreReset>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38
 800bc66:	e005      	b.n	800bc74 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc80:	b004      	add	sp, #16
 800bc82:	4770      	bx	lr

0800bc84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d165      	bne.n	800bd64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4a3e      	ldr	r2, [pc, #248]	; (800bd94 <USB_SetTurnaroundTime+0x110>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d906      	bls.n	800bcae <USB_SetTurnaroundTime+0x2a>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4a3d      	ldr	r2, [pc, #244]	; (800bd98 <USB_SetTurnaroundTime+0x114>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d202      	bcs.n	800bcae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bca8:	230f      	movs	r3, #15
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	e05c      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4a39      	ldr	r2, [pc, #228]	; (800bd98 <USB_SetTurnaroundTime+0x114>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d306      	bcc.n	800bcc4 <USB_SetTurnaroundTime+0x40>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4a38      	ldr	r2, [pc, #224]	; (800bd9c <USB_SetTurnaroundTime+0x118>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d202      	bcs.n	800bcc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bcbe:	230e      	movs	r3, #14
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e051      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4a35      	ldr	r2, [pc, #212]	; (800bd9c <USB_SetTurnaroundTime+0x118>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d306      	bcc.n	800bcda <USB_SetTurnaroundTime+0x56>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	4a34      	ldr	r2, [pc, #208]	; (800bda0 <USB_SetTurnaroundTime+0x11c>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d202      	bcs.n	800bcda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bcd4:	230d      	movs	r3, #13
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e046      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	4a30      	ldr	r2, [pc, #192]	; (800bda0 <USB_SetTurnaroundTime+0x11c>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d306      	bcc.n	800bcf0 <USB_SetTurnaroundTime+0x6c>
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	4a2f      	ldr	r2, [pc, #188]	; (800bda4 <USB_SetTurnaroundTime+0x120>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d802      	bhi.n	800bcf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bcea:	230c      	movs	r3, #12
 800bcec:	617b      	str	r3, [r7, #20]
 800bcee:	e03b      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	4a2c      	ldr	r2, [pc, #176]	; (800bda4 <USB_SetTurnaroundTime+0x120>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d906      	bls.n	800bd06 <USB_SetTurnaroundTime+0x82>
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4a2b      	ldr	r2, [pc, #172]	; (800bda8 <USB_SetTurnaroundTime+0x124>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d802      	bhi.n	800bd06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bd00:	230b      	movs	r3, #11
 800bd02:	617b      	str	r3, [r7, #20]
 800bd04:	e030      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	4a27      	ldr	r2, [pc, #156]	; (800bda8 <USB_SetTurnaroundTime+0x124>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d906      	bls.n	800bd1c <USB_SetTurnaroundTime+0x98>
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4a26      	ldr	r2, [pc, #152]	; (800bdac <USB_SetTurnaroundTime+0x128>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d802      	bhi.n	800bd1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bd16:	230a      	movs	r3, #10
 800bd18:	617b      	str	r3, [r7, #20]
 800bd1a:	e025      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	4a23      	ldr	r2, [pc, #140]	; (800bdac <USB_SetTurnaroundTime+0x128>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d906      	bls.n	800bd32 <USB_SetTurnaroundTime+0xae>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	4a22      	ldr	r2, [pc, #136]	; (800bdb0 <USB_SetTurnaroundTime+0x12c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d202      	bcs.n	800bd32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bd2c:	2309      	movs	r3, #9
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	e01a      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	4a1e      	ldr	r2, [pc, #120]	; (800bdb0 <USB_SetTurnaroundTime+0x12c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d306      	bcc.n	800bd48 <USB_SetTurnaroundTime+0xc4>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <USB_SetTurnaroundTime+0x130>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d802      	bhi.n	800bd48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bd42:	2308      	movs	r3, #8
 800bd44:	617b      	str	r3, [r7, #20]
 800bd46:	e00f      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4a1a      	ldr	r2, [pc, #104]	; (800bdb4 <USB_SetTurnaroundTime+0x130>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d906      	bls.n	800bd5e <USB_SetTurnaroundTime+0xda>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4a19      	ldr	r2, [pc, #100]	; (800bdb8 <USB_SetTurnaroundTime+0x134>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d202      	bcs.n	800bd5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bd58:	2307      	movs	r3, #7
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e004      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bd5e:	2306      	movs	r3, #6
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e001      	b.n	800bd68 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bd64:	2309      	movs	r3, #9
 800bd66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	029b      	lsls	r3, r3, #10
 800bd7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bd80:	431a      	orrs	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	00d8acbf 	.word	0x00d8acbf
 800bd98:	00e4e1c0 	.word	0x00e4e1c0
 800bd9c:	00f42400 	.word	0x00f42400
 800bda0:	01067380 	.word	0x01067380
 800bda4:	011a499f 	.word	0x011a499f
 800bda8:	01312cff 	.word	0x01312cff
 800bdac:	014ca43f 	.word	0x014ca43f
 800bdb0:	016e3600 	.word	0x016e3600
 800bdb4:	01a6ab1f 	.word	0x01a6ab1f
 800bdb8:	01e84800 	.word	0x01e84800

0800bdbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f043 0201 	orr.w	r2, r3, #1
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f023 0201 	bic.w	r2, r3, #1
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d115      	bne.n	800be4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be2e:	2001      	movs	r0, #1
 800be30:	f7f6 fa6e 	bl	8002310 <HAL_Delay>
      ms++;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 f985 	bl	800d14a <USB_GetMode>
 800be40:	4603      	mov	r3, r0
 800be42:	2b01      	cmp	r3, #1
 800be44:	d01e      	beq.n	800be84 <USB_SetCurrentMode+0x84>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b31      	cmp	r3, #49	; 0x31
 800be4a:	d9f0      	bls.n	800be2e <USB_SetCurrentMode+0x2e>
 800be4c:	e01a      	b.n	800be84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d115      	bne.n	800be80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800be60:	2001      	movs	r0, #1
 800be62:	f7f6 fa55 	bl	8002310 <HAL_Delay>
      ms++;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3301      	adds	r3, #1
 800be6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f001 f96c 	bl	800d14a <USB_GetMode>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <USB_SetCurrentMode+0x84>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b31      	cmp	r3, #49	; 0x31
 800be7c:	d9f0      	bls.n	800be60 <USB_SetCurrentMode+0x60>
 800be7e:	e001      	b.n	800be84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e005      	b.n	800be90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b32      	cmp	r3, #50	; 0x32
 800be88:	d101      	bne.n	800be8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be98:	b084      	sub	sp, #16
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b086      	sub	sp, #24
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800beb2:	2300      	movs	r3, #0
 800beb4:	613b      	str	r3, [r7, #16]
 800beb6:	e009      	b.n	800becc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	3340      	adds	r3, #64	; 0x40
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	3301      	adds	r3, #1
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2b0e      	cmp	r3, #14
 800bed0:	d9f2      	bls.n	800beb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d11c      	bne.n	800bf12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bee6:	f043 0302 	orr.w	r3, r3, #2
 800beea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	e005      	b.n	800bf1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf24:	461a      	mov	r2, r3
 800bf26:	2300      	movs	r3, #0
 800bf28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf30:	4619      	mov	r1, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf38:	461a      	mov	r2, r3
 800bf3a:	680b      	ldr	r3, [r1, #0]
 800bf3c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bf3e:	2103      	movs	r1, #3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f959 	bl	800c1f8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf46:	2110      	movs	r1, #16
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f8f1 	bl	800c130 <USB_FlushTxFifo>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f91d 	bl	800c198 <USB_FlushRxFifo>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf6e:	461a      	mov	r2, r3
 800bf70:	2300      	movs	r3, #0
 800bf72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf86:	461a      	mov	r2, r3
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	613b      	str	r3, [r7, #16]
 800bf90:	e043      	b.n	800c01a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	015a      	lsls	r2, r3, #5
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4413      	add	r3, r2
 800bf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfa8:	d118      	bne.n	800bfdc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	e013      	b.n	800bfee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	015a      	lsls	r2, r3, #5
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	4413      	add	r3, r2
 800bfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	e008      	b.n	800bfee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe8:	461a      	mov	r2, r3
 800bfea:	2300      	movs	r3, #0
 800bfec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffa:	461a      	mov	r2, r3
 800bffc:	2300      	movs	r3, #0
 800bffe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c00c:	461a      	mov	r2, r3
 800c00e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	3301      	adds	r3, #1
 800c018:	613b      	str	r3, [r7, #16]
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d3b7      	bcc.n	800bf92 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c022:	2300      	movs	r3, #0
 800c024:	613b      	str	r3, [r7, #16]
 800c026:	e043      	b.n	800c0b0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	015a      	lsls	r2, r3, #5
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4413      	add	r3, r2
 800c030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c03a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c03e:	d118      	bne.n	800c072 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10a      	bne.n	800c05c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	015a      	lsls	r2, r3, #5
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c052:	461a      	mov	r2, r3
 800c054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e013      	b.n	800c084 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	015a      	lsls	r2, r3, #5
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c068:	461a      	mov	r2, r3
 800c06a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	e008      	b.n	800c084 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07e:	461a      	mov	r2, r3
 800c080:	2300      	movs	r3, #0
 800c082:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c090:	461a      	mov	r2, r3
 800c092:	2300      	movs	r3, #0
 800c094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	613b      	str	r3, [r7, #16]
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d3b7      	bcc.n	800c028 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c0d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	f043 0210 	orr.w	r2, r3, #16
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	699a      	ldr	r2, [r3, #24]
 800c0ea:	4b10      	ldr	r3, [pc, #64]	; (800c12c <USB_DevInit+0x294>)
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	f043 0208 	orr.w	r2, r3, #8
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c106:	2b01      	cmp	r3, #1
 800c108:	d107      	bne.n	800c11a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c112:	f043 0304 	orr.w	r3, r3, #4
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c126:	b004      	add	sp, #16
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	803c3800 	.word	0x803c3800

0800c130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3301      	adds	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4a13      	ldr	r2, [pc, #76]	; (800c194 <USB_FlushTxFifo+0x64>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d901      	bls.n	800c150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e01b      	b.n	800c188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	daf2      	bge.n	800c13e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	019b      	lsls	r3, r3, #6
 800c160:	f043 0220 	orr.w	r2, r3, #32
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4a08      	ldr	r2, [pc, #32]	; (800c194 <USB_FlushTxFifo+0x64>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d901      	bls.n	800c17a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e006      	b.n	800c188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 0320 	and.w	r3, r3, #32
 800c182:	2b20      	cmp	r3, #32
 800c184:	d0f0      	beq.n	800c168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	00030d40 	.word	0x00030d40

0800c198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4a11      	ldr	r2, [pc, #68]	; (800c1f4 <USB_FlushRxFifo+0x5c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d901      	bls.n	800c1b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e018      	b.n	800c1e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	daf2      	bge.n	800c1a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2210      	movs	r2, #16
 800c1c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4a08      	ldr	r2, [pc, #32]	; (800c1f4 <USB_FlushRxFifo+0x5c>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d901      	bls.n	800c1da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e006      	b.n	800c1e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d0f0      	beq.n	800c1c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	00030d40 	.word	0x00030d40

0800c1f8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c218:	4313      	orrs	r3, r2
 800c21a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b087      	sub	sp, #28
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f003 0306 	and.w	r3, r3, #6
 800c242:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b02      	cmp	r3, #2
 800c248:	d002      	beq.n	800c250 <USB_GetDevSpeed+0x26>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b06      	cmp	r3, #6
 800c24e:	d102      	bne.n	800c256 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c250:	2302      	movs	r3, #2
 800c252:	75fb      	strb	r3, [r7, #23]
 800c254:	e001      	b.n	800c25a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c256:	230f      	movs	r3, #15
 800c258:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	371c      	adds	r7, #28
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d13a      	bne.n	800c2fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c28a:	69da      	ldr	r2, [r3, #28]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	f003 030f 	and.w	r3, r3, #15
 800c294:	2101      	movs	r1, #1
 800c296:	fa01 f303 	lsl.w	r3, r1, r3
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	68f9      	ldr	r1, [r7, #12]
 800c29e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d155      	bne.n	800c368 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	791b      	ldrb	r3, [r3, #4]
 800c2d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	059b      	lsls	r3, r3, #22
 800c2de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	0151      	lsls	r1, r2, #5
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	440a      	add	r2, r1
 800c2ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	e036      	b.n	800c368 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c300:	69da      	ldr	r2, [r3, #28]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	f003 030f 	and.w	r3, r3, #15
 800c30a:	2101      	movs	r1, #1
 800c30c:	fa01 f303 	lsl.w	r3, r1, r3
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c318:	4313      	orrs	r3, r2
 800c31a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d11a      	bne.n	800c368 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	791b      	ldrb	r3, [r3, #4]
 800c34c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c34e:	430b      	orrs	r3, r1
 800c350:	4313      	orrs	r3, r2
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	0151      	lsls	r1, r2, #5
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	440a      	add	r2, r1
 800c35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c35e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c366:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
	...

0800c378 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d161      	bne.n	800c458 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3aa:	d11f      	bne.n	800c3ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	0151      	lsls	r1, r2, #5
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	440a      	add	r2, r1
 800c3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c3ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	0151      	lsls	r1, r2, #5
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c402:	b29b      	uxth	r3, r3
 800c404:	43db      	mvns	r3, r3
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c40c:	4013      	ands	r3, r2
 800c40e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c416:	69da      	ldr	r2, [r3, #28]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	f003 030f 	and.w	r3, r3, #15
 800c420:	2101      	movs	r1, #1
 800c422:	fa01 f303 	lsl.w	r3, r1, r3
 800c426:	b29b      	uxth	r3, r3
 800c428:	43db      	mvns	r3, r3
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c430:	4013      	ands	r3, r2
 800c432:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	0159      	lsls	r1, r3, #5
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	440b      	add	r3, r1
 800c44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44e:	4619      	mov	r1, r3
 800c450:	4b35      	ldr	r3, [pc, #212]	; (800c528 <USB_DeactivateEndpoint+0x1b0>)
 800c452:	4013      	ands	r3, r2
 800c454:	600b      	str	r3, [r1, #0]
 800c456:	e060      	b.n	800c51a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c46a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c46e:	d11f      	bne.n	800c4b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c48a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c48e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	f003 030f 	and.w	r3, r3, #15
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4c6:	041b      	lsls	r3, r3, #16
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	68f9      	ldr	r1, [r7, #12]
 800c4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4da:	69da      	ldr	r2, [r3, #28]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	f003 030f 	and.w	r3, r3, #15
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ea:	041b      	lsls	r3, r3, #16
 800c4ec:	43db      	mvns	r3, r3
 800c4ee:	68f9      	ldr	r1, [r7, #12]
 800c4f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	0159      	lsls	r1, r3, #5
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	440b      	add	r3, r1
 800c50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c512:	4619      	mov	r1, r3
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <USB_DeactivateEndpoint+0x1b4>)
 800c516:	4013      	ands	r3, r2
 800c518:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	ec337800 	.word	0xec337800
 800c52c:	eff37800 	.word	0xeff37800

0800c530 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	785b      	ldrb	r3, [r3, #1]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	f040 810a 	bne.w	800c762 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d132      	bne.n	800c5bc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	0151      	lsls	r1, r2, #5
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	440a      	add	r2, r1
 800c56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	0151      	lsls	r1, r2, #5
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	440a      	add	r2, r1
 800c590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b4:	0cdb      	lsrs	r3, r3, #19
 800c5b6:	04db      	lsls	r3, r3, #19
 800c5b8:	6113      	str	r3, [r2, #16]
 800c5ba:	e074      	b.n	800c6a6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d6:	0cdb      	lsrs	r3, r3, #19
 800c5d8:	04db      	lsls	r3, r3, #19
 800c5da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	0151      	lsls	r1, r2, #5
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	6999      	ldr	r1, [r3, #24]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	440b      	add	r3, r1
 800c618:	1e59      	subs	r1, r3, #1
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c622:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c624:	4b9e      	ldr	r3, [pc, #632]	; (800c8a0 <USB_EPStartXfer+0x370>)
 800c626:	400b      	ands	r3, r1
 800c628:	6939      	ldr	r1, [r7, #16]
 800c62a:	0148      	lsls	r0, r1, #5
 800c62c:	6979      	ldr	r1, [r7, #20]
 800c62e:	4401      	add	r1, r0
 800c630:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c634:	4313      	orrs	r3, r2
 800c636:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c644:	691a      	ldr	r2, [r3, #16]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c64e:	6939      	ldr	r1, [r7, #16]
 800c650:	0148      	lsls	r0, r1, #5
 800c652:	6979      	ldr	r1, [r7, #20]
 800c654:	4401      	add	r1, r0
 800c656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c65a:	4313      	orrs	r3, r2
 800c65c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	791b      	ldrb	r3, [r3, #4]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d11f      	bne.n	800c6a6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c680:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c684:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6a4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	0151      	lsls	r1, r2, #5
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	440a      	add	r2, r1
 800c6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6c4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	791b      	ldrb	r3, [r3, #4]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d015      	beq.n	800c6fa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 8106 	beq.w	800c8e4 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	f003 030f 	and.w	r3, r3, #15
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ee:	6979      	ldr	r1, [r7, #20]
 800c6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	634b      	str	r3, [r1, #52]	; 0x34
 800c6f8:	e0f4      	b.n	800c8e4 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c706:	2b00      	cmp	r3, #0
 800c708:	d110      	bne.n	800c72c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	0151      	lsls	r1, r2, #5
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	440a      	add	r2, r1
 800c720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c724:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	e00f      	b.n	800c74c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	4413      	add	r3, r2
 800c734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	0151      	lsls	r1, r2, #5
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	440a      	add	r2, r1
 800c742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c74a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	6919      	ldr	r1, [r3, #16]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fa94 	bl	800cc88 <USB_WritePacket>
 800c760:	e0c0      	b.n	800c8e4 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	0151      	lsls	r1, r2, #5
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	440a      	add	r2, r1
 800c778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c77c:	0cdb      	lsrs	r3, r3, #19
 800c77e:	04db      	lsls	r3, r3, #19
 800c780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	0151      	lsls	r1, r2, #5
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	440a      	add	r2, r1
 800c798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c79c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c7a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d123      	bne.n	800c7f6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ba:	691a      	ldr	r2, [r3, #16]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7c4:	6939      	ldr	r1, [r7, #16]
 800c7c6:	0148      	lsls	r0, r1, #5
 800c7c8:	6979      	ldr	r1, [r7, #20]
 800c7ca:	4401      	add	r1, r0
 800c7cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	0151      	lsls	r1, r2, #5
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	440a      	add	r2, r1
 800c7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7f2:	6113      	str	r3, [r2, #16]
 800c7f4:	e037      	b.n	800c866 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	699a      	ldr	r2, [r3, #24]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	1e5a      	subs	r2, r3, #1
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	fbb2 f3f3 	udiv	r3, r2, r3
 800c80a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	89fa      	ldrh	r2, [r7, #14]
 800c812:	fb03 f202 	mul.w	r2, r3, r2
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	4413      	add	r3, r2
 800c822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c826:	691a      	ldr	r2, [r3, #16]
 800c828:	89fb      	ldrh	r3, [r7, #14]
 800c82a:	04d9      	lsls	r1, r3, #19
 800c82c:	4b1c      	ldr	r3, [pc, #112]	; (800c8a0 <USB_EPStartXfer+0x370>)
 800c82e:	400b      	ands	r3, r1
 800c830:	6939      	ldr	r1, [r7, #16]
 800c832:	0148      	lsls	r0, r1, #5
 800c834:	6979      	ldr	r1, [r7, #20]
 800c836:	4401      	add	r1, r0
 800c838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c83c:	4313      	orrs	r3, r2
 800c83e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84c:	691a      	ldr	r2, [r3, #16]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c856:	6939      	ldr	r1, [r7, #16]
 800c858:	0148      	lsls	r0, r1, #5
 800c85a:	6979      	ldr	r1, [r7, #20]
 800c85c:	4401      	add	r1, r0
 800c85e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c862:	4313      	orrs	r3, r2
 800c864:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	791b      	ldrb	r3, [r3, #4]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d12a      	bne.n	800c8c4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d112      	bne.n	800c8a4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	697a      	ldr	r2, [r7, #20]
 800c892:	440a      	add	r2, r1
 800c894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	e011      	b.n	800c8c4 <USB_EPStartXfer+0x394>
 800c8a0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	015a      	lsls	r2, r3, #5
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	0151      	lsls	r1, r2, #5
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	440a      	add	r2, r1
 800c8ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	0151      	lsls	r1, r2, #5
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	440a      	add	r2, r1
 800c8da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop

0800c8f0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	f040 80ab 	bne.w	800ca64 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d132      	bne.n	800c97c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	0151      	lsls	r1, r2, #5
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	440a      	add	r2, r1
 800c970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c974:	0cdb      	lsrs	r3, r3, #19
 800c976:	04db      	lsls	r3, r3, #19
 800c978:	6113      	str	r3, [r2, #16]
 800c97a:	e04e      	b.n	800ca1a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	440a      	add	r2, r1
 800c992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c996:	0cdb      	lsrs	r3, r3, #19
 800c998:	04db      	lsls	r3, r3, #19
 800c99a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	0151      	lsls	r1, r2, #5
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c9ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c9be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	699a      	ldr	r2, [r3, #24]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d903      	bls.n	800c9d4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	68da      	ldr	r2, [r3, #12]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	0151      	lsls	r1, r2, #5
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	440a      	add	r2, r1
 800c9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca00:	691a      	ldr	r2, [r3, #16]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	0148      	lsls	r0, r1, #5
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	4401      	add	r1, r0
 800ca12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ca16:	4313      	orrs	r3, r2
 800ca18:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	0151      	lsls	r1, r2, #5
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	440a      	add	r2, r1
 800ca30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca38:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	699b      	ldr	r3, [r3, #24]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d071      	beq.n	800cb26 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f003 030f 	and.w	r3, r3, #15
 800ca52:	2101      	movs	r1, #1
 800ca54:	fa01 f303 	lsl.w	r3, r1, r3
 800ca58:	68f9      	ldr	r1, [r7, #12]
 800ca5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	634b      	str	r3, [r1, #52]	; 0x34
 800ca62:	e060      	b.n	800cb26 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	0151      	lsls	r1, r2, #5
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	440a      	add	r2, r1
 800ca7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca7e:	0cdb      	lsrs	r3, r3, #19
 800ca80:	04db      	lsls	r3, r3, #19
 800ca82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	0151      	lsls	r1, r2, #5
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	440a      	add	r2, r1
 800ca9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800caa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800caa6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	015a      	lsls	r2, r3, #5
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	4413      	add	r3, r2
 800cac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	0151      	lsls	r1, r2, #5
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	440a      	add	r2, r1
 800cad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caec:	691a      	ldr	r2, [r3, #16]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	0148      	lsls	r0, r1, #5
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	4401      	add	r1, r0
 800cafe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb02:	4313      	orrs	r3, r2
 800cb04:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	015a      	lsls	r2, r3, #5
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	0151      	lsls	r1, r2, #5
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	440a      	add	r2, r1
 800cb1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d14a      	bne.n	800cbe8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb6a:	f040 8086 	bne.w	800cc7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	7812      	ldrb	r2, [r2, #0]
 800cb82:	0151      	lsls	r1, r2, #5
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	440a      	add	r2, r1
 800cb88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	015a      	lsls	r2, r3, #5
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	7812      	ldrb	r2, [r2, #0]
 800cba6:	0151      	lsls	r1, r2, #5
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	440a      	add	r2, r1
 800cbac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d902      	bls.n	800cbcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbca:	e056      	b.n	800cc7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	015a      	lsls	r2, r3, #5
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbe4:	d0e7      	beq.n	800cbb6 <USB_EPStopXfer+0x82>
 800cbe6:	e048      	b.n	800cc7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	015a      	lsls	r2, r3, #5
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc00:	d13b      	bne.n	800cc7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	0151      	lsls	r1, r2, #5
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	440a      	add	r2, r1
 800cc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	7812      	ldrb	r2, [r2, #0]
 800cc3a:	0151      	lsls	r1, r2, #5
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	440a      	add	r2, r1
 800cc40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d902      	bls.n	800cc60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc5e:	e00c      	b.n	800cc7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	015a      	lsls	r2, r3, #5
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	4413      	add	r3, r2
 800cc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc78:	d0e7      	beq.n	800cc4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	371c      	adds	r7, #28
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b089      	sub	sp, #36	; 0x24
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	4611      	mov	r1, r2
 800cc94:	461a      	mov	r2, r3
 800cc96:	460b      	mov	r3, r1
 800cc98:	71fb      	strb	r3, [r7, #7]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cca6:	88bb      	ldrh	r3, [r7, #4]
 800cca8:	3303      	adds	r3, #3
 800ccaa:	089b      	lsrs	r3, r3, #2
 800ccac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ccae:	2300      	movs	r3, #0
 800ccb0:	61bb      	str	r3, [r7, #24]
 800ccb2:	e018      	b.n	800cce6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	031a      	lsls	r2, r3, #12
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	3301      	adds	r3, #1
 800cccc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	3301      	adds	r3, #1
 800cce4:	61bb      	str	r3, [r7, #24]
 800cce6:	69ba      	ldr	r2, [r7, #24]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d3e2      	bcc.n	800ccb4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3724      	adds	r7, #36	; 0x24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b08b      	sub	sp, #44	; 0x2c
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cd12:	88fb      	ldrh	r3, [r7, #6]
 800cd14:	089b      	lsrs	r3, r3, #2
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd1a:	88fb      	ldrh	r3, [r7, #6]
 800cd1c:	f003 0303 	and.w	r3, r3, #3
 800cd20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd22:	2300      	movs	r3, #0
 800cd24:	623b      	str	r3, [r7, #32]
 800cd26:	e014      	b.n	800cd52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	3301      	adds	r3, #1
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	3301      	adds	r3, #1
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	3301      	adds	r3, #1
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	623b      	str	r3, [r7, #32]
 800cd52:	6a3a      	ldr	r2, [r7, #32]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d3e6      	bcc.n	800cd28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd5a:	8bfb      	ldrh	r3, [r7, #30]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01e      	beq.n	800cd9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd60:	2300      	movs	r3, #0
 800cd62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f107 0310 	add.w	r3, r7, #16
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	701a      	strb	r2, [r3, #0]
      i++;
 800cd86:	6a3b      	ldr	r3, [r7, #32]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	3301      	adds	r3, #1
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd92:	8bfb      	ldrh	r3, [r7, #30]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd98:	8bfb      	ldrh	r3, [r7, #30]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1ea      	bne.n	800cd74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	372c      	adds	r7, #44	; 0x2c
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d12c      	bne.n	800ce22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	db12      	blt.n	800ce00 <USB_EPSetStall+0x54>
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00f      	beq.n	800ce00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	0151      	lsls	r1, r2, #5
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	440a      	add	r2, r1
 800cdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	0151      	lsls	r1, r2, #5
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	440a      	add	r2, r1
 800ce16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	e02b      	b.n	800ce7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	015a      	lsls	r2, r3, #5
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	4413      	add	r3, r2
 800ce2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	db12      	blt.n	800ce5a <USB_EPSetStall+0xae>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00f      	beq.n	800ce5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	0151      	lsls	r1, r2, #5
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	440a      	add	r2, r1
 800ce50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	0151      	lsls	r1, r2, #5
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	440a      	add	r2, r1
 800ce70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d128      	bne.n	800cef6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	0151      	lsls	r1, r2, #5
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	440a      	add	r2, r1
 800ceba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cec2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	791b      	ldrb	r3, [r3, #4]
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d003      	beq.n	800ced4 <USB_EPClearStall+0x4c>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	791b      	ldrb	r3, [r3, #4]
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d138      	bne.n	800cf46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	0151      	lsls	r1, r2, #5
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	440a      	add	r2, r1
 800ceea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	e027      	b.n	800cf46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	0151      	lsls	r1, r2, #5
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	440a      	add	r2, r1
 800cf0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	791b      	ldrb	r3, [r3, #4]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d003      	beq.n	800cf26 <USB_EPClearStall+0x9e>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	791b      	ldrb	r3, [r3, #4]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d10f      	bne.n	800cf46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	015a      	lsls	r2, r3, #5
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	0151      	lsls	r1, r2, #5
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	440a      	add	r2, r1
 800cf3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf88:	68f9      	ldr	r1, [r7, #12]
 800cf8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfce:	f023 0302 	bic.w	r3, r3, #2
 800cfd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cffc:	f023 0303 	bic.w	r3, r3, #3
 800d000:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d010:	f043 0302 	orr.w	r3, r3, #2
 800d014:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4013      	ands	r3, r2
 800d03a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d03c:	68fb      	ldr	r3, [r7, #12]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b085      	sub	sp, #20
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	4013      	ands	r3, r2
 800d06c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	0c1b      	lsrs	r3, r3, #16
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d07e:	b480      	push	{r7}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d090:	699b      	ldr	r3, [r3, #24]
 800d092:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	4013      	ands	r3, r2
 800d0a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	b29b      	uxth	r3, r3
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b085      	sub	sp, #20
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0c2:	78fb      	ldrb	r3, [r7, #3]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	4013      	ands	r3, r2
 800d0de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0e0:	68bb      	ldr	r3, [r7, #8]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b087      	sub	sp, #28
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d110:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d112:	78fb      	ldrb	r3, [r7, #3]
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	fa22 f303 	lsr.w	r3, r2, r3
 800d11e:	01db      	lsls	r3, r3, #7
 800d120:	b2db      	uxtb	r3, r3
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	4313      	orrs	r3, r2
 800d126:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d128:	78fb      	ldrb	r3, [r7, #3]
 800d12a:	015a      	lsls	r2, r3, #5
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	4413      	add	r3, r2
 800d130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	4013      	ands	r3, r2
 800d13a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d13c:	68bb      	ldr	r3, [r7, #8]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	371c      	adds	r7, #28
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	f003 0301 	and.w	r3, r3, #1
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d180:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d184:	f023 0307 	bic.w	r3, r3, #7
 800d188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d19c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	333c      	adds	r3, #60	; 0x3c
 800d1be:	3304      	adds	r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	4a1c      	ldr	r2, [pc, #112]	; (800d238 <USB_EP0_OutStart+0x8c>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d90a      	bls.n	800d1e2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1dc:	d101      	bne.n	800d1e2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e024      	b.n	800d22c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d210:	f043 0318 	orr.w	r3, r3, #24
 800d214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d224:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d228:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	4f54300a 	.word	0x4f54300a

0800d23c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	3301      	adds	r3, #1
 800d24c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4a13      	ldr	r2, [pc, #76]	; (800d2a0 <USB_CoreReset+0x64>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d901      	bls.n	800d25a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e01b      	b.n	800d292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	daf2      	bge.n	800d248 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	f043 0201 	orr.w	r2, r3, #1
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3301      	adds	r3, #1
 800d276:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <USB_CoreReset+0x64>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d901      	bls.n	800d284 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d280:	2303      	movs	r3, #3
 800d282:	e006      	b.n	800d292 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	f003 0301 	and.w	r3, r3, #1
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d0f0      	beq.n	800d272 <USB_CoreReset+0x36>

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	00030d40 	.word	0x00030d40

0800d2a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2a8:	4904      	ldr	r1, [pc, #16]	; (800d2bc <MX_FATFS_Init+0x18>)
 800d2aa:	4805      	ldr	r0, [pc, #20]	; (800d2c0 <MX_FATFS_Init+0x1c>)
 800d2ac:	f001 fe74 	bl	800ef98 <FATFS_LinkDriver>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4b03      	ldr	r3, [pc, #12]	; (800d2c4 <MX_FATFS_Init+0x20>)
 800d2b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d2b8:	bf00      	nop
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000d88 	.word	0x20000d88
 800d2c0:	08012a04 	.word	0x08012a04
 800d2c4:	20000d84 	.word	0x20000d84

0800d2c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d2d2:	f000 f879 	bl	800d3c8 <BSP_SD_IsDetected>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d001      	beq.n	800d2e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d2dc:	2302      	movs	r3, #2
 800d2de:	e012      	b.n	800d306 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d2e0:	480b      	ldr	r0, [pc, #44]	; (800d310 <BSP_SD_Init+0x48>)
 800d2e2:	f7f9 fe79 	bl	8006fd8 <HAL_SD_Init>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d2f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d2f4:	4806      	ldr	r0, [pc, #24]	; (800d310 <BSP_SD_Init+0x48>)
 800d2f6:	f7fa fd45 	bl	8007d84 <HAL_SD_ConfigWideBusOperation>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d001      	beq.n	800d304 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d304:	79fb      	ldrb	r3, [r7, #7]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20000420 	.word	0x20000420

0800d314 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af02      	add	r7, sp, #8
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	68f9      	ldr	r1, [r7, #12]
 800d330:	4806      	ldr	r0, [pc, #24]	; (800d34c <BSP_SD_ReadBlocks+0x38>)
 800d332:	f7f9 ff79 	bl	8007228 <HAL_SD_ReadBlocks>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d340:	7dfb      	ldrb	r3, [r7, #23]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20000420 	.word	0x20000420

0800d350 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af02      	add	r7, sp, #8
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	68f9      	ldr	r1, [r7, #12]
 800d36c:	4806      	ldr	r0, [pc, #24]	; (800d388 <BSP_SD_WriteBlocks+0x38>)
 800d36e:	f7fa f8ed 	bl	800754c <HAL_SD_WriteBlocks>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000420 	.word	0x20000420

0800d38c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d390:	4805      	ldr	r0, [pc, #20]	; (800d3a8 <BSP_SD_GetCardState+0x1c>)
 800d392:	f7fa fe0b 	bl	8007fac <HAL_SD_GetCardState>
 800d396:	4603      	mov	r3, r0
 800d398:	2b04      	cmp	r3, #4
 800d39a:	bf14      	ite	ne
 800d39c:	2301      	movne	r3, #1
 800d39e:	2300      	moveq	r3, #0
 800d3a0:	b2db      	uxtb	r3, r3
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000420 	.word	0x20000420

0800d3ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	4803      	ldr	r0, [pc, #12]	; (800d3c4 <BSP_SD_GetCardInfo+0x18>)
 800d3b8:	f7fa fcb8 	bl	8007d2c <HAL_SD_GetCardInfo>
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20000420 	.word	0x20000420

0800d3c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d3d2:	f000 f80b 	bl	800d3ec <BSP_PlatformIsDetected>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	b2db      	uxtb	r3, r3
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d3f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d3fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d3fe:	f7f5 fd7d 	bl	8002efc <HAL_GPIO_ReadPin>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800d408:	2300      	movs	r3, #0
 800d40a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d40c:	79fb      	ldrb	r3, [r7, #7]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	4603      	mov	r3, r0
 800d420:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d422:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <SD_CheckStatus+0x38>)
 800d424:	2201      	movs	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d428:	f7ff ffb0 	bl	800d38c <BSP_SD_GetCardState>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d107      	bne.n	800d442 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d432:	4b07      	ldr	r3, [pc, #28]	; (800d450 <SD_CheckStatus+0x38>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f023 0301 	bic.w	r3, r3, #1
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	4b04      	ldr	r3, [pc, #16]	; (800d450 <SD_CheckStatus+0x38>)
 800d440:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d442:	4b03      	ldr	r3, [pc, #12]	; (800d450 <SD_CheckStatus+0x38>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	b2db      	uxtb	r3, r3
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20000011 	.word	0x20000011

0800d454 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d45e:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <SD_initialize+0x38>)
 800d460:	2201      	movs	r2, #1
 800d462:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d464:	f7ff ff30 	bl	800d2c8 <BSP_SD_Init>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d107      	bne.n	800d47e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff ffd1 	bl	800d418 <SD_CheckStatus>
 800d476:	4603      	mov	r3, r0
 800d478:	461a      	mov	r2, r3
 800d47a:	4b04      	ldr	r3, [pc, #16]	; (800d48c <SD_initialize+0x38>)
 800d47c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d47e:	4b03      	ldr	r3, [pc, #12]	; (800d48c <SD_initialize+0x38>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b2db      	uxtb	r3, r3
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20000011 	.word	0x20000011

0800d490 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff ffbb 	bl	800d418 <SD_CheckStatus>
 800d4a2:	4603      	mov	r3, r0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	68b8      	ldr	r0, [r7, #8]
 800d4ca:	f7ff ff23 	bl	800d314 <BSP_SD_ReadBlocks>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d107      	bne.n	800d4e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d4d4:	bf00      	nop
 800d4d6:	f7ff ff59 	bl	800d38c <BSP_SD_GetCardState>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1fa      	bne.n	800d4d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3718      	adds	r7, #24
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b086      	sub	sp, #24
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	68b8      	ldr	r0, [r7, #8]
 800d50c:	f7ff ff20 	bl	800d350 <BSP_SD_WriteBlocks>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d516:	bf00      	nop
 800d518:	f7ff ff38 	bl	800d38c <BSP_SD_GetCardState>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1fa      	bne.n	800d518 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d526:	7dfb      	ldrb	r3, [r7, #23]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08c      	sub	sp, #48	; 0x30
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	603a      	str	r2, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
 800d53c:	460b      	mov	r3, r1
 800d53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d546:	4b25      	ldr	r3, [pc, #148]	; (800d5dc <SD_ioctl+0xac>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <SD_ioctl+0x28>
 800d554:	2303      	movs	r3, #3
 800d556:	e03c      	b.n	800d5d2 <SD_ioctl+0xa2>

  switch (cmd)
 800d558:	79bb      	ldrb	r3, [r7, #6]
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d834      	bhi.n	800d5c8 <SD_ioctl+0x98>
 800d55e:	a201      	add	r2, pc, #4	; (adr r2, 800d564 <SD_ioctl+0x34>)
 800d560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d564:	0800d575 	.word	0x0800d575
 800d568:	0800d57d 	.word	0x0800d57d
 800d56c:	0800d595 	.word	0x0800d595
 800d570:	0800d5af 	.word	0x0800d5af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d57a:	e028      	b.n	800d5ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d57c:	f107 0308 	add.w	r3, r7, #8
 800d580:	4618      	mov	r0, r3
 800d582:	f7ff ff13 	bl	800d3ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d586:	6a3a      	ldr	r2, [r7, #32]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d592:	e01c      	b.n	800d5ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff ff07 	bl	800d3ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	b29a      	uxth	r2, r3
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5ac:	e00f      	b.n	800d5ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5ae:	f107 0308 	add.w	r3, r7, #8
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7ff fefa 	bl	800d3ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	0a5a      	lsrs	r2, r3, #9
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5c6:	e002      	b.n	800d5ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d5c8:	2304      	movs	r3, #4
 800d5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3730      	adds	r7, #48	; 0x30
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20000011 	.word	0x20000011

0800d5e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d5ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d5f0:	f002 faae 	bl	800fb50 <USBD_static_malloc>
 800d5f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d105      	bne.n	800d608 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d604:	2302      	movs	r3, #2
 800d606:	e066      	b.n	800d6d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	7c1b      	ldrb	r3, [r3, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d119      	bne.n	800d64c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d61c:	2202      	movs	r2, #2
 800d61e:	2181      	movs	r1, #129	; 0x81
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f002 f8cf 	bl	800f7c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d62c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d630:	2202      	movs	r2, #2
 800d632:	2101      	movs	r1, #1
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f002 f8c5 	bl	800f7c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2210      	movs	r2, #16
 800d646:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d64a:	e016      	b.n	800d67a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d64c:	2340      	movs	r3, #64	; 0x40
 800d64e:	2202      	movs	r2, #2
 800d650:	2181      	movs	r1, #129	; 0x81
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f002 f8b6 	bl	800f7c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d65e:	2340      	movs	r3, #64	; 0x40
 800d660:	2202      	movs	r2, #2
 800d662:	2101      	movs	r1, #1
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f002 f8ad 	bl	800f7c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2210      	movs	r2, #16
 800d676:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d67a:	2308      	movs	r3, #8
 800d67c:	2203      	movs	r2, #3
 800d67e:	2182      	movs	r1, #130	; 0x82
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f002 f89f 	bl	800f7c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7c1b      	ldrb	r3, [r3, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d109      	bne.n	800d6c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ba:	2101      	movs	r1, #1
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f002 f9fb 	bl	800fab8 <USBD_LL_PrepareReceive>
 800d6c2:	e007      	b.n	800d6d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f002 f9f2 	bl	800fab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b082      	sub	sp, #8
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d6ea:	2181      	movs	r1, #129	; 0x81
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f002 f8a7 	bl	800f840 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f002 f8a0 	bl	800f840 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d708:	2182      	movs	r1, #130	; 0x82
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f002 f898 	bl	800f840 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00e      	beq.n	800d748 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d73a:	4618      	mov	r0, r3
 800d73c:	f002 fa16 	bl	800fb6c <USBD_static_free>
    pdev->pClassData = NULL;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d764:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d766:	2300      	movs	r3, #0
 800d768:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d76e:	2300      	movs	r3, #0
 800d770:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	e0af      	b.n	800d8dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d784:	2b00      	cmp	r3, #0
 800d786:	d03f      	beq.n	800d808 <USBD_CDC_Setup+0xb4>
 800d788:	2b20      	cmp	r3, #32
 800d78a:	f040 809f 	bne.w	800d8cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	88db      	ldrh	r3, [r3, #6]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d02e      	beq.n	800d7f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	da16      	bge.n	800d7ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d7ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	88d2      	ldrh	r2, [r2, #6]
 800d7b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	88db      	ldrh	r3, [r3, #6]
 800d7b8:	2b07      	cmp	r3, #7
 800d7ba:	bf28      	it	cs
 800d7bc:	2307      	movcs	r3, #7
 800d7be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	89fa      	ldrh	r2, [r7, #14]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f001 fb19 	bl	800edfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d7cc:	e085      	b.n	800d8da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	785a      	ldrb	r2, [r3, #1]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	88db      	ldrh	r3, [r3, #6]
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d7e4:	6939      	ldr	r1, [r7, #16]
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	88db      	ldrh	r3, [r3, #6]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f001 fb32 	bl	800ee56 <USBD_CtlPrepareRx>
      break;
 800d7f2:	e072      	b.n	800d8da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	7850      	ldrb	r0, [r2, #1]
 800d800:	2200      	movs	r2, #0
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	4798      	blx	r3
      break;
 800d806:	e068      	b.n	800d8da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	2b0b      	cmp	r3, #11
 800d80e:	d852      	bhi.n	800d8b6 <USBD_CDC_Setup+0x162>
 800d810:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <USBD_CDC_Setup+0xc4>)
 800d812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d816:	bf00      	nop
 800d818:	0800d849 	.word	0x0800d849
 800d81c:	0800d8c5 	.word	0x0800d8c5
 800d820:	0800d8b7 	.word	0x0800d8b7
 800d824:	0800d8b7 	.word	0x0800d8b7
 800d828:	0800d8b7 	.word	0x0800d8b7
 800d82c:	0800d8b7 	.word	0x0800d8b7
 800d830:	0800d8b7 	.word	0x0800d8b7
 800d834:	0800d8b7 	.word	0x0800d8b7
 800d838:	0800d8b7 	.word	0x0800d8b7
 800d83c:	0800d8b7 	.word	0x0800d8b7
 800d840:	0800d873 	.word	0x0800d873
 800d844:	0800d89d 	.word	0x0800d89d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b03      	cmp	r3, #3
 800d852:	d107      	bne.n	800d864 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d854:	f107 030a 	add.w	r3, r7, #10
 800d858:	2202      	movs	r2, #2
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f001 face 	bl	800edfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d862:	e032      	b.n	800d8ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f001 fa58 	bl	800ed1c <USBD_CtlError>
            ret = USBD_FAIL;
 800d86c:	2303      	movs	r3, #3
 800d86e:	75fb      	strb	r3, [r7, #23]
          break;
 800d870:	e02b      	b.n	800d8ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d107      	bne.n	800d88e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d87e:	f107 030d 	add.w	r3, r7, #13
 800d882:	2201      	movs	r2, #1
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f001 fab9 	bl	800edfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d88c:	e01d      	b.n	800d8ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f001 fa43 	bl	800ed1c <USBD_CtlError>
            ret = USBD_FAIL;
 800d896:	2303      	movs	r3, #3
 800d898:	75fb      	strb	r3, [r7, #23]
          break;
 800d89a:	e016      	b.n	800d8ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d00f      	beq.n	800d8c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 fa36 	bl	800ed1c <USBD_CtlError>
            ret = USBD_FAIL;
 800d8b0:	2303      	movs	r3, #3
 800d8b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d8b4:	e008      	b.n	800d8c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 fa2f 	bl	800ed1c <USBD_CtlError>
          ret = USBD_FAIL;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d8c2:	e002      	b.n	800d8ca <USBD_CDC_Setup+0x176>
          break;
 800d8c4:	bf00      	nop
 800d8c6:	e008      	b.n	800d8da <USBD_CDC_Setup+0x186>
          break;
 800d8c8:	bf00      	nop
      }
      break;
 800d8ca:	e006      	b.n	800d8da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f001 fa24 	bl	800ed1c <USBD_CtlError>
      ret = USBD_FAIL;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d8d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d8f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d902:	2303      	movs	r3, #3
 800d904:	e04f      	b.n	800d9a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d90c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d90e:	78fa      	ldrb	r2, [r7, #3]
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	440b      	add	r3, r1
 800d91c:	3318      	adds	r3, #24
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d029      	beq.n	800d978 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d924:	78fa      	ldrb	r2, [r7, #3]
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	440b      	add	r3, r1
 800d932:	3318      	adds	r3, #24
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	78f9      	ldrb	r1, [r7, #3]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	460b      	mov	r3, r1
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	440b      	add	r3, r1
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4403      	add	r3, r0
 800d944:	3348      	adds	r3, #72	; 0x48
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	fbb2 f1f3 	udiv	r1, r2, r3
 800d94c:	fb01 f303 	mul.w	r3, r1, r3
 800d950:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d952:	2b00      	cmp	r3, #0
 800d954:	d110      	bne.n	800d978 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d956:	78fa      	ldrb	r2, [r7, #3]
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	440b      	add	r3, r1
 800d964:	3318      	adds	r3, #24
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d96a:	78f9      	ldrb	r1, [r7, #3]
 800d96c:	2300      	movs	r3, #0
 800d96e:	2200      	movs	r2, #0
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f002 f869 	bl	800fa48 <USBD_LL_Transmit>
 800d976:	e015      	b.n	800d9a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d9a0:	78fa      	ldrb	r2, [r7, #3]
 800d9a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e015      	b.n	800d9fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d9d0:	78fb      	ldrb	r3, [r7, #3]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f002 f8a7 	bl	800fb28 <USBD_LL_GetRxDataSize>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800da1a:	2303      	movs	r3, #3
 800da1c:	e01b      	b.n	800da56 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d015      	beq.n	800da54 <USBD_CDC_EP0_RxReady+0x50>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800da2e:	2bff      	cmp	r3, #255	; 0xff
 800da30:	d010      	beq.n	800da54 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800da40:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800da48:	b292      	uxth	r2, r2
 800da4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	22ff      	movs	r2, #255	; 0xff
 800da50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2243      	movs	r2, #67	; 0x43
 800da6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800da6e:	4b03      	ldr	r3, [pc, #12]	; (800da7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	2000009c 	.word	0x2000009c

0800da80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2243      	movs	r2, #67	; 0x43
 800da8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800da8e:	4b03      	ldr	r3, [pc, #12]	; (800da9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	20000058 	.word	0x20000058

0800daa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2243      	movs	r2, #67	; 0x43
 800daac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800daae:	4b03      	ldr	r3, [pc, #12]	; (800dabc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	200000e0 	.word	0x200000e0

0800dac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	220a      	movs	r2, #10
 800dacc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dace:	4b03      	ldr	r3, [pc, #12]	; (800dadc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	20000014 	.word	0x20000014

0800dae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e004      	b.n	800dafe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800db0a:	b480      	push	{r7}
 800db0c:	b087      	sub	sp, #28
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db1c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800db24:	2303      	movs	r3, #3
 800db26:	e008      	b.n	800db3a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	371c      	adds	r7, #28
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800db46:	b480      	push	{r7}
 800db48:	b085      	sub	sp, #20
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800db5e:	2303      	movs	r3, #3
 800db60:	e004      	b.n	800db6c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800db88:	2301      	movs	r3, #1
 800db8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db96:	2303      	movs	r3, #3
 800db98:	e01a      	b.n	800dbd0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d114      	bne.n	800dbce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dbc2:	2181      	movs	r1, #129	; 0x81
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f001 ff3f 	bl	800fa48 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dbce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbe6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	e016      	b.n	800dc24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	7c1b      	ldrb	r3, [r3, #16]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc08:	2101      	movs	r1, #1
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f001 ff54 	bl	800fab8 <USBD_LL_PrepareReceive>
 800dc10:	e007      	b.n	800dc22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc18:	2340      	movs	r3, #64	; 0x40
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f001 ff4b 	bl	800fab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	4613      	mov	r3, r2
 800dc38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e01f      	b.n	800dc84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	79fa      	ldrb	r2, [r7, #7]
 800dc76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f001 fd27 	bl	800f6cc <USBD_LL_Init>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc96:	2300      	movs	r3, #0
 800dc98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e016      	b.n	800dcd2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00b      	beq.n	800dcd0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc0:	f107 020e 	add.w	r2, r7, #14
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	4798      	blx	r3
 800dcc8:	4602      	mov	r2, r0
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b082      	sub	sp, #8
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 fd3c 	bl	800f760 <USBD_LL_Start>
 800dce8:	4603      	mov	r3, r0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dd14:	2303      	movs	r3, #3
 800dd16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d009      	beq.n	800dd36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	78fa      	ldrb	r2, [r7, #3]
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	4798      	blx	r3
 800dd32:	4603      	mov	r3, r0
 800dd34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d007      	beq.n	800dd66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	78fa      	ldrb	r2, [r7, #3]
 800dd60:	4611      	mov	r1, r2
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	4798      	blx	r3
  }

  return USBD_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd80:	6839      	ldr	r1, [r7, #0]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 ff90 	bl	800eca8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dd96:	461a      	mov	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dda4:	f003 031f 	and.w	r3, r3, #31
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d01a      	beq.n	800dde2 <USBD_LL_SetupStage+0x72>
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d822      	bhi.n	800ddf6 <USBD_LL_SetupStage+0x86>
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <USBD_LL_SetupStage+0x4a>
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d00a      	beq.n	800ddce <USBD_LL_SetupStage+0x5e>
 800ddb8:	e01d      	b.n	800ddf6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fa62 	bl	800e28c <USBD_StdDevReq>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]
      break;
 800ddcc:	e020      	b.n	800de10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fac6 	bl	800e368 <USBD_StdItfReq>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]
      break;
 800dde0:	e016      	b.n	800de10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fb05 	bl	800e3fa <USBD_StdEPReq>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ddf4:	e00c      	b.n	800de10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ddfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de00:	b2db      	uxtb	r3, r3
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f001 fd51 	bl	800f8ac <USBD_LL_StallEP>
 800de0a:	4603      	mov	r3, r0
 800de0c:	73fb      	strb	r3, [r7, #15]
      break;
 800de0e:	bf00      	nop
  }

  return ret;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b086      	sub	sp, #24
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	460b      	mov	r3, r1
 800de24:	607a      	str	r2, [r7, #4]
 800de26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800de28:	7afb      	ldrb	r3, [r7, #11]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d138      	bne.n	800dea0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800de34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d14a      	bne.n	800ded6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	689a      	ldr	r2, [r3, #8]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d913      	bls.n	800de74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	1ad2      	subs	r2, r2, r3
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	68da      	ldr	r2, [r3, #12]
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	4293      	cmp	r3, r2
 800de64:	bf28      	it	cs
 800de66:	4613      	movcs	r3, r2
 800de68:	461a      	mov	r2, r3
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f001 f80f 	bl	800ee90 <USBD_CtlContinueRx>
 800de72:	e030      	b.n	800ded6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d10b      	bne.n	800de98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d005      	beq.n	800de98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f001 f80a 	bl	800eeb2 <USBD_CtlSendStatus>
 800de9e:	e01a      	b.n	800ded6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b03      	cmp	r3, #3
 800deaa:	d114      	bne.n	800ded6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00e      	beq.n	800ded6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	7afa      	ldrb	r2, [r7, #11]
 800dec2:	4611      	mov	r1, r2
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	4798      	blx	r3
 800dec8:	4603      	mov	r3, r0
 800deca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	e000      	b.n	800ded8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	460b      	mov	r3, r1
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d16b      	bne.n	800dfcc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3314      	adds	r3, #20
 800def8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df00:	2b02      	cmp	r3, #2
 800df02:	d156      	bne.n	800dfb2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	689a      	ldr	r2, [r3, #8]
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d914      	bls.n	800df3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	1ad2      	subs	r2, r2, r3
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	461a      	mov	r2, r3
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 ff84 	bl	800ee34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df2c:	2300      	movs	r3, #0
 800df2e:	2200      	movs	r2, #0
 800df30:	2100      	movs	r1, #0
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f001 fdc0 	bl	800fab8 <USBD_LL_PrepareReceive>
 800df38:	e03b      	b.n	800dfb2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	68da      	ldr	r2, [r3, #12]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	429a      	cmp	r2, r3
 800df44:	d11c      	bne.n	800df80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800df4e:	429a      	cmp	r2, r3
 800df50:	d316      	bcc.n	800df80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d20f      	bcs.n	800df80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800df60:	2200      	movs	r2, #0
 800df62:	2100      	movs	r1, #0
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 ff65 	bl	800ee34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df72:	2300      	movs	r3, #0
 800df74:	2200      	movs	r2, #0
 800df76:	2100      	movs	r1, #0
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f001 fd9d 	bl	800fab8 <USBD_LL_PrepareReceive>
 800df7e:	e018      	b.n	800dfb2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d10b      	bne.n	800dfa4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfa4:	2180      	movs	r1, #128	; 0x80
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f001 fc80 	bl	800f8ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 ff93 	bl	800eed8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d122      	bne.n	800e002 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f7ff fe98 	bl	800dcf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dfca:	e01a      	b.n	800e002 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	2b03      	cmp	r3, #3
 800dfd6:	d114      	bne.n	800e002 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00e      	beq.n	800e002 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	7afa      	ldrb	r2, [r7, #11]
 800dfee:	4611      	mov	r1, r2
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	4798      	blx	r3
 800dff4:	4603      	mov	r3, r0
 800dff6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	e000      	b.n	800e004 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e02f      	b.n	800e0a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00f      	beq.n	800e06a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	6852      	ldr	r2, [r2, #4]
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	4611      	mov	r1, r2
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e06a:	2340      	movs	r3, #64	; 0x40
 800e06c:	2200      	movs	r2, #0
 800e06e:	2100      	movs	r1, #0
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f001 fba7 	bl	800f7c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2201      	movs	r2, #1
 800e07a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2240      	movs	r2, #64	; 0x40
 800e082:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e086:	2340      	movs	r3, #64	; 0x40
 800e088:	2200      	movs	r2, #0
 800e08a:	2180      	movs	r1, #128	; 0x80
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 fb99 	bl	800f7c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2240      	movs	r2, #64	; 0x40
 800e09c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	78fa      	ldrb	r2, [r7, #3]
 800e0b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2204      	movs	r2, #4
 800e0e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b04      	cmp	r3, #4
 800e106:	d106      	bne.n	800e116 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e136:	2303      	movs	r3, #3
 800e138:	e012      	b.n	800e160 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e140:	b2db      	uxtb	r3, r3
 800e142:	2b03      	cmp	r3, #3
 800e144:	d10b      	bne.n	800e15e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d005      	beq.n	800e15e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	460b      	mov	r3, r1
 800e172:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e17e:	2303      	movs	r3, #3
 800e180:	e014      	b.n	800e1ac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d10d      	bne.n	800e1aa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e1ca:	2303      	movs	r3, #3
 800e1cc:	e014      	b.n	800e1f8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b03      	cmp	r3, #3
 800e1d8:	d10d      	bne.n	800e1f6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d007      	beq.n	800e1f6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ee:	78fa      	ldrb	r2, [r7, #3]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d009      	beq.n	800e244 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	6852      	ldr	r2, [r2, #4]
 800e23c:	b2d2      	uxtb	r2, r2
 800e23e:	4611      	mov	r1, r2
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	4798      	blx	r3
  }

  return USBD_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e24e:	b480      	push	{r7}
 800e250:	b087      	sub	sp, #28
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	3301      	adds	r3, #1
 800e264:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e26c:	8a3b      	ldrh	r3, [r7, #16]
 800e26e:	021b      	lsls	r3, r3, #8
 800e270:	b21a      	sxth	r2, r3
 800e272:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e276:	4313      	orrs	r3, r2
 800e278:	b21b      	sxth	r3, r3
 800e27a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e27c:	89fb      	ldrh	r3, [r7, #14]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	371c      	adds	r7, #28
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
	...

0800e28c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d005      	beq.n	800e2b2 <USBD_StdDevReq+0x26>
 800e2a6:	2b40      	cmp	r3, #64	; 0x40
 800e2a8:	d853      	bhi.n	800e352 <USBD_StdDevReq+0xc6>
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <USBD_StdDevReq+0x3a>
 800e2ae:	2b20      	cmp	r3, #32
 800e2b0:	d14f      	bne.n	800e352 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	4798      	blx	r3
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e2c4:	e04a      	b.n	800e35c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	785b      	ldrb	r3, [r3, #1]
 800e2ca:	2b09      	cmp	r3, #9
 800e2cc:	d83b      	bhi.n	800e346 <USBD_StdDevReq+0xba>
 800e2ce:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <USBD_StdDevReq+0x48>)
 800e2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d4:	0800e329 	.word	0x0800e329
 800e2d8:	0800e33d 	.word	0x0800e33d
 800e2dc:	0800e347 	.word	0x0800e347
 800e2e0:	0800e333 	.word	0x0800e333
 800e2e4:	0800e347 	.word	0x0800e347
 800e2e8:	0800e307 	.word	0x0800e307
 800e2ec:	0800e2fd 	.word	0x0800e2fd
 800e2f0:	0800e347 	.word	0x0800e347
 800e2f4:	0800e31f 	.word	0x0800e31f
 800e2f8:	0800e311 	.word	0x0800e311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f9de 	bl	800e6c0 <USBD_GetDescriptor>
          break;
 800e304:	e024      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fb43 	bl	800e994 <USBD_SetAddress>
          break;
 800e30e:	e01f      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fb82 	bl	800ea1c <USBD_SetConfig>
 800e318:	4603      	mov	r3, r0
 800e31a:	73fb      	strb	r3, [r7, #15]
          break;
 800e31c:	e018      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e31e:	6839      	ldr	r1, [r7, #0]
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fc21 	bl	800eb68 <USBD_GetConfig>
          break;
 800e326:	e013      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fc52 	bl	800ebd4 <USBD_GetStatus>
          break;
 800e330:	e00e      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fc81 	bl	800ec3c <USBD_SetFeature>
          break;
 800e33a:	e009      	b.n	800e350 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fc90 	bl	800ec64 <USBD_ClrFeature>
          break;
 800e344:	e004      	b.n	800e350 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fce7 	bl	800ed1c <USBD_CtlError>
          break;
 800e34e:	bf00      	nop
      }
      break;
 800e350:	e004      	b.n	800e35c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fce1 	bl	800ed1c <USBD_CtlError>
      break;
 800e35a:	bf00      	nop
  }

  return ret;
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop

0800e368 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e37e:	2b40      	cmp	r3, #64	; 0x40
 800e380:	d005      	beq.n	800e38e <USBD_StdItfReq+0x26>
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d82f      	bhi.n	800e3e6 <USBD_StdItfReq+0x7e>
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <USBD_StdItfReq+0x26>
 800e38a:	2b20      	cmp	r3, #32
 800e38c:	d12b      	bne.n	800e3e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e394:	b2db      	uxtb	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d81d      	bhi.n	800e3d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	889b      	ldrh	r3, [r3, #4]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d813      	bhi.n	800e3ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	4798      	blx	r3
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	88db      	ldrh	r3, [r3, #6]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d110      	bne.n	800e3e2 <USBD_StdItfReq+0x7a>
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10d      	bne.n	800e3e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 fd73 	bl	800eeb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e3cc:	e009      	b.n	800e3e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fca3 	bl	800ed1c <USBD_CtlError>
          break;
 800e3d6:	e004      	b.n	800e3e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fc9e 	bl	800ed1c <USBD_CtlError>
          break;
 800e3e0:	e000      	b.n	800e3e4 <USBD_StdItfReq+0x7c>
          break;
 800e3e2:	bf00      	nop
      }
      break;
 800e3e4:	e004      	b.n	800e3f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 fc97 	bl	800ed1c <USBD_CtlError>
      break;
 800e3ee:	bf00      	nop
  }

  return ret;
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	889b      	ldrh	r3, [r3, #4]
 800e40c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e416:	2b40      	cmp	r3, #64	; 0x40
 800e418:	d007      	beq.n	800e42a <USBD_StdEPReq+0x30>
 800e41a:	2b40      	cmp	r3, #64	; 0x40
 800e41c:	f200 8145 	bhi.w	800e6aa <USBD_StdEPReq+0x2b0>
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00c      	beq.n	800e43e <USBD_StdEPReq+0x44>
 800e424:	2b20      	cmp	r3, #32
 800e426:	f040 8140 	bne.w	800e6aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	4798      	blx	r3
 800e438:	4603      	mov	r3, r0
 800e43a:	73fb      	strb	r3, [r7, #15]
      break;
 800e43c:	e13a      	b.n	800e6b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	785b      	ldrb	r3, [r3, #1]
 800e442:	2b03      	cmp	r3, #3
 800e444:	d007      	beq.n	800e456 <USBD_StdEPReq+0x5c>
 800e446:	2b03      	cmp	r3, #3
 800e448:	f300 8129 	bgt.w	800e69e <USBD_StdEPReq+0x2a4>
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d07f      	beq.n	800e550 <USBD_StdEPReq+0x156>
 800e450:	2b01      	cmp	r3, #1
 800e452:	d03c      	beq.n	800e4ce <USBD_StdEPReq+0xd4>
 800e454:	e123      	b.n	800e69e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d002      	beq.n	800e468 <USBD_StdEPReq+0x6e>
 800e462:	2b03      	cmp	r3, #3
 800e464:	d016      	beq.n	800e494 <USBD_StdEPReq+0x9a>
 800e466:	e02c      	b.n	800e4c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00d      	beq.n	800e48a <USBD_StdEPReq+0x90>
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	2b80      	cmp	r3, #128	; 0x80
 800e472:	d00a      	beq.n	800e48a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 fa17 	bl	800f8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e47e:	2180      	movs	r1, #128	; 0x80
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f001 fa13 	bl	800f8ac <USBD_LL_StallEP>
 800e486:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e488:	e020      	b.n	800e4cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fc45 	bl	800ed1c <USBD_CtlError>
              break;
 800e492:	e01b      	b.n	800e4cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	885b      	ldrh	r3, [r3, #2]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10e      	bne.n	800e4ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e49c:	7bbb      	ldrb	r3, [r7, #14]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <USBD_StdEPReq+0xc0>
 800e4a2:	7bbb      	ldrb	r3, [r7, #14]
 800e4a4:	2b80      	cmp	r3, #128	; 0x80
 800e4a6:	d008      	beq.n	800e4ba <USBD_StdEPReq+0xc0>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	88db      	ldrh	r3, [r3, #6]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d104      	bne.n	800e4ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f001 f9f9 	bl	800f8ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fcf9 	bl	800eeb2 <USBD_CtlSendStatus>

              break;
 800e4c0:	e004      	b.n	800e4cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fc29 	bl	800ed1c <USBD_CtlError>
              break;
 800e4ca:	bf00      	nop
          }
          break;
 800e4cc:	e0ec      	b.n	800e6a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	d002      	beq.n	800e4e0 <USBD_StdEPReq+0xe6>
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d016      	beq.n	800e50c <USBD_StdEPReq+0x112>
 800e4de:	e030      	b.n	800e542 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4e0:	7bbb      	ldrb	r3, [r7, #14]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00d      	beq.n	800e502 <USBD_StdEPReq+0x108>
 800e4e6:	7bbb      	ldrb	r3, [r7, #14]
 800e4e8:	2b80      	cmp	r3, #128	; 0x80
 800e4ea:	d00a      	beq.n	800e502 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4ec:	7bbb      	ldrb	r3, [r7, #14]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 f9db 	bl	800f8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4f6:	2180      	movs	r1, #128	; 0x80
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f001 f9d7 	bl	800f8ac <USBD_LL_StallEP>
 800e4fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e500:	e025      	b.n	800e54e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 fc09 	bl	800ed1c <USBD_CtlError>
              break;
 800e50a:	e020      	b.n	800e54e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	885b      	ldrh	r3, [r3, #2]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d11b      	bne.n	800e54c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e514:	7bbb      	ldrb	r3, [r7, #14]
 800e516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d004      	beq.n	800e528 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e51e:	7bbb      	ldrb	r3, [r7, #14]
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f001 f9f8 	bl	800f918 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fcc2 	bl	800eeb2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	6839      	ldr	r1, [r7, #0]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	4798      	blx	r3
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e540:	e004      	b.n	800e54c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fbe9 	bl	800ed1c <USBD_CtlError>
              break;
 800e54a:	e000      	b.n	800e54e <USBD_StdEPReq+0x154>
              break;
 800e54c:	bf00      	nop
          }
          break;
 800e54e:	e0ab      	b.n	800e6a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d002      	beq.n	800e562 <USBD_StdEPReq+0x168>
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d032      	beq.n	800e5c6 <USBD_StdEPReq+0x1cc>
 800e560:	e097      	b.n	800e692 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e562:	7bbb      	ldrb	r3, [r7, #14]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d007      	beq.n	800e578 <USBD_StdEPReq+0x17e>
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	2b80      	cmp	r3, #128	; 0x80
 800e56c:	d004      	beq.n	800e578 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 fbd3 	bl	800ed1c <USBD_CtlError>
                break;
 800e576:	e091      	b.n	800e69c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	da0b      	bge.n	800e598 <USBD_StdEPReq+0x19e>
 800e580:	7bbb      	ldrb	r3, [r7, #14]
 800e582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	3310      	adds	r3, #16
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	4413      	add	r3, r2
 800e594:	3304      	adds	r3, #4
 800e596:	e00b      	b.n	800e5b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fc1d 	bl	800edfe <USBD_CtlSendData>
              break;
 800e5c4:	e06a      	b.n	800e69c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	da11      	bge.n	800e5f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5ce:	7bbb      	ldrb	r3, [r7, #14]
 800e5d0:	f003 020f 	and.w	r2, r3, #15
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	440b      	add	r3, r1
 800e5e0:	3324      	adds	r3, #36	; 0x24
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d117      	bne.n	800e618 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fb96 	bl	800ed1c <USBD_CtlError>
                  break;
 800e5f0:	e054      	b.n	800e69c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
 800e5f4:	f003 020f 	and.w	r2, r3, #15
 800e5f8:	6879      	ldr	r1, [r7, #4]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	440b      	add	r3, r1
 800e604:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d104      	bne.n	800e618 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 fb83 	bl	800ed1c <USBD_CtlError>
                  break;
 800e616:	e041      	b.n	800e69c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	da0b      	bge.n	800e638 <USBD_StdEPReq+0x23e>
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e626:	4613      	mov	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4413      	add	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	3310      	adds	r3, #16
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	4413      	add	r3, r2
 800e634:	3304      	adds	r3, #4
 800e636:	e00b      	b.n	800e650 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	3304      	adds	r3, #4
 800e650:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <USBD_StdEPReq+0x264>
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	2b80      	cmp	r3, #128	; 0x80
 800e65c:	d103      	bne.n	800e666 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	e00e      	b.n	800e684 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 f98a 	bl	800f984 <USBD_LL_IsStallEP>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2201      	movs	r2, #1
 800e67a:	601a      	str	r2, [r3, #0]
 800e67c:	e002      	b.n	800e684 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	2202      	movs	r2, #2
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fbb7 	bl	800edfe <USBD_CtlSendData>
              break;
 800e690:	e004      	b.n	800e69c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 fb41 	bl	800ed1c <USBD_CtlError>
              break;
 800e69a:	bf00      	nop
          }
          break;
 800e69c:	e004      	b.n	800e6a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fb3b 	bl	800ed1c <USBD_CtlError>
          break;
 800e6a6:	bf00      	nop
      }
      break;
 800e6a8:	e004      	b.n	800e6b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fb35 	bl	800ed1c <USBD_CtlError>
      break;
 800e6b2:	bf00      	nop
  }

  return ret;
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	885b      	ldrh	r3, [r3, #2]
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	2b06      	cmp	r3, #6
 800e6e2:	f200 8128 	bhi.w	800e936 <USBD_GetDescriptor+0x276>
 800e6e6:	a201      	add	r2, pc, #4	; (adr r2, 800e6ec <USBD_GetDescriptor+0x2c>)
 800e6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ec:	0800e709 	.word	0x0800e709
 800e6f0:	0800e721 	.word	0x0800e721
 800e6f4:	0800e761 	.word	0x0800e761
 800e6f8:	0800e937 	.word	0x0800e937
 800e6fc:	0800e937 	.word	0x0800e937
 800e700:	0800e8d7 	.word	0x0800e8d7
 800e704:	0800e903 	.word	0x0800e903
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	7c12      	ldrb	r2, [r2, #16]
 800e714:	f107 0108 	add.w	r1, r7, #8
 800e718:	4610      	mov	r0, r2
 800e71a:	4798      	blx	r3
 800e71c:	60f8      	str	r0, [r7, #12]
      break;
 800e71e:	e112      	b.n	800e946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	7c1b      	ldrb	r3, [r3, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10d      	bne.n	800e744 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e730:	f107 0208 	add.w	r2, r7, #8
 800e734:	4610      	mov	r0, r2
 800e736:	4798      	blx	r3
 800e738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3301      	adds	r3, #1
 800e73e:	2202      	movs	r2, #2
 800e740:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e742:	e100      	b.n	800e946 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e74c:	f107 0208 	add.w	r2, r7, #8
 800e750:	4610      	mov	r0, r2
 800e752:	4798      	blx	r3
 800e754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3301      	adds	r3, #1
 800e75a:	2202      	movs	r2, #2
 800e75c:	701a      	strb	r2, [r3, #0]
      break;
 800e75e:	e0f2      	b.n	800e946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	885b      	ldrh	r3, [r3, #2]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b05      	cmp	r3, #5
 800e768:	f200 80ac 	bhi.w	800e8c4 <USBD_GetDescriptor+0x204>
 800e76c:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <USBD_GetDescriptor+0xb4>)
 800e76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e772:	bf00      	nop
 800e774:	0800e78d 	.word	0x0800e78d
 800e778:	0800e7c1 	.word	0x0800e7c1
 800e77c:	0800e7f5 	.word	0x0800e7f5
 800e780:	0800e829 	.word	0x0800e829
 800e784:	0800e85d 	.word	0x0800e85d
 800e788:	0800e891 	.word	0x0800e891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00b      	beq.n	800e7b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	7c12      	ldrb	r2, [r2, #16]
 800e7a4:	f107 0108 	add.w	r1, r7, #8
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
 800e7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7ae:	e091      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fab2 	bl	800ed1c <USBD_CtlError>
            err++;
 800e7b8:	7afb      	ldrb	r3, [r7, #11]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e7be:	e089      	b.n	800e8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00b      	beq.n	800e7e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	7c12      	ldrb	r2, [r2, #16]
 800e7d8:	f107 0108 	add.w	r1, r7, #8
 800e7dc:	4610      	mov	r0, r2
 800e7de:	4798      	blx	r3
 800e7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7e2:	e077      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fa98 	bl	800ed1c <USBD_CtlError>
            err++;
 800e7ec:	7afb      	ldrb	r3, [r7, #11]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e7f2:	e06f      	b.n	800e8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	7c12      	ldrb	r2, [r2, #16]
 800e80c:	f107 0108 	add.w	r1, r7, #8
 800e810:	4610      	mov	r0, r2
 800e812:	4798      	blx	r3
 800e814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e816:	e05d      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fa7e 	bl	800ed1c <USBD_CtlError>
            err++;
 800e820:	7afb      	ldrb	r3, [r7, #11]
 800e822:	3301      	adds	r3, #1
 800e824:	72fb      	strb	r3, [r7, #11]
          break;
 800e826:	e055      	b.n	800e8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	7c12      	ldrb	r2, [r2, #16]
 800e840:	f107 0108 	add.w	r1, r7, #8
 800e844:	4610      	mov	r0, r2
 800e846:	4798      	blx	r3
 800e848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e84a:	e043      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 fa64 	bl	800ed1c <USBD_CtlError>
            err++;
 800e854:	7afb      	ldrb	r3, [r7, #11]
 800e856:	3301      	adds	r3, #1
 800e858:	72fb      	strb	r3, [r7, #11]
          break;
 800e85a:	e03b      	b.n	800e8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00b      	beq.n	800e880 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e86e:	695b      	ldr	r3, [r3, #20]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	7c12      	ldrb	r2, [r2, #16]
 800e874:	f107 0108 	add.w	r1, r7, #8
 800e878:	4610      	mov	r0, r2
 800e87a:	4798      	blx	r3
 800e87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e87e:	e029      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fa4a 	bl	800ed1c <USBD_CtlError>
            err++;
 800e888:	7afb      	ldrb	r3, [r7, #11]
 800e88a:	3301      	adds	r3, #1
 800e88c:	72fb      	strb	r3, [r7, #11]
          break;
 800e88e:	e021      	b.n	800e8d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00b      	beq.n	800e8b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	7c12      	ldrb	r2, [r2, #16]
 800e8a8:	f107 0108 	add.w	r1, r7, #8
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
 800e8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8b2:	e00f      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8b4:	6839      	ldr	r1, [r7, #0]
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fa30 	bl	800ed1c <USBD_CtlError>
            err++;
 800e8bc:	7afb      	ldrb	r3, [r7, #11]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8c2:	e007      	b.n	800e8d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fa28 	bl	800ed1c <USBD_CtlError>
          err++;
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e8d2:	bf00      	nop
      }
      break;
 800e8d4:	e037      	b.n	800e946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7c1b      	ldrb	r3, [r3, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d109      	bne.n	800e8f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	f107 0208 	add.w	r2, r7, #8
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	4798      	blx	r3
 800e8ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8f0:	e029      	b.n	800e946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fa11 	bl	800ed1c <USBD_CtlError>
        err++;
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e900:	e021      	b.n	800e946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	7c1b      	ldrb	r3, [r3, #16]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10d      	bne.n	800e926 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e912:	f107 0208 	add.w	r2, r7, #8
 800e916:	4610      	mov	r0, r2
 800e918:	4798      	blx	r3
 800e91a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3301      	adds	r3, #1
 800e920:	2207      	movs	r2, #7
 800e922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e924:	e00f      	b.n	800e946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f9f7 	bl	800ed1c <USBD_CtlError>
        err++;
 800e92e:	7afb      	ldrb	r3, [r7, #11]
 800e930:	3301      	adds	r3, #1
 800e932:	72fb      	strb	r3, [r7, #11]
      break;
 800e934:	e007      	b.n	800e946 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f9ef 	bl	800ed1c <USBD_CtlError>
      err++;
 800e93e:	7afb      	ldrb	r3, [r7, #11]
 800e940:	3301      	adds	r3, #1
 800e942:	72fb      	strb	r3, [r7, #11]
      break;
 800e944:	bf00      	nop
  }

  if (err != 0U)
 800e946:	7afb      	ldrb	r3, [r7, #11]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d11e      	bne.n	800e98a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	88db      	ldrh	r3, [r3, #6]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d016      	beq.n	800e982 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e954:	893b      	ldrh	r3, [r7, #8]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00e      	beq.n	800e978 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	88da      	ldrh	r2, [r3, #6]
 800e95e:	893b      	ldrh	r3, [r7, #8]
 800e960:	4293      	cmp	r3, r2
 800e962:	bf28      	it	cs
 800e964:	4613      	movcs	r3, r2
 800e966:	b29b      	uxth	r3, r3
 800e968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e96a:	893b      	ldrh	r3, [r7, #8]
 800e96c:	461a      	mov	r2, r3
 800e96e:	68f9      	ldr	r1, [r7, #12]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fa44 	bl	800edfe <USBD_CtlSendData>
 800e976:	e009      	b.n	800e98c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e978:	6839      	ldr	r1, [r7, #0]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f9ce 	bl	800ed1c <USBD_CtlError>
 800e980:	e004      	b.n	800e98c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fa95 	bl	800eeb2 <USBD_CtlSendStatus>
 800e988:	e000      	b.n	800e98c <USBD_GetDescriptor+0x2cc>
    return;
 800e98a:	bf00      	nop
  }
}
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop

0800e994 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	889b      	ldrh	r3, [r3, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d131      	bne.n	800ea0a <USBD_SetAddress+0x76>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	88db      	ldrh	r3, [r3, #6]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d12d      	bne.n	800ea0a <USBD_SetAddress+0x76>
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	885b      	ldrh	r3, [r3, #2]
 800e9b2:	2b7f      	cmp	r3, #127	; 0x7f
 800e9b4:	d829      	bhi.n	800ea0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	885b      	ldrh	r3, [r3, #2]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d104      	bne.n	800e9d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e9ce:	6839      	ldr	r1, [r7, #0]
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 f9a3 	bl	800ed1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9d6:	e01d      	b.n	800ea14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7bfa      	ldrb	r2, [r7, #15]
 800e9dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fff9 	bl	800f9dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa61 	bl	800eeb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d004      	beq.n	800ea00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2202      	movs	r2, #2
 800e9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9fe:	e009      	b.n	800ea14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea08:	e004      	b.n	800ea14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 f985 	bl	800ed1c <USBD_CtlError>
  }
}
 800ea12:	bf00      	nop
 800ea14:	bf00      	nop
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	885b      	ldrh	r3, [r3, #2]
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	4b4c      	ldr	r3, [pc, #304]	; (800eb64 <USBD_SetConfig+0x148>)
 800ea32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ea34:	4b4b      	ldr	r3, [pc, #300]	; (800eb64 <USBD_SetConfig+0x148>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d905      	bls.n	800ea48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f96c 	bl	800ed1c <USBD_CtlError>
    return USBD_FAIL;
 800ea44:	2303      	movs	r3, #3
 800ea46:	e088      	b.n	800eb5a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d002      	beq.n	800ea5a <USBD_SetConfig+0x3e>
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d025      	beq.n	800eaa4 <USBD_SetConfig+0x88>
 800ea58:	e071      	b.n	800eb3e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ea5a:	4b42      	ldr	r3, [pc, #264]	; (800eb64 <USBD_SetConfig+0x148>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d01c      	beq.n	800ea9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ea62:	4b40      	ldr	r3, [pc, #256]	; (800eb64 <USBD_SetConfig+0x148>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea6c:	4b3d      	ldr	r3, [pc, #244]	; (800eb64 <USBD_SetConfig+0x148>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	4619      	mov	r1, r3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff f948 	bl	800dd08 <USBD_SetClassConfig>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea7c:	7bfb      	ldrb	r3, [r7, #15]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d004      	beq.n	800ea8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f949 	bl	800ed1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea8a:	e065      	b.n	800eb58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fa10 	bl	800eeb2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2203      	movs	r2, #3
 800ea96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea9a:	e05d      	b.n	800eb58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fa08 	bl	800eeb2 <USBD_CtlSendStatus>
      break;
 800eaa2:	e059      	b.n	800eb58 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eaa4:	4b2f      	ldr	r3, [pc, #188]	; (800eb64 <USBD_SetConfig+0x148>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d112      	bne.n	800ead2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2202      	movs	r2, #2
 800eab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eab4:	4b2b      	ldr	r3, [pc, #172]	; (800eb64 <USBD_SetConfig+0x148>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	461a      	mov	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eabe:	4b29      	ldr	r3, [pc, #164]	; (800eb64 <USBD_SetConfig+0x148>)
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff f93b 	bl	800dd40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9f1 	bl	800eeb2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ead0:	e042      	b.n	800eb58 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ead2:	4b24      	ldr	r3, [pc, #144]	; (800eb64 <USBD_SetConfig+0x148>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d02a      	beq.n	800eb36 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff f929 	bl	800dd40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eaee:	4b1d      	ldr	r3, [pc, #116]	; (800eb64 <USBD_SetConfig+0x148>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eaf8:	4b1a      	ldr	r3, [pc, #104]	; (800eb64 <USBD_SetConfig+0x148>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	4619      	mov	r1, r3
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7ff f902 	bl	800dd08 <USBD_SetClassConfig>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00f      	beq.n	800eb2e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f903 	bl	800ed1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff f90e 	bl	800dd40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2202      	movs	r2, #2
 800eb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb2c:	e014      	b.n	800eb58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f9bf 	bl	800eeb2 <USBD_CtlSendStatus>
      break;
 800eb34:	e010      	b.n	800eb58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 f9bb 	bl	800eeb2 <USBD_CtlSendStatus>
      break;
 800eb3c:	e00c      	b.n	800eb58 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f8eb 	bl	800ed1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb46:	4b07      	ldr	r3, [pc, #28]	; (800eb64 <USBD_SetConfig+0x148>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff f8f7 	bl	800dd40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eb52:	2303      	movs	r3, #3
 800eb54:	73fb      	strb	r3, [r7, #15]
      break;
 800eb56:	bf00      	nop
  }

  return ret;
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20000d8c 	.word	0x20000d8c

0800eb68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	88db      	ldrh	r3, [r3, #6]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d004      	beq.n	800eb84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f8cd 	bl	800ed1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb82:	e023      	b.n	800ebcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	dc02      	bgt.n	800eb96 <USBD_GetConfig+0x2e>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	dc03      	bgt.n	800eb9c <USBD_GetConfig+0x34>
 800eb94:	e015      	b.n	800ebc2 <USBD_GetConfig+0x5a>
 800eb96:	2b03      	cmp	r3, #3
 800eb98:	d00b      	beq.n	800ebb2 <USBD_GetConfig+0x4a>
 800eb9a:	e012      	b.n	800ebc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	3308      	adds	r3, #8
 800eba6:	2201      	movs	r2, #1
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f927 	bl	800edfe <USBD_CtlSendData>
        break;
 800ebb0:	e00c      	b.n	800ebcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f91f 	bl	800edfe <USBD_CtlSendData>
        break;
 800ebc0:	e004      	b.n	800ebcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f8a9 	bl	800ed1c <USBD_CtlError>
        break;
 800ebca:	bf00      	nop
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d81e      	bhi.n	800ec2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	88db      	ldrh	r3, [r3, #6]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d004      	beq.n	800ebfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ebf4:	6839      	ldr	r1, [r7, #0]
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f890 	bl	800ed1c <USBD_CtlError>
        break;
 800ebfc:	e01a      	b.n	800ec34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2201      	movs	r2, #1
 800ec02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d005      	beq.n	800ec1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	f043 0202 	orr.w	r2, r3, #2
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	330c      	adds	r3, #12
 800ec1e:	2202      	movs	r2, #2
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 f8eb 	bl	800edfe <USBD_CtlSendData>
      break;
 800ec28:	e004      	b.n	800ec34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f875 	bl	800ed1c <USBD_CtlError>
      break;
 800ec32:	bf00      	nop
  }
}
 800ec34:	bf00      	nop
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	885b      	ldrh	r3, [r3, #2]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d106      	bne.n	800ec5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 f92b 	bl	800eeb2 <USBD_CtlSendStatus>
  }
}
 800ec5c:	bf00      	nop
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	3b01      	subs	r3, #1
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d80b      	bhi.n	800ec94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	885b      	ldrh	r3, [r3, #2]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d10c      	bne.n	800ec9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f910 	bl	800eeb2 <USBD_CtlSendStatus>
      }
      break;
 800ec92:	e004      	b.n	800ec9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f840 	bl	800ed1c <USBD_CtlError>
      break;
 800ec9c:	e000      	b.n	800eca0 <USBD_ClrFeature+0x3c>
      break;
 800ec9e:	bf00      	nop
  }
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	781a      	ldrb	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fabb 	bl	800e24e <SWAPBYTE>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	461a      	mov	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	3301      	adds	r3, #1
 800ece4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3301      	adds	r3, #1
 800ecea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f7ff faae 	bl	800e24e <SWAPBYTE>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3301      	adds	r3, #1
 800ed04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f7ff faa1 	bl	800e24e <SWAPBYTE>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	461a      	mov	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	80da      	strh	r2, [r3, #6]
}
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed26:	2180      	movs	r1, #128	; 0x80
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f000 fdbf 	bl	800f8ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ed2e:	2100      	movs	r1, #0
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 fdbb 	bl	800f8ac <USBD_LL_StallEP>
}
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b086      	sub	sp, #24
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	60f8      	str	r0, [r7, #12]
 800ed46:	60b9      	str	r1, [r7, #8]
 800ed48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d036      	beq.n	800edc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed58:	6938      	ldr	r0, [r7, #16]
 800ed5a:	f000 f836 	bl	800edca <USBD_GetLen>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	3301      	adds	r3, #1
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	4413      	add	r3, r2
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	7812      	ldrb	r2, [r2, #0]
 800ed76:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	68ba      	ldr	r2, [r7, #8]
 800ed82:	4413      	add	r3, r2
 800ed84:	2203      	movs	r2, #3
 800ed86:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed88:	7dfb      	ldrb	r3, [r7, #23]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed8e:	e013      	b.n	800edb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	4413      	add	r3, r2
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	7812      	ldrb	r2, [r2, #0]
 800ed9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	613b      	str	r3, [r7, #16]
    idx++;
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	3301      	adds	r3, #1
 800eda6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	2200      	movs	r2, #0
 800edb0:	701a      	strb	r2, [r3, #0]
    idx++;
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
 800edb4:	3301      	adds	r3, #1
 800edb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1e7      	bne.n	800ed90 <USBD_GetString+0x52>
 800edc0:	e000      	b.n	800edc4 <USBD_GetString+0x86>
    return;
 800edc2:	bf00      	nop
  }
}
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800edca:	b480      	push	{r7}
 800edcc:	b085      	sub	sp, #20
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800edda:	e005      	b.n	800ede8 <USBD_GetLen+0x1e>
  {
    len++;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
 800edde:	3301      	adds	r3, #1
 800ede0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	3301      	adds	r3, #1
 800ede6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1f5      	bne.n	800eddc <USBD_GetLen+0x12>
  }

  return len;
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	60f8      	str	r0, [r7, #12]
 800ee06:	60b9      	str	r1, [r7, #8]
 800ee08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	2100      	movs	r1, #0
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 fe0f 	bl	800fa48 <USBD_LL_Transmit>

  return USBD_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	2100      	movs	r1, #0
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f000 fdfe 	bl	800fa48 <USBD_LL_Transmit>

  return USBD_OK;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	60f8      	str	r0, [r7, #12]
 800ee5e:	60b9      	str	r1, [r7, #8]
 800ee60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2203      	movs	r2, #3
 800ee66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	2100      	movs	r1, #0
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 fe19 	bl	800fab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	2100      	movs	r1, #0
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 fe08 	bl	800fab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2204      	movs	r2, #4
 800eebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eec2:	2300      	movs	r3, #0
 800eec4:	2200      	movs	r2, #0
 800eec6:	2100      	movs	r1, #0
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fdbd 	bl	800fa48 <USBD_LL_Transmit>

  return USBD_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2205      	movs	r2, #5
 800eee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eee8:	2300      	movs	r3, #0
 800eeea:	2200      	movs	r2, #0
 800eeec:	2100      	movs	r1, #0
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fde2 	bl	800fab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef16:	4b1f      	ldr	r3, [pc, #124]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef18:	7a5b      	ldrb	r3, [r3, #9]
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d131      	bne.n	800ef84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef20:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef22:	7a5b      	ldrb	r3, [r3, #9]
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	461a      	mov	r2, r3
 800ef28:	4b1a      	ldr	r3, [pc, #104]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef2e:	4b19      	ldr	r3, [pc, #100]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef30:	7a5b      	ldrb	r3, [r3, #9]
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	4a17      	ldr	r2, [pc, #92]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	4413      	add	r3, r2
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef3e:	4b15      	ldr	r3, [pc, #84]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef40:	7a5b      	ldrb	r3, [r3, #9]
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	461a      	mov	r2, r3
 800ef46:	4b13      	ldr	r3, [pc, #76]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef48:	4413      	add	r3, r2
 800ef4a:	79fa      	ldrb	r2, [r7, #7]
 800ef4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef4e:	4b11      	ldr	r3, [pc, #68]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef50:	7a5b      	ldrb	r3, [r3, #9]
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	b2d1      	uxtb	r1, r2
 800ef58:	4a0e      	ldr	r2, [pc, #56]	; (800ef94 <FATFS_LinkDriverEx+0x94>)
 800ef5a:	7251      	strb	r1, [r2, #9]
 800ef5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ef5e:	7dbb      	ldrb	r3, [r7, #22]
 800ef60:	3330      	adds	r3, #48	; 0x30
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	223a      	movs	r2, #58	; 0x3a
 800ef6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	3302      	adds	r3, #2
 800ef74:	222f      	movs	r2, #47	; 0x2f
 800ef76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	3303      	adds	r3, #3
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ef80:	2300      	movs	r3, #0
 800ef82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	371c      	adds	r7, #28
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	20000d90 	.word	0x20000d90

0800ef98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800efa2:	2200      	movs	r2, #0
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ffaa 	bl	800ef00 <FATFS_LinkDriverEx>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800efbc:	2200      	movs	r2, #0
 800efbe:	4912      	ldr	r1, [pc, #72]	; (800f008 <MX_USB_DEVICE_Init+0x50>)
 800efc0:	4812      	ldr	r0, [pc, #72]	; (800f00c <MX_USB_DEVICE_Init+0x54>)
 800efc2:	f7fe fe33 	bl	800dc2c <USBD_Init>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800efcc:	f7f2 fcfe 	bl	80019cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800efd0:	490f      	ldr	r1, [pc, #60]	; (800f010 <MX_USB_DEVICE_Init+0x58>)
 800efd2:	480e      	ldr	r0, [pc, #56]	; (800f00c <MX_USB_DEVICE_Init+0x54>)
 800efd4:	f7fe fe5a 	bl	800dc8c <USBD_RegisterClass>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800efde:	f7f2 fcf5 	bl	80019cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800efe2:	490c      	ldr	r1, [pc, #48]	; (800f014 <MX_USB_DEVICE_Init+0x5c>)
 800efe4:	4809      	ldr	r0, [pc, #36]	; (800f00c <MX_USB_DEVICE_Init+0x54>)
 800efe6:	f7fe fd7b 	bl	800dae0 <USBD_CDC_RegisterInterface>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eff0:	f7f2 fcec 	bl	80019cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eff4:	4805      	ldr	r0, [pc, #20]	; (800f00c <MX_USB_DEVICE_Init+0x54>)
 800eff6:	f7fe fe70 	bl	800dcda <USBD_Start>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f000:	f7f2 fce4 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f004:	bf00      	nop
 800f006:	bd80      	pop	{r7, pc}
 800f008:	20000138 	.word	0x20000138
 800f00c:	20000d9c 	.word	0x20000d9c
 800f010:	20000020 	.word	0x20000020
 800f014:	20000124 	.word	0x20000124

0800f018 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f01c:	2200      	movs	r2, #0
 800f01e:	4905      	ldr	r1, [pc, #20]	; (800f034 <CDC_Init_FS+0x1c>)
 800f020:	4805      	ldr	r0, [pc, #20]	; (800f038 <CDC_Init_FS+0x20>)
 800f022:	f7fe fd72 	bl	800db0a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f026:	4905      	ldr	r1, [pc, #20]	; (800f03c <CDC_Init_FS+0x24>)
 800f028:	4803      	ldr	r0, [pc, #12]	; (800f038 <CDC_Init_FS+0x20>)
 800f02a:	f7fe fd8c 	bl	800db46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f02e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f030:	4618      	mov	r0, r3
 800f032:	bd80      	pop	{r7, pc}
 800f034:	2000186c 	.word	0x2000186c
 800f038:	20000d9c 	.word	0x20000d9c
 800f03c:	2000106c 	.word	0x2000106c

0800f040 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f040:	b480      	push	{r7}
 800f042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f044:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f046:	4618      	mov	r0, r3
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	4603      	mov	r3, r0
 800f058:	6039      	str	r1, [r7, #0]
 800f05a:	71fb      	strb	r3, [r7, #7]
 800f05c:	4613      	mov	r3, r2
 800f05e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f060:	79fb      	ldrb	r3, [r7, #7]
 800f062:	2b23      	cmp	r3, #35	; 0x23
 800f064:	d84a      	bhi.n	800f0fc <CDC_Control_FS+0xac>
 800f066:	a201      	add	r2, pc, #4	; (adr r2, 800f06c <CDC_Control_FS+0x1c>)
 800f068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06c:	0800f0fd 	.word	0x0800f0fd
 800f070:	0800f0fd 	.word	0x0800f0fd
 800f074:	0800f0fd 	.word	0x0800f0fd
 800f078:	0800f0fd 	.word	0x0800f0fd
 800f07c:	0800f0fd 	.word	0x0800f0fd
 800f080:	0800f0fd 	.word	0x0800f0fd
 800f084:	0800f0fd 	.word	0x0800f0fd
 800f088:	0800f0fd 	.word	0x0800f0fd
 800f08c:	0800f0fd 	.word	0x0800f0fd
 800f090:	0800f0fd 	.word	0x0800f0fd
 800f094:	0800f0fd 	.word	0x0800f0fd
 800f098:	0800f0fd 	.word	0x0800f0fd
 800f09c:	0800f0fd 	.word	0x0800f0fd
 800f0a0:	0800f0fd 	.word	0x0800f0fd
 800f0a4:	0800f0fd 	.word	0x0800f0fd
 800f0a8:	0800f0fd 	.word	0x0800f0fd
 800f0ac:	0800f0fd 	.word	0x0800f0fd
 800f0b0:	0800f0fd 	.word	0x0800f0fd
 800f0b4:	0800f0fd 	.word	0x0800f0fd
 800f0b8:	0800f0fd 	.word	0x0800f0fd
 800f0bc:	0800f0fd 	.word	0x0800f0fd
 800f0c0:	0800f0fd 	.word	0x0800f0fd
 800f0c4:	0800f0fd 	.word	0x0800f0fd
 800f0c8:	0800f0fd 	.word	0x0800f0fd
 800f0cc:	0800f0fd 	.word	0x0800f0fd
 800f0d0:	0800f0fd 	.word	0x0800f0fd
 800f0d4:	0800f0fd 	.word	0x0800f0fd
 800f0d8:	0800f0fd 	.word	0x0800f0fd
 800f0dc:	0800f0fd 	.word	0x0800f0fd
 800f0e0:	0800f0fd 	.word	0x0800f0fd
 800f0e4:	0800f0fd 	.word	0x0800f0fd
 800f0e8:	0800f0fd 	.word	0x0800f0fd
 800f0ec:	0800f0fd 	.word	0x0800f0fd
 800f0f0:	0800f0fd 	.word	0x0800f0fd
 800f0f4:	0800f0fd 	.word	0x0800f0fd
 800f0f8:	0800f0fd 	.word	0x0800f0fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f0fc:	bf00      	nop
  }

  return (USBD_OK);
 800f0fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	4805      	ldr	r0, [pc, #20]	; (800f130 <CDC_Receive_FS+0x24>)
 800f11a:	f7fe fd14 	bl	800db46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f11e:	4804      	ldr	r0, [pc, #16]	; (800f130 <CDC_Receive_FS+0x24>)
 800f120:	f7fe fd5a 	bl	800dbd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f124:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20000d9c 	.word	0x20000d9c

0800f134 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f144:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <CDC_Transmit_FS+0x48>)
 800f146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f14a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f156:	2301      	movs	r3, #1
 800f158:	e00b      	b.n	800f172 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f15a:	887b      	ldrh	r3, [r7, #2]
 800f15c:	461a      	mov	r2, r3
 800f15e:	6879      	ldr	r1, [r7, #4]
 800f160:	4806      	ldr	r0, [pc, #24]	; (800f17c <CDC_Transmit_FS+0x48>)
 800f162:	f7fe fcd2 	bl	800db0a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f166:	4805      	ldr	r0, [pc, #20]	; (800f17c <CDC_Transmit_FS+0x48>)
 800f168:	f7fe fd06 	bl	800db78 <USBD_CDC_TransmitPacket>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f170:	7bfb      	ldrb	r3, [r7, #15]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	20000d9c 	.word	0x20000d9c

0800f180 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f180:	b480      	push	{r7}
 800f182:	b087      	sub	sp, #28
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	4613      	mov	r3, r2
 800f18c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f196:	4618      	mov	r0, r3
 800f198:	371c      	adds	r7, #28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
	...

0800f1a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	2212      	movs	r2, #18
 800f1b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f1b6:	4b03      	ldr	r3, [pc, #12]	; (800f1c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20000154 	.word	0x20000154

0800f1c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	6039      	str	r1, [r7, #0]
 800f1d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2204      	movs	r2, #4
 800f1d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f1da:	4b03      	ldr	r3, [pc, #12]	; (800f1e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr
 800f1e8:	20000168 	.word	0x20000168

0800f1ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d105      	bne.n	800f20a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	4907      	ldr	r1, [pc, #28]	; (800f220 <USBD_FS_ProductStrDescriptor+0x34>)
 800f202:	4808      	ldr	r0, [pc, #32]	; (800f224 <USBD_FS_ProductStrDescriptor+0x38>)
 800f204:	f7ff fd9b 	bl	800ed3e <USBD_GetString>
 800f208:	e004      	b.n	800f214 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	4904      	ldr	r1, [pc, #16]	; (800f220 <USBD_FS_ProductStrDescriptor+0x34>)
 800f20e:	4805      	ldr	r0, [pc, #20]	; (800f224 <USBD_FS_ProductStrDescriptor+0x38>)
 800f210:	f7ff fd95 	bl	800ed3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f214:	4b02      	ldr	r3, [pc, #8]	; (800f220 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f216:	4618      	mov	r0, r3
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	2000206c 	.word	0x2000206c
 800f224:	0801274c 	.word	0x0801274c

0800f228 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	6039      	str	r1, [r7, #0]
 800f232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	4904      	ldr	r1, [pc, #16]	; (800f248 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f238:	4804      	ldr	r0, [pc, #16]	; (800f24c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f23a:	f7ff fd80 	bl	800ed3e <USBD_GetString>
  return USBD_StrDesc;
 800f23e:	4b02      	ldr	r3, [pc, #8]	; (800f248 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	2000206c 	.word	0x2000206c
 800f24c:	08012764 	.word	0x08012764

0800f250 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	6039      	str	r1, [r7, #0]
 800f25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	221a      	movs	r2, #26
 800f260:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f262:	f000 f843 	bl	800f2ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f266:	4b02      	ldr	r3, [pc, #8]	; (800f270 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	2000016c 	.word	0x2000016c

0800f274 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	6039      	str	r1, [r7, #0]
 800f27e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f280:	79fb      	ldrb	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d105      	bne.n	800f292 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	4907      	ldr	r1, [pc, #28]	; (800f2a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f28a:	4808      	ldr	r0, [pc, #32]	; (800f2ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800f28c:	f7ff fd57 	bl	800ed3e <USBD_GetString>
 800f290:	e004      	b.n	800f29c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	4904      	ldr	r1, [pc, #16]	; (800f2a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f296:	4805      	ldr	r0, [pc, #20]	; (800f2ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800f298:	f7ff fd51 	bl	800ed3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	2000206c 	.word	0x2000206c
 800f2ac:	08012778 	.word	0x08012778

0800f2b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	6039      	str	r1, [r7, #0]
 800f2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d105      	bne.n	800f2ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	4907      	ldr	r1, [pc, #28]	; (800f2e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f2c6:	4808      	ldr	r0, [pc, #32]	; (800f2e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f2c8:	f7ff fd39 	bl	800ed3e <USBD_GetString>
 800f2cc:	e004      	b.n	800f2d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	4904      	ldr	r1, [pc, #16]	; (800f2e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f2d2:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f2d4:	f7ff fd33 	bl	800ed3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2d8:	4b02      	ldr	r3, [pc, #8]	; (800f2e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	2000206c 	.word	0x2000206c
 800f2e8:	08012784 	.word	0x08012784

0800f2ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <Get_SerialNum+0x44>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f2f8:	4b0e      	ldr	r3, [pc, #56]	; (800f334 <Get_SerialNum+0x48>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	; (800f338 <Get_SerialNum+0x4c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4413      	add	r3, r2
 800f30a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d009      	beq.n	800f326 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f312:	2208      	movs	r2, #8
 800f314:	4909      	ldr	r1, [pc, #36]	; (800f33c <Get_SerialNum+0x50>)
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f000 f814 	bl	800f344 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f31c:	2204      	movs	r2, #4
 800f31e:	4908      	ldr	r1, [pc, #32]	; (800f340 <Get_SerialNum+0x54>)
 800f320:	68b8      	ldr	r0, [r7, #8]
 800f322:	f000 f80f 	bl	800f344 <IntToUnicode>
  }
}
 800f326:	bf00      	nop
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	1fff7590 	.word	0x1fff7590
 800f334:	1fff7594 	.word	0x1fff7594
 800f338:	1fff7598 	.word	0x1fff7598
 800f33c:	2000016e 	.word	0x2000016e
 800f340:	2000017e 	.word	0x2000017e

0800f344 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	4613      	mov	r3, r2
 800f350:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f356:	2300      	movs	r3, #0
 800f358:	75fb      	strb	r3, [r7, #23]
 800f35a:	e027      	b.n	800f3ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	0f1b      	lsrs	r3, r3, #28
 800f360:	2b09      	cmp	r3, #9
 800f362:	d80b      	bhi.n	800f37c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	0f1b      	lsrs	r3, r3, #28
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	005b      	lsls	r3, r3, #1
 800f36e:	4619      	mov	r1, r3
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	440b      	add	r3, r1
 800f374:	3230      	adds	r2, #48	; 0x30
 800f376:	b2d2      	uxtb	r2, r2
 800f378:	701a      	strb	r2, [r3, #0]
 800f37a:	e00a      	b.n	800f392 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	0f1b      	lsrs	r3, r3, #28
 800f380:	b2da      	uxtb	r2, r3
 800f382:	7dfb      	ldrb	r3, [r7, #23]
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4619      	mov	r1, r3
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	440b      	add	r3, r1
 800f38c:	3237      	adds	r2, #55	; 0x37
 800f38e:	b2d2      	uxtb	r2, r2
 800f390:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f398:	7dfb      	ldrb	r3, [r7, #23]
 800f39a:	005b      	lsls	r3, r3, #1
 800f39c:	3301      	adds	r3, #1
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	75fb      	strb	r3, [r7, #23]
 800f3ac:	7dfa      	ldrb	r2, [r7, #23]
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d3d3      	bcc.n	800f35c <IntToUnicode+0x18>
  }
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop
 800f3b8:	371c      	adds	r7, #28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
	...

0800f3c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b0b0      	sub	sp, #192	; 0xc0
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	605a      	str	r2, [r3, #4]
 800f3d6:	609a      	str	r2, [r3, #8]
 800f3d8:	60da      	str	r2, [r3, #12]
 800f3da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f3dc:	f107 0318 	add.w	r3, r7, #24
 800f3e0:	2294      	movs	r2, #148	; 0x94
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 fc0b 	bl	800fc00 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f3f2:	d163      	bne.n	800f4bc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f3f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f3f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f400:	f107 0318 	add.w	r3, r7, #24
 800f404:	4618      	mov	r0, r3
 800f406:	f7f6 f89b 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f410:	f7f2 fadc 	bl	80019cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f414:	4b2b      	ldr	r3, [pc, #172]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f418:	4a2a      	ldr	r2, [pc, #168]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f41a:	f043 0301 	orr.w	r3, r3, #1
 800f41e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f420:	4b28      	ldr	r3, [pc, #160]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	617b      	str	r3, [r7, #20]
 800f42a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f42c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f434:	2302      	movs	r3, #2
 800f436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f440:	2303      	movs	r3, #3
 800f442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f446:	230a      	movs	r3, #10
 800f448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f44c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f450:	4619      	mov	r1, r3
 800f452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f456:	f7f3 fbbf 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f45a:	4b1a      	ldr	r3, [pc, #104]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f45e:	4a19      	ldr	r2, [pc, #100]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f464:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f466:	4b17      	ldr	r3, [pc, #92]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f46a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f46e:	613b      	str	r3, [r7, #16]
 800f470:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f472:	4b14      	ldr	r3, [pc, #80]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d114      	bne.n	800f4a8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f47e:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f482:	4a10      	ldr	r2, [pc, #64]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f488:	6593      	str	r3, [r2, #88]	; 0x58
 800f48a:	4b0e      	ldr	r3, [pc, #56]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f48e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f496:	f7f5 f93f 	bl	8004718 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f49a:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f49e:	4a09      	ldr	r2, [pc, #36]	; (800f4c4 <HAL_PCD_MspInit+0x100>)
 800f4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4a4:	6593      	str	r3, [r2, #88]	; 0x58
 800f4a6:	e001      	b.n	800f4ac <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f4a8:	f7f5 f936 	bl	8004718 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	2043      	movs	r0, #67	; 0x43
 800f4b2:	f7f3 f82c 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f4b6:	2043      	movs	r0, #67	; 0x43
 800f4b8:	f7f3 f845 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f4bc:	bf00      	nop
 800f4be:	37c0      	adds	r7, #192	; 0xc0
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	40021000 	.word	0x40021000

0800f4c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4610      	mov	r0, r2
 800f4e0:	f7fe fc46 	bl	800dd70 <USBD_LL_SetupStage>
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f4fe:	78fa      	ldrb	r2, [r7, #3]
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	4613      	mov	r3, r2
 800f504:	00db      	lsls	r3, r3, #3
 800f506:	4413      	add	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	440b      	add	r3, r1
 800f50c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	78fb      	ldrb	r3, [r7, #3]
 800f514:	4619      	mov	r1, r3
 800f516:	f7fe fc80 	bl	800de1a <USBD_LL_DataOutStage>
}
 800f51a:	bf00      	nop
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b082      	sub	sp, #8
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
 800f52a:	460b      	mov	r3, r1
 800f52c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f534:	78fa      	ldrb	r2, [r7, #3]
 800f536:	6879      	ldr	r1, [r7, #4]
 800f538:	4613      	mov	r3, r2
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	4413      	add	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	440b      	add	r3, r1
 800f542:	334c      	adds	r3, #76	; 0x4c
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	78fb      	ldrb	r3, [r7, #3]
 800f548:	4619      	mov	r1, r3
 800f54a:	f7fe fcc9 	bl	800dee0 <USBD_LL_DataInStage>
}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b082      	sub	sp, #8
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe fddd 	bl	800e124 <USBD_LL_SOF>
}
 800f56a:	bf00      	nop
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b084      	sub	sp, #16
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f57a:	2301      	movs	r3, #1
 800f57c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d001      	beq.n	800f58a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f586:	f7f2 fa21 	bl	80019cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f590:	7bfa      	ldrb	r2, [r7, #15]
 800f592:	4611      	mov	r1, r2
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fd87 	bl	800e0a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fe fd33 	bl	800e00c <USBD_LL_Reset>
}
 800f5a6:	bf00      	nop
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
	...

0800f5b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	6812      	ldr	r2, [r2, #0]
 800f5c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5ca:	f043 0301 	orr.w	r3, r3, #1
 800f5ce:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fe fd76 	bl	800e0c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a1b      	ldr	r3, [r3, #32]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d005      	beq.n	800f5f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5e4:	4b04      	ldr	r3, [pc, #16]	; (800f5f8 <HAL_PCD_SuspendCallback+0x48>)
 800f5e6:	691b      	ldr	r3, [r3, #16]
 800f5e8:	4a03      	ldr	r2, [pc, #12]	; (800f5f8 <HAL_PCD_SuspendCallback+0x48>)
 800f5ea:	f043 0306 	orr.w	r3, r3, #6
 800f5ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f5f0:	bf00      	nop
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	e000ed00 	.word	0xe000ed00

0800f5fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	6812      	ldr	r2, [r2, #0]
 800f612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f616:	f023 0301 	bic.w	r3, r3, #1
 800f61a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f624:	4b08      	ldr	r3, [pc, #32]	; (800f648 <HAL_PCD_ResumeCallback+0x4c>)
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	4a07      	ldr	r2, [pc, #28]	; (800f648 <HAL_PCD_ResumeCallback+0x4c>)
 800f62a:	f023 0306 	bic.w	r3, r3, #6
 800f62e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f630:	f000 faa6 	bl	800fb80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fd5a 	bl	800e0f4 <USBD_LL_Resume>
}
 800f640:	bf00      	nop
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	e000ed00 	.word	0xe000ed00

0800f64c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	460b      	mov	r3, r1
 800f656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f65e:	78fa      	ldrb	r2, [r7, #3]
 800f660:	4611      	mov	r1, r2
 800f662:	4618      	mov	r0, r3
 800f664:	f7fe fda6 	bl	800e1b4 <USBD_LL_IsoOUTIncomplete>
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	460b      	mov	r3, r1
 800f67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f682:	78fa      	ldrb	r2, [r7, #3]
 800f684:	4611      	mov	r1, r2
 800f686:	4618      	mov	r0, r3
 800f688:	f7fe fd6e 	bl	800e168 <USBD_LL_IsoINIncomplete>
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe fdac 	bl	800e200 <USBD_LL_DevConnected>
}
 800f6a8:	bf00      	nop
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe fda9 	bl	800e216 <USBD_LL_DevDisconnected>
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d139      	bne.n	800f750 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f6dc:	4a1f      	ldr	r2, [pc, #124]	; (800f75c <USBD_LL_Init+0x90>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a1d      	ldr	r2, [pc, #116]	; (800f75c <USBD_LL_Init+0x90>)
 800f6e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6ec:	4b1b      	ldr	r3, [pc, #108]	; (800f75c <USBD_LL_Init+0x90>)
 800f6ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f6f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f6f4:	4b19      	ldr	r3, [pc, #100]	; (800f75c <USBD_LL_Init+0x90>)
 800f6f6:	2206      	movs	r2, #6
 800f6f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f6fa:	4b18      	ldr	r3, [pc, #96]	; (800f75c <USBD_LL_Init+0x90>)
 800f6fc:	2202      	movs	r2, #2
 800f6fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f700:	4b16      	ldr	r3, [pc, #88]	; (800f75c <USBD_LL_Init+0x90>)
 800f702:	2200      	movs	r2, #0
 800f704:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f706:	4b15      	ldr	r3, [pc, #84]	; (800f75c <USBD_LL_Init+0x90>)
 800f708:	2200      	movs	r2, #0
 800f70a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f70c:	4b13      	ldr	r3, [pc, #76]	; (800f75c <USBD_LL_Init+0x90>)
 800f70e:	2200      	movs	r2, #0
 800f710:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f712:	4b12      	ldr	r3, [pc, #72]	; (800f75c <USBD_LL_Init+0x90>)
 800f714:	2200      	movs	r2, #0
 800f716:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f718:	4b10      	ldr	r3, [pc, #64]	; (800f75c <USBD_LL_Init+0x90>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f71e:	4b0f      	ldr	r3, [pc, #60]	; (800f75c <USBD_LL_Init+0x90>)
 800f720:	2200      	movs	r2, #0
 800f722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f724:	480d      	ldr	r0, [pc, #52]	; (800f75c <USBD_LL_Init+0x90>)
 800f726:	f7f3 fd67 	bl	80031f8 <HAL_PCD_Init>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d001      	beq.n	800f734 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f730:	f7f2 f94c 	bl	80019cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f734:	2180      	movs	r1, #128	; 0x80
 800f736:	4809      	ldr	r0, [pc, #36]	; (800f75c <USBD_LL_Init+0x90>)
 800f738:	f7f4 fee9 	bl	800450e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f73c:	2240      	movs	r2, #64	; 0x40
 800f73e:	2100      	movs	r1, #0
 800f740:	4806      	ldr	r0, [pc, #24]	; (800f75c <USBD_LL_Init+0x90>)
 800f742:	f7f4 fe9d 	bl	8004480 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f746:	2280      	movs	r2, #128	; 0x80
 800f748:	2101      	movs	r1, #1
 800f74a:	4804      	ldr	r0, [pc, #16]	; (800f75c <USBD_LL_Init+0x90>)
 800f74c:	f7f4 fe98 	bl	8004480 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	2000226c 	.word	0x2000226c

0800f760 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f768:	2300      	movs	r3, #0
 800f76a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f76c:	2300      	movs	r3, #0
 800f76e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f776:	4618      	mov	r0, r3
 800f778:	f7f3 fe62 	bl	8003440 <HAL_PCD_Start>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f780:	7bbb      	ldrb	r3, [r7, #14]
 800f782:	2b03      	cmp	r3, #3
 800f784:	d816      	bhi.n	800f7b4 <USBD_LL_Start+0x54>
 800f786:	a201      	add	r2, pc, #4	; (adr r2, 800f78c <USBD_LL_Start+0x2c>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f79d 	.word	0x0800f79d
 800f790:	0800f7a3 	.word	0x0800f7a3
 800f794:	0800f7a9 	.word	0x0800f7a9
 800f798:	0800f7af 	.word	0x0800f7af
    case HAL_OK :
      usb_status = USBD_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a0:	e00b      	b.n	800f7ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a6:	e008      	b.n	800f7ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f7ac:	e005      	b.n	800f7ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f7b2:	e002      	b.n	800f7ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f7b8:	bf00      	nop
  }
  return usb_status;
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	4608      	mov	r0, r1
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	70fb      	strb	r3, [r7, #3]
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	70bb      	strb	r3, [r7, #2]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f7ec:	78bb      	ldrb	r3, [r7, #2]
 800f7ee:	883a      	ldrh	r2, [r7, #0]
 800f7f0:	78f9      	ldrb	r1, [r7, #3]
 800f7f2:	f7f4 fb0c 	bl	8003e0e <HAL_PCD_EP_Open>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	d817      	bhi.n	800f830 <USBD_LL_OpenEP+0x6c>
 800f800:	a201      	add	r2, pc, #4	; (adr r2, 800f808 <USBD_LL_OpenEP+0x44>)
 800f802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f806:	bf00      	nop
 800f808:	0800f819 	.word	0x0800f819
 800f80c:	0800f81f 	.word	0x0800f81f
 800f810:	0800f825 	.word	0x0800f825
 800f814:	0800f82b 	.word	0x0800f82b
    case HAL_OK :
      usb_status = USBD_OK;
 800f818:	2300      	movs	r3, #0
 800f81a:	73fb      	strb	r3, [r7, #15]
    break;
 800f81c:	e00b      	b.n	800f836 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f81e:	2303      	movs	r3, #3
 800f820:	73fb      	strb	r3, [r7, #15]
    break;
 800f822:	e008      	b.n	800f836 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f824:	2301      	movs	r3, #1
 800f826:	73fb      	strb	r3, [r7, #15]
    break;
 800f828:	e005      	b.n	800f836 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f82a:	2303      	movs	r3, #3
 800f82c:	73fb      	strb	r3, [r7, #15]
    break;
 800f82e:	e002      	b.n	800f836 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f830:	2303      	movs	r3, #3
 800f832:	73fb      	strb	r3, [r7, #15]
    break;
 800f834:	bf00      	nop
  }
  return usb_status;
 800f836:	7bfb      	ldrb	r3, [r7, #15]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	460b      	mov	r3, r1
 800f84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f84c:	2300      	movs	r3, #0
 800f84e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f850:	2300      	movs	r3, #0
 800f852:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f85a:	78fa      	ldrb	r2, [r7, #3]
 800f85c:	4611      	mov	r1, r2
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f4 fb3d 	bl	8003ede <HAL_PCD_EP_Close>
 800f864:	4603      	mov	r3, r0
 800f866:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f868:	7bbb      	ldrb	r3, [r7, #14]
 800f86a:	2b03      	cmp	r3, #3
 800f86c:	d816      	bhi.n	800f89c <USBD_LL_CloseEP+0x5c>
 800f86e:	a201      	add	r2, pc, #4	; (adr r2, 800f874 <USBD_LL_CloseEP+0x34>)
 800f870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f874:	0800f885 	.word	0x0800f885
 800f878:	0800f88b 	.word	0x0800f88b
 800f87c:	0800f891 	.word	0x0800f891
 800f880:	0800f897 	.word	0x0800f897
    case HAL_OK :
      usb_status = USBD_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	73fb      	strb	r3, [r7, #15]
    break;
 800f888:	e00b      	b.n	800f8a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f88a:	2303      	movs	r3, #3
 800f88c:	73fb      	strb	r3, [r7, #15]
    break;
 800f88e:	e008      	b.n	800f8a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f890:	2301      	movs	r3, #1
 800f892:	73fb      	strb	r3, [r7, #15]
    break;
 800f894:	e005      	b.n	800f8a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f896:	2303      	movs	r3, #3
 800f898:	73fb      	strb	r3, [r7, #15]
    break;
 800f89a:	e002      	b.n	800f8a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f89c:	2303      	movs	r3, #3
 800f89e:	73fb      	strb	r3, [r7, #15]
    break;
 800f8a0:	bf00      	nop
  }
  return usb_status;
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8c6:	78fa      	ldrb	r2, [r7, #3]
 800f8c8:	4611      	mov	r1, r2
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f4 fbe4 	bl	8004098 <HAL_PCD_EP_SetStall>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f8d4:	7bbb      	ldrb	r3, [r7, #14]
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d816      	bhi.n	800f908 <USBD_LL_StallEP+0x5c>
 800f8da:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <USBD_LL_StallEP+0x34>)
 800f8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e0:	0800f8f1 	.word	0x0800f8f1
 800f8e4:	0800f8f7 	.word	0x0800f8f7
 800f8e8:	0800f8fd 	.word	0x0800f8fd
 800f8ec:	0800f903 	.word	0x0800f903
    case HAL_OK :
      usb_status = USBD_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f4:	e00b      	b.n	800f90e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8f6:	2303      	movs	r3, #3
 800f8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8fa:	e008      	b.n	800f90e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f900:	e005      	b.n	800f90e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f902:	2303      	movs	r3, #3
 800f904:	73fb      	strb	r3, [r7, #15]
    break;
 800f906:	e002      	b.n	800f90e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f908:	2303      	movs	r3, #3
 800f90a:	73fb      	strb	r3, [r7, #15]
    break;
 800f90c:	bf00      	nop
  }
  return usb_status;
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3710      	adds	r7, #16
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f928:	2300      	movs	r3, #0
 800f92a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f932:	78fa      	ldrb	r2, [r7, #3]
 800f934:	4611      	mov	r1, r2
 800f936:	4618      	mov	r0, r3
 800f938:	f7f4 fc10 	bl	800415c <HAL_PCD_EP_ClrStall>
 800f93c:	4603      	mov	r3, r0
 800f93e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	2b03      	cmp	r3, #3
 800f944:	d816      	bhi.n	800f974 <USBD_LL_ClearStallEP+0x5c>
 800f946:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <USBD_LL_ClearStallEP+0x34>)
 800f948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94c:	0800f95d 	.word	0x0800f95d
 800f950:	0800f963 	.word	0x0800f963
 800f954:	0800f969 	.word	0x0800f969
 800f958:	0800f96f 	.word	0x0800f96f
    case HAL_OK :
      usb_status = USBD_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	73fb      	strb	r3, [r7, #15]
    break;
 800f960:	e00b      	b.n	800f97a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f962:	2303      	movs	r3, #3
 800f964:	73fb      	strb	r3, [r7, #15]
    break;
 800f966:	e008      	b.n	800f97a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f968:	2301      	movs	r3, #1
 800f96a:	73fb      	strb	r3, [r7, #15]
    break;
 800f96c:	e005      	b.n	800f97a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f96e:	2303      	movs	r3, #3
 800f970:	73fb      	strb	r3, [r7, #15]
    break;
 800f972:	e002      	b.n	800f97a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f974:	2303      	movs	r3, #3
 800f976:	73fb      	strb	r3, [r7, #15]
    break;
 800f978:	bf00      	nop
  }
  return usb_status;
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f984:	b480      	push	{r7}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	da0b      	bge.n	800f9b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9a0:	78fb      	ldrb	r3, [r7, #3]
 800f9a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9a6:	68f9      	ldr	r1, [r7, #12]
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	00db      	lsls	r3, r3, #3
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	440b      	add	r3, r1
 800f9b2:	333e      	adds	r3, #62	; 0x3e
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	e00b      	b.n	800f9d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f9b8:	78fb      	ldrb	r3, [r7, #3]
 800f9ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9be:	68f9      	ldr	r1, [r7, #12]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f9ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9f6:	78fa      	ldrb	r2, [r7, #3]
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7f4 f9e2 	bl	8003dc4 <HAL_PCD_SetAddress>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa04:	7bbb      	ldrb	r3, [r7, #14]
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d816      	bhi.n	800fa38 <USBD_LL_SetUSBAddress+0x5c>
 800fa0a:	a201      	add	r2, pc, #4	; (adr r2, 800fa10 <USBD_LL_SetUSBAddress+0x34>)
 800fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa10:	0800fa21 	.word	0x0800fa21
 800fa14:	0800fa27 	.word	0x0800fa27
 800fa18:	0800fa2d 	.word	0x0800fa2d
 800fa1c:	0800fa33 	.word	0x0800fa33
    case HAL_OK :
      usb_status = USBD_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	73fb      	strb	r3, [r7, #15]
    break;
 800fa24:	e00b      	b.n	800fa3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa26:	2303      	movs	r3, #3
 800fa28:	73fb      	strb	r3, [r7, #15]
    break;
 800fa2a:	e008      	b.n	800fa3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa30:	e005      	b.n	800fa3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa32:	2303      	movs	r3, #3
 800fa34:	73fb      	strb	r3, [r7, #15]
    break;
 800fa36:	e002      	b.n	800fa3e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa38:	2303      	movs	r3, #3
 800fa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3c:	bf00      	nop
  }
  return usb_status;
 800fa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b086      	sub	sp, #24
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	607a      	str	r2, [r7, #4]
 800fa52:	603b      	str	r3, [r7, #0]
 800fa54:	460b      	mov	r3, r1
 800fa56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa66:	7af9      	ldrb	r1, [r7, #11]
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	f7f4 fad7 	bl	800401e <HAL_PCD_EP_Transmit>
 800fa70:	4603      	mov	r3, r0
 800fa72:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fa74:	7dbb      	ldrb	r3, [r7, #22]
 800fa76:	2b03      	cmp	r3, #3
 800fa78:	d816      	bhi.n	800faa8 <USBD_LL_Transmit+0x60>
 800fa7a:	a201      	add	r2, pc, #4	; (adr r2, 800fa80 <USBD_LL_Transmit+0x38>)
 800fa7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa80:	0800fa91 	.word	0x0800fa91
 800fa84:	0800fa97 	.word	0x0800fa97
 800fa88:	0800fa9d 	.word	0x0800fa9d
 800fa8c:	0800faa3 	.word	0x0800faa3
    case HAL_OK :
      usb_status = USBD_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	75fb      	strb	r3, [r7, #23]
    break;
 800fa94:	e00b      	b.n	800faae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa96:	2303      	movs	r3, #3
 800fa98:	75fb      	strb	r3, [r7, #23]
    break;
 800fa9a:	e008      	b.n	800faae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	75fb      	strb	r3, [r7, #23]
    break;
 800faa0:	e005      	b.n	800faae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800faa2:	2303      	movs	r3, #3
 800faa4:	75fb      	strb	r3, [r7, #23]
    break;
 800faa6:	e002      	b.n	800faae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800faa8:	2303      	movs	r3, #3
 800faaa:	75fb      	strb	r3, [r7, #23]
    break;
 800faac:	bf00      	nop
  }
  return usb_status;
 800faae:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3718      	adds	r7, #24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	607a      	str	r2, [r7, #4]
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	460b      	mov	r3, r1
 800fac6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800facc:	2300      	movs	r3, #0
 800face:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fad6:	7af9      	ldrb	r1, [r7, #11]
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	f7f4 fa49 	bl	8003f72 <HAL_PCD_EP_Receive>
 800fae0:	4603      	mov	r3, r0
 800fae2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fae4:	7dbb      	ldrb	r3, [r7, #22]
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d816      	bhi.n	800fb18 <USBD_LL_PrepareReceive+0x60>
 800faea:	a201      	add	r2, pc, #4	; (adr r2, 800faf0 <USBD_LL_PrepareReceive+0x38>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb01 	.word	0x0800fb01
 800faf4:	0800fb07 	.word	0x0800fb07
 800faf8:	0800fb0d 	.word	0x0800fb0d
 800fafc:	0800fb13 	.word	0x0800fb13
    case HAL_OK :
      usb_status = USBD_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	75fb      	strb	r3, [r7, #23]
    break;
 800fb04:	e00b      	b.n	800fb1e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb06:	2303      	movs	r3, #3
 800fb08:	75fb      	strb	r3, [r7, #23]
    break;
 800fb0a:	e008      	b.n	800fb1e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	75fb      	strb	r3, [r7, #23]
    break;
 800fb10:	e005      	b.n	800fb1e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb12:	2303      	movs	r3, #3
 800fb14:	75fb      	strb	r3, [r7, #23]
    break;
 800fb16:	e002      	b.n	800fb1e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fb18:	2303      	movs	r3, #3
 800fb1a:	75fb      	strb	r3, [r7, #23]
    break;
 800fb1c:	bf00      	nop
  }
  return usb_status;
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	460b      	mov	r3, r1
 800fb32:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb3a:	78fa      	ldrb	r2, [r7, #3]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7f4 fa55 	bl	8003fee <HAL_PCD_EP_GetRxCount>
 800fb44:	4603      	mov	r3, r0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
	...

0800fb50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fb58:	4b03      	ldr	r3, [pc, #12]	; (800fb68 <USBD_static_malloc+0x18>)
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	370c      	adds	r7, #12
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	20002778 	.word	0x20002778

0800fb6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]

}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fb84:	f7f1 fc08 	bl	8001398 <SystemClock_Config>
}
 800fb88:	bf00      	nop
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <__libc_init_array>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	4d0d      	ldr	r5, [pc, #52]	; (800fbc4 <__libc_init_array+0x38>)
 800fb90:	4c0d      	ldr	r4, [pc, #52]	; (800fbc8 <__libc_init_array+0x3c>)
 800fb92:	1b64      	subs	r4, r4, r5
 800fb94:	10a4      	asrs	r4, r4, #2
 800fb96:	2600      	movs	r6, #0
 800fb98:	42a6      	cmp	r6, r4
 800fb9a:	d109      	bne.n	800fbb0 <__libc_init_array+0x24>
 800fb9c:	4d0b      	ldr	r5, [pc, #44]	; (800fbcc <__libc_init_array+0x40>)
 800fb9e:	4c0c      	ldr	r4, [pc, #48]	; (800fbd0 <__libc_init_array+0x44>)
 800fba0:	f002 fda0 	bl	80126e4 <_init>
 800fba4:	1b64      	subs	r4, r4, r5
 800fba6:	10a4      	asrs	r4, r4, #2
 800fba8:	2600      	movs	r6, #0
 800fbaa:	42a6      	cmp	r6, r4
 800fbac:	d105      	bne.n	800fbba <__libc_init_array+0x2e>
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbb4:	4798      	blx	r3
 800fbb6:	3601      	adds	r6, #1
 800fbb8:	e7ee      	b.n	800fb98 <__libc_init_array+0xc>
 800fbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbbe:	4798      	blx	r3
 800fbc0:	3601      	adds	r6, #1
 800fbc2:	e7f2      	b.n	800fbaa <__libc_init_array+0x1e>
 800fbc4:	08012e00 	.word	0x08012e00
 800fbc8:	08012e00 	.word	0x08012e00
 800fbcc:	08012e00 	.word	0x08012e00
 800fbd0:	08012e04 	.word	0x08012e04

0800fbd4 <malloc>:
 800fbd4:	4b02      	ldr	r3, [pc, #8]	; (800fbe0 <malloc+0xc>)
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	6818      	ldr	r0, [r3, #0]
 800fbda:	f000 b885 	b.w	800fce8 <_malloc_r>
 800fbde:	bf00      	nop
 800fbe0:	20000188 	.word	0x20000188

0800fbe4 <memcpy>:
 800fbe4:	440a      	add	r2, r1
 800fbe6:	4291      	cmp	r1, r2
 800fbe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbec:	d100      	bne.n	800fbf0 <memcpy+0xc>
 800fbee:	4770      	bx	lr
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbfa:	4291      	cmp	r1, r2
 800fbfc:	d1f9      	bne.n	800fbf2 <memcpy+0xe>
 800fbfe:	bd10      	pop	{r4, pc}

0800fc00 <memset>:
 800fc00:	4402      	add	r2, r0
 800fc02:	4603      	mov	r3, r0
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d100      	bne.n	800fc0a <memset+0xa>
 800fc08:	4770      	bx	lr
 800fc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc0e:	e7f9      	b.n	800fc04 <memset+0x4>

0800fc10 <_free_r>:
 800fc10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc12:	2900      	cmp	r1, #0
 800fc14:	d044      	beq.n	800fca0 <_free_r+0x90>
 800fc16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc1a:	9001      	str	r0, [sp, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f1a1 0404 	sub.w	r4, r1, #4
 800fc22:	bfb8      	it	lt
 800fc24:	18e4      	addlt	r4, r4, r3
 800fc26:	f001 fd1f 	bl	8011668 <__malloc_lock>
 800fc2a:	4a1e      	ldr	r2, [pc, #120]	; (800fca4 <_free_r+0x94>)
 800fc2c:	9801      	ldr	r0, [sp, #4]
 800fc2e:	6813      	ldr	r3, [r2, #0]
 800fc30:	b933      	cbnz	r3, 800fc40 <_free_r+0x30>
 800fc32:	6063      	str	r3, [r4, #4]
 800fc34:	6014      	str	r4, [r2, #0]
 800fc36:	b003      	add	sp, #12
 800fc38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc3c:	f001 bd1a 	b.w	8011674 <__malloc_unlock>
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	d908      	bls.n	800fc56 <_free_r+0x46>
 800fc44:	6825      	ldr	r5, [r4, #0]
 800fc46:	1961      	adds	r1, r4, r5
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	bf01      	itttt	eq
 800fc4c:	6819      	ldreq	r1, [r3, #0]
 800fc4e:	685b      	ldreq	r3, [r3, #4]
 800fc50:	1949      	addeq	r1, r1, r5
 800fc52:	6021      	streq	r1, [r4, #0]
 800fc54:	e7ed      	b.n	800fc32 <_free_r+0x22>
 800fc56:	461a      	mov	r2, r3
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	b10b      	cbz	r3, 800fc60 <_free_r+0x50>
 800fc5c:	42a3      	cmp	r3, r4
 800fc5e:	d9fa      	bls.n	800fc56 <_free_r+0x46>
 800fc60:	6811      	ldr	r1, [r2, #0]
 800fc62:	1855      	adds	r5, r2, r1
 800fc64:	42a5      	cmp	r5, r4
 800fc66:	d10b      	bne.n	800fc80 <_free_r+0x70>
 800fc68:	6824      	ldr	r4, [r4, #0]
 800fc6a:	4421      	add	r1, r4
 800fc6c:	1854      	adds	r4, r2, r1
 800fc6e:	42a3      	cmp	r3, r4
 800fc70:	6011      	str	r1, [r2, #0]
 800fc72:	d1e0      	bne.n	800fc36 <_free_r+0x26>
 800fc74:	681c      	ldr	r4, [r3, #0]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	6053      	str	r3, [r2, #4]
 800fc7a:	4421      	add	r1, r4
 800fc7c:	6011      	str	r1, [r2, #0]
 800fc7e:	e7da      	b.n	800fc36 <_free_r+0x26>
 800fc80:	d902      	bls.n	800fc88 <_free_r+0x78>
 800fc82:	230c      	movs	r3, #12
 800fc84:	6003      	str	r3, [r0, #0]
 800fc86:	e7d6      	b.n	800fc36 <_free_r+0x26>
 800fc88:	6825      	ldr	r5, [r4, #0]
 800fc8a:	1961      	adds	r1, r4, r5
 800fc8c:	428b      	cmp	r3, r1
 800fc8e:	bf04      	itt	eq
 800fc90:	6819      	ldreq	r1, [r3, #0]
 800fc92:	685b      	ldreq	r3, [r3, #4]
 800fc94:	6063      	str	r3, [r4, #4]
 800fc96:	bf04      	itt	eq
 800fc98:	1949      	addeq	r1, r1, r5
 800fc9a:	6021      	streq	r1, [r4, #0]
 800fc9c:	6054      	str	r4, [r2, #4]
 800fc9e:	e7ca      	b.n	800fc36 <_free_r+0x26>
 800fca0:	b003      	add	sp, #12
 800fca2:	bd30      	pop	{r4, r5, pc}
 800fca4:	20002998 	.word	0x20002998

0800fca8 <sbrk_aligned>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	4e0e      	ldr	r6, [pc, #56]	; (800fce4 <sbrk_aligned+0x3c>)
 800fcac:	460c      	mov	r4, r1
 800fcae:	6831      	ldr	r1, [r6, #0]
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	b911      	cbnz	r1, 800fcba <sbrk_aligned+0x12>
 800fcb4:	f000 fd0e 	bl	80106d4 <_sbrk_r>
 800fcb8:	6030      	str	r0, [r6, #0]
 800fcba:	4621      	mov	r1, r4
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	f000 fd09 	bl	80106d4 <_sbrk_r>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d00a      	beq.n	800fcdc <sbrk_aligned+0x34>
 800fcc6:	1cc4      	adds	r4, r0, #3
 800fcc8:	f024 0403 	bic.w	r4, r4, #3
 800fccc:	42a0      	cmp	r0, r4
 800fcce:	d007      	beq.n	800fce0 <sbrk_aligned+0x38>
 800fcd0:	1a21      	subs	r1, r4, r0
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f000 fcfe 	bl	80106d4 <_sbrk_r>
 800fcd8:	3001      	adds	r0, #1
 800fcda:	d101      	bne.n	800fce0 <sbrk_aligned+0x38>
 800fcdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fce0:	4620      	mov	r0, r4
 800fce2:	bd70      	pop	{r4, r5, r6, pc}
 800fce4:	2000299c 	.word	0x2000299c

0800fce8 <_malloc_r>:
 800fce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcec:	1ccd      	adds	r5, r1, #3
 800fcee:	f025 0503 	bic.w	r5, r5, #3
 800fcf2:	3508      	adds	r5, #8
 800fcf4:	2d0c      	cmp	r5, #12
 800fcf6:	bf38      	it	cc
 800fcf8:	250c      	movcc	r5, #12
 800fcfa:	2d00      	cmp	r5, #0
 800fcfc:	4607      	mov	r7, r0
 800fcfe:	db01      	blt.n	800fd04 <_malloc_r+0x1c>
 800fd00:	42a9      	cmp	r1, r5
 800fd02:	d905      	bls.n	800fd10 <_malloc_r+0x28>
 800fd04:	230c      	movs	r3, #12
 800fd06:	603b      	str	r3, [r7, #0]
 800fd08:	2600      	movs	r6, #0
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd10:	4e2e      	ldr	r6, [pc, #184]	; (800fdcc <_malloc_r+0xe4>)
 800fd12:	f001 fca9 	bl	8011668 <__malloc_lock>
 800fd16:	6833      	ldr	r3, [r6, #0]
 800fd18:	461c      	mov	r4, r3
 800fd1a:	bb34      	cbnz	r4, 800fd6a <_malloc_r+0x82>
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	4638      	mov	r0, r7
 800fd20:	f7ff ffc2 	bl	800fca8 <sbrk_aligned>
 800fd24:	1c43      	adds	r3, r0, #1
 800fd26:	4604      	mov	r4, r0
 800fd28:	d14d      	bne.n	800fdc6 <_malloc_r+0xde>
 800fd2a:	6834      	ldr	r4, [r6, #0]
 800fd2c:	4626      	mov	r6, r4
 800fd2e:	2e00      	cmp	r6, #0
 800fd30:	d140      	bne.n	800fdb4 <_malloc_r+0xcc>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	4631      	mov	r1, r6
 800fd36:	4638      	mov	r0, r7
 800fd38:	eb04 0803 	add.w	r8, r4, r3
 800fd3c:	f000 fcca 	bl	80106d4 <_sbrk_r>
 800fd40:	4580      	cmp	r8, r0
 800fd42:	d13a      	bne.n	800fdba <_malloc_r+0xd2>
 800fd44:	6821      	ldr	r1, [r4, #0]
 800fd46:	3503      	adds	r5, #3
 800fd48:	1a6d      	subs	r5, r5, r1
 800fd4a:	f025 0503 	bic.w	r5, r5, #3
 800fd4e:	3508      	adds	r5, #8
 800fd50:	2d0c      	cmp	r5, #12
 800fd52:	bf38      	it	cc
 800fd54:	250c      	movcc	r5, #12
 800fd56:	4629      	mov	r1, r5
 800fd58:	4638      	mov	r0, r7
 800fd5a:	f7ff ffa5 	bl	800fca8 <sbrk_aligned>
 800fd5e:	3001      	adds	r0, #1
 800fd60:	d02b      	beq.n	800fdba <_malloc_r+0xd2>
 800fd62:	6823      	ldr	r3, [r4, #0]
 800fd64:	442b      	add	r3, r5
 800fd66:	6023      	str	r3, [r4, #0]
 800fd68:	e00e      	b.n	800fd88 <_malloc_r+0xa0>
 800fd6a:	6822      	ldr	r2, [r4, #0]
 800fd6c:	1b52      	subs	r2, r2, r5
 800fd6e:	d41e      	bmi.n	800fdae <_malloc_r+0xc6>
 800fd70:	2a0b      	cmp	r2, #11
 800fd72:	d916      	bls.n	800fda2 <_malloc_r+0xba>
 800fd74:	1961      	adds	r1, r4, r5
 800fd76:	42a3      	cmp	r3, r4
 800fd78:	6025      	str	r5, [r4, #0]
 800fd7a:	bf18      	it	ne
 800fd7c:	6059      	strne	r1, [r3, #4]
 800fd7e:	6863      	ldr	r3, [r4, #4]
 800fd80:	bf08      	it	eq
 800fd82:	6031      	streq	r1, [r6, #0]
 800fd84:	5162      	str	r2, [r4, r5]
 800fd86:	604b      	str	r3, [r1, #4]
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f104 060b 	add.w	r6, r4, #11
 800fd8e:	f001 fc71 	bl	8011674 <__malloc_unlock>
 800fd92:	f026 0607 	bic.w	r6, r6, #7
 800fd96:	1d23      	adds	r3, r4, #4
 800fd98:	1af2      	subs	r2, r6, r3
 800fd9a:	d0b6      	beq.n	800fd0a <_malloc_r+0x22>
 800fd9c:	1b9b      	subs	r3, r3, r6
 800fd9e:	50a3      	str	r3, [r4, r2]
 800fda0:	e7b3      	b.n	800fd0a <_malloc_r+0x22>
 800fda2:	6862      	ldr	r2, [r4, #4]
 800fda4:	42a3      	cmp	r3, r4
 800fda6:	bf0c      	ite	eq
 800fda8:	6032      	streq	r2, [r6, #0]
 800fdaa:	605a      	strne	r2, [r3, #4]
 800fdac:	e7ec      	b.n	800fd88 <_malloc_r+0xa0>
 800fdae:	4623      	mov	r3, r4
 800fdb0:	6864      	ldr	r4, [r4, #4]
 800fdb2:	e7b2      	b.n	800fd1a <_malloc_r+0x32>
 800fdb4:	4634      	mov	r4, r6
 800fdb6:	6876      	ldr	r6, [r6, #4]
 800fdb8:	e7b9      	b.n	800fd2e <_malloc_r+0x46>
 800fdba:	230c      	movs	r3, #12
 800fdbc:	603b      	str	r3, [r7, #0]
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	f001 fc58 	bl	8011674 <__malloc_unlock>
 800fdc4:	e7a1      	b.n	800fd0a <_malloc_r+0x22>
 800fdc6:	6025      	str	r5, [r4, #0]
 800fdc8:	e7de      	b.n	800fd88 <_malloc_r+0xa0>
 800fdca:	bf00      	nop
 800fdcc:	20002998 	.word	0x20002998

0800fdd0 <__cvt>:
 800fdd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd4:	ec55 4b10 	vmov	r4, r5, d0
 800fdd8:	2d00      	cmp	r5, #0
 800fdda:	460e      	mov	r6, r1
 800fddc:	4619      	mov	r1, r3
 800fdde:	462b      	mov	r3, r5
 800fde0:	bfbb      	ittet	lt
 800fde2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fde6:	461d      	movlt	r5, r3
 800fde8:	2300      	movge	r3, #0
 800fdea:	232d      	movlt	r3, #45	; 0x2d
 800fdec:	700b      	strb	r3, [r1, #0]
 800fdee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fdf4:	4691      	mov	r9, r2
 800fdf6:	f023 0820 	bic.w	r8, r3, #32
 800fdfa:	bfbc      	itt	lt
 800fdfc:	4622      	movlt	r2, r4
 800fdfe:	4614      	movlt	r4, r2
 800fe00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe04:	d005      	beq.n	800fe12 <__cvt+0x42>
 800fe06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fe0a:	d100      	bne.n	800fe0e <__cvt+0x3e>
 800fe0c:	3601      	adds	r6, #1
 800fe0e:	2102      	movs	r1, #2
 800fe10:	e000      	b.n	800fe14 <__cvt+0x44>
 800fe12:	2103      	movs	r1, #3
 800fe14:	ab03      	add	r3, sp, #12
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	ab02      	add	r3, sp, #8
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	ec45 4b10 	vmov	d0, r4, r5
 800fe20:	4653      	mov	r3, sl
 800fe22:	4632      	mov	r2, r6
 800fe24:	f000 fd10 	bl	8010848 <_dtoa_r>
 800fe28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fe2c:	4607      	mov	r7, r0
 800fe2e:	d102      	bne.n	800fe36 <__cvt+0x66>
 800fe30:	f019 0f01 	tst.w	r9, #1
 800fe34:	d022      	beq.n	800fe7c <__cvt+0xac>
 800fe36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe3a:	eb07 0906 	add.w	r9, r7, r6
 800fe3e:	d110      	bne.n	800fe62 <__cvt+0x92>
 800fe40:	783b      	ldrb	r3, [r7, #0]
 800fe42:	2b30      	cmp	r3, #48	; 0x30
 800fe44:	d10a      	bne.n	800fe5c <__cvt+0x8c>
 800fe46:	2200      	movs	r2, #0
 800fe48:	2300      	movs	r3, #0
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	f7f0 fe53 	bl	8000af8 <__aeabi_dcmpeq>
 800fe52:	b918      	cbnz	r0, 800fe5c <__cvt+0x8c>
 800fe54:	f1c6 0601 	rsb	r6, r6, #1
 800fe58:	f8ca 6000 	str.w	r6, [sl]
 800fe5c:	f8da 3000 	ldr.w	r3, [sl]
 800fe60:	4499      	add	r9, r3
 800fe62:	2200      	movs	r2, #0
 800fe64:	2300      	movs	r3, #0
 800fe66:	4620      	mov	r0, r4
 800fe68:	4629      	mov	r1, r5
 800fe6a:	f7f0 fe45 	bl	8000af8 <__aeabi_dcmpeq>
 800fe6e:	b108      	cbz	r0, 800fe74 <__cvt+0xa4>
 800fe70:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe74:	2230      	movs	r2, #48	; 0x30
 800fe76:	9b03      	ldr	r3, [sp, #12]
 800fe78:	454b      	cmp	r3, r9
 800fe7a:	d307      	bcc.n	800fe8c <__cvt+0xbc>
 800fe7c:	9b03      	ldr	r3, [sp, #12]
 800fe7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe80:	1bdb      	subs	r3, r3, r7
 800fe82:	4638      	mov	r0, r7
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	b004      	add	sp, #16
 800fe88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8c:	1c59      	adds	r1, r3, #1
 800fe8e:	9103      	str	r1, [sp, #12]
 800fe90:	701a      	strb	r2, [r3, #0]
 800fe92:	e7f0      	b.n	800fe76 <__cvt+0xa6>

0800fe94 <__exponent>:
 800fe94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe96:	4603      	mov	r3, r0
 800fe98:	2900      	cmp	r1, #0
 800fe9a:	bfb8      	it	lt
 800fe9c:	4249      	neglt	r1, r1
 800fe9e:	f803 2b02 	strb.w	r2, [r3], #2
 800fea2:	bfb4      	ite	lt
 800fea4:	222d      	movlt	r2, #45	; 0x2d
 800fea6:	222b      	movge	r2, #43	; 0x2b
 800fea8:	2909      	cmp	r1, #9
 800feaa:	7042      	strb	r2, [r0, #1]
 800feac:	dd2a      	ble.n	800ff04 <__exponent+0x70>
 800feae:	f10d 0407 	add.w	r4, sp, #7
 800feb2:	46a4      	mov	ip, r4
 800feb4:	270a      	movs	r7, #10
 800feb6:	46a6      	mov	lr, r4
 800feb8:	460a      	mov	r2, r1
 800feba:	fb91 f6f7 	sdiv	r6, r1, r7
 800febe:	fb07 1516 	mls	r5, r7, r6, r1
 800fec2:	3530      	adds	r5, #48	; 0x30
 800fec4:	2a63      	cmp	r2, #99	; 0x63
 800fec6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800feca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fece:	4631      	mov	r1, r6
 800fed0:	dcf1      	bgt.n	800feb6 <__exponent+0x22>
 800fed2:	3130      	adds	r1, #48	; 0x30
 800fed4:	f1ae 0502 	sub.w	r5, lr, #2
 800fed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fedc:	1c44      	adds	r4, r0, #1
 800fede:	4629      	mov	r1, r5
 800fee0:	4561      	cmp	r1, ip
 800fee2:	d30a      	bcc.n	800fefa <__exponent+0x66>
 800fee4:	f10d 0209 	add.w	r2, sp, #9
 800fee8:	eba2 020e 	sub.w	r2, r2, lr
 800feec:	4565      	cmp	r5, ip
 800feee:	bf88      	it	hi
 800fef0:	2200      	movhi	r2, #0
 800fef2:	4413      	add	r3, r2
 800fef4:	1a18      	subs	r0, r3, r0
 800fef6:	b003      	add	sp, #12
 800fef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fefe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff02:	e7ed      	b.n	800fee0 <__exponent+0x4c>
 800ff04:	2330      	movs	r3, #48	; 0x30
 800ff06:	3130      	adds	r1, #48	; 0x30
 800ff08:	7083      	strb	r3, [r0, #2]
 800ff0a:	70c1      	strb	r1, [r0, #3]
 800ff0c:	1d03      	adds	r3, r0, #4
 800ff0e:	e7f1      	b.n	800fef4 <__exponent+0x60>

0800ff10 <_printf_float>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	ed2d 8b02 	vpush	{d8}
 800ff18:	b08d      	sub	sp, #52	; 0x34
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ff20:	4616      	mov	r6, r2
 800ff22:	461f      	mov	r7, r3
 800ff24:	4605      	mov	r5, r0
 800ff26:	f001 fb85 	bl	8011634 <_localeconv_r>
 800ff2a:	f8d0 a000 	ldr.w	sl, [r0]
 800ff2e:	4650      	mov	r0, sl
 800ff30:	f7f0 f966 	bl	8000200 <strlen>
 800ff34:	2300      	movs	r3, #0
 800ff36:	930a      	str	r3, [sp, #40]	; 0x28
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	9305      	str	r3, [sp, #20]
 800ff3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ff44:	3307      	adds	r3, #7
 800ff46:	f023 0307 	bic.w	r3, r3, #7
 800ff4a:	f103 0208 	add.w	r2, r3, #8
 800ff4e:	f8c8 2000 	str.w	r2, [r8]
 800ff52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ff5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ff5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff62:	9307      	str	r3, [sp, #28]
 800ff64:	f8cd 8018 	str.w	r8, [sp, #24]
 800ff68:	ee08 0a10 	vmov	s16, r0
 800ff6c:	4b9f      	ldr	r3, [pc, #636]	; (80101ec <_printf_float+0x2dc>)
 800ff6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff76:	f7f0 fdf1 	bl	8000b5c <__aeabi_dcmpun>
 800ff7a:	bb88      	cbnz	r0, 800ffe0 <_printf_float+0xd0>
 800ff7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff80:	4b9a      	ldr	r3, [pc, #616]	; (80101ec <_printf_float+0x2dc>)
 800ff82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff86:	f7f0 fdcb 	bl	8000b20 <__aeabi_dcmple>
 800ff8a:	bb48      	cbnz	r0, 800ffe0 <_printf_float+0xd0>
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2300      	movs	r3, #0
 800ff90:	4640      	mov	r0, r8
 800ff92:	4649      	mov	r1, r9
 800ff94:	f7f0 fdba 	bl	8000b0c <__aeabi_dcmplt>
 800ff98:	b110      	cbz	r0, 800ffa0 <_printf_float+0x90>
 800ff9a:	232d      	movs	r3, #45	; 0x2d
 800ff9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffa0:	4b93      	ldr	r3, [pc, #588]	; (80101f0 <_printf_float+0x2e0>)
 800ffa2:	4894      	ldr	r0, [pc, #592]	; (80101f4 <_printf_float+0x2e4>)
 800ffa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ffa8:	bf94      	ite	ls
 800ffaa:	4698      	movls	r8, r3
 800ffac:	4680      	movhi	r8, r0
 800ffae:	2303      	movs	r3, #3
 800ffb0:	6123      	str	r3, [r4, #16]
 800ffb2:	9b05      	ldr	r3, [sp, #20]
 800ffb4:	f023 0204 	bic.w	r2, r3, #4
 800ffb8:	6022      	str	r2, [r4, #0]
 800ffba:	f04f 0900 	mov.w	r9, #0
 800ffbe:	9700      	str	r7, [sp, #0]
 800ffc0:	4633      	mov	r3, r6
 800ffc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f000 f9d8 	bl	801037c <_printf_common>
 800ffcc:	3001      	adds	r0, #1
 800ffce:	f040 8090 	bne.w	80100f2 <_printf_float+0x1e2>
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffd6:	b00d      	add	sp, #52	; 0x34
 800ffd8:	ecbd 8b02 	vpop	{d8}
 800ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe0:	4642      	mov	r2, r8
 800ffe2:	464b      	mov	r3, r9
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	f7f0 fdb8 	bl	8000b5c <__aeabi_dcmpun>
 800ffec:	b140      	cbz	r0, 8010000 <_printf_float+0xf0>
 800ffee:	464b      	mov	r3, r9
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	bfbc      	itt	lt
 800fff4:	232d      	movlt	r3, #45	; 0x2d
 800fff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fffa:	487f      	ldr	r0, [pc, #508]	; (80101f8 <_printf_float+0x2e8>)
 800fffc:	4b7f      	ldr	r3, [pc, #508]	; (80101fc <_printf_float+0x2ec>)
 800fffe:	e7d1      	b.n	800ffa4 <_printf_float+0x94>
 8010000:	6863      	ldr	r3, [r4, #4]
 8010002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010006:	9206      	str	r2, [sp, #24]
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	d13f      	bne.n	801008c <_printf_float+0x17c>
 801000c:	2306      	movs	r3, #6
 801000e:	6063      	str	r3, [r4, #4]
 8010010:	9b05      	ldr	r3, [sp, #20]
 8010012:	6861      	ldr	r1, [r4, #4]
 8010014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010018:	2300      	movs	r3, #0
 801001a:	9303      	str	r3, [sp, #12]
 801001c:	ab0a      	add	r3, sp, #40	; 0x28
 801001e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010022:	ab09      	add	r3, sp, #36	; 0x24
 8010024:	ec49 8b10 	vmov	d0, r8, r9
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	6022      	str	r2, [r4, #0]
 801002c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010030:	4628      	mov	r0, r5
 8010032:	f7ff fecd 	bl	800fdd0 <__cvt>
 8010036:	9b06      	ldr	r3, [sp, #24]
 8010038:	9909      	ldr	r1, [sp, #36]	; 0x24
 801003a:	2b47      	cmp	r3, #71	; 0x47
 801003c:	4680      	mov	r8, r0
 801003e:	d108      	bne.n	8010052 <_printf_float+0x142>
 8010040:	1cc8      	adds	r0, r1, #3
 8010042:	db02      	blt.n	801004a <_printf_float+0x13a>
 8010044:	6863      	ldr	r3, [r4, #4]
 8010046:	4299      	cmp	r1, r3
 8010048:	dd41      	ble.n	80100ce <_printf_float+0x1be>
 801004a:	f1ab 0b02 	sub.w	fp, fp, #2
 801004e:	fa5f fb8b 	uxtb.w	fp, fp
 8010052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010056:	d820      	bhi.n	801009a <_printf_float+0x18a>
 8010058:	3901      	subs	r1, #1
 801005a:	465a      	mov	r2, fp
 801005c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010060:	9109      	str	r1, [sp, #36]	; 0x24
 8010062:	f7ff ff17 	bl	800fe94 <__exponent>
 8010066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010068:	1813      	adds	r3, r2, r0
 801006a:	2a01      	cmp	r2, #1
 801006c:	4681      	mov	r9, r0
 801006e:	6123      	str	r3, [r4, #16]
 8010070:	dc02      	bgt.n	8010078 <_printf_float+0x168>
 8010072:	6822      	ldr	r2, [r4, #0]
 8010074:	07d2      	lsls	r2, r2, #31
 8010076:	d501      	bpl.n	801007c <_printf_float+0x16c>
 8010078:	3301      	adds	r3, #1
 801007a:	6123      	str	r3, [r4, #16]
 801007c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010080:	2b00      	cmp	r3, #0
 8010082:	d09c      	beq.n	800ffbe <_printf_float+0xae>
 8010084:	232d      	movs	r3, #45	; 0x2d
 8010086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801008a:	e798      	b.n	800ffbe <_printf_float+0xae>
 801008c:	9a06      	ldr	r2, [sp, #24]
 801008e:	2a47      	cmp	r2, #71	; 0x47
 8010090:	d1be      	bne.n	8010010 <_printf_float+0x100>
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1bc      	bne.n	8010010 <_printf_float+0x100>
 8010096:	2301      	movs	r3, #1
 8010098:	e7b9      	b.n	801000e <_printf_float+0xfe>
 801009a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801009e:	d118      	bne.n	80100d2 <_printf_float+0x1c2>
 80100a0:	2900      	cmp	r1, #0
 80100a2:	6863      	ldr	r3, [r4, #4]
 80100a4:	dd0b      	ble.n	80100be <_printf_float+0x1ae>
 80100a6:	6121      	str	r1, [r4, #16]
 80100a8:	b913      	cbnz	r3, 80100b0 <_printf_float+0x1a0>
 80100aa:	6822      	ldr	r2, [r4, #0]
 80100ac:	07d0      	lsls	r0, r2, #31
 80100ae:	d502      	bpl.n	80100b6 <_printf_float+0x1a6>
 80100b0:	3301      	adds	r3, #1
 80100b2:	440b      	add	r3, r1
 80100b4:	6123      	str	r3, [r4, #16]
 80100b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80100b8:	f04f 0900 	mov.w	r9, #0
 80100bc:	e7de      	b.n	801007c <_printf_float+0x16c>
 80100be:	b913      	cbnz	r3, 80100c6 <_printf_float+0x1b6>
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	07d2      	lsls	r2, r2, #31
 80100c4:	d501      	bpl.n	80100ca <_printf_float+0x1ba>
 80100c6:	3302      	adds	r3, #2
 80100c8:	e7f4      	b.n	80100b4 <_printf_float+0x1a4>
 80100ca:	2301      	movs	r3, #1
 80100cc:	e7f2      	b.n	80100b4 <_printf_float+0x1a4>
 80100ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80100d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100d4:	4299      	cmp	r1, r3
 80100d6:	db05      	blt.n	80100e4 <_printf_float+0x1d4>
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	6121      	str	r1, [r4, #16]
 80100dc:	07d8      	lsls	r0, r3, #31
 80100de:	d5ea      	bpl.n	80100b6 <_printf_float+0x1a6>
 80100e0:	1c4b      	adds	r3, r1, #1
 80100e2:	e7e7      	b.n	80100b4 <_printf_float+0x1a4>
 80100e4:	2900      	cmp	r1, #0
 80100e6:	bfd4      	ite	le
 80100e8:	f1c1 0202 	rsble	r2, r1, #2
 80100ec:	2201      	movgt	r2, #1
 80100ee:	4413      	add	r3, r2
 80100f0:	e7e0      	b.n	80100b4 <_printf_float+0x1a4>
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	055a      	lsls	r2, r3, #21
 80100f6:	d407      	bmi.n	8010108 <_printf_float+0x1f8>
 80100f8:	6923      	ldr	r3, [r4, #16]
 80100fa:	4642      	mov	r2, r8
 80100fc:	4631      	mov	r1, r6
 80100fe:	4628      	mov	r0, r5
 8010100:	47b8      	blx	r7
 8010102:	3001      	adds	r0, #1
 8010104:	d12c      	bne.n	8010160 <_printf_float+0x250>
 8010106:	e764      	b.n	800ffd2 <_printf_float+0xc2>
 8010108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801010c:	f240 80e0 	bls.w	80102d0 <_printf_float+0x3c0>
 8010110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010114:	2200      	movs	r2, #0
 8010116:	2300      	movs	r3, #0
 8010118:	f7f0 fcee 	bl	8000af8 <__aeabi_dcmpeq>
 801011c:	2800      	cmp	r0, #0
 801011e:	d034      	beq.n	801018a <_printf_float+0x27a>
 8010120:	4a37      	ldr	r2, [pc, #220]	; (8010200 <_printf_float+0x2f0>)
 8010122:	2301      	movs	r3, #1
 8010124:	4631      	mov	r1, r6
 8010126:	4628      	mov	r0, r5
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f af51 	beq.w	800ffd2 <_printf_float+0xc2>
 8010130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010134:	429a      	cmp	r2, r3
 8010136:	db02      	blt.n	801013e <_printf_float+0x22e>
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	07d8      	lsls	r0, r3, #31
 801013c:	d510      	bpl.n	8010160 <_printf_float+0x250>
 801013e:	ee18 3a10 	vmov	r3, s16
 8010142:	4652      	mov	r2, sl
 8010144:	4631      	mov	r1, r6
 8010146:	4628      	mov	r0, r5
 8010148:	47b8      	blx	r7
 801014a:	3001      	adds	r0, #1
 801014c:	f43f af41 	beq.w	800ffd2 <_printf_float+0xc2>
 8010150:	f04f 0800 	mov.w	r8, #0
 8010154:	f104 091a 	add.w	r9, r4, #26
 8010158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801015a:	3b01      	subs	r3, #1
 801015c:	4543      	cmp	r3, r8
 801015e:	dc09      	bgt.n	8010174 <_printf_float+0x264>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	079b      	lsls	r3, r3, #30
 8010164:	f100 8105 	bmi.w	8010372 <_printf_float+0x462>
 8010168:	68e0      	ldr	r0, [r4, #12]
 801016a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801016c:	4298      	cmp	r0, r3
 801016e:	bfb8      	it	lt
 8010170:	4618      	movlt	r0, r3
 8010172:	e730      	b.n	800ffd6 <_printf_float+0xc6>
 8010174:	2301      	movs	r3, #1
 8010176:	464a      	mov	r2, r9
 8010178:	4631      	mov	r1, r6
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	f43f af27 	beq.w	800ffd2 <_printf_float+0xc2>
 8010184:	f108 0801 	add.w	r8, r8, #1
 8010188:	e7e6      	b.n	8010158 <_printf_float+0x248>
 801018a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018c:	2b00      	cmp	r3, #0
 801018e:	dc39      	bgt.n	8010204 <_printf_float+0x2f4>
 8010190:	4a1b      	ldr	r2, [pc, #108]	; (8010200 <_printf_float+0x2f0>)
 8010192:	2301      	movs	r3, #1
 8010194:	4631      	mov	r1, r6
 8010196:	4628      	mov	r0, r5
 8010198:	47b8      	blx	r7
 801019a:	3001      	adds	r0, #1
 801019c:	f43f af19 	beq.w	800ffd2 <_printf_float+0xc2>
 80101a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101a4:	4313      	orrs	r3, r2
 80101a6:	d102      	bne.n	80101ae <_printf_float+0x29e>
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	07d9      	lsls	r1, r3, #31
 80101ac:	d5d8      	bpl.n	8010160 <_printf_float+0x250>
 80101ae:	ee18 3a10 	vmov	r3, s16
 80101b2:	4652      	mov	r2, sl
 80101b4:	4631      	mov	r1, r6
 80101b6:	4628      	mov	r0, r5
 80101b8:	47b8      	blx	r7
 80101ba:	3001      	adds	r0, #1
 80101bc:	f43f af09 	beq.w	800ffd2 <_printf_float+0xc2>
 80101c0:	f04f 0900 	mov.w	r9, #0
 80101c4:	f104 0a1a 	add.w	sl, r4, #26
 80101c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ca:	425b      	negs	r3, r3
 80101cc:	454b      	cmp	r3, r9
 80101ce:	dc01      	bgt.n	80101d4 <_printf_float+0x2c4>
 80101d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d2:	e792      	b.n	80100fa <_printf_float+0x1ea>
 80101d4:	2301      	movs	r3, #1
 80101d6:	4652      	mov	r2, sl
 80101d8:	4631      	mov	r1, r6
 80101da:	4628      	mov	r0, r5
 80101dc:	47b8      	blx	r7
 80101de:	3001      	adds	r0, #1
 80101e0:	f43f aef7 	beq.w	800ffd2 <_printf_float+0xc2>
 80101e4:	f109 0901 	add.w	r9, r9, #1
 80101e8:	e7ee      	b.n	80101c8 <_printf_float+0x2b8>
 80101ea:	bf00      	nop
 80101ec:	7fefffff 	.word	0x7fefffff
 80101f0:	08012a1c 	.word	0x08012a1c
 80101f4:	08012a20 	.word	0x08012a20
 80101f8:	08012a28 	.word	0x08012a28
 80101fc:	08012a24 	.word	0x08012a24
 8010200:	08012a2c 	.word	0x08012a2c
 8010204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010208:	429a      	cmp	r2, r3
 801020a:	bfa8      	it	ge
 801020c:	461a      	movge	r2, r3
 801020e:	2a00      	cmp	r2, #0
 8010210:	4691      	mov	r9, r2
 8010212:	dc37      	bgt.n	8010284 <_printf_float+0x374>
 8010214:	f04f 0b00 	mov.w	fp, #0
 8010218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801021c:	f104 021a 	add.w	r2, r4, #26
 8010220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010222:	9305      	str	r3, [sp, #20]
 8010224:	eba3 0309 	sub.w	r3, r3, r9
 8010228:	455b      	cmp	r3, fp
 801022a:	dc33      	bgt.n	8010294 <_printf_float+0x384>
 801022c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010230:	429a      	cmp	r2, r3
 8010232:	db3b      	blt.n	80102ac <_printf_float+0x39c>
 8010234:	6823      	ldr	r3, [r4, #0]
 8010236:	07da      	lsls	r2, r3, #31
 8010238:	d438      	bmi.n	80102ac <_printf_float+0x39c>
 801023a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801023c:	9a05      	ldr	r2, [sp, #20]
 801023e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010240:	1a9a      	subs	r2, r3, r2
 8010242:	eba3 0901 	sub.w	r9, r3, r1
 8010246:	4591      	cmp	r9, r2
 8010248:	bfa8      	it	ge
 801024a:	4691      	movge	r9, r2
 801024c:	f1b9 0f00 	cmp.w	r9, #0
 8010250:	dc35      	bgt.n	80102be <_printf_float+0x3ae>
 8010252:	f04f 0800 	mov.w	r8, #0
 8010256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801025a:	f104 0a1a 	add.w	sl, r4, #26
 801025e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010262:	1a9b      	subs	r3, r3, r2
 8010264:	eba3 0309 	sub.w	r3, r3, r9
 8010268:	4543      	cmp	r3, r8
 801026a:	f77f af79 	ble.w	8010160 <_printf_float+0x250>
 801026e:	2301      	movs	r3, #1
 8010270:	4652      	mov	r2, sl
 8010272:	4631      	mov	r1, r6
 8010274:	4628      	mov	r0, r5
 8010276:	47b8      	blx	r7
 8010278:	3001      	adds	r0, #1
 801027a:	f43f aeaa 	beq.w	800ffd2 <_printf_float+0xc2>
 801027e:	f108 0801 	add.w	r8, r8, #1
 8010282:	e7ec      	b.n	801025e <_printf_float+0x34e>
 8010284:	4613      	mov	r3, r2
 8010286:	4631      	mov	r1, r6
 8010288:	4642      	mov	r2, r8
 801028a:	4628      	mov	r0, r5
 801028c:	47b8      	blx	r7
 801028e:	3001      	adds	r0, #1
 8010290:	d1c0      	bne.n	8010214 <_printf_float+0x304>
 8010292:	e69e      	b.n	800ffd2 <_printf_float+0xc2>
 8010294:	2301      	movs	r3, #1
 8010296:	4631      	mov	r1, r6
 8010298:	4628      	mov	r0, r5
 801029a:	9205      	str	r2, [sp, #20]
 801029c:	47b8      	blx	r7
 801029e:	3001      	adds	r0, #1
 80102a0:	f43f ae97 	beq.w	800ffd2 <_printf_float+0xc2>
 80102a4:	9a05      	ldr	r2, [sp, #20]
 80102a6:	f10b 0b01 	add.w	fp, fp, #1
 80102aa:	e7b9      	b.n	8010220 <_printf_float+0x310>
 80102ac:	ee18 3a10 	vmov	r3, s16
 80102b0:	4652      	mov	r2, sl
 80102b2:	4631      	mov	r1, r6
 80102b4:	4628      	mov	r0, r5
 80102b6:	47b8      	blx	r7
 80102b8:	3001      	adds	r0, #1
 80102ba:	d1be      	bne.n	801023a <_printf_float+0x32a>
 80102bc:	e689      	b.n	800ffd2 <_printf_float+0xc2>
 80102be:	9a05      	ldr	r2, [sp, #20]
 80102c0:	464b      	mov	r3, r9
 80102c2:	4442      	add	r2, r8
 80102c4:	4631      	mov	r1, r6
 80102c6:	4628      	mov	r0, r5
 80102c8:	47b8      	blx	r7
 80102ca:	3001      	adds	r0, #1
 80102cc:	d1c1      	bne.n	8010252 <_printf_float+0x342>
 80102ce:	e680      	b.n	800ffd2 <_printf_float+0xc2>
 80102d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102d2:	2a01      	cmp	r2, #1
 80102d4:	dc01      	bgt.n	80102da <_printf_float+0x3ca>
 80102d6:	07db      	lsls	r3, r3, #31
 80102d8:	d538      	bpl.n	801034c <_printf_float+0x43c>
 80102da:	2301      	movs	r3, #1
 80102dc:	4642      	mov	r2, r8
 80102de:	4631      	mov	r1, r6
 80102e0:	4628      	mov	r0, r5
 80102e2:	47b8      	blx	r7
 80102e4:	3001      	adds	r0, #1
 80102e6:	f43f ae74 	beq.w	800ffd2 <_printf_float+0xc2>
 80102ea:	ee18 3a10 	vmov	r3, s16
 80102ee:	4652      	mov	r2, sl
 80102f0:	4631      	mov	r1, r6
 80102f2:	4628      	mov	r0, r5
 80102f4:	47b8      	blx	r7
 80102f6:	3001      	adds	r0, #1
 80102f8:	f43f ae6b 	beq.w	800ffd2 <_printf_float+0xc2>
 80102fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010300:	2200      	movs	r2, #0
 8010302:	2300      	movs	r3, #0
 8010304:	f7f0 fbf8 	bl	8000af8 <__aeabi_dcmpeq>
 8010308:	b9d8      	cbnz	r0, 8010342 <_printf_float+0x432>
 801030a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801030c:	f108 0201 	add.w	r2, r8, #1
 8010310:	3b01      	subs	r3, #1
 8010312:	4631      	mov	r1, r6
 8010314:	4628      	mov	r0, r5
 8010316:	47b8      	blx	r7
 8010318:	3001      	adds	r0, #1
 801031a:	d10e      	bne.n	801033a <_printf_float+0x42a>
 801031c:	e659      	b.n	800ffd2 <_printf_float+0xc2>
 801031e:	2301      	movs	r3, #1
 8010320:	4652      	mov	r2, sl
 8010322:	4631      	mov	r1, r6
 8010324:	4628      	mov	r0, r5
 8010326:	47b8      	blx	r7
 8010328:	3001      	adds	r0, #1
 801032a:	f43f ae52 	beq.w	800ffd2 <_printf_float+0xc2>
 801032e:	f108 0801 	add.w	r8, r8, #1
 8010332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010334:	3b01      	subs	r3, #1
 8010336:	4543      	cmp	r3, r8
 8010338:	dcf1      	bgt.n	801031e <_printf_float+0x40e>
 801033a:	464b      	mov	r3, r9
 801033c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010340:	e6dc      	b.n	80100fc <_printf_float+0x1ec>
 8010342:	f04f 0800 	mov.w	r8, #0
 8010346:	f104 0a1a 	add.w	sl, r4, #26
 801034a:	e7f2      	b.n	8010332 <_printf_float+0x422>
 801034c:	2301      	movs	r3, #1
 801034e:	4642      	mov	r2, r8
 8010350:	e7df      	b.n	8010312 <_printf_float+0x402>
 8010352:	2301      	movs	r3, #1
 8010354:	464a      	mov	r2, r9
 8010356:	4631      	mov	r1, r6
 8010358:	4628      	mov	r0, r5
 801035a:	47b8      	blx	r7
 801035c:	3001      	adds	r0, #1
 801035e:	f43f ae38 	beq.w	800ffd2 <_printf_float+0xc2>
 8010362:	f108 0801 	add.w	r8, r8, #1
 8010366:	68e3      	ldr	r3, [r4, #12]
 8010368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801036a:	1a5b      	subs	r3, r3, r1
 801036c:	4543      	cmp	r3, r8
 801036e:	dcf0      	bgt.n	8010352 <_printf_float+0x442>
 8010370:	e6fa      	b.n	8010168 <_printf_float+0x258>
 8010372:	f04f 0800 	mov.w	r8, #0
 8010376:	f104 0919 	add.w	r9, r4, #25
 801037a:	e7f4      	b.n	8010366 <_printf_float+0x456>

0801037c <_printf_common>:
 801037c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010380:	4616      	mov	r6, r2
 8010382:	4699      	mov	r9, r3
 8010384:	688a      	ldr	r2, [r1, #8]
 8010386:	690b      	ldr	r3, [r1, #16]
 8010388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801038c:	4293      	cmp	r3, r2
 801038e:	bfb8      	it	lt
 8010390:	4613      	movlt	r3, r2
 8010392:	6033      	str	r3, [r6, #0]
 8010394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010398:	4607      	mov	r7, r0
 801039a:	460c      	mov	r4, r1
 801039c:	b10a      	cbz	r2, 80103a2 <_printf_common+0x26>
 801039e:	3301      	adds	r3, #1
 80103a0:	6033      	str	r3, [r6, #0]
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	0699      	lsls	r1, r3, #26
 80103a6:	bf42      	ittt	mi
 80103a8:	6833      	ldrmi	r3, [r6, #0]
 80103aa:	3302      	addmi	r3, #2
 80103ac:	6033      	strmi	r3, [r6, #0]
 80103ae:	6825      	ldr	r5, [r4, #0]
 80103b0:	f015 0506 	ands.w	r5, r5, #6
 80103b4:	d106      	bne.n	80103c4 <_printf_common+0x48>
 80103b6:	f104 0a19 	add.w	sl, r4, #25
 80103ba:	68e3      	ldr	r3, [r4, #12]
 80103bc:	6832      	ldr	r2, [r6, #0]
 80103be:	1a9b      	subs	r3, r3, r2
 80103c0:	42ab      	cmp	r3, r5
 80103c2:	dc26      	bgt.n	8010412 <_printf_common+0x96>
 80103c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80103c8:	1e13      	subs	r3, r2, #0
 80103ca:	6822      	ldr	r2, [r4, #0]
 80103cc:	bf18      	it	ne
 80103ce:	2301      	movne	r3, #1
 80103d0:	0692      	lsls	r2, r2, #26
 80103d2:	d42b      	bmi.n	801042c <_printf_common+0xb0>
 80103d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103d8:	4649      	mov	r1, r9
 80103da:	4638      	mov	r0, r7
 80103dc:	47c0      	blx	r8
 80103de:	3001      	adds	r0, #1
 80103e0:	d01e      	beq.n	8010420 <_printf_common+0xa4>
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	68e5      	ldr	r5, [r4, #12]
 80103e6:	6832      	ldr	r2, [r6, #0]
 80103e8:	f003 0306 	and.w	r3, r3, #6
 80103ec:	2b04      	cmp	r3, #4
 80103ee:	bf08      	it	eq
 80103f0:	1aad      	subeq	r5, r5, r2
 80103f2:	68a3      	ldr	r3, [r4, #8]
 80103f4:	6922      	ldr	r2, [r4, #16]
 80103f6:	bf0c      	ite	eq
 80103f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103fc:	2500      	movne	r5, #0
 80103fe:	4293      	cmp	r3, r2
 8010400:	bfc4      	itt	gt
 8010402:	1a9b      	subgt	r3, r3, r2
 8010404:	18ed      	addgt	r5, r5, r3
 8010406:	2600      	movs	r6, #0
 8010408:	341a      	adds	r4, #26
 801040a:	42b5      	cmp	r5, r6
 801040c:	d11a      	bne.n	8010444 <_printf_common+0xc8>
 801040e:	2000      	movs	r0, #0
 8010410:	e008      	b.n	8010424 <_printf_common+0xa8>
 8010412:	2301      	movs	r3, #1
 8010414:	4652      	mov	r2, sl
 8010416:	4649      	mov	r1, r9
 8010418:	4638      	mov	r0, r7
 801041a:	47c0      	blx	r8
 801041c:	3001      	adds	r0, #1
 801041e:	d103      	bne.n	8010428 <_printf_common+0xac>
 8010420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010428:	3501      	adds	r5, #1
 801042a:	e7c6      	b.n	80103ba <_printf_common+0x3e>
 801042c:	18e1      	adds	r1, r4, r3
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	2030      	movs	r0, #48	; 0x30
 8010432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010436:	4422      	add	r2, r4
 8010438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801043c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010440:	3302      	adds	r3, #2
 8010442:	e7c7      	b.n	80103d4 <_printf_common+0x58>
 8010444:	2301      	movs	r3, #1
 8010446:	4622      	mov	r2, r4
 8010448:	4649      	mov	r1, r9
 801044a:	4638      	mov	r0, r7
 801044c:	47c0      	blx	r8
 801044e:	3001      	adds	r0, #1
 8010450:	d0e6      	beq.n	8010420 <_printf_common+0xa4>
 8010452:	3601      	adds	r6, #1
 8010454:	e7d9      	b.n	801040a <_printf_common+0x8e>
	...

08010458 <_printf_i>:
 8010458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801045c:	7e0f      	ldrb	r7, [r1, #24]
 801045e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010460:	2f78      	cmp	r7, #120	; 0x78
 8010462:	4691      	mov	r9, r2
 8010464:	4680      	mov	r8, r0
 8010466:	460c      	mov	r4, r1
 8010468:	469a      	mov	sl, r3
 801046a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801046e:	d807      	bhi.n	8010480 <_printf_i+0x28>
 8010470:	2f62      	cmp	r7, #98	; 0x62
 8010472:	d80a      	bhi.n	801048a <_printf_i+0x32>
 8010474:	2f00      	cmp	r7, #0
 8010476:	f000 80d8 	beq.w	801062a <_printf_i+0x1d2>
 801047a:	2f58      	cmp	r7, #88	; 0x58
 801047c:	f000 80a3 	beq.w	80105c6 <_printf_i+0x16e>
 8010480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010488:	e03a      	b.n	8010500 <_printf_i+0xa8>
 801048a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801048e:	2b15      	cmp	r3, #21
 8010490:	d8f6      	bhi.n	8010480 <_printf_i+0x28>
 8010492:	a101      	add	r1, pc, #4	; (adr r1, 8010498 <_printf_i+0x40>)
 8010494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010498:	080104f1 	.word	0x080104f1
 801049c:	08010505 	.word	0x08010505
 80104a0:	08010481 	.word	0x08010481
 80104a4:	08010481 	.word	0x08010481
 80104a8:	08010481 	.word	0x08010481
 80104ac:	08010481 	.word	0x08010481
 80104b0:	08010505 	.word	0x08010505
 80104b4:	08010481 	.word	0x08010481
 80104b8:	08010481 	.word	0x08010481
 80104bc:	08010481 	.word	0x08010481
 80104c0:	08010481 	.word	0x08010481
 80104c4:	08010611 	.word	0x08010611
 80104c8:	08010535 	.word	0x08010535
 80104cc:	080105f3 	.word	0x080105f3
 80104d0:	08010481 	.word	0x08010481
 80104d4:	08010481 	.word	0x08010481
 80104d8:	08010633 	.word	0x08010633
 80104dc:	08010481 	.word	0x08010481
 80104e0:	08010535 	.word	0x08010535
 80104e4:	08010481 	.word	0x08010481
 80104e8:	08010481 	.word	0x08010481
 80104ec:	080105fb 	.word	0x080105fb
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	1d1a      	adds	r2, r3, #4
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	602a      	str	r2, [r5, #0]
 80104f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010500:	2301      	movs	r3, #1
 8010502:	e0a3      	b.n	801064c <_printf_i+0x1f4>
 8010504:	6820      	ldr	r0, [r4, #0]
 8010506:	6829      	ldr	r1, [r5, #0]
 8010508:	0606      	lsls	r6, r0, #24
 801050a:	f101 0304 	add.w	r3, r1, #4
 801050e:	d50a      	bpl.n	8010526 <_printf_i+0xce>
 8010510:	680e      	ldr	r6, [r1, #0]
 8010512:	602b      	str	r3, [r5, #0]
 8010514:	2e00      	cmp	r6, #0
 8010516:	da03      	bge.n	8010520 <_printf_i+0xc8>
 8010518:	232d      	movs	r3, #45	; 0x2d
 801051a:	4276      	negs	r6, r6
 801051c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010520:	485e      	ldr	r0, [pc, #376]	; (801069c <_printf_i+0x244>)
 8010522:	230a      	movs	r3, #10
 8010524:	e019      	b.n	801055a <_printf_i+0x102>
 8010526:	680e      	ldr	r6, [r1, #0]
 8010528:	602b      	str	r3, [r5, #0]
 801052a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801052e:	bf18      	it	ne
 8010530:	b236      	sxthne	r6, r6
 8010532:	e7ef      	b.n	8010514 <_printf_i+0xbc>
 8010534:	682b      	ldr	r3, [r5, #0]
 8010536:	6820      	ldr	r0, [r4, #0]
 8010538:	1d19      	adds	r1, r3, #4
 801053a:	6029      	str	r1, [r5, #0]
 801053c:	0601      	lsls	r1, r0, #24
 801053e:	d501      	bpl.n	8010544 <_printf_i+0xec>
 8010540:	681e      	ldr	r6, [r3, #0]
 8010542:	e002      	b.n	801054a <_printf_i+0xf2>
 8010544:	0646      	lsls	r6, r0, #25
 8010546:	d5fb      	bpl.n	8010540 <_printf_i+0xe8>
 8010548:	881e      	ldrh	r6, [r3, #0]
 801054a:	4854      	ldr	r0, [pc, #336]	; (801069c <_printf_i+0x244>)
 801054c:	2f6f      	cmp	r7, #111	; 0x6f
 801054e:	bf0c      	ite	eq
 8010550:	2308      	moveq	r3, #8
 8010552:	230a      	movne	r3, #10
 8010554:	2100      	movs	r1, #0
 8010556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801055a:	6865      	ldr	r5, [r4, #4]
 801055c:	60a5      	str	r5, [r4, #8]
 801055e:	2d00      	cmp	r5, #0
 8010560:	bfa2      	ittt	ge
 8010562:	6821      	ldrge	r1, [r4, #0]
 8010564:	f021 0104 	bicge.w	r1, r1, #4
 8010568:	6021      	strge	r1, [r4, #0]
 801056a:	b90e      	cbnz	r6, 8010570 <_printf_i+0x118>
 801056c:	2d00      	cmp	r5, #0
 801056e:	d04d      	beq.n	801060c <_printf_i+0x1b4>
 8010570:	4615      	mov	r5, r2
 8010572:	fbb6 f1f3 	udiv	r1, r6, r3
 8010576:	fb03 6711 	mls	r7, r3, r1, r6
 801057a:	5dc7      	ldrb	r7, [r0, r7]
 801057c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010580:	4637      	mov	r7, r6
 8010582:	42bb      	cmp	r3, r7
 8010584:	460e      	mov	r6, r1
 8010586:	d9f4      	bls.n	8010572 <_printf_i+0x11a>
 8010588:	2b08      	cmp	r3, #8
 801058a:	d10b      	bne.n	80105a4 <_printf_i+0x14c>
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	07de      	lsls	r6, r3, #31
 8010590:	d508      	bpl.n	80105a4 <_printf_i+0x14c>
 8010592:	6923      	ldr	r3, [r4, #16]
 8010594:	6861      	ldr	r1, [r4, #4]
 8010596:	4299      	cmp	r1, r3
 8010598:	bfde      	ittt	le
 801059a:	2330      	movle	r3, #48	; 0x30
 801059c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80105a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80105a4:	1b52      	subs	r2, r2, r5
 80105a6:	6122      	str	r2, [r4, #16]
 80105a8:	f8cd a000 	str.w	sl, [sp]
 80105ac:	464b      	mov	r3, r9
 80105ae:	aa03      	add	r2, sp, #12
 80105b0:	4621      	mov	r1, r4
 80105b2:	4640      	mov	r0, r8
 80105b4:	f7ff fee2 	bl	801037c <_printf_common>
 80105b8:	3001      	adds	r0, #1
 80105ba:	d14c      	bne.n	8010656 <_printf_i+0x1fe>
 80105bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105c0:	b004      	add	sp, #16
 80105c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105c6:	4835      	ldr	r0, [pc, #212]	; (801069c <_printf_i+0x244>)
 80105c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80105cc:	6829      	ldr	r1, [r5, #0]
 80105ce:	6823      	ldr	r3, [r4, #0]
 80105d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80105d4:	6029      	str	r1, [r5, #0]
 80105d6:	061d      	lsls	r5, r3, #24
 80105d8:	d514      	bpl.n	8010604 <_printf_i+0x1ac>
 80105da:	07df      	lsls	r7, r3, #31
 80105dc:	bf44      	itt	mi
 80105de:	f043 0320 	orrmi.w	r3, r3, #32
 80105e2:	6023      	strmi	r3, [r4, #0]
 80105e4:	b91e      	cbnz	r6, 80105ee <_printf_i+0x196>
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	f023 0320 	bic.w	r3, r3, #32
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	2310      	movs	r3, #16
 80105f0:	e7b0      	b.n	8010554 <_printf_i+0xfc>
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	f043 0320 	orr.w	r3, r3, #32
 80105f8:	6023      	str	r3, [r4, #0]
 80105fa:	2378      	movs	r3, #120	; 0x78
 80105fc:	4828      	ldr	r0, [pc, #160]	; (80106a0 <_printf_i+0x248>)
 80105fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010602:	e7e3      	b.n	80105cc <_printf_i+0x174>
 8010604:	0659      	lsls	r1, r3, #25
 8010606:	bf48      	it	mi
 8010608:	b2b6      	uxthmi	r6, r6
 801060a:	e7e6      	b.n	80105da <_printf_i+0x182>
 801060c:	4615      	mov	r5, r2
 801060e:	e7bb      	b.n	8010588 <_printf_i+0x130>
 8010610:	682b      	ldr	r3, [r5, #0]
 8010612:	6826      	ldr	r6, [r4, #0]
 8010614:	6961      	ldr	r1, [r4, #20]
 8010616:	1d18      	adds	r0, r3, #4
 8010618:	6028      	str	r0, [r5, #0]
 801061a:	0635      	lsls	r5, r6, #24
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	d501      	bpl.n	8010624 <_printf_i+0x1cc>
 8010620:	6019      	str	r1, [r3, #0]
 8010622:	e002      	b.n	801062a <_printf_i+0x1d2>
 8010624:	0670      	lsls	r0, r6, #25
 8010626:	d5fb      	bpl.n	8010620 <_printf_i+0x1c8>
 8010628:	8019      	strh	r1, [r3, #0]
 801062a:	2300      	movs	r3, #0
 801062c:	6123      	str	r3, [r4, #16]
 801062e:	4615      	mov	r5, r2
 8010630:	e7ba      	b.n	80105a8 <_printf_i+0x150>
 8010632:	682b      	ldr	r3, [r5, #0]
 8010634:	1d1a      	adds	r2, r3, #4
 8010636:	602a      	str	r2, [r5, #0]
 8010638:	681d      	ldr	r5, [r3, #0]
 801063a:	6862      	ldr	r2, [r4, #4]
 801063c:	2100      	movs	r1, #0
 801063e:	4628      	mov	r0, r5
 8010640:	f7ef fde6 	bl	8000210 <memchr>
 8010644:	b108      	cbz	r0, 801064a <_printf_i+0x1f2>
 8010646:	1b40      	subs	r0, r0, r5
 8010648:	6060      	str	r0, [r4, #4]
 801064a:	6863      	ldr	r3, [r4, #4]
 801064c:	6123      	str	r3, [r4, #16]
 801064e:	2300      	movs	r3, #0
 8010650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010654:	e7a8      	b.n	80105a8 <_printf_i+0x150>
 8010656:	6923      	ldr	r3, [r4, #16]
 8010658:	462a      	mov	r2, r5
 801065a:	4649      	mov	r1, r9
 801065c:	4640      	mov	r0, r8
 801065e:	47d0      	blx	sl
 8010660:	3001      	adds	r0, #1
 8010662:	d0ab      	beq.n	80105bc <_printf_i+0x164>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	079b      	lsls	r3, r3, #30
 8010668:	d413      	bmi.n	8010692 <_printf_i+0x23a>
 801066a:	68e0      	ldr	r0, [r4, #12]
 801066c:	9b03      	ldr	r3, [sp, #12]
 801066e:	4298      	cmp	r0, r3
 8010670:	bfb8      	it	lt
 8010672:	4618      	movlt	r0, r3
 8010674:	e7a4      	b.n	80105c0 <_printf_i+0x168>
 8010676:	2301      	movs	r3, #1
 8010678:	4632      	mov	r2, r6
 801067a:	4649      	mov	r1, r9
 801067c:	4640      	mov	r0, r8
 801067e:	47d0      	blx	sl
 8010680:	3001      	adds	r0, #1
 8010682:	d09b      	beq.n	80105bc <_printf_i+0x164>
 8010684:	3501      	adds	r5, #1
 8010686:	68e3      	ldr	r3, [r4, #12]
 8010688:	9903      	ldr	r1, [sp, #12]
 801068a:	1a5b      	subs	r3, r3, r1
 801068c:	42ab      	cmp	r3, r5
 801068e:	dcf2      	bgt.n	8010676 <_printf_i+0x21e>
 8010690:	e7eb      	b.n	801066a <_printf_i+0x212>
 8010692:	2500      	movs	r5, #0
 8010694:	f104 0619 	add.w	r6, r4, #25
 8010698:	e7f5      	b.n	8010686 <_printf_i+0x22e>
 801069a:	bf00      	nop
 801069c:	08012a2e 	.word	0x08012a2e
 80106a0:	08012a3f 	.word	0x08012a3f

080106a4 <iprintf>:
 80106a4:	b40f      	push	{r0, r1, r2, r3}
 80106a6:	4b0a      	ldr	r3, [pc, #40]	; (80106d0 <iprintf+0x2c>)
 80106a8:	b513      	push	{r0, r1, r4, lr}
 80106aa:	681c      	ldr	r4, [r3, #0]
 80106ac:	b124      	cbz	r4, 80106b8 <iprintf+0x14>
 80106ae:	69a3      	ldr	r3, [r4, #24]
 80106b0:	b913      	cbnz	r3, 80106b8 <iprintf+0x14>
 80106b2:	4620      	mov	r0, r4
 80106b4:	f000 ff0e 	bl	80114d4 <__sinit>
 80106b8:	ab05      	add	r3, sp, #20
 80106ba:	9a04      	ldr	r2, [sp, #16]
 80106bc:	68a1      	ldr	r1, [r4, #8]
 80106be:	9301      	str	r3, [sp, #4]
 80106c0:	4620      	mov	r0, r4
 80106c2:	f001 fba1 	bl	8011e08 <_vfiprintf_r>
 80106c6:	b002      	add	sp, #8
 80106c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106cc:	b004      	add	sp, #16
 80106ce:	4770      	bx	lr
 80106d0:	20000188 	.word	0x20000188

080106d4 <_sbrk_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4d06      	ldr	r5, [pc, #24]	; (80106f0 <_sbrk_r+0x1c>)
 80106d8:	2300      	movs	r3, #0
 80106da:	4604      	mov	r4, r0
 80106dc:	4608      	mov	r0, r1
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	f001 ffe8 	bl	80126b4 <_sbrk>
 80106e4:	1c43      	adds	r3, r0, #1
 80106e6:	d102      	bne.n	80106ee <_sbrk_r+0x1a>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	b103      	cbz	r3, 80106ee <_sbrk_r+0x1a>
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	200029a4 	.word	0x200029a4

080106f4 <__assert_func>:
 80106f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106f6:	4614      	mov	r4, r2
 80106f8:	461a      	mov	r2, r3
 80106fa:	4b09      	ldr	r3, [pc, #36]	; (8010720 <__assert_func+0x2c>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4605      	mov	r5, r0
 8010700:	68d8      	ldr	r0, [r3, #12]
 8010702:	b14c      	cbz	r4, 8010718 <__assert_func+0x24>
 8010704:	4b07      	ldr	r3, [pc, #28]	; (8010724 <__assert_func+0x30>)
 8010706:	9100      	str	r1, [sp, #0]
 8010708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801070c:	4906      	ldr	r1, [pc, #24]	; (8010728 <__assert_func+0x34>)
 801070e:	462b      	mov	r3, r5
 8010710:	f000 ff5e 	bl	80115d0 <fiprintf>
 8010714:	f001 fdcc 	bl	80122b0 <abort>
 8010718:	4b04      	ldr	r3, [pc, #16]	; (801072c <__assert_func+0x38>)
 801071a:	461c      	mov	r4, r3
 801071c:	e7f3      	b.n	8010706 <__assert_func+0x12>
 801071e:	bf00      	nop
 8010720:	20000188 	.word	0x20000188
 8010724:	08012a50 	.word	0x08012a50
 8010728:	08012a5d 	.word	0x08012a5d
 801072c:	08012a8b 	.word	0x08012a8b

08010730 <quorem>:
 8010730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	6903      	ldr	r3, [r0, #16]
 8010736:	690c      	ldr	r4, [r1, #16]
 8010738:	42a3      	cmp	r3, r4
 801073a:	4607      	mov	r7, r0
 801073c:	f2c0 8081 	blt.w	8010842 <quorem+0x112>
 8010740:	3c01      	subs	r4, #1
 8010742:	f101 0814 	add.w	r8, r1, #20
 8010746:	f100 0514 	add.w	r5, r0, #20
 801074a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010758:	3301      	adds	r3, #1
 801075a:	429a      	cmp	r2, r3
 801075c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010760:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010764:	fbb2 f6f3 	udiv	r6, r2, r3
 8010768:	d331      	bcc.n	80107ce <quorem+0x9e>
 801076a:	f04f 0e00 	mov.w	lr, #0
 801076e:	4640      	mov	r0, r8
 8010770:	46ac      	mov	ip, r5
 8010772:	46f2      	mov	sl, lr
 8010774:	f850 2b04 	ldr.w	r2, [r0], #4
 8010778:	b293      	uxth	r3, r2
 801077a:	fb06 e303 	mla	r3, r6, r3, lr
 801077e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010782:	b29b      	uxth	r3, r3
 8010784:	ebaa 0303 	sub.w	r3, sl, r3
 8010788:	f8dc a000 	ldr.w	sl, [ip]
 801078c:	0c12      	lsrs	r2, r2, #16
 801078e:	fa13 f38a 	uxtah	r3, r3, sl
 8010792:	fb06 e202 	mla	r2, r6, r2, lr
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	9b00      	ldr	r3, [sp, #0]
 801079a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801079e:	b292      	uxth	r2, r2
 80107a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80107a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80107ac:	4581      	cmp	r9, r0
 80107ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107b2:	f84c 3b04 	str.w	r3, [ip], #4
 80107b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107ba:	d2db      	bcs.n	8010774 <quorem+0x44>
 80107bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80107c0:	b92b      	cbnz	r3, 80107ce <quorem+0x9e>
 80107c2:	9b01      	ldr	r3, [sp, #4]
 80107c4:	3b04      	subs	r3, #4
 80107c6:	429d      	cmp	r5, r3
 80107c8:	461a      	mov	r2, r3
 80107ca:	d32e      	bcc.n	801082a <quorem+0xfa>
 80107cc:	613c      	str	r4, [r7, #16]
 80107ce:	4638      	mov	r0, r7
 80107d0:	f001 f9d8 	bl	8011b84 <__mcmp>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	db24      	blt.n	8010822 <quorem+0xf2>
 80107d8:	3601      	adds	r6, #1
 80107da:	4628      	mov	r0, r5
 80107dc:	f04f 0c00 	mov.w	ip, #0
 80107e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80107e4:	f8d0 e000 	ldr.w	lr, [r0]
 80107e8:	b293      	uxth	r3, r2
 80107ea:	ebac 0303 	sub.w	r3, ip, r3
 80107ee:	0c12      	lsrs	r2, r2, #16
 80107f0:	fa13 f38e 	uxtah	r3, r3, lr
 80107f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80107f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010802:	45c1      	cmp	r9, r8
 8010804:	f840 3b04 	str.w	r3, [r0], #4
 8010808:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801080c:	d2e8      	bcs.n	80107e0 <quorem+0xb0>
 801080e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010816:	b922      	cbnz	r2, 8010822 <quorem+0xf2>
 8010818:	3b04      	subs	r3, #4
 801081a:	429d      	cmp	r5, r3
 801081c:	461a      	mov	r2, r3
 801081e:	d30a      	bcc.n	8010836 <quorem+0x106>
 8010820:	613c      	str	r4, [r7, #16]
 8010822:	4630      	mov	r0, r6
 8010824:	b003      	add	sp, #12
 8010826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082a:	6812      	ldr	r2, [r2, #0]
 801082c:	3b04      	subs	r3, #4
 801082e:	2a00      	cmp	r2, #0
 8010830:	d1cc      	bne.n	80107cc <quorem+0x9c>
 8010832:	3c01      	subs	r4, #1
 8010834:	e7c7      	b.n	80107c6 <quorem+0x96>
 8010836:	6812      	ldr	r2, [r2, #0]
 8010838:	3b04      	subs	r3, #4
 801083a:	2a00      	cmp	r2, #0
 801083c:	d1f0      	bne.n	8010820 <quorem+0xf0>
 801083e:	3c01      	subs	r4, #1
 8010840:	e7eb      	b.n	801081a <quorem+0xea>
 8010842:	2000      	movs	r0, #0
 8010844:	e7ee      	b.n	8010824 <quorem+0xf4>
	...

08010848 <_dtoa_r>:
 8010848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084c:	ed2d 8b04 	vpush	{d8-d9}
 8010850:	ec57 6b10 	vmov	r6, r7, d0
 8010854:	b093      	sub	sp, #76	; 0x4c
 8010856:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010858:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801085c:	9106      	str	r1, [sp, #24]
 801085e:	ee10 aa10 	vmov	sl, s0
 8010862:	4604      	mov	r4, r0
 8010864:	9209      	str	r2, [sp, #36]	; 0x24
 8010866:	930c      	str	r3, [sp, #48]	; 0x30
 8010868:	46bb      	mov	fp, r7
 801086a:	b975      	cbnz	r5, 801088a <_dtoa_r+0x42>
 801086c:	2010      	movs	r0, #16
 801086e:	f7ff f9b1 	bl	800fbd4 <malloc>
 8010872:	4602      	mov	r2, r0
 8010874:	6260      	str	r0, [r4, #36]	; 0x24
 8010876:	b920      	cbnz	r0, 8010882 <_dtoa_r+0x3a>
 8010878:	4ba7      	ldr	r3, [pc, #668]	; (8010b18 <_dtoa_r+0x2d0>)
 801087a:	21ea      	movs	r1, #234	; 0xea
 801087c:	48a7      	ldr	r0, [pc, #668]	; (8010b1c <_dtoa_r+0x2d4>)
 801087e:	f7ff ff39 	bl	80106f4 <__assert_func>
 8010882:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010886:	6005      	str	r5, [r0, #0]
 8010888:	60c5      	str	r5, [r0, #12]
 801088a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801088c:	6819      	ldr	r1, [r3, #0]
 801088e:	b151      	cbz	r1, 80108a6 <_dtoa_r+0x5e>
 8010890:	685a      	ldr	r2, [r3, #4]
 8010892:	604a      	str	r2, [r1, #4]
 8010894:	2301      	movs	r3, #1
 8010896:	4093      	lsls	r3, r2
 8010898:	608b      	str	r3, [r1, #8]
 801089a:	4620      	mov	r0, r4
 801089c:	f000 ff30 	bl	8011700 <_Bfree>
 80108a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108a2:	2200      	movs	r2, #0
 80108a4:	601a      	str	r2, [r3, #0]
 80108a6:	1e3b      	subs	r3, r7, #0
 80108a8:	bfaa      	itet	ge
 80108aa:	2300      	movge	r3, #0
 80108ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80108b0:	f8c8 3000 	strge.w	r3, [r8]
 80108b4:	4b9a      	ldr	r3, [pc, #616]	; (8010b20 <_dtoa_r+0x2d8>)
 80108b6:	bfbc      	itt	lt
 80108b8:	2201      	movlt	r2, #1
 80108ba:	f8c8 2000 	strlt.w	r2, [r8]
 80108be:	ea33 030b 	bics.w	r3, r3, fp
 80108c2:	d11b      	bne.n	80108fc <_dtoa_r+0xb4>
 80108c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108d0:	4333      	orrs	r3, r6
 80108d2:	f000 8592 	beq.w	80113fa <_dtoa_r+0xbb2>
 80108d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108d8:	b963      	cbnz	r3, 80108f4 <_dtoa_r+0xac>
 80108da:	4b92      	ldr	r3, [pc, #584]	; (8010b24 <_dtoa_r+0x2dc>)
 80108dc:	e022      	b.n	8010924 <_dtoa_r+0xdc>
 80108de:	4b92      	ldr	r3, [pc, #584]	; (8010b28 <_dtoa_r+0x2e0>)
 80108e0:	9301      	str	r3, [sp, #4]
 80108e2:	3308      	adds	r3, #8
 80108e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108e6:	6013      	str	r3, [r2, #0]
 80108e8:	9801      	ldr	r0, [sp, #4]
 80108ea:	b013      	add	sp, #76	; 0x4c
 80108ec:	ecbd 8b04 	vpop	{d8-d9}
 80108f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f4:	4b8b      	ldr	r3, [pc, #556]	; (8010b24 <_dtoa_r+0x2dc>)
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	3303      	adds	r3, #3
 80108fa:	e7f3      	b.n	80108e4 <_dtoa_r+0x9c>
 80108fc:	2200      	movs	r2, #0
 80108fe:	2300      	movs	r3, #0
 8010900:	4650      	mov	r0, sl
 8010902:	4659      	mov	r1, fp
 8010904:	f7f0 f8f8 	bl	8000af8 <__aeabi_dcmpeq>
 8010908:	ec4b ab19 	vmov	d9, sl, fp
 801090c:	4680      	mov	r8, r0
 801090e:	b158      	cbz	r0, 8010928 <_dtoa_r+0xe0>
 8010910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010912:	2301      	movs	r3, #1
 8010914:	6013      	str	r3, [r2, #0]
 8010916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 856b 	beq.w	80113f4 <_dtoa_r+0xbac>
 801091e:	4883      	ldr	r0, [pc, #524]	; (8010b2c <_dtoa_r+0x2e4>)
 8010920:	6018      	str	r0, [r3, #0]
 8010922:	1e43      	subs	r3, r0, #1
 8010924:	9301      	str	r3, [sp, #4]
 8010926:	e7df      	b.n	80108e8 <_dtoa_r+0xa0>
 8010928:	ec4b ab10 	vmov	d0, sl, fp
 801092c:	aa10      	add	r2, sp, #64	; 0x40
 801092e:	a911      	add	r1, sp, #68	; 0x44
 8010930:	4620      	mov	r0, r4
 8010932:	f001 f9cd 	bl	8011cd0 <__d2b>
 8010936:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801093a:	ee08 0a10 	vmov	s16, r0
 801093e:	2d00      	cmp	r5, #0
 8010940:	f000 8084 	beq.w	8010a4c <_dtoa_r+0x204>
 8010944:	ee19 3a90 	vmov	r3, s19
 8010948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801094c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010950:	4656      	mov	r6, sl
 8010952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801095a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801095e:	4b74      	ldr	r3, [pc, #464]	; (8010b30 <_dtoa_r+0x2e8>)
 8010960:	2200      	movs	r2, #0
 8010962:	4630      	mov	r0, r6
 8010964:	4639      	mov	r1, r7
 8010966:	f7ef fca7 	bl	80002b8 <__aeabi_dsub>
 801096a:	a365      	add	r3, pc, #404	; (adr r3, 8010b00 <_dtoa_r+0x2b8>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	f7ef fe5a 	bl	8000628 <__aeabi_dmul>
 8010974:	a364      	add	r3, pc, #400	; (adr r3, 8010b08 <_dtoa_r+0x2c0>)
 8010976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097a:	f7ef fc9f 	bl	80002bc <__adddf3>
 801097e:	4606      	mov	r6, r0
 8010980:	4628      	mov	r0, r5
 8010982:	460f      	mov	r7, r1
 8010984:	f7ef fde6 	bl	8000554 <__aeabi_i2d>
 8010988:	a361      	add	r3, pc, #388	; (adr r3, 8010b10 <_dtoa_r+0x2c8>)
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	f7ef fe4b 	bl	8000628 <__aeabi_dmul>
 8010992:	4602      	mov	r2, r0
 8010994:	460b      	mov	r3, r1
 8010996:	4630      	mov	r0, r6
 8010998:	4639      	mov	r1, r7
 801099a:	f7ef fc8f 	bl	80002bc <__adddf3>
 801099e:	4606      	mov	r6, r0
 80109a0:	460f      	mov	r7, r1
 80109a2:	f7f0 f8f1 	bl	8000b88 <__aeabi_d2iz>
 80109a6:	2200      	movs	r2, #0
 80109a8:	9000      	str	r0, [sp, #0]
 80109aa:	2300      	movs	r3, #0
 80109ac:	4630      	mov	r0, r6
 80109ae:	4639      	mov	r1, r7
 80109b0:	f7f0 f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80109b4:	b150      	cbz	r0, 80109cc <_dtoa_r+0x184>
 80109b6:	9800      	ldr	r0, [sp, #0]
 80109b8:	f7ef fdcc 	bl	8000554 <__aeabi_i2d>
 80109bc:	4632      	mov	r2, r6
 80109be:	463b      	mov	r3, r7
 80109c0:	f7f0 f89a 	bl	8000af8 <__aeabi_dcmpeq>
 80109c4:	b910      	cbnz	r0, 80109cc <_dtoa_r+0x184>
 80109c6:	9b00      	ldr	r3, [sp, #0]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	9b00      	ldr	r3, [sp, #0]
 80109ce:	2b16      	cmp	r3, #22
 80109d0:	d85a      	bhi.n	8010a88 <_dtoa_r+0x240>
 80109d2:	9a00      	ldr	r2, [sp, #0]
 80109d4:	4b57      	ldr	r3, [pc, #348]	; (8010b34 <_dtoa_r+0x2ec>)
 80109d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	ec51 0b19 	vmov	r0, r1, d9
 80109e2:	f7f0 f893 	bl	8000b0c <__aeabi_dcmplt>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d050      	beq.n	8010a8c <_dtoa_r+0x244>
 80109ea:	9b00      	ldr	r3, [sp, #0]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	2300      	movs	r3, #0
 80109f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80109f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109f6:	1b5d      	subs	r5, r3, r5
 80109f8:	1e6b      	subs	r3, r5, #1
 80109fa:	9305      	str	r3, [sp, #20]
 80109fc:	bf45      	ittet	mi
 80109fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a02:	9304      	strmi	r3, [sp, #16]
 8010a04:	2300      	movpl	r3, #0
 8010a06:	2300      	movmi	r3, #0
 8010a08:	bf4c      	ite	mi
 8010a0a:	9305      	strmi	r3, [sp, #20]
 8010a0c:	9304      	strpl	r3, [sp, #16]
 8010a0e:	9b00      	ldr	r3, [sp, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	db3d      	blt.n	8010a90 <_dtoa_r+0x248>
 8010a14:	9b05      	ldr	r3, [sp, #20]
 8010a16:	9a00      	ldr	r2, [sp, #0]
 8010a18:	920a      	str	r2, [sp, #40]	; 0x28
 8010a1a:	4413      	add	r3, r2
 8010a1c:	9305      	str	r3, [sp, #20]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9307      	str	r3, [sp, #28]
 8010a22:	9b06      	ldr	r3, [sp, #24]
 8010a24:	2b09      	cmp	r3, #9
 8010a26:	f200 8089 	bhi.w	8010b3c <_dtoa_r+0x2f4>
 8010a2a:	2b05      	cmp	r3, #5
 8010a2c:	bfc4      	itt	gt
 8010a2e:	3b04      	subgt	r3, #4
 8010a30:	9306      	strgt	r3, [sp, #24]
 8010a32:	9b06      	ldr	r3, [sp, #24]
 8010a34:	f1a3 0302 	sub.w	r3, r3, #2
 8010a38:	bfcc      	ite	gt
 8010a3a:	2500      	movgt	r5, #0
 8010a3c:	2501      	movle	r5, #1
 8010a3e:	2b03      	cmp	r3, #3
 8010a40:	f200 8087 	bhi.w	8010b52 <_dtoa_r+0x30a>
 8010a44:	e8df f003 	tbb	[pc, r3]
 8010a48:	59383a2d 	.word	0x59383a2d
 8010a4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a50:	441d      	add	r5, r3
 8010a52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a56:	2b20      	cmp	r3, #32
 8010a58:	bfc1      	itttt	gt
 8010a5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010a62:	fa0b f303 	lslgt.w	r3, fp, r3
 8010a66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010a6a:	bfda      	itte	le
 8010a6c:	f1c3 0320 	rsble	r3, r3, #32
 8010a70:	fa06 f003 	lslle.w	r0, r6, r3
 8010a74:	4318      	orrgt	r0, r3
 8010a76:	f7ef fd5d 	bl	8000534 <__aeabi_ui2d>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	4606      	mov	r6, r0
 8010a7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a82:	3d01      	subs	r5, #1
 8010a84:	930e      	str	r3, [sp, #56]	; 0x38
 8010a86:	e76a      	b.n	801095e <_dtoa_r+0x116>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e7b2      	b.n	80109f2 <_dtoa_r+0x1aa>
 8010a8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a8e:	e7b1      	b.n	80109f4 <_dtoa_r+0x1ac>
 8010a90:	9b04      	ldr	r3, [sp, #16]
 8010a92:	9a00      	ldr	r2, [sp, #0]
 8010a94:	1a9b      	subs	r3, r3, r2
 8010a96:	9304      	str	r3, [sp, #16]
 8010a98:	4253      	negs	r3, r2
 8010a9a:	9307      	str	r3, [sp, #28]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8010aa0:	e7bf      	b.n	8010a22 <_dtoa_r+0x1da>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9308      	str	r3, [sp, #32]
 8010aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	dc55      	bgt.n	8010b58 <_dtoa_r+0x310>
 8010aac:	2301      	movs	r3, #1
 8010aae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ab6:	e00c      	b.n	8010ad2 <_dtoa_r+0x28a>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e7f3      	b.n	8010aa4 <_dtoa_r+0x25c>
 8010abc:	2300      	movs	r3, #0
 8010abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ac0:	9308      	str	r3, [sp, #32]
 8010ac2:	9b00      	ldr	r3, [sp, #0]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	9302      	str	r3, [sp, #8]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	9303      	str	r3, [sp, #12]
 8010ace:	bfb8      	it	lt
 8010ad0:	2301      	movlt	r3, #1
 8010ad2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	6042      	str	r2, [r0, #4]
 8010ad8:	2204      	movs	r2, #4
 8010ada:	f102 0614 	add.w	r6, r2, #20
 8010ade:	429e      	cmp	r6, r3
 8010ae0:	6841      	ldr	r1, [r0, #4]
 8010ae2:	d93d      	bls.n	8010b60 <_dtoa_r+0x318>
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 fdcb 	bl	8011680 <_Balloc>
 8010aea:	9001      	str	r0, [sp, #4]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d13b      	bne.n	8010b68 <_dtoa_r+0x320>
 8010af0:	4b11      	ldr	r3, [pc, #68]	; (8010b38 <_dtoa_r+0x2f0>)
 8010af2:	4602      	mov	r2, r0
 8010af4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010af8:	e6c0      	b.n	801087c <_dtoa_r+0x34>
 8010afa:	2301      	movs	r3, #1
 8010afc:	e7df      	b.n	8010abe <_dtoa_r+0x276>
 8010afe:	bf00      	nop
 8010b00:	636f4361 	.word	0x636f4361
 8010b04:	3fd287a7 	.word	0x3fd287a7
 8010b08:	8b60c8b3 	.word	0x8b60c8b3
 8010b0c:	3fc68a28 	.word	0x3fc68a28
 8010b10:	509f79fb 	.word	0x509f79fb
 8010b14:	3fd34413 	.word	0x3fd34413
 8010b18:	08012b9a 	.word	0x08012b9a
 8010b1c:	08012bb1 	.word	0x08012bb1
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	08012b96 	.word	0x08012b96
 8010b28:	08012b8d 	.word	0x08012b8d
 8010b2c:	08012a2d 	.word	0x08012a2d
 8010b30:	3ff80000 	.word	0x3ff80000
 8010b34:	08012d10 	.word	0x08012d10
 8010b38:	08012c0c 	.word	0x08012c0c
 8010b3c:	2501      	movs	r5, #1
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9306      	str	r3, [sp, #24]
 8010b42:	9508      	str	r5, [sp, #32]
 8010b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	2312      	movs	r3, #18
 8010b50:	e7b0      	b.n	8010ab4 <_dtoa_r+0x26c>
 8010b52:	2301      	movs	r3, #1
 8010b54:	9308      	str	r3, [sp, #32]
 8010b56:	e7f5      	b.n	8010b44 <_dtoa_r+0x2fc>
 8010b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b5e:	e7b8      	b.n	8010ad2 <_dtoa_r+0x28a>
 8010b60:	3101      	adds	r1, #1
 8010b62:	6041      	str	r1, [r0, #4]
 8010b64:	0052      	lsls	r2, r2, #1
 8010b66:	e7b8      	b.n	8010ada <_dtoa_r+0x292>
 8010b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b6a:	9a01      	ldr	r2, [sp, #4]
 8010b6c:	601a      	str	r2, [r3, #0]
 8010b6e:	9b03      	ldr	r3, [sp, #12]
 8010b70:	2b0e      	cmp	r3, #14
 8010b72:	f200 809d 	bhi.w	8010cb0 <_dtoa_r+0x468>
 8010b76:	2d00      	cmp	r5, #0
 8010b78:	f000 809a 	beq.w	8010cb0 <_dtoa_r+0x468>
 8010b7c:	9b00      	ldr	r3, [sp, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	dd32      	ble.n	8010be8 <_dtoa_r+0x3a0>
 8010b82:	4ab7      	ldr	r2, [pc, #732]	; (8010e60 <_dtoa_r+0x618>)
 8010b84:	f003 030f 	and.w	r3, r3, #15
 8010b88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b90:	9b00      	ldr	r3, [sp, #0]
 8010b92:	05d8      	lsls	r0, r3, #23
 8010b94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010b98:	d516      	bpl.n	8010bc8 <_dtoa_r+0x380>
 8010b9a:	4bb2      	ldr	r3, [pc, #712]	; (8010e64 <_dtoa_r+0x61c>)
 8010b9c:	ec51 0b19 	vmov	r0, r1, d9
 8010ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ba4:	f7ef fe6a 	bl	800087c <__aeabi_ddiv>
 8010ba8:	f007 070f 	and.w	r7, r7, #15
 8010bac:	4682      	mov	sl, r0
 8010bae:	468b      	mov	fp, r1
 8010bb0:	2503      	movs	r5, #3
 8010bb2:	4eac      	ldr	r6, [pc, #688]	; (8010e64 <_dtoa_r+0x61c>)
 8010bb4:	b957      	cbnz	r7, 8010bcc <_dtoa_r+0x384>
 8010bb6:	4642      	mov	r2, r8
 8010bb8:	464b      	mov	r3, r9
 8010bba:	4650      	mov	r0, sl
 8010bbc:	4659      	mov	r1, fp
 8010bbe:	f7ef fe5d 	bl	800087c <__aeabi_ddiv>
 8010bc2:	4682      	mov	sl, r0
 8010bc4:	468b      	mov	fp, r1
 8010bc6:	e028      	b.n	8010c1a <_dtoa_r+0x3d2>
 8010bc8:	2502      	movs	r5, #2
 8010bca:	e7f2      	b.n	8010bb2 <_dtoa_r+0x36a>
 8010bcc:	07f9      	lsls	r1, r7, #31
 8010bce:	d508      	bpl.n	8010be2 <_dtoa_r+0x39a>
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	4649      	mov	r1, r9
 8010bd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010bd8:	f7ef fd26 	bl	8000628 <__aeabi_dmul>
 8010bdc:	3501      	adds	r5, #1
 8010bde:	4680      	mov	r8, r0
 8010be0:	4689      	mov	r9, r1
 8010be2:	107f      	asrs	r7, r7, #1
 8010be4:	3608      	adds	r6, #8
 8010be6:	e7e5      	b.n	8010bb4 <_dtoa_r+0x36c>
 8010be8:	f000 809b 	beq.w	8010d22 <_dtoa_r+0x4da>
 8010bec:	9b00      	ldr	r3, [sp, #0]
 8010bee:	4f9d      	ldr	r7, [pc, #628]	; (8010e64 <_dtoa_r+0x61c>)
 8010bf0:	425e      	negs	r6, r3
 8010bf2:	4b9b      	ldr	r3, [pc, #620]	; (8010e60 <_dtoa_r+0x618>)
 8010bf4:	f006 020f 	and.w	r2, r6, #15
 8010bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	ec51 0b19 	vmov	r0, r1, d9
 8010c04:	f7ef fd10 	bl	8000628 <__aeabi_dmul>
 8010c08:	1136      	asrs	r6, r6, #4
 8010c0a:	4682      	mov	sl, r0
 8010c0c:	468b      	mov	fp, r1
 8010c0e:	2300      	movs	r3, #0
 8010c10:	2502      	movs	r5, #2
 8010c12:	2e00      	cmp	r6, #0
 8010c14:	d17a      	bne.n	8010d0c <_dtoa_r+0x4c4>
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1d3      	bne.n	8010bc2 <_dtoa_r+0x37a>
 8010c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f000 8082 	beq.w	8010d26 <_dtoa_r+0x4de>
 8010c22:	4b91      	ldr	r3, [pc, #580]	; (8010e68 <_dtoa_r+0x620>)
 8010c24:	2200      	movs	r2, #0
 8010c26:	4650      	mov	r0, sl
 8010c28:	4659      	mov	r1, fp
 8010c2a:	f7ef ff6f 	bl	8000b0c <__aeabi_dcmplt>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d079      	beq.n	8010d26 <_dtoa_r+0x4de>
 8010c32:	9b03      	ldr	r3, [sp, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d076      	beq.n	8010d26 <_dtoa_r+0x4de>
 8010c38:	9b02      	ldr	r3, [sp, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	dd36      	ble.n	8010cac <_dtoa_r+0x464>
 8010c3e:	9b00      	ldr	r3, [sp, #0]
 8010c40:	4650      	mov	r0, sl
 8010c42:	4659      	mov	r1, fp
 8010c44:	1e5f      	subs	r7, r3, #1
 8010c46:	2200      	movs	r2, #0
 8010c48:	4b88      	ldr	r3, [pc, #544]	; (8010e6c <_dtoa_r+0x624>)
 8010c4a:	f7ef fced 	bl	8000628 <__aeabi_dmul>
 8010c4e:	9e02      	ldr	r6, [sp, #8]
 8010c50:	4682      	mov	sl, r0
 8010c52:	468b      	mov	fp, r1
 8010c54:	3501      	adds	r5, #1
 8010c56:	4628      	mov	r0, r5
 8010c58:	f7ef fc7c 	bl	8000554 <__aeabi_i2d>
 8010c5c:	4652      	mov	r2, sl
 8010c5e:	465b      	mov	r3, fp
 8010c60:	f7ef fce2 	bl	8000628 <__aeabi_dmul>
 8010c64:	4b82      	ldr	r3, [pc, #520]	; (8010e70 <_dtoa_r+0x628>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	f7ef fb28 	bl	80002bc <__adddf3>
 8010c6c:	46d0      	mov	r8, sl
 8010c6e:	46d9      	mov	r9, fp
 8010c70:	4682      	mov	sl, r0
 8010c72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010c76:	2e00      	cmp	r6, #0
 8010c78:	d158      	bne.n	8010d2c <_dtoa_r+0x4e4>
 8010c7a:	4b7e      	ldr	r3, [pc, #504]	; (8010e74 <_dtoa_r+0x62c>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	4640      	mov	r0, r8
 8010c80:	4649      	mov	r1, r9
 8010c82:	f7ef fb19 	bl	80002b8 <__aeabi_dsub>
 8010c86:	4652      	mov	r2, sl
 8010c88:	465b      	mov	r3, fp
 8010c8a:	4680      	mov	r8, r0
 8010c8c:	4689      	mov	r9, r1
 8010c8e:	f7ef ff5b 	bl	8000b48 <__aeabi_dcmpgt>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	f040 8295 	bne.w	80111c2 <_dtoa_r+0x97a>
 8010c98:	4652      	mov	r2, sl
 8010c9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c9e:	4640      	mov	r0, r8
 8010ca0:	4649      	mov	r1, r9
 8010ca2:	f7ef ff33 	bl	8000b0c <__aeabi_dcmplt>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	f040 8289 	bne.w	80111be <_dtoa_r+0x976>
 8010cac:	ec5b ab19 	vmov	sl, fp, d9
 8010cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f2c0 8148 	blt.w	8010f48 <_dtoa_r+0x700>
 8010cb8:	9a00      	ldr	r2, [sp, #0]
 8010cba:	2a0e      	cmp	r2, #14
 8010cbc:	f300 8144 	bgt.w	8010f48 <_dtoa_r+0x700>
 8010cc0:	4b67      	ldr	r3, [pc, #412]	; (8010e60 <_dtoa_r+0x618>)
 8010cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f280 80d5 	bge.w	8010e7c <_dtoa_r+0x634>
 8010cd2:	9b03      	ldr	r3, [sp, #12]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f300 80d1 	bgt.w	8010e7c <_dtoa_r+0x634>
 8010cda:	f040 826f 	bne.w	80111bc <_dtoa_r+0x974>
 8010cde:	4b65      	ldr	r3, [pc, #404]	; (8010e74 <_dtoa_r+0x62c>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	4640      	mov	r0, r8
 8010ce4:	4649      	mov	r1, r9
 8010ce6:	f7ef fc9f 	bl	8000628 <__aeabi_dmul>
 8010cea:	4652      	mov	r2, sl
 8010cec:	465b      	mov	r3, fp
 8010cee:	f7ef ff21 	bl	8000b34 <__aeabi_dcmpge>
 8010cf2:	9e03      	ldr	r6, [sp, #12]
 8010cf4:	4637      	mov	r7, r6
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	f040 8245 	bne.w	8011186 <_dtoa_r+0x93e>
 8010cfc:	9d01      	ldr	r5, [sp, #4]
 8010cfe:	2331      	movs	r3, #49	; 0x31
 8010d00:	f805 3b01 	strb.w	r3, [r5], #1
 8010d04:	9b00      	ldr	r3, [sp, #0]
 8010d06:	3301      	adds	r3, #1
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	e240      	b.n	801118e <_dtoa_r+0x946>
 8010d0c:	07f2      	lsls	r2, r6, #31
 8010d0e:	d505      	bpl.n	8010d1c <_dtoa_r+0x4d4>
 8010d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d14:	f7ef fc88 	bl	8000628 <__aeabi_dmul>
 8010d18:	3501      	adds	r5, #1
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	1076      	asrs	r6, r6, #1
 8010d1e:	3708      	adds	r7, #8
 8010d20:	e777      	b.n	8010c12 <_dtoa_r+0x3ca>
 8010d22:	2502      	movs	r5, #2
 8010d24:	e779      	b.n	8010c1a <_dtoa_r+0x3d2>
 8010d26:	9f00      	ldr	r7, [sp, #0]
 8010d28:	9e03      	ldr	r6, [sp, #12]
 8010d2a:	e794      	b.n	8010c56 <_dtoa_r+0x40e>
 8010d2c:	9901      	ldr	r1, [sp, #4]
 8010d2e:	4b4c      	ldr	r3, [pc, #304]	; (8010e60 <_dtoa_r+0x618>)
 8010d30:	4431      	add	r1, r6
 8010d32:	910d      	str	r1, [sp, #52]	; 0x34
 8010d34:	9908      	ldr	r1, [sp, #32]
 8010d36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d3e:	2900      	cmp	r1, #0
 8010d40:	d043      	beq.n	8010dca <_dtoa_r+0x582>
 8010d42:	494d      	ldr	r1, [pc, #308]	; (8010e78 <_dtoa_r+0x630>)
 8010d44:	2000      	movs	r0, #0
 8010d46:	f7ef fd99 	bl	800087c <__aeabi_ddiv>
 8010d4a:	4652      	mov	r2, sl
 8010d4c:	465b      	mov	r3, fp
 8010d4e:	f7ef fab3 	bl	80002b8 <__aeabi_dsub>
 8010d52:	9d01      	ldr	r5, [sp, #4]
 8010d54:	4682      	mov	sl, r0
 8010d56:	468b      	mov	fp, r1
 8010d58:	4649      	mov	r1, r9
 8010d5a:	4640      	mov	r0, r8
 8010d5c:	f7ef ff14 	bl	8000b88 <__aeabi_d2iz>
 8010d60:	4606      	mov	r6, r0
 8010d62:	f7ef fbf7 	bl	8000554 <__aeabi_i2d>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	f7ef faa3 	bl	80002b8 <__aeabi_dsub>
 8010d72:	3630      	adds	r6, #48	; 0x30
 8010d74:	f805 6b01 	strb.w	r6, [r5], #1
 8010d78:	4652      	mov	r2, sl
 8010d7a:	465b      	mov	r3, fp
 8010d7c:	4680      	mov	r8, r0
 8010d7e:	4689      	mov	r9, r1
 8010d80:	f7ef fec4 	bl	8000b0c <__aeabi_dcmplt>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d163      	bne.n	8010e50 <_dtoa_r+0x608>
 8010d88:	4642      	mov	r2, r8
 8010d8a:	464b      	mov	r3, r9
 8010d8c:	4936      	ldr	r1, [pc, #216]	; (8010e68 <_dtoa_r+0x620>)
 8010d8e:	2000      	movs	r0, #0
 8010d90:	f7ef fa92 	bl	80002b8 <__aeabi_dsub>
 8010d94:	4652      	mov	r2, sl
 8010d96:	465b      	mov	r3, fp
 8010d98:	f7ef feb8 	bl	8000b0c <__aeabi_dcmplt>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	f040 80b5 	bne.w	8010f0c <_dtoa_r+0x6c4>
 8010da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010da4:	429d      	cmp	r5, r3
 8010da6:	d081      	beq.n	8010cac <_dtoa_r+0x464>
 8010da8:	4b30      	ldr	r3, [pc, #192]	; (8010e6c <_dtoa_r+0x624>)
 8010daa:	2200      	movs	r2, #0
 8010dac:	4650      	mov	r0, sl
 8010dae:	4659      	mov	r1, fp
 8010db0:	f7ef fc3a 	bl	8000628 <__aeabi_dmul>
 8010db4:	4b2d      	ldr	r3, [pc, #180]	; (8010e6c <_dtoa_r+0x624>)
 8010db6:	4682      	mov	sl, r0
 8010db8:	468b      	mov	fp, r1
 8010dba:	4640      	mov	r0, r8
 8010dbc:	4649      	mov	r1, r9
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f7ef fc32 	bl	8000628 <__aeabi_dmul>
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	4689      	mov	r9, r1
 8010dc8:	e7c6      	b.n	8010d58 <_dtoa_r+0x510>
 8010dca:	4650      	mov	r0, sl
 8010dcc:	4659      	mov	r1, fp
 8010dce:	f7ef fc2b 	bl	8000628 <__aeabi_dmul>
 8010dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dd4:	9d01      	ldr	r5, [sp, #4]
 8010dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010dd8:	4682      	mov	sl, r0
 8010dda:	468b      	mov	fp, r1
 8010ddc:	4649      	mov	r1, r9
 8010dde:	4640      	mov	r0, r8
 8010de0:	f7ef fed2 	bl	8000b88 <__aeabi_d2iz>
 8010de4:	4606      	mov	r6, r0
 8010de6:	f7ef fbb5 	bl	8000554 <__aeabi_i2d>
 8010dea:	3630      	adds	r6, #48	; 0x30
 8010dec:	4602      	mov	r2, r0
 8010dee:	460b      	mov	r3, r1
 8010df0:	4640      	mov	r0, r8
 8010df2:	4649      	mov	r1, r9
 8010df4:	f7ef fa60 	bl	80002b8 <__aeabi_dsub>
 8010df8:	f805 6b01 	strb.w	r6, [r5], #1
 8010dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dfe:	429d      	cmp	r5, r3
 8010e00:	4680      	mov	r8, r0
 8010e02:	4689      	mov	r9, r1
 8010e04:	f04f 0200 	mov.w	r2, #0
 8010e08:	d124      	bne.n	8010e54 <_dtoa_r+0x60c>
 8010e0a:	4b1b      	ldr	r3, [pc, #108]	; (8010e78 <_dtoa_r+0x630>)
 8010e0c:	4650      	mov	r0, sl
 8010e0e:	4659      	mov	r1, fp
 8010e10:	f7ef fa54 	bl	80002bc <__adddf3>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	4640      	mov	r0, r8
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	f7ef fe94 	bl	8000b48 <__aeabi_dcmpgt>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	d173      	bne.n	8010f0c <_dtoa_r+0x6c4>
 8010e24:	4652      	mov	r2, sl
 8010e26:	465b      	mov	r3, fp
 8010e28:	4913      	ldr	r1, [pc, #76]	; (8010e78 <_dtoa_r+0x630>)
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	f7ef fa44 	bl	80002b8 <__aeabi_dsub>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4640      	mov	r0, r8
 8010e36:	4649      	mov	r1, r9
 8010e38:	f7ef fe68 	bl	8000b0c <__aeabi_dcmplt>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	f43f af35 	beq.w	8010cac <_dtoa_r+0x464>
 8010e42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e44:	1e6b      	subs	r3, r5, #1
 8010e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e4c:	2b30      	cmp	r3, #48	; 0x30
 8010e4e:	d0f8      	beq.n	8010e42 <_dtoa_r+0x5fa>
 8010e50:	9700      	str	r7, [sp, #0]
 8010e52:	e049      	b.n	8010ee8 <_dtoa_r+0x6a0>
 8010e54:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <_dtoa_r+0x624>)
 8010e56:	f7ef fbe7 	bl	8000628 <__aeabi_dmul>
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	4689      	mov	r9, r1
 8010e5e:	e7bd      	b.n	8010ddc <_dtoa_r+0x594>
 8010e60:	08012d10 	.word	0x08012d10
 8010e64:	08012ce8 	.word	0x08012ce8
 8010e68:	3ff00000 	.word	0x3ff00000
 8010e6c:	40240000 	.word	0x40240000
 8010e70:	401c0000 	.word	0x401c0000
 8010e74:	40140000 	.word	0x40140000
 8010e78:	3fe00000 	.word	0x3fe00000
 8010e7c:	9d01      	ldr	r5, [sp, #4]
 8010e7e:	4656      	mov	r6, sl
 8010e80:	465f      	mov	r7, fp
 8010e82:	4642      	mov	r2, r8
 8010e84:	464b      	mov	r3, r9
 8010e86:	4630      	mov	r0, r6
 8010e88:	4639      	mov	r1, r7
 8010e8a:	f7ef fcf7 	bl	800087c <__aeabi_ddiv>
 8010e8e:	f7ef fe7b 	bl	8000b88 <__aeabi_d2iz>
 8010e92:	4682      	mov	sl, r0
 8010e94:	f7ef fb5e 	bl	8000554 <__aeabi_i2d>
 8010e98:	4642      	mov	r2, r8
 8010e9a:	464b      	mov	r3, r9
 8010e9c:	f7ef fbc4 	bl	8000628 <__aeabi_dmul>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010eac:	f7ef fa04 	bl	80002b8 <__aeabi_dsub>
 8010eb0:	f805 6b01 	strb.w	r6, [r5], #1
 8010eb4:	9e01      	ldr	r6, [sp, #4]
 8010eb6:	9f03      	ldr	r7, [sp, #12]
 8010eb8:	1bae      	subs	r6, r5, r6
 8010eba:	42b7      	cmp	r7, r6
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	d135      	bne.n	8010f2e <_dtoa_r+0x6e6>
 8010ec2:	f7ef f9fb 	bl	80002bc <__adddf3>
 8010ec6:	4642      	mov	r2, r8
 8010ec8:	464b      	mov	r3, r9
 8010eca:	4606      	mov	r6, r0
 8010ecc:	460f      	mov	r7, r1
 8010ece:	f7ef fe3b 	bl	8000b48 <__aeabi_dcmpgt>
 8010ed2:	b9d0      	cbnz	r0, 8010f0a <_dtoa_r+0x6c2>
 8010ed4:	4642      	mov	r2, r8
 8010ed6:	464b      	mov	r3, r9
 8010ed8:	4630      	mov	r0, r6
 8010eda:	4639      	mov	r1, r7
 8010edc:	f7ef fe0c 	bl	8000af8 <__aeabi_dcmpeq>
 8010ee0:	b110      	cbz	r0, 8010ee8 <_dtoa_r+0x6a0>
 8010ee2:	f01a 0f01 	tst.w	sl, #1
 8010ee6:	d110      	bne.n	8010f0a <_dtoa_r+0x6c2>
 8010ee8:	4620      	mov	r0, r4
 8010eea:	ee18 1a10 	vmov	r1, s16
 8010eee:	f000 fc07 	bl	8011700 <_Bfree>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	9800      	ldr	r0, [sp, #0]
 8010ef6:	702b      	strb	r3, [r5, #0]
 8010ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010efa:	3001      	adds	r0, #1
 8010efc:	6018      	str	r0, [r3, #0]
 8010efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f43f acf1 	beq.w	80108e8 <_dtoa_r+0xa0>
 8010f06:	601d      	str	r5, [r3, #0]
 8010f08:	e4ee      	b.n	80108e8 <_dtoa_r+0xa0>
 8010f0a:	9f00      	ldr	r7, [sp, #0]
 8010f0c:	462b      	mov	r3, r5
 8010f0e:	461d      	mov	r5, r3
 8010f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f14:	2a39      	cmp	r2, #57	; 0x39
 8010f16:	d106      	bne.n	8010f26 <_dtoa_r+0x6de>
 8010f18:	9a01      	ldr	r2, [sp, #4]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d1f7      	bne.n	8010f0e <_dtoa_r+0x6c6>
 8010f1e:	9901      	ldr	r1, [sp, #4]
 8010f20:	2230      	movs	r2, #48	; 0x30
 8010f22:	3701      	adds	r7, #1
 8010f24:	700a      	strb	r2, [r1, #0]
 8010f26:	781a      	ldrb	r2, [r3, #0]
 8010f28:	3201      	adds	r2, #1
 8010f2a:	701a      	strb	r2, [r3, #0]
 8010f2c:	e790      	b.n	8010e50 <_dtoa_r+0x608>
 8010f2e:	4ba6      	ldr	r3, [pc, #664]	; (80111c8 <_dtoa_r+0x980>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	f7ef fb79 	bl	8000628 <__aeabi_dmul>
 8010f36:	2200      	movs	r2, #0
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460f      	mov	r7, r1
 8010f3e:	f7ef fddb 	bl	8000af8 <__aeabi_dcmpeq>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d09d      	beq.n	8010e82 <_dtoa_r+0x63a>
 8010f46:	e7cf      	b.n	8010ee8 <_dtoa_r+0x6a0>
 8010f48:	9a08      	ldr	r2, [sp, #32]
 8010f4a:	2a00      	cmp	r2, #0
 8010f4c:	f000 80d7 	beq.w	80110fe <_dtoa_r+0x8b6>
 8010f50:	9a06      	ldr	r2, [sp, #24]
 8010f52:	2a01      	cmp	r2, #1
 8010f54:	f300 80ba 	bgt.w	80110cc <_dtoa_r+0x884>
 8010f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f5a:	2a00      	cmp	r2, #0
 8010f5c:	f000 80b2 	beq.w	80110c4 <_dtoa_r+0x87c>
 8010f60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f64:	9e07      	ldr	r6, [sp, #28]
 8010f66:	9d04      	ldr	r5, [sp, #16]
 8010f68:	9a04      	ldr	r2, [sp, #16]
 8010f6a:	441a      	add	r2, r3
 8010f6c:	9204      	str	r2, [sp, #16]
 8010f6e:	9a05      	ldr	r2, [sp, #20]
 8010f70:	2101      	movs	r1, #1
 8010f72:	441a      	add	r2, r3
 8010f74:	4620      	mov	r0, r4
 8010f76:	9205      	str	r2, [sp, #20]
 8010f78:	f000 fc7a 	bl	8011870 <__i2b>
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	2d00      	cmp	r5, #0
 8010f80:	dd0c      	ble.n	8010f9c <_dtoa_r+0x754>
 8010f82:	9b05      	ldr	r3, [sp, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dd09      	ble.n	8010f9c <_dtoa_r+0x754>
 8010f88:	42ab      	cmp	r3, r5
 8010f8a:	9a04      	ldr	r2, [sp, #16]
 8010f8c:	bfa8      	it	ge
 8010f8e:	462b      	movge	r3, r5
 8010f90:	1ad2      	subs	r2, r2, r3
 8010f92:	9204      	str	r2, [sp, #16]
 8010f94:	9a05      	ldr	r2, [sp, #20]
 8010f96:	1aed      	subs	r5, r5, r3
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	9305      	str	r3, [sp, #20]
 8010f9c:	9b07      	ldr	r3, [sp, #28]
 8010f9e:	b31b      	cbz	r3, 8010fe8 <_dtoa_r+0x7a0>
 8010fa0:	9b08      	ldr	r3, [sp, #32]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f000 80af 	beq.w	8011106 <_dtoa_r+0x8be>
 8010fa8:	2e00      	cmp	r6, #0
 8010faa:	dd13      	ble.n	8010fd4 <_dtoa_r+0x78c>
 8010fac:	4639      	mov	r1, r7
 8010fae:	4632      	mov	r2, r6
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	f000 fd1d 	bl	80119f0 <__pow5mult>
 8010fb6:	ee18 2a10 	vmov	r2, s16
 8010fba:	4601      	mov	r1, r0
 8010fbc:	4607      	mov	r7, r0
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f000 fc6c 	bl	801189c <__multiply>
 8010fc4:	ee18 1a10 	vmov	r1, s16
 8010fc8:	4680      	mov	r8, r0
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 fb98 	bl	8011700 <_Bfree>
 8010fd0:	ee08 8a10 	vmov	s16, r8
 8010fd4:	9b07      	ldr	r3, [sp, #28]
 8010fd6:	1b9a      	subs	r2, r3, r6
 8010fd8:	d006      	beq.n	8010fe8 <_dtoa_r+0x7a0>
 8010fda:	ee18 1a10 	vmov	r1, s16
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f000 fd06 	bl	80119f0 <__pow5mult>
 8010fe4:	ee08 0a10 	vmov	s16, r0
 8010fe8:	2101      	movs	r1, #1
 8010fea:	4620      	mov	r0, r4
 8010fec:	f000 fc40 	bl	8011870 <__i2b>
 8010ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	f340 8088 	ble.w	801110a <_dtoa_r+0x8c2>
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	4601      	mov	r1, r0
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 fcf6 	bl	80119f0 <__pow5mult>
 8011004:	9b06      	ldr	r3, [sp, #24]
 8011006:	2b01      	cmp	r3, #1
 8011008:	4606      	mov	r6, r0
 801100a:	f340 8081 	ble.w	8011110 <_dtoa_r+0x8c8>
 801100e:	f04f 0800 	mov.w	r8, #0
 8011012:	6933      	ldr	r3, [r6, #16]
 8011014:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011018:	6918      	ldr	r0, [r3, #16]
 801101a:	f000 fbd9 	bl	80117d0 <__hi0bits>
 801101e:	f1c0 0020 	rsb	r0, r0, #32
 8011022:	9b05      	ldr	r3, [sp, #20]
 8011024:	4418      	add	r0, r3
 8011026:	f010 001f 	ands.w	r0, r0, #31
 801102a:	f000 8092 	beq.w	8011152 <_dtoa_r+0x90a>
 801102e:	f1c0 0320 	rsb	r3, r0, #32
 8011032:	2b04      	cmp	r3, #4
 8011034:	f340 808a 	ble.w	801114c <_dtoa_r+0x904>
 8011038:	f1c0 001c 	rsb	r0, r0, #28
 801103c:	9b04      	ldr	r3, [sp, #16]
 801103e:	4403      	add	r3, r0
 8011040:	9304      	str	r3, [sp, #16]
 8011042:	9b05      	ldr	r3, [sp, #20]
 8011044:	4403      	add	r3, r0
 8011046:	4405      	add	r5, r0
 8011048:	9305      	str	r3, [sp, #20]
 801104a:	9b04      	ldr	r3, [sp, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	dd07      	ble.n	8011060 <_dtoa_r+0x818>
 8011050:	ee18 1a10 	vmov	r1, s16
 8011054:	461a      	mov	r2, r3
 8011056:	4620      	mov	r0, r4
 8011058:	f000 fd24 	bl	8011aa4 <__lshift>
 801105c:	ee08 0a10 	vmov	s16, r0
 8011060:	9b05      	ldr	r3, [sp, #20]
 8011062:	2b00      	cmp	r3, #0
 8011064:	dd05      	ble.n	8011072 <_dtoa_r+0x82a>
 8011066:	4631      	mov	r1, r6
 8011068:	461a      	mov	r2, r3
 801106a:	4620      	mov	r0, r4
 801106c:	f000 fd1a 	bl	8011aa4 <__lshift>
 8011070:	4606      	mov	r6, r0
 8011072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011074:	2b00      	cmp	r3, #0
 8011076:	d06e      	beq.n	8011156 <_dtoa_r+0x90e>
 8011078:	ee18 0a10 	vmov	r0, s16
 801107c:	4631      	mov	r1, r6
 801107e:	f000 fd81 	bl	8011b84 <__mcmp>
 8011082:	2800      	cmp	r0, #0
 8011084:	da67      	bge.n	8011156 <_dtoa_r+0x90e>
 8011086:	9b00      	ldr	r3, [sp, #0]
 8011088:	3b01      	subs	r3, #1
 801108a:	ee18 1a10 	vmov	r1, s16
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	220a      	movs	r2, #10
 8011092:	2300      	movs	r3, #0
 8011094:	4620      	mov	r0, r4
 8011096:	f000 fb55 	bl	8011744 <__multadd>
 801109a:	9b08      	ldr	r3, [sp, #32]
 801109c:	ee08 0a10 	vmov	s16, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f000 81b1 	beq.w	8011408 <_dtoa_r+0xbc0>
 80110a6:	2300      	movs	r3, #0
 80110a8:	4639      	mov	r1, r7
 80110aa:	220a      	movs	r2, #10
 80110ac:	4620      	mov	r0, r4
 80110ae:	f000 fb49 	bl	8011744 <__multadd>
 80110b2:	9b02      	ldr	r3, [sp, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	4607      	mov	r7, r0
 80110b8:	f300 808e 	bgt.w	80111d8 <_dtoa_r+0x990>
 80110bc:	9b06      	ldr	r3, [sp, #24]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	dc51      	bgt.n	8011166 <_dtoa_r+0x91e>
 80110c2:	e089      	b.n	80111d8 <_dtoa_r+0x990>
 80110c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80110ca:	e74b      	b.n	8010f64 <_dtoa_r+0x71c>
 80110cc:	9b03      	ldr	r3, [sp, #12]
 80110ce:	1e5e      	subs	r6, r3, #1
 80110d0:	9b07      	ldr	r3, [sp, #28]
 80110d2:	42b3      	cmp	r3, r6
 80110d4:	bfbf      	itttt	lt
 80110d6:	9b07      	ldrlt	r3, [sp, #28]
 80110d8:	9607      	strlt	r6, [sp, #28]
 80110da:	1af2      	sublt	r2, r6, r3
 80110dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80110de:	bfb6      	itet	lt
 80110e0:	189b      	addlt	r3, r3, r2
 80110e2:	1b9e      	subge	r6, r3, r6
 80110e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80110e6:	9b03      	ldr	r3, [sp, #12]
 80110e8:	bfb8      	it	lt
 80110ea:	2600      	movlt	r6, #0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	bfb7      	itett	lt
 80110f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80110f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80110f8:	1a9d      	sublt	r5, r3, r2
 80110fa:	2300      	movlt	r3, #0
 80110fc:	e734      	b.n	8010f68 <_dtoa_r+0x720>
 80110fe:	9e07      	ldr	r6, [sp, #28]
 8011100:	9d04      	ldr	r5, [sp, #16]
 8011102:	9f08      	ldr	r7, [sp, #32]
 8011104:	e73b      	b.n	8010f7e <_dtoa_r+0x736>
 8011106:	9a07      	ldr	r2, [sp, #28]
 8011108:	e767      	b.n	8010fda <_dtoa_r+0x792>
 801110a:	9b06      	ldr	r3, [sp, #24]
 801110c:	2b01      	cmp	r3, #1
 801110e:	dc18      	bgt.n	8011142 <_dtoa_r+0x8fa>
 8011110:	f1ba 0f00 	cmp.w	sl, #0
 8011114:	d115      	bne.n	8011142 <_dtoa_r+0x8fa>
 8011116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801111a:	b993      	cbnz	r3, 8011142 <_dtoa_r+0x8fa>
 801111c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011120:	0d1b      	lsrs	r3, r3, #20
 8011122:	051b      	lsls	r3, r3, #20
 8011124:	b183      	cbz	r3, 8011148 <_dtoa_r+0x900>
 8011126:	9b04      	ldr	r3, [sp, #16]
 8011128:	3301      	adds	r3, #1
 801112a:	9304      	str	r3, [sp, #16]
 801112c:	9b05      	ldr	r3, [sp, #20]
 801112e:	3301      	adds	r3, #1
 8011130:	9305      	str	r3, [sp, #20]
 8011132:	f04f 0801 	mov.w	r8, #1
 8011136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011138:	2b00      	cmp	r3, #0
 801113a:	f47f af6a 	bne.w	8011012 <_dtoa_r+0x7ca>
 801113e:	2001      	movs	r0, #1
 8011140:	e76f      	b.n	8011022 <_dtoa_r+0x7da>
 8011142:	f04f 0800 	mov.w	r8, #0
 8011146:	e7f6      	b.n	8011136 <_dtoa_r+0x8ee>
 8011148:	4698      	mov	r8, r3
 801114a:	e7f4      	b.n	8011136 <_dtoa_r+0x8ee>
 801114c:	f43f af7d 	beq.w	801104a <_dtoa_r+0x802>
 8011150:	4618      	mov	r0, r3
 8011152:	301c      	adds	r0, #28
 8011154:	e772      	b.n	801103c <_dtoa_r+0x7f4>
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	dc37      	bgt.n	80111cc <_dtoa_r+0x984>
 801115c:	9b06      	ldr	r3, [sp, #24]
 801115e:	2b02      	cmp	r3, #2
 8011160:	dd34      	ble.n	80111cc <_dtoa_r+0x984>
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	9302      	str	r3, [sp, #8]
 8011166:	9b02      	ldr	r3, [sp, #8]
 8011168:	b96b      	cbnz	r3, 8011186 <_dtoa_r+0x93e>
 801116a:	4631      	mov	r1, r6
 801116c:	2205      	movs	r2, #5
 801116e:	4620      	mov	r0, r4
 8011170:	f000 fae8 	bl	8011744 <__multadd>
 8011174:	4601      	mov	r1, r0
 8011176:	4606      	mov	r6, r0
 8011178:	ee18 0a10 	vmov	r0, s16
 801117c:	f000 fd02 	bl	8011b84 <__mcmp>
 8011180:	2800      	cmp	r0, #0
 8011182:	f73f adbb 	bgt.w	8010cfc <_dtoa_r+0x4b4>
 8011186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011188:	9d01      	ldr	r5, [sp, #4]
 801118a:	43db      	mvns	r3, r3
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	f04f 0800 	mov.w	r8, #0
 8011192:	4631      	mov	r1, r6
 8011194:	4620      	mov	r0, r4
 8011196:	f000 fab3 	bl	8011700 <_Bfree>
 801119a:	2f00      	cmp	r7, #0
 801119c:	f43f aea4 	beq.w	8010ee8 <_dtoa_r+0x6a0>
 80111a0:	f1b8 0f00 	cmp.w	r8, #0
 80111a4:	d005      	beq.n	80111b2 <_dtoa_r+0x96a>
 80111a6:	45b8      	cmp	r8, r7
 80111a8:	d003      	beq.n	80111b2 <_dtoa_r+0x96a>
 80111aa:	4641      	mov	r1, r8
 80111ac:	4620      	mov	r0, r4
 80111ae:	f000 faa7 	bl	8011700 <_Bfree>
 80111b2:	4639      	mov	r1, r7
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 faa3 	bl	8011700 <_Bfree>
 80111ba:	e695      	b.n	8010ee8 <_dtoa_r+0x6a0>
 80111bc:	2600      	movs	r6, #0
 80111be:	4637      	mov	r7, r6
 80111c0:	e7e1      	b.n	8011186 <_dtoa_r+0x93e>
 80111c2:	9700      	str	r7, [sp, #0]
 80111c4:	4637      	mov	r7, r6
 80111c6:	e599      	b.n	8010cfc <_dtoa_r+0x4b4>
 80111c8:	40240000 	.word	0x40240000
 80111cc:	9b08      	ldr	r3, [sp, #32]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 80ca 	beq.w	8011368 <_dtoa_r+0xb20>
 80111d4:	9b03      	ldr	r3, [sp, #12]
 80111d6:	9302      	str	r3, [sp, #8]
 80111d8:	2d00      	cmp	r5, #0
 80111da:	dd05      	ble.n	80111e8 <_dtoa_r+0x9a0>
 80111dc:	4639      	mov	r1, r7
 80111de:	462a      	mov	r2, r5
 80111e0:	4620      	mov	r0, r4
 80111e2:	f000 fc5f 	bl	8011aa4 <__lshift>
 80111e6:	4607      	mov	r7, r0
 80111e8:	f1b8 0f00 	cmp.w	r8, #0
 80111ec:	d05b      	beq.n	80112a6 <_dtoa_r+0xa5e>
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fa45 	bl	8011680 <_Balloc>
 80111f6:	4605      	mov	r5, r0
 80111f8:	b928      	cbnz	r0, 8011206 <_dtoa_r+0x9be>
 80111fa:	4b87      	ldr	r3, [pc, #540]	; (8011418 <_dtoa_r+0xbd0>)
 80111fc:	4602      	mov	r2, r0
 80111fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011202:	f7ff bb3b 	b.w	801087c <_dtoa_r+0x34>
 8011206:	693a      	ldr	r2, [r7, #16]
 8011208:	3202      	adds	r2, #2
 801120a:	0092      	lsls	r2, r2, #2
 801120c:	f107 010c 	add.w	r1, r7, #12
 8011210:	300c      	adds	r0, #12
 8011212:	f7fe fce7 	bl	800fbe4 <memcpy>
 8011216:	2201      	movs	r2, #1
 8011218:	4629      	mov	r1, r5
 801121a:	4620      	mov	r0, r4
 801121c:	f000 fc42 	bl	8011aa4 <__lshift>
 8011220:	9b01      	ldr	r3, [sp, #4]
 8011222:	f103 0901 	add.w	r9, r3, #1
 8011226:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801122a:	4413      	add	r3, r2
 801122c:	9305      	str	r3, [sp, #20]
 801122e:	f00a 0301 	and.w	r3, sl, #1
 8011232:	46b8      	mov	r8, r7
 8011234:	9304      	str	r3, [sp, #16]
 8011236:	4607      	mov	r7, r0
 8011238:	4631      	mov	r1, r6
 801123a:	ee18 0a10 	vmov	r0, s16
 801123e:	f7ff fa77 	bl	8010730 <quorem>
 8011242:	4641      	mov	r1, r8
 8011244:	9002      	str	r0, [sp, #8]
 8011246:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801124a:	ee18 0a10 	vmov	r0, s16
 801124e:	f000 fc99 	bl	8011b84 <__mcmp>
 8011252:	463a      	mov	r2, r7
 8011254:	9003      	str	r0, [sp, #12]
 8011256:	4631      	mov	r1, r6
 8011258:	4620      	mov	r0, r4
 801125a:	f000 fcaf 	bl	8011bbc <__mdiff>
 801125e:	68c2      	ldr	r2, [r0, #12]
 8011260:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011264:	4605      	mov	r5, r0
 8011266:	bb02      	cbnz	r2, 80112aa <_dtoa_r+0xa62>
 8011268:	4601      	mov	r1, r0
 801126a:	ee18 0a10 	vmov	r0, s16
 801126e:	f000 fc89 	bl	8011b84 <__mcmp>
 8011272:	4602      	mov	r2, r0
 8011274:	4629      	mov	r1, r5
 8011276:	4620      	mov	r0, r4
 8011278:	9207      	str	r2, [sp, #28]
 801127a:	f000 fa41 	bl	8011700 <_Bfree>
 801127e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011282:	ea43 0102 	orr.w	r1, r3, r2
 8011286:	9b04      	ldr	r3, [sp, #16]
 8011288:	430b      	orrs	r3, r1
 801128a:	464d      	mov	r5, r9
 801128c:	d10f      	bne.n	80112ae <_dtoa_r+0xa66>
 801128e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011292:	d02a      	beq.n	80112ea <_dtoa_r+0xaa2>
 8011294:	9b03      	ldr	r3, [sp, #12]
 8011296:	2b00      	cmp	r3, #0
 8011298:	dd02      	ble.n	80112a0 <_dtoa_r+0xa58>
 801129a:	9b02      	ldr	r3, [sp, #8]
 801129c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80112a0:	f88b a000 	strb.w	sl, [fp]
 80112a4:	e775      	b.n	8011192 <_dtoa_r+0x94a>
 80112a6:	4638      	mov	r0, r7
 80112a8:	e7ba      	b.n	8011220 <_dtoa_r+0x9d8>
 80112aa:	2201      	movs	r2, #1
 80112ac:	e7e2      	b.n	8011274 <_dtoa_r+0xa2c>
 80112ae:	9b03      	ldr	r3, [sp, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	db04      	blt.n	80112be <_dtoa_r+0xa76>
 80112b4:	9906      	ldr	r1, [sp, #24]
 80112b6:	430b      	orrs	r3, r1
 80112b8:	9904      	ldr	r1, [sp, #16]
 80112ba:	430b      	orrs	r3, r1
 80112bc:	d122      	bne.n	8011304 <_dtoa_r+0xabc>
 80112be:	2a00      	cmp	r2, #0
 80112c0:	ddee      	ble.n	80112a0 <_dtoa_r+0xa58>
 80112c2:	ee18 1a10 	vmov	r1, s16
 80112c6:	2201      	movs	r2, #1
 80112c8:	4620      	mov	r0, r4
 80112ca:	f000 fbeb 	bl	8011aa4 <__lshift>
 80112ce:	4631      	mov	r1, r6
 80112d0:	ee08 0a10 	vmov	s16, r0
 80112d4:	f000 fc56 	bl	8011b84 <__mcmp>
 80112d8:	2800      	cmp	r0, #0
 80112da:	dc03      	bgt.n	80112e4 <_dtoa_r+0xa9c>
 80112dc:	d1e0      	bne.n	80112a0 <_dtoa_r+0xa58>
 80112de:	f01a 0f01 	tst.w	sl, #1
 80112e2:	d0dd      	beq.n	80112a0 <_dtoa_r+0xa58>
 80112e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80112e8:	d1d7      	bne.n	801129a <_dtoa_r+0xa52>
 80112ea:	2339      	movs	r3, #57	; 0x39
 80112ec:	f88b 3000 	strb.w	r3, [fp]
 80112f0:	462b      	mov	r3, r5
 80112f2:	461d      	mov	r5, r3
 80112f4:	3b01      	subs	r3, #1
 80112f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80112fa:	2a39      	cmp	r2, #57	; 0x39
 80112fc:	d071      	beq.n	80113e2 <_dtoa_r+0xb9a>
 80112fe:	3201      	adds	r2, #1
 8011300:	701a      	strb	r2, [r3, #0]
 8011302:	e746      	b.n	8011192 <_dtoa_r+0x94a>
 8011304:	2a00      	cmp	r2, #0
 8011306:	dd07      	ble.n	8011318 <_dtoa_r+0xad0>
 8011308:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801130c:	d0ed      	beq.n	80112ea <_dtoa_r+0xaa2>
 801130e:	f10a 0301 	add.w	r3, sl, #1
 8011312:	f88b 3000 	strb.w	r3, [fp]
 8011316:	e73c      	b.n	8011192 <_dtoa_r+0x94a>
 8011318:	9b05      	ldr	r3, [sp, #20]
 801131a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801131e:	4599      	cmp	r9, r3
 8011320:	d047      	beq.n	80113b2 <_dtoa_r+0xb6a>
 8011322:	ee18 1a10 	vmov	r1, s16
 8011326:	2300      	movs	r3, #0
 8011328:	220a      	movs	r2, #10
 801132a:	4620      	mov	r0, r4
 801132c:	f000 fa0a 	bl	8011744 <__multadd>
 8011330:	45b8      	cmp	r8, r7
 8011332:	ee08 0a10 	vmov	s16, r0
 8011336:	f04f 0300 	mov.w	r3, #0
 801133a:	f04f 020a 	mov.w	r2, #10
 801133e:	4641      	mov	r1, r8
 8011340:	4620      	mov	r0, r4
 8011342:	d106      	bne.n	8011352 <_dtoa_r+0xb0a>
 8011344:	f000 f9fe 	bl	8011744 <__multadd>
 8011348:	4680      	mov	r8, r0
 801134a:	4607      	mov	r7, r0
 801134c:	f109 0901 	add.w	r9, r9, #1
 8011350:	e772      	b.n	8011238 <_dtoa_r+0x9f0>
 8011352:	f000 f9f7 	bl	8011744 <__multadd>
 8011356:	4639      	mov	r1, r7
 8011358:	4680      	mov	r8, r0
 801135a:	2300      	movs	r3, #0
 801135c:	220a      	movs	r2, #10
 801135e:	4620      	mov	r0, r4
 8011360:	f000 f9f0 	bl	8011744 <__multadd>
 8011364:	4607      	mov	r7, r0
 8011366:	e7f1      	b.n	801134c <_dtoa_r+0xb04>
 8011368:	9b03      	ldr	r3, [sp, #12]
 801136a:	9302      	str	r3, [sp, #8]
 801136c:	9d01      	ldr	r5, [sp, #4]
 801136e:	ee18 0a10 	vmov	r0, s16
 8011372:	4631      	mov	r1, r6
 8011374:	f7ff f9dc 	bl	8010730 <quorem>
 8011378:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	f805 ab01 	strb.w	sl, [r5], #1
 8011382:	1aea      	subs	r2, r5, r3
 8011384:	9b02      	ldr	r3, [sp, #8]
 8011386:	4293      	cmp	r3, r2
 8011388:	dd09      	ble.n	801139e <_dtoa_r+0xb56>
 801138a:	ee18 1a10 	vmov	r1, s16
 801138e:	2300      	movs	r3, #0
 8011390:	220a      	movs	r2, #10
 8011392:	4620      	mov	r0, r4
 8011394:	f000 f9d6 	bl	8011744 <__multadd>
 8011398:	ee08 0a10 	vmov	s16, r0
 801139c:	e7e7      	b.n	801136e <_dtoa_r+0xb26>
 801139e:	9b02      	ldr	r3, [sp, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	bfc8      	it	gt
 80113a4:	461d      	movgt	r5, r3
 80113a6:	9b01      	ldr	r3, [sp, #4]
 80113a8:	bfd8      	it	le
 80113aa:	2501      	movle	r5, #1
 80113ac:	441d      	add	r5, r3
 80113ae:	f04f 0800 	mov.w	r8, #0
 80113b2:	ee18 1a10 	vmov	r1, s16
 80113b6:	2201      	movs	r2, #1
 80113b8:	4620      	mov	r0, r4
 80113ba:	f000 fb73 	bl	8011aa4 <__lshift>
 80113be:	4631      	mov	r1, r6
 80113c0:	ee08 0a10 	vmov	s16, r0
 80113c4:	f000 fbde 	bl	8011b84 <__mcmp>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	dc91      	bgt.n	80112f0 <_dtoa_r+0xaa8>
 80113cc:	d102      	bne.n	80113d4 <_dtoa_r+0xb8c>
 80113ce:	f01a 0f01 	tst.w	sl, #1
 80113d2:	d18d      	bne.n	80112f0 <_dtoa_r+0xaa8>
 80113d4:	462b      	mov	r3, r5
 80113d6:	461d      	mov	r5, r3
 80113d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113dc:	2a30      	cmp	r2, #48	; 0x30
 80113de:	d0fa      	beq.n	80113d6 <_dtoa_r+0xb8e>
 80113e0:	e6d7      	b.n	8011192 <_dtoa_r+0x94a>
 80113e2:	9a01      	ldr	r2, [sp, #4]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d184      	bne.n	80112f2 <_dtoa_r+0xaaa>
 80113e8:	9b00      	ldr	r3, [sp, #0]
 80113ea:	3301      	adds	r3, #1
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	2331      	movs	r3, #49	; 0x31
 80113f0:	7013      	strb	r3, [r2, #0]
 80113f2:	e6ce      	b.n	8011192 <_dtoa_r+0x94a>
 80113f4:	4b09      	ldr	r3, [pc, #36]	; (801141c <_dtoa_r+0xbd4>)
 80113f6:	f7ff ba95 	b.w	8010924 <_dtoa_r+0xdc>
 80113fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f47f aa6e 	bne.w	80108de <_dtoa_r+0x96>
 8011402:	4b07      	ldr	r3, [pc, #28]	; (8011420 <_dtoa_r+0xbd8>)
 8011404:	f7ff ba8e 	b.w	8010924 <_dtoa_r+0xdc>
 8011408:	9b02      	ldr	r3, [sp, #8]
 801140a:	2b00      	cmp	r3, #0
 801140c:	dcae      	bgt.n	801136c <_dtoa_r+0xb24>
 801140e:	9b06      	ldr	r3, [sp, #24]
 8011410:	2b02      	cmp	r3, #2
 8011412:	f73f aea8 	bgt.w	8011166 <_dtoa_r+0x91e>
 8011416:	e7a9      	b.n	801136c <_dtoa_r+0xb24>
 8011418:	08012c0c 	.word	0x08012c0c
 801141c:	08012a2c 	.word	0x08012a2c
 8011420:	08012b8d 	.word	0x08012b8d

08011424 <std>:
 8011424:	2300      	movs	r3, #0
 8011426:	b510      	push	{r4, lr}
 8011428:	4604      	mov	r4, r0
 801142a:	e9c0 3300 	strd	r3, r3, [r0]
 801142e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011432:	6083      	str	r3, [r0, #8]
 8011434:	8181      	strh	r1, [r0, #12]
 8011436:	6643      	str	r3, [r0, #100]	; 0x64
 8011438:	81c2      	strh	r2, [r0, #14]
 801143a:	6183      	str	r3, [r0, #24]
 801143c:	4619      	mov	r1, r3
 801143e:	2208      	movs	r2, #8
 8011440:	305c      	adds	r0, #92	; 0x5c
 8011442:	f7fe fbdd 	bl	800fc00 <memset>
 8011446:	4b05      	ldr	r3, [pc, #20]	; (801145c <std+0x38>)
 8011448:	6263      	str	r3, [r4, #36]	; 0x24
 801144a:	4b05      	ldr	r3, [pc, #20]	; (8011460 <std+0x3c>)
 801144c:	62a3      	str	r3, [r4, #40]	; 0x28
 801144e:	4b05      	ldr	r3, [pc, #20]	; (8011464 <std+0x40>)
 8011450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011452:	4b05      	ldr	r3, [pc, #20]	; (8011468 <std+0x44>)
 8011454:	6224      	str	r4, [r4, #32]
 8011456:	6323      	str	r3, [r4, #48]	; 0x30
 8011458:	bd10      	pop	{r4, pc}
 801145a:	bf00      	nop
 801145c:	08012069 	.word	0x08012069
 8011460:	0801208b 	.word	0x0801208b
 8011464:	080120c3 	.word	0x080120c3
 8011468:	080120e7 	.word	0x080120e7

0801146c <_cleanup_r>:
 801146c:	4901      	ldr	r1, [pc, #4]	; (8011474 <_cleanup_r+0x8>)
 801146e:	f000 b8c1 	b.w	80115f4 <_fwalk_reent>
 8011472:	bf00      	nop
 8011474:	080123ed 	.word	0x080123ed

08011478 <__sfmoreglue>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	2268      	movs	r2, #104	; 0x68
 801147c:	1e4d      	subs	r5, r1, #1
 801147e:	4355      	muls	r5, r2
 8011480:	460e      	mov	r6, r1
 8011482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011486:	f7fe fc2f 	bl	800fce8 <_malloc_r>
 801148a:	4604      	mov	r4, r0
 801148c:	b140      	cbz	r0, 80114a0 <__sfmoreglue+0x28>
 801148e:	2100      	movs	r1, #0
 8011490:	e9c0 1600 	strd	r1, r6, [r0]
 8011494:	300c      	adds	r0, #12
 8011496:	60a0      	str	r0, [r4, #8]
 8011498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801149c:	f7fe fbb0 	bl	800fc00 <memset>
 80114a0:	4620      	mov	r0, r4
 80114a2:	bd70      	pop	{r4, r5, r6, pc}

080114a4 <__sfp_lock_acquire>:
 80114a4:	4801      	ldr	r0, [pc, #4]	; (80114ac <__sfp_lock_acquire+0x8>)
 80114a6:	f000 b8ca 	b.w	801163e <__retarget_lock_acquire_recursive>
 80114aa:	bf00      	nop
 80114ac:	200029a1 	.word	0x200029a1

080114b0 <__sfp_lock_release>:
 80114b0:	4801      	ldr	r0, [pc, #4]	; (80114b8 <__sfp_lock_release+0x8>)
 80114b2:	f000 b8c5 	b.w	8011640 <__retarget_lock_release_recursive>
 80114b6:	bf00      	nop
 80114b8:	200029a1 	.word	0x200029a1

080114bc <__sinit_lock_acquire>:
 80114bc:	4801      	ldr	r0, [pc, #4]	; (80114c4 <__sinit_lock_acquire+0x8>)
 80114be:	f000 b8be 	b.w	801163e <__retarget_lock_acquire_recursive>
 80114c2:	bf00      	nop
 80114c4:	200029a2 	.word	0x200029a2

080114c8 <__sinit_lock_release>:
 80114c8:	4801      	ldr	r0, [pc, #4]	; (80114d0 <__sinit_lock_release+0x8>)
 80114ca:	f000 b8b9 	b.w	8011640 <__retarget_lock_release_recursive>
 80114ce:	bf00      	nop
 80114d0:	200029a2 	.word	0x200029a2

080114d4 <__sinit>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	f7ff fff0 	bl	80114bc <__sinit_lock_acquire>
 80114dc:	69a3      	ldr	r3, [r4, #24]
 80114de:	b11b      	cbz	r3, 80114e8 <__sinit+0x14>
 80114e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114e4:	f7ff bff0 	b.w	80114c8 <__sinit_lock_release>
 80114e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114ec:	6523      	str	r3, [r4, #80]	; 0x50
 80114ee:	4b13      	ldr	r3, [pc, #76]	; (801153c <__sinit+0x68>)
 80114f0:	4a13      	ldr	r2, [pc, #76]	; (8011540 <__sinit+0x6c>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80114f6:	42a3      	cmp	r3, r4
 80114f8:	bf04      	itt	eq
 80114fa:	2301      	moveq	r3, #1
 80114fc:	61a3      	streq	r3, [r4, #24]
 80114fe:	4620      	mov	r0, r4
 8011500:	f000 f820 	bl	8011544 <__sfp>
 8011504:	6060      	str	r0, [r4, #4]
 8011506:	4620      	mov	r0, r4
 8011508:	f000 f81c 	bl	8011544 <__sfp>
 801150c:	60a0      	str	r0, [r4, #8]
 801150e:	4620      	mov	r0, r4
 8011510:	f000 f818 	bl	8011544 <__sfp>
 8011514:	2200      	movs	r2, #0
 8011516:	60e0      	str	r0, [r4, #12]
 8011518:	2104      	movs	r1, #4
 801151a:	6860      	ldr	r0, [r4, #4]
 801151c:	f7ff ff82 	bl	8011424 <std>
 8011520:	68a0      	ldr	r0, [r4, #8]
 8011522:	2201      	movs	r2, #1
 8011524:	2109      	movs	r1, #9
 8011526:	f7ff ff7d 	bl	8011424 <std>
 801152a:	68e0      	ldr	r0, [r4, #12]
 801152c:	2202      	movs	r2, #2
 801152e:	2112      	movs	r1, #18
 8011530:	f7ff ff78 	bl	8011424 <std>
 8011534:	2301      	movs	r3, #1
 8011536:	61a3      	str	r3, [r4, #24]
 8011538:	e7d2      	b.n	80114e0 <__sinit+0xc>
 801153a:	bf00      	nop
 801153c:	08012a18 	.word	0x08012a18
 8011540:	0801146d 	.word	0x0801146d

08011544 <__sfp>:
 8011544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011546:	4607      	mov	r7, r0
 8011548:	f7ff ffac 	bl	80114a4 <__sfp_lock_acquire>
 801154c:	4b1e      	ldr	r3, [pc, #120]	; (80115c8 <__sfp+0x84>)
 801154e:	681e      	ldr	r6, [r3, #0]
 8011550:	69b3      	ldr	r3, [r6, #24]
 8011552:	b913      	cbnz	r3, 801155a <__sfp+0x16>
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff ffbd 	bl	80114d4 <__sinit>
 801155a:	3648      	adds	r6, #72	; 0x48
 801155c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011560:	3b01      	subs	r3, #1
 8011562:	d503      	bpl.n	801156c <__sfp+0x28>
 8011564:	6833      	ldr	r3, [r6, #0]
 8011566:	b30b      	cbz	r3, 80115ac <__sfp+0x68>
 8011568:	6836      	ldr	r6, [r6, #0]
 801156a:	e7f7      	b.n	801155c <__sfp+0x18>
 801156c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011570:	b9d5      	cbnz	r5, 80115a8 <__sfp+0x64>
 8011572:	4b16      	ldr	r3, [pc, #88]	; (80115cc <__sfp+0x88>)
 8011574:	60e3      	str	r3, [r4, #12]
 8011576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801157a:	6665      	str	r5, [r4, #100]	; 0x64
 801157c:	f000 f85e 	bl	801163c <__retarget_lock_init_recursive>
 8011580:	f7ff ff96 	bl	80114b0 <__sfp_lock_release>
 8011584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801158c:	6025      	str	r5, [r4, #0]
 801158e:	61a5      	str	r5, [r4, #24]
 8011590:	2208      	movs	r2, #8
 8011592:	4629      	mov	r1, r5
 8011594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011598:	f7fe fb32 	bl	800fc00 <memset>
 801159c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115a4:	4620      	mov	r0, r4
 80115a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a8:	3468      	adds	r4, #104	; 0x68
 80115aa:	e7d9      	b.n	8011560 <__sfp+0x1c>
 80115ac:	2104      	movs	r1, #4
 80115ae:	4638      	mov	r0, r7
 80115b0:	f7ff ff62 	bl	8011478 <__sfmoreglue>
 80115b4:	4604      	mov	r4, r0
 80115b6:	6030      	str	r0, [r6, #0]
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d1d5      	bne.n	8011568 <__sfp+0x24>
 80115bc:	f7ff ff78 	bl	80114b0 <__sfp_lock_release>
 80115c0:	230c      	movs	r3, #12
 80115c2:	603b      	str	r3, [r7, #0]
 80115c4:	e7ee      	b.n	80115a4 <__sfp+0x60>
 80115c6:	bf00      	nop
 80115c8:	08012a18 	.word	0x08012a18
 80115cc:	ffff0001 	.word	0xffff0001

080115d0 <fiprintf>:
 80115d0:	b40e      	push	{r1, r2, r3}
 80115d2:	b503      	push	{r0, r1, lr}
 80115d4:	4601      	mov	r1, r0
 80115d6:	ab03      	add	r3, sp, #12
 80115d8:	4805      	ldr	r0, [pc, #20]	; (80115f0 <fiprintf+0x20>)
 80115da:	f853 2b04 	ldr.w	r2, [r3], #4
 80115de:	6800      	ldr	r0, [r0, #0]
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	f000 fc11 	bl	8011e08 <_vfiprintf_r>
 80115e6:	b002      	add	sp, #8
 80115e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115ec:	b003      	add	sp, #12
 80115ee:	4770      	bx	lr
 80115f0:	20000188 	.word	0x20000188

080115f4 <_fwalk_reent>:
 80115f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f8:	4606      	mov	r6, r0
 80115fa:	4688      	mov	r8, r1
 80115fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011600:	2700      	movs	r7, #0
 8011602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011606:	f1b9 0901 	subs.w	r9, r9, #1
 801160a:	d505      	bpl.n	8011618 <_fwalk_reent+0x24>
 801160c:	6824      	ldr	r4, [r4, #0]
 801160e:	2c00      	cmp	r4, #0
 8011610:	d1f7      	bne.n	8011602 <_fwalk_reent+0xe>
 8011612:	4638      	mov	r0, r7
 8011614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011618:	89ab      	ldrh	r3, [r5, #12]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d907      	bls.n	801162e <_fwalk_reent+0x3a>
 801161e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011622:	3301      	adds	r3, #1
 8011624:	d003      	beq.n	801162e <_fwalk_reent+0x3a>
 8011626:	4629      	mov	r1, r5
 8011628:	4630      	mov	r0, r6
 801162a:	47c0      	blx	r8
 801162c:	4307      	orrs	r7, r0
 801162e:	3568      	adds	r5, #104	; 0x68
 8011630:	e7e9      	b.n	8011606 <_fwalk_reent+0x12>
	...

08011634 <_localeconv_r>:
 8011634:	4800      	ldr	r0, [pc, #0]	; (8011638 <_localeconv_r+0x4>)
 8011636:	4770      	bx	lr
 8011638:	200002dc 	.word	0x200002dc

0801163c <__retarget_lock_init_recursive>:
 801163c:	4770      	bx	lr

0801163e <__retarget_lock_acquire_recursive>:
 801163e:	4770      	bx	lr

08011640 <__retarget_lock_release_recursive>:
 8011640:	4770      	bx	lr

08011642 <__ascii_mbtowc>:
 8011642:	b082      	sub	sp, #8
 8011644:	b901      	cbnz	r1, 8011648 <__ascii_mbtowc+0x6>
 8011646:	a901      	add	r1, sp, #4
 8011648:	b142      	cbz	r2, 801165c <__ascii_mbtowc+0x1a>
 801164a:	b14b      	cbz	r3, 8011660 <__ascii_mbtowc+0x1e>
 801164c:	7813      	ldrb	r3, [r2, #0]
 801164e:	600b      	str	r3, [r1, #0]
 8011650:	7812      	ldrb	r2, [r2, #0]
 8011652:	1e10      	subs	r0, r2, #0
 8011654:	bf18      	it	ne
 8011656:	2001      	movne	r0, #1
 8011658:	b002      	add	sp, #8
 801165a:	4770      	bx	lr
 801165c:	4610      	mov	r0, r2
 801165e:	e7fb      	b.n	8011658 <__ascii_mbtowc+0x16>
 8011660:	f06f 0001 	mvn.w	r0, #1
 8011664:	e7f8      	b.n	8011658 <__ascii_mbtowc+0x16>
	...

08011668 <__malloc_lock>:
 8011668:	4801      	ldr	r0, [pc, #4]	; (8011670 <__malloc_lock+0x8>)
 801166a:	f7ff bfe8 	b.w	801163e <__retarget_lock_acquire_recursive>
 801166e:	bf00      	nop
 8011670:	200029a0 	.word	0x200029a0

08011674 <__malloc_unlock>:
 8011674:	4801      	ldr	r0, [pc, #4]	; (801167c <__malloc_unlock+0x8>)
 8011676:	f7ff bfe3 	b.w	8011640 <__retarget_lock_release_recursive>
 801167a:	bf00      	nop
 801167c:	200029a0 	.word	0x200029a0

08011680 <_Balloc>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011684:	4604      	mov	r4, r0
 8011686:	460d      	mov	r5, r1
 8011688:	b976      	cbnz	r6, 80116a8 <_Balloc+0x28>
 801168a:	2010      	movs	r0, #16
 801168c:	f7fe faa2 	bl	800fbd4 <malloc>
 8011690:	4602      	mov	r2, r0
 8011692:	6260      	str	r0, [r4, #36]	; 0x24
 8011694:	b920      	cbnz	r0, 80116a0 <_Balloc+0x20>
 8011696:	4b18      	ldr	r3, [pc, #96]	; (80116f8 <_Balloc+0x78>)
 8011698:	4818      	ldr	r0, [pc, #96]	; (80116fc <_Balloc+0x7c>)
 801169a:	2166      	movs	r1, #102	; 0x66
 801169c:	f7ff f82a 	bl	80106f4 <__assert_func>
 80116a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116a4:	6006      	str	r6, [r0, #0]
 80116a6:	60c6      	str	r6, [r0, #12]
 80116a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80116aa:	68f3      	ldr	r3, [r6, #12]
 80116ac:	b183      	cbz	r3, 80116d0 <_Balloc+0x50>
 80116ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116b6:	b9b8      	cbnz	r0, 80116e8 <_Balloc+0x68>
 80116b8:	2101      	movs	r1, #1
 80116ba:	fa01 f605 	lsl.w	r6, r1, r5
 80116be:	1d72      	adds	r2, r6, #5
 80116c0:	0092      	lsls	r2, r2, #2
 80116c2:	4620      	mov	r0, r4
 80116c4:	f000 fb60 	bl	8011d88 <_calloc_r>
 80116c8:	b160      	cbz	r0, 80116e4 <_Balloc+0x64>
 80116ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116ce:	e00e      	b.n	80116ee <_Balloc+0x6e>
 80116d0:	2221      	movs	r2, #33	; 0x21
 80116d2:	2104      	movs	r1, #4
 80116d4:	4620      	mov	r0, r4
 80116d6:	f000 fb57 	bl	8011d88 <_calloc_r>
 80116da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116dc:	60f0      	str	r0, [r6, #12]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1e4      	bne.n	80116ae <_Balloc+0x2e>
 80116e4:	2000      	movs	r0, #0
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	6802      	ldr	r2, [r0, #0]
 80116ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116ee:	2300      	movs	r3, #0
 80116f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116f4:	e7f7      	b.n	80116e6 <_Balloc+0x66>
 80116f6:	bf00      	nop
 80116f8:	08012b9a 	.word	0x08012b9a
 80116fc:	08012c8a 	.word	0x08012c8a

08011700 <_Bfree>:
 8011700:	b570      	push	{r4, r5, r6, lr}
 8011702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011704:	4605      	mov	r5, r0
 8011706:	460c      	mov	r4, r1
 8011708:	b976      	cbnz	r6, 8011728 <_Bfree+0x28>
 801170a:	2010      	movs	r0, #16
 801170c:	f7fe fa62 	bl	800fbd4 <malloc>
 8011710:	4602      	mov	r2, r0
 8011712:	6268      	str	r0, [r5, #36]	; 0x24
 8011714:	b920      	cbnz	r0, 8011720 <_Bfree+0x20>
 8011716:	4b09      	ldr	r3, [pc, #36]	; (801173c <_Bfree+0x3c>)
 8011718:	4809      	ldr	r0, [pc, #36]	; (8011740 <_Bfree+0x40>)
 801171a:	218a      	movs	r1, #138	; 0x8a
 801171c:	f7fe ffea 	bl	80106f4 <__assert_func>
 8011720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011724:	6006      	str	r6, [r0, #0]
 8011726:	60c6      	str	r6, [r0, #12]
 8011728:	b13c      	cbz	r4, 801173a <_Bfree+0x3a>
 801172a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801172c:	6862      	ldr	r2, [r4, #4]
 801172e:	68db      	ldr	r3, [r3, #12]
 8011730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011734:	6021      	str	r1, [r4, #0]
 8011736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801173a:	bd70      	pop	{r4, r5, r6, pc}
 801173c:	08012b9a 	.word	0x08012b9a
 8011740:	08012c8a 	.word	0x08012c8a

08011744 <__multadd>:
 8011744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011748:	690d      	ldr	r5, [r1, #16]
 801174a:	4607      	mov	r7, r0
 801174c:	460c      	mov	r4, r1
 801174e:	461e      	mov	r6, r3
 8011750:	f101 0c14 	add.w	ip, r1, #20
 8011754:	2000      	movs	r0, #0
 8011756:	f8dc 3000 	ldr.w	r3, [ip]
 801175a:	b299      	uxth	r1, r3
 801175c:	fb02 6101 	mla	r1, r2, r1, r6
 8011760:	0c1e      	lsrs	r6, r3, #16
 8011762:	0c0b      	lsrs	r3, r1, #16
 8011764:	fb02 3306 	mla	r3, r2, r6, r3
 8011768:	b289      	uxth	r1, r1
 801176a:	3001      	adds	r0, #1
 801176c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011770:	4285      	cmp	r5, r0
 8011772:	f84c 1b04 	str.w	r1, [ip], #4
 8011776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801177a:	dcec      	bgt.n	8011756 <__multadd+0x12>
 801177c:	b30e      	cbz	r6, 80117c2 <__multadd+0x7e>
 801177e:	68a3      	ldr	r3, [r4, #8]
 8011780:	42ab      	cmp	r3, r5
 8011782:	dc19      	bgt.n	80117b8 <__multadd+0x74>
 8011784:	6861      	ldr	r1, [r4, #4]
 8011786:	4638      	mov	r0, r7
 8011788:	3101      	adds	r1, #1
 801178a:	f7ff ff79 	bl	8011680 <_Balloc>
 801178e:	4680      	mov	r8, r0
 8011790:	b928      	cbnz	r0, 801179e <__multadd+0x5a>
 8011792:	4602      	mov	r2, r0
 8011794:	4b0c      	ldr	r3, [pc, #48]	; (80117c8 <__multadd+0x84>)
 8011796:	480d      	ldr	r0, [pc, #52]	; (80117cc <__multadd+0x88>)
 8011798:	21b5      	movs	r1, #181	; 0xb5
 801179a:	f7fe ffab 	bl	80106f4 <__assert_func>
 801179e:	6922      	ldr	r2, [r4, #16]
 80117a0:	3202      	adds	r2, #2
 80117a2:	f104 010c 	add.w	r1, r4, #12
 80117a6:	0092      	lsls	r2, r2, #2
 80117a8:	300c      	adds	r0, #12
 80117aa:	f7fe fa1b 	bl	800fbe4 <memcpy>
 80117ae:	4621      	mov	r1, r4
 80117b0:	4638      	mov	r0, r7
 80117b2:	f7ff ffa5 	bl	8011700 <_Bfree>
 80117b6:	4644      	mov	r4, r8
 80117b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117bc:	3501      	adds	r5, #1
 80117be:	615e      	str	r6, [r3, #20]
 80117c0:	6125      	str	r5, [r4, #16]
 80117c2:	4620      	mov	r0, r4
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c8:	08012c0c 	.word	0x08012c0c
 80117cc:	08012c8a 	.word	0x08012c8a

080117d0 <__hi0bits>:
 80117d0:	0c03      	lsrs	r3, r0, #16
 80117d2:	041b      	lsls	r3, r3, #16
 80117d4:	b9d3      	cbnz	r3, 801180c <__hi0bits+0x3c>
 80117d6:	0400      	lsls	r0, r0, #16
 80117d8:	2310      	movs	r3, #16
 80117da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80117de:	bf04      	itt	eq
 80117e0:	0200      	lsleq	r0, r0, #8
 80117e2:	3308      	addeq	r3, #8
 80117e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80117e8:	bf04      	itt	eq
 80117ea:	0100      	lsleq	r0, r0, #4
 80117ec:	3304      	addeq	r3, #4
 80117ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80117f2:	bf04      	itt	eq
 80117f4:	0080      	lsleq	r0, r0, #2
 80117f6:	3302      	addeq	r3, #2
 80117f8:	2800      	cmp	r0, #0
 80117fa:	db05      	blt.n	8011808 <__hi0bits+0x38>
 80117fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011800:	f103 0301 	add.w	r3, r3, #1
 8011804:	bf08      	it	eq
 8011806:	2320      	moveq	r3, #32
 8011808:	4618      	mov	r0, r3
 801180a:	4770      	bx	lr
 801180c:	2300      	movs	r3, #0
 801180e:	e7e4      	b.n	80117da <__hi0bits+0xa>

08011810 <__lo0bits>:
 8011810:	6803      	ldr	r3, [r0, #0]
 8011812:	f013 0207 	ands.w	r2, r3, #7
 8011816:	4601      	mov	r1, r0
 8011818:	d00b      	beq.n	8011832 <__lo0bits+0x22>
 801181a:	07da      	lsls	r2, r3, #31
 801181c:	d423      	bmi.n	8011866 <__lo0bits+0x56>
 801181e:	0798      	lsls	r0, r3, #30
 8011820:	bf49      	itett	mi
 8011822:	085b      	lsrmi	r3, r3, #1
 8011824:	089b      	lsrpl	r3, r3, #2
 8011826:	2001      	movmi	r0, #1
 8011828:	600b      	strmi	r3, [r1, #0]
 801182a:	bf5c      	itt	pl
 801182c:	600b      	strpl	r3, [r1, #0]
 801182e:	2002      	movpl	r0, #2
 8011830:	4770      	bx	lr
 8011832:	b298      	uxth	r0, r3
 8011834:	b9a8      	cbnz	r0, 8011862 <__lo0bits+0x52>
 8011836:	0c1b      	lsrs	r3, r3, #16
 8011838:	2010      	movs	r0, #16
 801183a:	b2da      	uxtb	r2, r3
 801183c:	b90a      	cbnz	r2, 8011842 <__lo0bits+0x32>
 801183e:	3008      	adds	r0, #8
 8011840:	0a1b      	lsrs	r3, r3, #8
 8011842:	071a      	lsls	r2, r3, #28
 8011844:	bf04      	itt	eq
 8011846:	091b      	lsreq	r3, r3, #4
 8011848:	3004      	addeq	r0, #4
 801184a:	079a      	lsls	r2, r3, #30
 801184c:	bf04      	itt	eq
 801184e:	089b      	lsreq	r3, r3, #2
 8011850:	3002      	addeq	r0, #2
 8011852:	07da      	lsls	r2, r3, #31
 8011854:	d403      	bmi.n	801185e <__lo0bits+0x4e>
 8011856:	085b      	lsrs	r3, r3, #1
 8011858:	f100 0001 	add.w	r0, r0, #1
 801185c:	d005      	beq.n	801186a <__lo0bits+0x5a>
 801185e:	600b      	str	r3, [r1, #0]
 8011860:	4770      	bx	lr
 8011862:	4610      	mov	r0, r2
 8011864:	e7e9      	b.n	801183a <__lo0bits+0x2a>
 8011866:	2000      	movs	r0, #0
 8011868:	4770      	bx	lr
 801186a:	2020      	movs	r0, #32
 801186c:	4770      	bx	lr
	...

08011870 <__i2b>:
 8011870:	b510      	push	{r4, lr}
 8011872:	460c      	mov	r4, r1
 8011874:	2101      	movs	r1, #1
 8011876:	f7ff ff03 	bl	8011680 <_Balloc>
 801187a:	4602      	mov	r2, r0
 801187c:	b928      	cbnz	r0, 801188a <__i2b+0x1a>
 801187e:	4b05      	ldr	r3, [pc, #20]	; (8011894 <__i2b+0x24>)
 8011880:	4805      	ldr	r0, [pc, #20]	; (8011898 <__i2b+0x28>)
 8011882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011886:	f7fe ff35 	bl	80106f4 <__assert_func>
 801188a:	2301      	movs	r3, #1
 801188c:	6144      	str	r4, [r0, #20]
 801188e:	6103      	str	r3, [r0, #16]
 8011890:	bd10      	pop	{r4, pc}
 8011892:	bf00      	nop
 8011894:	08012c0c 	.word	0x08012c0c
 8011898:	08012c8a 	.word	0x08012c8a

0801189c <__multiply>:
 801189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a0:	4691      	mov	r9, r2
 80118a2:	690a      	ldr	r2, [r1, #16]
 80118a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	bfb8      	it	lt
 80118ac:	460b      	movlt	r3, r1
 80118ae:	460c      	mov	r4, r1
 80118b0:	bfbc      	itt	lt
 80118b2:	464c      	movlt	r4, r9
 80118b4:	4699      	movlt	r9, r3
 80118b6:	6927      	ldr	r7, [r4, #16]
 80118b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118bc:	68a3      	ldr	r3, [r4, #8]
 80118be:	6861      	ldr	r1, [r4, #4]
 80118c0:	eb07 060a 	add.w	r6, r7, sl
 80118c4:	42b3      	cmp	r3, r6
 80118c6:	b085      	sub	sp, #20
 80118c8:	bfb8      	it	lt
 80118ca:	3101      	addlt	r1, #1
 80118cc:	f7ff fed8 	bl	8011680 <_Balloc>
 80118d0:	b930      	cbnz	r0, 80118e0 <__multiply+0x44>
 80118d2:	4602      	mov	r2, r0
 80118d4:	4b44      	ldr	r3, [pc, #272]	; (80119e8 <__multiply+0x14c>)
 80118d6:	4845      	ldr	r0, [pc, #276]	; (80119ec <__multiply+0x150>)
 80118d8:	f240 115d 	movw	r1, #349	; 0x15d
 80118dc:	f7fe ff0a 	bl	80106f4 <__assert_func>
 80118e0:	f100 0514 	add.w	r5, r0, #20
 80118e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80118e8:	462b      	mov	r3, r5
 80118ea:	2200      	movs	r2, #0
 80118ec:	4543      	cmp	r3, r8
 80118ee:	d321      	bcc.n	8011934 <__multiply+0x98>
 80118f0:	f104 0314 	add.w	r3, r4, #20
 80118f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80118f8:	f109 0314 	add.w	r3, r9, #20
 80118fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011900:	9202      	str	r2, [sp, #8]
 8011902:	1b3a      	subs	r2, r7, r4
 8011904:	3a15      	subs	r2, #21
 8011906:	f022 0203 	bic.w	r2, r2, #3
 801190a:	3204      	adds	r2, #4
 801190c:	f104 0115 	add.w	r1, r4, #21
 8011910:	428f      	cmp	r7, r1
 8011912:	bf38      	it	cc
 8011914:	2204      	movcc	r2, #4
 8011916:	9201      	str	r2, [sp, #4]
 8011918:	9a02      	ldr	r2, [sp, #8]
 801191a:	9303      	str	r3, [sp, #12]
 801191c:	429a      	cmp	r2, r3
 801191e:	d80c      	bhi.n	801193a <__multiply+0x9e>
 8011920:	2e00      	cmp	r6, #0
 8011922:	dd03      	ble.n	801192c <__multiply+0x90>
 8011924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011928:	2b00      	cmp	r3, #0
 801192a:	d05a      	beq.n	80119e2 <__multiply+0x146>
 801192c:	6106      	str	r6, [r0, #16]
 801192e:	b005      	add	sp, #20
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011934:	f843 2b04 	str.w	r2, [r3], #4
 8011938:	e7d8      	b.n	80118ec <__multiply+0x50>
 801193a:	f8b3 a000 	ldrh.w	sl, [r3]
 801193e:	f1ba 0f00 	cmp.w	sl, #0
 8011942:	d024      	beq.n	801198e <__multiply+0xf2>
 8011944:	f104 0e14 	add.w	lr, r4, #20
 8011948:	46a9      	mov	r9, r5
 801194a:	f04f 0c00 	mov.w	ip, #0
 801194e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011952:	f8d9 1000 	ldr.w	r1, [r9]
 8011956:	fa1f fb82 	uxth.w	fp, r2
 801195a:	b289      	uxth	r1, r1
 801195c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011964:	f8d9 2000 	ldr.w	r2, [r9]
 8011968:	4461      	add	r1, ip
 801196a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801196e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011976:	b289      	uxth	r1, r1
 8011978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801197c:	4577      	cmp	r7, lr
 801197e:	f849 1b04 	str.w	r1, [r9], #4
 8011982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011986:	d8e2      	bhi.n	801194e <__multiply+0xb2>
 8011988:	9a01      	ldr	r2, [sp, #4]
 801198a:	f845 c002 	str.w	ip, [r5, r2]
 801198e:	9a03      	ldr	r2, [sp, #12]
 8011990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011994:	3304      	adds	r3, #4
 8011996:	f1b9 0f00 	cmp.w	r9, #0
 801199a:	d020      	beq.n	80119de <__multiply+0x142>
 801199c:	6829      	ldr	r1, [r5, #0]
 801199e:	f104 0c14 	add.w	ip, r4, #20
 80119a2:	46ae      	mov	lr, r5
 80119a4:	f04f 0a00 	mov.w	sl, #0
 80119a8:	f8bc b000 	ldrh.w	fp, [ip]
 80119ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80119b0:	fb09 220b 	mla	r2, r9, fp, r2
 80119b4:	4492      	add	sl, r2
 80119b6:	b289      	uxth	r1, r1
 80119b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80119bc:	f84e 1b04 	str.w	r1, [lr], #4
 80119c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80119c4:	f8be 1000 	ldrh.w	r1, [lr]
 80119c8:	0c12      	lsrs	r2, r2, #16
 80119ca:	fb09 1102 	mla	r1, r9, r2, r1
 80119ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80119d2:	4567      	cmp	r7, ip
 80119d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119d8:	d8e6      	bhi.n	80119a8 <__multiply+0x10c>
 80119da:	9a01      	ldr	r2, [sp, #4]
 80119dc:	50a9      	str	r1, [r5, r2]
 80119de:	3504      	adds	r5, #4
 80119e0:	e79a      	b.n	8011918 <__multiply+0x7c>
 80119e2:	3e01      	subs	r6, #1
 80119e4:	e79c      	b.n	8011920 <__multiply+0x84>
 80119e6:	bf00      	nop
 80119e8:	08012c0c 	.word	0x08012c0c
 80119ec:	08012c8a 	.word	0x08012c8a

080119f0 <__pow5mult>:
 80119f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119f4:	4615      	mov	r5, r2
 80119f6:	f012 0203 	ands.w	r2, r2, #3
 80119fa:	4606      	mov	r6, r0
 80119fc:	460f      	mov	r7, r1
 80119fe:	d007      	beq.n	8011a10 <__pow5mult+0x20>
 8011a00:	4c25      	ldr	r4, [pc, #148]	; (8011a98 <__pow5mult+0xa8>)
 8011a02:	3a01      	subs	r2, #1
 8011a04:	2300      	movs	r3, #0
 8011a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a0a:	f7ff fe9b 	bl	8011744 <__multadd>
 8011a0e:	4607      	mov	r7, r0
 8011a10:	10ad      	asrs	r5, r5, #2
 8011a12:	d03d      	beq.n	8011a90 <__pow5mult+0xa0>
 8011a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a16:	b97c      	cbnz	r4, 8011a38 <__pow5mult+0x48>
 8011a18:	2010      	movs	r0, #16
 8011a1a:	f7fe f8db 	bl	800fbd4 <malloc>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	6270      	str	r0, [r6, #36]	; 0x24
 8011a22:	b928      	cbnz	r0, 8011a30 <__pow5mult+0x40>
 8011a24:	4b1d      	ldr	r3, [pc, #116]	; (8011a9c <__pow5mult+0xac>)
 8011a26:	481e      	ldr	r0, [pc, #120]	; (8011aa0 <__pow5mult+0xb0>)
 8011a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011a2c:	f7fe fe62 	bl	80106f4 <__assert_func>
 8011a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a34:	6004      	str	r4, [r0, #0]
 8011a36:	60c4      	str	r4, [r0, #12]
 8011a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a40:	b94c      	cbnz	r4, 8011a56 <__pow5mult+0x66>
 8011a42:	f240 2171 	movw	r1, #625	; 0x271
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff ff12 	bl	8011870 <__i2b>
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a52:	4604      	mov	r4, r0
 8011a54:	6003      	str	r3, [r0, #0]
 8011a56:	f04f 0900 	mov.w	r9, #0
 8011a5a:	07eb      	lsls	r3, r5, #31
 8011a5c:	d50a      	bpl.n	8011a74 <__pow5mult+0x84>
 8011a5e:	4639      	mov	r1, r7
 8011a60:	4622      	mov	r2, r4
 8011a62:	4630      	mov	r0, r6
 8011a64:	f7ff ff1a 	bl	801189c <__multiply>
 8011a68:	4639      	mov	r1, r7
 8011a6a:	4680      	mov	r8, r0
 8011a6c:	4630      	mov	r0, r6
 8011a6e:	f7ff fe47 	bl	8011700 <_Bfree>
 8011a72:	4647      	mov	r7, r8
 8011a74:	106d      	asrs	r5, r5, #1
 8011a76:	d00b      	beq.n	8011a90 <__pow5mult+0xa0>
 8011a78:	6820      	ldr	r0, [r4, #0]
 8011a7a:	b938      	cbnz	r0, 8011a8c <__pow5mult+0x9c>
 8011a7c:	4622      	mov	r2, r4
 8011a7e:	4621      	mov	r1, r4
 8011a80:	4630      	mov	r0, r6
 8011a82:	f7ff ff0b 	bl	801189c <__multiply>
 8011a86:	6020      	str	r0, [r4, #0]
 8011a88:	f8c0 9000 	str.w	r9, [r0]
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	e7e4      	b.n	8011a5a <__pow5mult+0x6a>
 8011a90:	4638      	mov	r0, r7
 8011a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a96:	bf00      	nop
 8011a98:	08012dd8 	.word	0x08012dd8
 8011a9c:	08012b9a 	.word	0x08012b9a
 8011aa0:	08012c8a 	.word	0x08012c8a

08011aa4 <__lshift>:
 8011aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	6849      	ldr	r1, [r1, #4]
 8011aac:	6923      	ldr	r3, [r4, #16]
 8011aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ab2:	68a3      	ldr	r3, [r4, #8]
 8011ab4:	4607      	mov	r7, r0
 8011ab6:	4691      	mov	r9, r2
 8011ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011abc:	f108 0601 	add.w	r6, r8, #1
 8011ac0:	42b3      	cmp	r3, r6
 8011ac2:	db0b      	blt.n	8011adc <__lshift+0x38>
 8011ac4:	4638      	mov	r0, r7
 8011ac6:	f7ff fddb 	bl	8011680 <_Balloc>
 8011aca:	4605      	mov	r5, r0
 8011acc:	b948      	cbnz	r0, 8011ae2 <__lshift+0x3e>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	4b2a      	ldr	r3, [pc, #168]	; (8011b7c <__lshift+0xd8>)
 8011ad2:	482b      	ldr	r0, [pc, #172]	; (8011b80 <__lshift+0xdc>)
 8011ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ad8:	f7fe fe0c 	bl	80106f4 <__assert_func>
 8011adc:	3101      	adds	r1, #1
 8011ade:	005b      	lsls	r3, r3, #1
 8011ae0:	e7ee      	b.n	8011ac0 <__lshift+0x1c>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	f100 0114 	add.w	r1, r0, #20
 8011ae8:	f100 0210 	add.w	r2, r0, #16
 8011aec:	4618      	mov	r0, r3
 8011aee:	4553      	cmp	r3, sl
 8011af0:	db37      	blt.n	8011b62 <__lshift+0xbe>
 8011af2:	6920      	ldr	r0, [r4, #16]
 8011af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011af8:	f104 0314 	add.w	r3, r4, #20
 8011afc:	f019 091f 	ands.w	r9, r9, #31
 8011b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011b08:	d02f      	beq.n	8011b6a <__lshift+0xc6>
 8011b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8011b0e:	468a      	mov	sl, r1
 8011b10:	f04f 0c00 	mov.w	ip, #0
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	fa02 f209 	lsl.w	r2, r2, r9
 8011b1a:	ea42 020c 	orr.w	r2, r2, ip
 8011b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8011b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b26:	4298      	cmp	r0, r3
 8011b28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011b2c:	d8f2      	bhi.n	8011b14 <__lshift+0x70>
 8011b2e:	1b03      	subs	r3, r0, r4
 8011b30:	3b15      	subs	r3, #21
 8011b32:	f023 0303 	bic.w	r3, r3, #3
 8011b36:	3304      	adds	r3, #4
 8011b38:	f104 0215 	add.w	r2, r4, #21
 8011b3c:	4290      	cmp	r0, r2
 8011b3e:	bf38      	it	cc
 8011b40:	2304      	movcc	r3, #4
 8011b42:	f841 c003 	str.w	ip, [r1, r3]
 8011b46:	f1bc 0f00 	cmp.w	ip, #0
 8011b4a:	d001      	beq.n	8011b50 <__lshift+0xac>
 8011b4c:	f108 0602 	add.w	r6, r8, #2
 8011b50:	3e01      	subs	r6, #1
 8011b52:	4638      	mov	r0, r7
 8011b54:	612e      	str	r6, [r5, #16]
 8011b56:	4621      	mov	r1, r4
 8011b58:	f7ff fdd2 	bl	8011700 <_Bfree>
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b66:	3301      	adds	r3, #1
 8011b68:	e7c1      	b.n	8011aee <__lshift+0x4a>
 8011b6a:	3904      	subs	r1, #4
 8011b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b74:	4298      	cmp	r0, r3
 8011b76:	d8f9      	bhi.n	8011b6c <__lshift+0xc8>
 8011b78:	e7ea      	b.n	8011b50 <__lshift+0xac>
 8011b7a:	bf00      	nop
 8011b7c:	08012c0c 	.word	0x08012c0c
 8011b80:	08012c8a 	.word	0x08012c8a

08011b84 <__mcmp>:
 8011b84:	b530      	push	{r4, r5, lr}
 8011b86:	6902      	ldr	r2, [r0, #16]
 8011b88:	690c      	ldr	r4, [r1, #16]
 8011b8a:	1b12      	subs	r2, r2, r4
 8011b8c:	d10e      	bne.n	8011bac <__mcmp+0x28>
 8011b8e:	f100 0314 	add.w	r3, r0, #20
 8011b92:	3114      	adds	r1, #20
 8011b94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011b98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011b9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ba4:	42a5      	cmp	r5, r4
 8011ba6:	d003      	beq.n	8011bb0 <__mcmp+0x2c>
 8011ba8:	d305      	bcc.n	8011bb6 <__mcmp+0x32>
 8011baa:	2201      	movs	r2, #1
 8011bac:	4610      	mov	r0, r2
 8011bae:	bd30      	pop	{r4, r5, pc}
 8011bb0:	4283      	cmp	r3, r0
 8011bb2:	d3f3      	bcc.n	8011b9c <__mcmp+0x18>
 8011bb4:	e7fa      	b.n	8011bac <__mcmp+0x28>
 8011bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bba:	e7f7      	b.n	8011bac <__mcmp+0x28>

08011bbc <__mdiff>:
 8011bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	4606      	mov	r6, r0
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	4690      	mov	r8, r2
 8011bca:	f7ff ffdb 	bl	8011b84 <__mcmp>
 8011bce:	1e05      	subs	r5, r0, #0
 8011bd0:	d110      	bne.n	8011bf4 <__mdiff+0x38>
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f7ff fd53 	bl	8011680 <_Balloc>
 8011bda:	b930      	cbnz	r0, 8011bea <__mdiff+0x2e>
 8011bdc:	4b3a      	ldr	r3, [pc, #232]	; (8011cc8 <__mdiff+0x10c>)
 8011bde:	4602      	mov	r2, r0
 8011be0:	f240 2132 	movw	r1, #562	; 0x232
 8011be4:	4839      	ldr	r0, [pc, #228]	; (8011ccc <__mdiff+0x110>)
 8011be6:	f7fe fd85 	bl	80106f4 <__assert_func>
 8011bea:	2301      	movs	r3, #1
 8011bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf4:	bfa4      	itt	ge
 8011bf6:	4643      	movge	r3, r8
 8011bf8:	46a0      	movge	r8, r4
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c00:	bfa6      	itte	ge
 8011c02:	461c      	movge	r4, r3
 8011c04:	2500      	movge	r5, #0
 8011c06:	2501      	movlt	r5, #1
 8011c08:	f7ff fd3a 	bl	8011680 <_Balloc>
 8011c0c:	b920      	cbnz	r0, 8011c18 <__mdiff+0x5c>
 8011c0e:	4b2e      	ldr	r3, [pc, #184]	; (8011cc8 <__mdiff+0x10c>)
 8011c10:	4602      	mov	r2, r0
 8011c12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c16:	e7e5      	b.n	8011be4 <__mdiff+0x28>
 8011c18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c1c:	6926      	ldr	r6, [r4, #16]
 8011c1e:	60c5      	str	r5, [r0, #12]
 8011c20:	f104 0914 	add.w	r9, r4, #20
 8011c24:	f108 0514 	add.w	r5, r8, #20
 8011c28:	f100 0e14 	add.w	lr, r0, #20
 8011c2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c34:	f108 0210 	add.w	r2, r8, #16
 8011c38:	46f2      	mov	sl, lr
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c44:	fa1f f883 	uxth.w	r8, r3
 8011c48:	fa11 f18b 	uxtah	r1, r1, fp
 8011c4c:	0c1b      	lsrs	r3, r3, #16
 8011c4e:	eba1 0808 	sub.w	r8, r1, r8
 8011c52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011c56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011c5a:	fa1f f888 	uxth.w	r8, r8
 8011c5e:	1419      	asrs	r1, r3, #16
 8011c60:	454e      	cmp	r6, r9
 8011c62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011c66:	f84a 3b04 	str.w	r3, [sl], #4
 8011c6a:	d8e7      	bhi.n	8011c3c <__mdiff+0x80>
 8011c6c:	1b33      	subs	r3, r6, r4
 8011c6e:	3b15      	subs	r3, #21
 8011c70:	f023 0303 	bic.w	r3, r3, #3
 8011c74:	3304      	adds	r3, #4
 8011c76:	3415      	adds	r4, #21
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	bf38      	it	cc
 8011c7c:	2304      	movcc	r3, #4
 8011c7e:	441d      	add	r5, r3
 8011c80:	4473      	add	r3, lr
 8011c82:	469e      	mov	lr, r3
 8011c84:	462e      	mov	r6, r5
 8011c86:	4566      	cmp	r6, ip
 8011c88:	d30e      	bcc.n	8011ca8 <__mdiff+0xec>
 8011c8a:	f10c 0203 	add.w	r2, ip, #3
 8011c8e:	1b52      	subs	r2, r2, r5
 8011c90:	f022 0203 	bic.w	r2, r2, #3
 8011c94:	3d03      	subs	r5, #3
 8011c96:	45ac      	cmp	ip, r5
 8011c98:	bf38      	it	cc
 8011c9a:	2200      	movcc	r2, #0
 8011c9c:	441a      	add	r2, r3
 8011c9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011ca2:	b17b      	cbz	r3, 8011cc4 <__mdiff+0x108>
 8011ca4:	6107      	str	r7, [r0, #16]
 8011ca6:	e7a3      	b.n	8011bf0 <__mdiff+0x34>
 8011ca8:	f856 8b04 	ldr.w	r8, [r6], #4
 8011cac:	fa11 f288 	uxtah	r2, r1, r8
 8011cb0:	1414      	asrs	r4, r2, #16
 8011cb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011cb6:	b292      	uxth	r2, r2
 8011cb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8011cc0:	1421      	asrs	r1, r4, #16
 8011cc2:	e7e0      	b.n	8011c86 <__mdiff+0xca>
 8011cc4:	3f01      	subs	r7, #1
 8011cc6:	e7ea      	b.n	8011c9e <__mdiff+0xe2>
 8011cc8:	08012c0c 	.word	0x08012c0c
 8011ccc:	08012c8a 	.word	0x08012c8a

08011cd0 <__d2b>:
 8011cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cd4:	4689      	mov	r9, r1
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	ec57 6b10 	vmov	r6, r7, d0
 8011cdc:	4690      	mov	r8, r2
 8011cde:	f7ff fccf 	bl	8011680 <_Balloc>
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	b930      	cbnz	r0, 8011cf4 <__d2b+0x24>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	4b25      	ldr	r3, [pc, #148]	; (8011d80 <__d2b+0xb0>)
 8011cea:	4826      	ldr	r0, [pc, #152]	; (8011d84 <__d2b+0xb4>)
 8011cec:	f240 310a 	movw	r1, #778	; 0x30a
 8011cf0:	f7fe fd00 	bl	80106f4 <__assert_func>
 8011cf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011cfc:	bb35      	cbnz	r5, 8011d4c <__d2b+0x7c>
 8011cfe:	2e00      	cmp	r6, #0
 8011d00:	9301      	str	r3, [sp, #4]
 8011d02:	d028      	beq.n	8011d56 <__d2b+0x86>
 8011d04:	4668      	mov	r0, sp
 8011d06:	9600      	str	r6, [sp, #0]
 8011d08:	f7ff fd82 	bl	8011810 <__lo0bits>
 8011d0c:	9900      	ldr	r1, [sp, #0]
 8011d0e:	b300      	cbz	r0, 8011d52 <__d2b+0x82>
 8011d10:	9a01      	ldr	r2, [sp, #4]
 8011d12:	f1c0 0320 	rsb	r3, r0, #32
 8011d16:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1a:	430b      	orrs	r3, r1
 8011d1c:	40c2      	lsrs	r2, r0
 8011d1e:	6163      	str	r3, [r4, #20]
 8011d20:	9201      	str	r2, [sp, #4]
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	61a3      	str	r3, [r4, #24]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	bf14      	ite	ne
 8011d2a:	2202      	movne	r2, #2
 8011d2c:	2201      	moveq	r2, #1
 8011d2e:	6122      	str	r2, [r4, #16]
 8011d30:	b1d5      	cbz	r5, 8011d68 <__d2b+0x98>
 8011d32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d36:	4405      	add	r5, r0
 8011d38:	f8c9 5000 	str.w	r5, [r9]
 8011d3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d40:	f8c8 0000 	str.w	r0, [r8]
 8011d44:	4620      	mov	r0, r4
 8011d46:	b003      	add	sp, #12
 8011d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d50:	e7d5      	b.n	8011cfe <__d2b+0x2e>
 8011d52:	6161      	str	r1, [r4, #20]
 8011d54:	e7e5      	b.n	8011d22 <__d2b+0x52>
 8011d56:	a801      	add	r0, sp, #4
 8011d58:	f7ff fd5a 	bl	8011810 <__lo0bits>
 8011d5c:	9b01      	ldr	r3, [sp, #4]
 8011d5e:	6163      	str	r3, [r4, #20]
 8011d60:	2201      	movs	r2, #1
 8011d62:	6122      	str	r2, [r4, #16]
 8011d64:	3020      	adds	r0, #32
 8011d66:	e7e3      	b.n	8011d30 <__d2b+0x60>
 8011d68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d70:	f8c9 0000 	str.w	r0, [r9]
 8011d74:	6918      	ldr	r0, [r3, #16]
 8011d76:	f7ff fd2b 	bl	80117d0 <__hi0bits>
 8011d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d7e:	e7df      	b.n	8011d40 <__d2b+0x70>
 8011d80:	08012c0c 	.word	0x08012c0c
 8011d84:	08012c8a 	.word	0x08012c8a

08011d88 <_calloc_r>:
 8011d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d8a:	fba1 2402 	umull	r2, r4, r1, r2
 8011d8e:	b94c      	cbnz	r4, 8011da4 <_calloc_r+0x1c>
 8011d90:	4611      	mov	r1, r2
 8011d92:	9201      	str	r2, [sp, #4]
 8011d94:	f7fd ffa8 	bl	800fce8 <_malloc_r>
 8011d98:	9a01      	ldr	r2, [sp, #4]
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b930      	cbnz	r0, 8011dac <_calloc_r+0x24>
 8011d9e:	4628      	mov	r0, r5
 8011da0:	b003      	add	sp, #12
 8011da2:	bd30      	pop	{r4, r5, pc}
 8011da4:	220c      	movs	r2, #12
 8011da6:	6002      	str	r2, [r0, #0]
 8011da8:	2500      	movs	r5, #0
 8011daa:	e7f8      	b.n	8011d9e <_calloc_r+0x16>
 8011dac:	4621      	mov	r1, r4
 8011dae:	f7fd ff27 	bl	800fc00 <memset>
 8011db2:	e7f4      	b.n	8011d9e <_calloc_r+0x16>

08011db4 <__sfputc_r>:
 8011db4:	6893      	ldr	r3, [r2, #8]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	b410      	push	{r4}
 8011dbc:	6093      	str	r3, [r2, #8]
 8011dbe:	da08      	bge.n	8011dd2 <__sfputc_r+0x1e>
 8011dc0:	6994      	ldr	r4, [r2, #24]
 8011dc2:	42a3      	cmp	r3, r4
 8011dc4:	db01      	blt.n	8011dca <__sfputc_r+0x16>
 8011dc6:	290a      	cmp	r1, #10
 8011dc8:	d103      	bne.n	8011dd2 <__sfputc_r+0x1e>
 8011dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dce:	f000 b98f 	b.w	80120f0 <__swbuf_r>
 8011dd2:	6813      	ldr	r3, [r2, #0]
 8011dd4:	1c58      	adds	r0, r3, #1
 8011dd6:	6010      	str	r0, [r2, #0]
 8011dd8:	7019      	strb	r1, [r3, #0]
 8011dda:	4608      	mov	r0, r1
 8011ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011de0:	4770      	bx	lr

08011de2 <__sfputs_r>:
 8011de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de4:	4606      	mov	r6, r0
 8011de6:	460f      	mov	r7, r1
 8011de8:	4614      	mov	r4, r2
 8011dea:	18d5      	adds	r5, r2, r3
 8011dec:	42ac      	cmp	r4, r5
 8011dee:	d101      	bne.n	8011df4 <__sfputs_r+0x12>
 8011df0:	2000      	movs	r0, #0
 8011df2:	e007      	b.n	8011e04 <__sfputs_r+0x22>
 8011df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df8:	463a      	mov	r2, r7
 8011dfa:	4630      	mov	r0, r6
 8011dfc:	f7ff ffda 	bl	8011db4 <__sfputc_r>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d1f3      	bne.n	8011dec <__sfputs_r+0xa>
 8011e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e08 <_vfiprintf_r>:
 8011e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	b09d      	sub	sp, #116	; 0x74
 8011e10:	4614      	mov	r4, r2
 8011e12:	4698      	mov	r8, r3
 8011e14:	4606      	mov	r6, r0
 8011e16:	b118      	cbz	r0, 8011e20 <_vfiprintf_r+0x18>
 8011e18:	6983      	ldr	r3, [r0, #24]
 8011e1a:	b90b      	cbnz	r3, 8011e20 <_vfiprintf_r+0x18>
 8011e1c:	f7ff fb5a 	bl	80114d4 <__sinit>
 8011e20:	4b89      	ldr	r3, [pc, #548]	; (8012048 <_vfiprintf_r+0x240>)
 8011e22:	429d      	cmp	r5, r3
 8011e24:	d11b      	bne.n	8011e5e <_vfiprintf_r+0x56>
 8011e26:	6875      	ldr	r5, [r6, #4]
 8011e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e2a:	07d9      	lsls	r1, r3, #31
 8011e2c:	d405      	bmi.n	8011e3a <_vfiprintf_r+0x32>
 8011e2e:	89ab      	ldrh	r3, [r5, #12]
 8011e30:	059a      	lsls	r2, r3, #22
 8011e32:	d402      	bmi.n	8011e3a <_vfiprintf_r+0x32>
 8011e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e36:	f7ff fc02 	bl	801163e <__retarget_lock_acquire_recursive>
 8011e3a:	89ab      	ldrh	r3, [r5, #12]
 8011e3c:	071b      	lsls	r3, r3, #28
 8011e3e:	d501      	bpl.n	8011e44 <_vfiprintf_r+0x3c>
 8011e40:	692b      	ldr	r3, [r5, #16]
 8011e42:	b9eb      	cbnz	r3, 8011e80 <_vfiprintf_r+0x78>
 8011e44:	4629      	mov	r1, r5
 8011e46:	4630      	mov	r0, r6
 8011e48:	f000 f9c4 	bl	80121d4 <__swsetup_r>
 8011e4c:	b1c0      	cbz	r0, 8011e80 <_vfiprintf_r+0x78>
 8011e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e50:	07dc      	lsls	r4, r3, #31
 8011e52:	d50e      	bpl.n	8011e72 <_vfiprintf_r+0x6a>
 8011e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e58:	b01d      	add	sp, #116	; 0x74
 8011e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5e:	4b7b      	ldr	r3, [pc, #492]	; (801204c <_vfiprintf_r+0x244>)
 8011e60:	429d      	cmp	r5, r3
 8011e62:	d101      	bne.n	8011e68 <_vfiprintf_r+0x60>
 8011e64:	68b5      	ldr	r5, [r6, #8]
 8011e66:	e7df      	b.n	8011e28 <_vfiprintf_r+0x20>
 8011e68:	4b79      	ldr	r3, [pc, #484]	; (8012050 <_vfiprintf_r+0x248>)
 8011e6a:	429d      	cmp	r5, r3
 8011e6c:	bf08      	it	eq
 8011e6e:	68f5      	ldreq	r5, [r6, #12]
 8011e70:	e7da      	b.n	8011e28 <_vfiprintf_r+0x20>
 8011e72:	89ab      	ldrh	r3, [r5, #12]
 8011e74:	0598      	lsls	r0, r3, #22
 8011e76:	d4ed      	bmi.n	8011e54 <_vfiprintf_r+0x4c>
 8011e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e7a:	f7ff fbe1 	bl	8011640 <__retarget_lock_release_recursive>
 8011e7e:	e7e9      	b.n	8011e54 <_vfiprintf_r+0x4c>
 8011e80:	2300      	movs	r3, #0
 8011e82:	9309      	str	r3, [sp, #36]	; 0x24
 8011e84:	2320      	movs	r3, #32
 8011e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e8e:	2330      	movs	r3, #48	; 0x30
 8011e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012054 <_vfiprintf_r+0x24c>
 8011e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e98:	f04f 0901 	mov.w	r9, #1
 8011e9c:	4623      	mov	r3, r4
 8011e9e:	469a      	mov	sl, r3
 8011ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ea4:	b10a      	cbz	r2, 8011eaa <_vfiprintf_r+0xa2>
 8011ea6:	2a25      	cmp	r2, #37	; 0x25
 8011ea8:	d1f9      	bne.n	8011e9e <_vfiprintf_r+0x96>
 8011eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8011eae:	d00b      	beq.n	8011ec8 <_vfiprintf_r+0xc0>
 8011eb0:	465b      	mov	r3, fp
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f7ff ff93 	bl	8011de2 <__sfputs_r>
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	f000 80aa 	beq.w	8012016 <_vfiprintf_r+0x20e>
 8011ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ec4:	445a      	add	r2, fp
 8011ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8011ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	f000 80a2 	beq.w	8012016 <_vfiprintf_r+0x20e>
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011edc:	f10a 0a01 	add.w	sl, sl, #1
 8011ee0:	9304      	str	r3, [sp, #16]
 8011ee2:	9307      	str	r3, [sp, #28]
 8011ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8011eea:	4654      	mov	r4, sl
 8011eec:	2205      	movs	r2, #5
 8011eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ef2:	4858      	ldr	r0, [pc, #352]	; (8012054 <_vfiprintf_r+0x24c>)
 8011ef4:	f7ee f98c 	bl	8000210 <memchr>
 8011ef8:	9a04      	ldr	r2, [sp, #16]
 8011efa:	b9d8      	cbnz	r0, 8011f34 <_vfiprintf_r+0x12c>
 8011efc:	06d1      	lsls	r1, r2, #27
 8011efe:	bf44      	itt	mi
 8011f00:	2320      	movmi	r3, #32
 8011f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f06:	0713      	lsls	r3, r2, #28
 8011f08:	bf44      	itt	mi
 8011f0a:	232b      	movmi	r3, #43	; 0x2b
 8011f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f10:	f89a 3000 	ldrb.w	r3, [sl]
 8011f14:	2b2a      	cmp	r3, #42	; 0x2a
 8011f16:	d015      	beq.n	8011f44 <_vfiprintf_r+0x13c>
 8011f18:	9a07      	ldr	r2, [sp, #28]
 8011f1a:	4654      	mov	r4, sl
 8011f1c:	2000      	movs	r0, #0
 8011f1e:	f04f 0c0a 	mov.w	ip, #10
 8011f22:	4621      	mov	r1, r4
 8011f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f28:	3b30      	subs	r3, #48	; 0x30
 8011f2a:	2b09      	cmp	r3, #9
 8011f2c:	d94e      	bls.n	8011fcc <_vfiprintf_r+0x1c4>
 8011f2e:	b1b0      	cbz	r0, 8011f5e <_vfiprintf_r+0x156>
 8011f30:	9207      	str	r2, [sp, #28]
 8011f32:	e014      	b.n	8011f5e <_vfiprintf_r+0x156>
 8011f34:	eba0 0308 	sub.w	r3, r0, r8
 8011f38:	fa09 f303 	lsl.w	r3, r9, r3
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	9304      	str	r3, [sp, #16]
 8011f40:	46a2      	mov	sl, r4
 8011f42:	e7d2      	b.n	8011eea <_vfiprintf_r+0xe2>
 8011f44:	9b03      	ldr	r3, [sp, #12]
 8011f46:	1d19      	adds	r1, r3, #4
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	9103      	str	r1, [sp, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	bfbb      	ittet	lt
 8011f50:	425b      	neglt	r3, r3
 8011f52:	f042 0202 	orrlt.w	r2, r2, #2
 8011f56:	9307      	strge	r3, [sp, #28]
 8011f58:	9307      	strlt	r3, [sp, #28]
 8011f5a:	bfb8      	it	lt
 8011f5c:	9204      	strlt	r2, [sp, #16]
 8011f5e:	7823      	ldrb	r3, [r4, #0]
 8011f60:	2b2e      	cmp	r3, #46	; 0x2e
 8011f62:	d10c      	bne.n	8011f7e <_vfiprintf_r+0x176>
 8011f64:	7863      	ldrb	r3, [r4, #1]
 8011f66:	2b2a      	cmp	r3, #42	; 0x2a
 8011f68:	d135      	bne.n	8011fd6 <_vfiprintf_r+0x1ce>
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	1d1a      	adds	r2, r3, #4
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	9203      	str	r2, [sp, #12]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	bfb8      	it	lt
 8011f76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011f7a:	3402      	adds	r4, #2
 8011f7c:	9305      	str	r3, [sp, #20]
 8011f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012064 <_vfiprintf_r+0x25c>
 8011f82:	7821      	ldrb	r1, [r4, #0]
 8011f84:	2203      	movs	r2, #3
 8011f86:	4650      	mov	r0, sl
 8011f88:	f7ee f942 	bl	8000210 <memchr>
 8011f8c:	b140      	cbz	r0, 8011fa0 <_vfiprintf_r+0x198>
 8011f8e:	2340      	movs	r3, #64	; 0x40
 8011f90:	eba0 000a 	sub.w	r0, r0, sl
 8011f94:	fa03 f000 	lsl.w	r0, r3, r0
 8011f98:	9b04      	ldr	r3, [sp, #16]
 8011f9a:	4303      	orrs	r3, r0
 8011f9c:	3401      	adds	r4, #1
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fa4:	482c      	ldr	r0, [pc, #176]	; (8012058 <_vfiprintf_r+0x250>)
 8011fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011faa:	2206      	movs	r2, #6
 8011fac:	f7ee f930 	bl	8000210 <memchr>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d03f      	beq.n	8012034 <_vfiprintf_r+0x22c>
 8011fb4:	4b29      	ldr	r3, [pc, #164]	; (801205c <_vfiprintf_r+0x254>)
 8011fb6:	bb1b      	cbnz	r3, 8012000 <_vfiprintf_r+0x1f8>
 8011fb8:	9b03      	ldr	r3, [sp, #12]
 8011fba:	3307      	adds	r3, #7
 8011fbc:	f023 0307 	bic.w	r3, r3, #7
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	9303      	str	r3, [sp, #12]
 8011fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc6:	443b      	add	r3, r7
 8011fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011fca:	e767      	b.n	8011e9c <_vfiprintf_r+0x94>
 8011fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fd0:	460c      	mov	r4, r1
 8011fd2:	2001      	movs	r0, #1
 8011fd4:	e7a5      	b.n	8011f22 <_vfiprintf_r+0x11a>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	3401      	adds	r4, #1
 8011fda:	9305      	str	r3, [sp, #20]
 8011fdc:	4619      	mov	r1, r3
 8011fde:	f04f 0c0a 	mov.w	ip, #10
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fe8:	3a30      	subs	r2, #48	; 0x30
 8011fea:	2a09      	cmp	r2, #9
 8011fec:	d903      	bls.n	8011ff6 <_vfiprintf_r+0x1ee>
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d0c5      	beq.n	8011f7e <_vfiprintf_r+0x176>
 8011ff2:	9105      	str	r1, [sp, #20]
 8011ff4:	e7c3      	b.n	8011f7e <_vfiprintf_r+0x176>
 8011ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e7f0      	b.n	8011fe2 <_vfiprintf_r+0x1da>
 8012000:	ab03      	add	r3, sp, #12
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	462a      	mov	r2, r5
 8012006:	4b16      	ldr	r3, [pc, #88]	; (8012060 <_vfiprintf_r+0x258>)
 8012008:	a904      	add	r1, sp, #16
 801200a:	4630      	mov	r0, r6
 801200c:	f7fd ff80 	bl	800ff10 <_printf_float>
 8012010:	4607      	mov	r7, r0
 8012012:	1c78      	adds	r0, r7, #1
 8012014:	d1d6      	bne.n	8011fc4 <_vfiprintf_r+0x1bc>
 8012016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012018:	07d9      	lsls	r1, r3, #31
 801201a:	d405      	bmi.n	8012028 <_vfiprintf_r+0x220>
 801201c:	89ab      	ldrh	r3, [r5, #12]
 801201e:	059a      	lsls	r2, r3, #22
 8012020:	d402      	bmi.n	8012028 <_vfiprintf_r+0x220>
 8012022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012024:	f7ff fb0c 	bl	8011640 <__retarget_lock_release_recursive>
 8012028:	89ab      	ldrh	r3, [r5, #12]
 801202a:	065b      	lsls	r3, r3, #25
 801202c:	f53f af12 	bmi.w	8011e54 <_vfiprintf_r+0x4c>
 8012030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012032:	e711      	b.n	8011e58 <_vfiprintf_r+0x50>
 8012034:	ab03      	add	r3, sp, #12
 8012036:	9300      	str	r3, [sp, #0]
 8012038:	462a      	mov	r2, r5
 801203a:	4b09      	ldr	r3, [pc, #36]	; (8012060 <_vfiprintf_r+0x258>)
 801203c:	a904      	add	r1, sp, #16
 801203e:	4630      	mov	r0, r6
 8012040:	f7fe fa0a 	bl	8010458 <_printf_i>
 8012044:	e7e4      	b.n	8012010 <_vfiprintf_r+0x208>
 8012046:	bf00      	nop
 8012048:	08012c40 	.word	0x08012c40
 801204c:	08012c60 	.word	0x08012c60
 8012050:	08012c20 	.word	0x08012c20
 8012054:	08012de4 	.word	0x08012de4
 8012058:	08012dee 	.word	0x08012dee
 801205c:	0800ff11 	.word	0x0800ff11
 8012060:	08011de3 	.word	0x08011de3
 8012064:	08012dea 	.word	0x08012dea

08012068 <__sread>:
 8012068:	b510      	push	{r4, lr}
 801206a:	460c      	mov	r4, r1
 801206c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012070:	f000 fa70 	bl	8012554 <_read_r>
 8012074:	2800      	cmp	r0, #0
 8012076:	bfab      	itete	ge
 8012078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801207a:	89a3      	ldrhlt	r3, [r4, #12]
 801207c:	181b      	addge	r3, r3, r0
 801207e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012082:	bfac      	ite	ge
 8012084:	6563      	strge	r3, [r4, #84]	; 0x54
 8012086:	81a3      	strhlt	r3, [r4, #12]
 8012088:	bd10      	pop	{r4, pc}

0801208a <__swrite>:
 801208a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208e:	461f      	mov	r7, r3
 8012090:	898b      	ldrh	r3, [r1, #12]
 8012092:	05db      	lsls	r3, r3, #23
 8012094:	4605      	mov	r5, r0
 8012096:	460c      	mov	r4, r1
 8012098:	4616      	mov	r6, r2
 801209a:	d505      	bpl.n	80120a8 <__swrite+0x1e>
 801209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a0:	2302      	movs	r3, #2
 80120a2:	2200      	movs	r2, #0
 80120a4:	f000 f9de 	bl	8012464 <_lseek_r>
 80120a8:	89a3      	ldrh	r3, [r4, #12]
 80120aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120b2:	81a3      	strh	r3, [r4, #12]
 80120b4:	4632      	mov	r2, r6
 80120b6:	463b      	mov	r3, r7
 80120b8:	4628      	mov	r0, r5
 80120ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120be:	f000 b877 	b.w	80121b0 <_write_r>

080120c2 <__sseek>:
 80120c2:	b510      	push	{r4, lr}
 80120c4:	460c      	mov	r4, r1
 80120c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ca:	f000 f9cb 	bl	8012464 <_lseek_r>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	89a3      	ldrh	r3, [r4, #12]
 80120d2:	bf15      	itete	ne
 80120d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80120d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120de:	81a3      	strheq	r3, [r4, #12]
 80120e0:	bf18      	it	ne
 80120e2:	81a3      	strhne	r3, [r4, #12]
 80120e4:	bd10      	pop	{r4, pc}

080120e6 <__sclose>:
 80120e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ea:	f000 b8e9 	b.w	80122c0 <_close_r>
	...

080120f0 <__swbuf_r>:
 80120f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f2:	460e      	mov	r6, r1
 80120f4:	4614      	mov	r4, r2
 80120f6:	4605      	mov	r5, r0
 80120f8:	b118      	cbz	r0, 8012102 <__swbuf_r+0x12>
 80120fa:	6983      	ldr	r3, [r0, #24]
 80120fc:	b90b      	cbnz	r3, 8012102 <__swbuf_r+0x12>
 80120fe:	f7ff f9e9 	bl	80114d4 <__sinit>
 8012102:	4b21      	ldr	r3, [pc, #132]	; (8012188 <__swbuf_r+0x98>)
 8012104:	429c      	cmp	r4, r3
 8012106:	d12b      	bne.n	8012160 <__swbuf_r+0x70>
 8012108:	686c      	ldr	r4, [r5, #4]
 801210a:	69a3      	ldr	r3, [r4, #24]
 801210c:	60a3      	str	r3, [r4, #8]
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	071a      	lsls	r2, r3, #28
 8012112:	d52f      	bpl.n	8012174 <__swbuf_r+0x84>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	b36b      	cbz	r3, 8012174 <__swbuf_r+0x84>
 8012118:	6923      	ldr	r3, [r4, #16]
 801211a:	6820      	ldr	r0, [r4, #0]
 801211c:	1ac0      	subs	r0, r0, r3
 801211e:	6963      	ldr	r3, [r4, #20]
 8012120:	b2f6      	uxtb	r6, r6
 8012122:	4283      	cmp	r3, r0
 8012124:	4637      	mov	r7, r6
 8012126:	dc04      	bgt.n	8012132 <__swbuf_r+0x42>
 8012128:	4621      	mov	r1, r4
 801212a:	4628      	mov	r0, r5
 801212c:	f000 f95e 	bl	80123ec <_fflush_r>
 8012130:	bb30      	cbnz	r0, 8012180 <__swbuf_r+0x90>
 8012132:	68a3      	ldr	r3, [r4, #8]
 8012134:	3b01      	subs	r3, #1
 8012136:	60a3      	str	r3, [r4, #8]
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	1c5a      	adds	r2, r3, #1
 801213c:	6022      	str	r2, [r4, #0]
 801213e:	701e      	strb	r6, [r3, #0]
 8012140:	6963      	ldr	r3, [r4, #20]
 8012142:	3001      	adds	r0, #1
 8012144:	4283      	cmp	r3, r0
 8012146:	d004      	beq.n	8012152 <__swbuf_r+0x62>
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	07db      	lsls	r3, r3, #31
 801214c:	d506      	bpl.n	801215c <__swbuf_r+0x6c>
 801214e:	2e0a      	cmp	r6, #10
 8012150:	d104      	bne.n	801215c <__swbuf_r+0x6c>
 8012152:	4621      	mov	r1, r4
 8012154:	4628      	mov	r0, r5
 8012156:	f000 f949 	bl	80123ec <_fflush_r>
 801215a:	b988      	cbnz	r0, 8012180 <__swbuf_r+0x90>
 801215c:	4638      	mov	r0, r7
 801215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012160:	4b0a      	ldr	r3, [pc, #40]	; (801218c <__swbuf_r+0x9c>)
 8012162:	429c      	cmp	r4, r3
 8012164:	d101      	bne.n	801216a <__swbuf_r+0x7a>
 8012166:	68ac      	ldr	r4, [r5, #8]
 8012168:	e7cf      	b.n	801210a <__swbuf_r+0x1a>
 801216a:	4b09      	ldr	r3, [pc, #36]	; (8012190 <__swbuf_r+0xa0>)
 801216c:	429c      	cmp	r4, r3
 801216e:	bf08      	it	eq
 8012170:	68ec      	ldreq	r4, [r5, #12]
 8012172:	e7ca      	b.n	801210a <__swbuf_r+0x1a>
 8012174:	4621      	mov	r1, r4
 8012176:	4628      	mov	r0, r5
 8012178:	f000 f82c 	bl	80121d4 <__swsetup_r>
 801217c:	2800      	cmp	r0, #0
 801217e:	d0cb      	beq.n	8012118 <__swbuf_r+0x28>
 8012180:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012184:	e7ea      	b.n	801215c <__swbuf_r+0x6c>
 8012186:	bf00      	nop
 8012188:	08012c40 	.word	0x08012c40
 801218c:	08012c60 	.word	0x08012c60
 8012190:	08012c20 	.word	0x08012c20

08012194 <__ascii_wctomb>:
 8012194:	b149      	cbz	r1, 80121aa <__ascii_wctomb+0x16>
 8012196:	2aff      	cmp	r2, #255	; 0xff
 8012198:	bf85      	ittet	hi
 801219a:	238a      	movhi	r3, #138	; 0x8a
 801219c:	6003      	strhi	r3, [r0, #0]
 801219e:	700a      	strbls	r2, [r1, #0]
 80121a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80121a4:	bf98      	it	ls
 80121a6:	2001      	movls	r0, #1
 80121a8:	4770      	bx	lr
 80121aa:	4608      	mov	r0, r1
 80121ac:	4770      	bx	lr
	...

080121b0 <_write_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d07      	ldr	r5, [pc, #28]	; (80121d0 <_write_r+0x20>)
 80121b4:	4604      	mov	r4, r0
 80121b6:	4608      	mov	r0, r1
 80121b8:	4611      	mov	r1, r2
 80121ba:	2200      	movs	r2, #0
 80121bc:	602a      	str	r2, [r5, #0]
 80121be:	461a      	mov	r2, r3
 80121c0:	f000 fa86 	bl	80126d0 <_write>
 80121c4:	1c43      	adds	r3, r0, #1
 80121c6:	d102      	bne.n	80121ce <_write_r+0x1e>
 80121c8:	682b      	ldr	r3, [r5, #0]
 80121ca:	b103      	cbz	r3, 80121ce <_write_r+0x1e>
 80121cc:	6023      	str	r3, [r4, #0]
 80121ce:	bd38      	pop	{r3, r4, r5, pc}
 80121d0:	200029a4 	.word	0x200029a4

080121d4 <__swsetup_r>:
 80121d4:	4b32      	ldr	r3, [pc, #200]	; (80122a0 <__swsetup_r+0xcc>)
 80121d6:	b570      	push	{r4, r5, r6, lr}
 80121d8:	681d      	ldr	r5, [r3, #0]
 80121da:	4606      	mov	r6, r0
 80121dc:	460c      	mov	r4, r1
 80121de:	b125      	cbz	r5, 80121ea <__swsetup_r+0x16>
 80121e0:	69ab      	ldr	r3, [r5, #24]
 80121e2:	b913      	cbnz	r3, 80121ea <__swsetup_r+0x16>
 80121e4:	4628      	mov	r0, r5
 80121e6:	f7ff f975 	bl	80114d4 <__sinit>
 80121ea:	4b2e      	ldr	r3, [pc, #184]	; (80122a4 <__swsetup_r+0xd0>)
 80121ec:	429c      	cmp	r4, r3
 80121ee:	d10f      	bne.n	8012210 <__swsetup_r+0x3c>
 80121f0:	686c      	ldr	r4, [r5, #4]
 80121f2:	89a3      	ldrh	r3, [r4, #12]
 80121f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121f8:	0719      	lsls	r1, r3, #28
 80121fa:	d42c      	bmi.n	8012256 <__swsetup_r+0x82>
 80121fc:	06dd      	lsls	r5, r3, #27
 80121fe:	d411      	bmi.n	8012224 <__swsetup_r+0x50>
 8012200:	2309      	movs	r3, #9
 8012202:	6033      	str	r3, [r6, #0]
 8012204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012208:	81a3      	strh	r3, [r4, #12]
 801220a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801220e:	e03e      	b.n	801228e <__swsetup_r+0xba>
 8012210:	4b25      	ldr	r3, [pc, #148]	; (80122a8 <__swsetup_r+0xd4>)
 8012212:	429c      	cmp	r4, r3
 8012214:	d101      	bne.n	801221a <__swsetup_r+0x46>
 8012216:	68ac      	ldr	r4, [r5, #8]
 8012218:	e7eb      	b.n	80121f2 <__swsetup_r+0x1e>
 801221a:	4b24      	ldr	r3, [pc, #144]	; (80122ac <__swsetup_r+0xd8>)
 801221c:	429c      	cmp	r4, r3
 801221e:	bf08      	it	eq
 8012220:	68ec      	ldreq	r4, [r5, #12]
 8012222:	e7e6      	b.n	80121f2 <__swsetup_r+0x1e>
 8012224:	0758      	lsls	r0, r3, #29
 8012226:	d512      	bpl.n	801224e <__swsetup_r+0x7a>
 8012228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801222a:	b141      	cbz	r1, 801223e <__swsetup_r+0x6a>
 801222c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012230:	4299      	cmp	r1, r3
 8012232:	d002      	beq.n	801223a <__swsetup_r+0x66>
 8012234:	4630      	mov	r0, r6
 8012236:	f7fd fceb 	bl	800fc10 <_free_r>
 801223a:	2300      	movs	r3, #0
 801223c:	6363      	str	r3, [r4, #52]	; 0x34
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012244:	81a3      	strh	r3, [r4, #12]
 8012246:	2300      	movs	r3, #0
 8012248:	6063      	str	r3, [r4, #4]
 801224a:	6923      	ldr	r3, [r4, #16]
 801224c:	6023      	str	r3, [r4, #0]
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	f043 0308 	orr.w	r3, r3, #8
 8012254:	81a3      	strh	r3, [r4, #12]
 8012256:	6923      	ldr	r3, [r4, #16]
 8012258:	b94b      	cbnz	r3, 801226e <__swsetup_r+0x9a>
 801225a:	89a3      	ldrh	r3, [r4, #12]
 801225c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012264:	d003      	beq.n	801226e <__swsetup_r+0x9a>
 8012266:	4621      	mov	r1, r4
 8012268:	4630      	mov	r0, r6
 801226a:	f000 f933 	bl	80124d4 <__smakebuf_r>
 801226e:	89a0      	ldrh	r0, [r4, #12]
 8012270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012274:	f010 0301 	ands.w	r3, r0, #1
 8012278:	d00a      	beq.n	8012290 <__swsetup_r+0xbc>
 801227a:	2300      	movs	r3, #0
 801227c:	60a3      	str	r3, [r4, #8]
 801227e:	6963      	ldr	r3, [r4, #20]
 8012280:	425b      	negs	r3, r3
 8012282:	61a3      	str	r3, [r4, #24]
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	b943      	cbnz	r3, 801229a <__swsetup_r+0xc6>
 8012288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801228c:	d1ba      	bne.n	8012204 <__swsetup_r+0x30>
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	0781      	lsls	r1, r0, #30
 8012292:	bf58      	it	pl
 8012294:	6963      	ldrpl	r3, [r4, #20]
 8012296:	60a3      	str	r3, [r4, #8]
 8012298:	e7f4      	b.n	8012284 <__swsetup_r+0xb0>
 801229a:	2000      	movs	r0, #0
 801229c:	e7f7      	b.n	801228e <__swsetup_r+0xba>
 801229e:	bf00      	nop
 80122a0:	20000188 	.word	0x20000188
 80122a4:	08012c40 	.word	0x08012c40
 80122a8:	08012c60 	.word	0x08012c60
 80122ac:	08012c20 	.word	0x08012c20

080122b0 <abort>:
 80122b0:	b508      	push	{r3, lr}
 80122b2:	2006      	movs	r0, #6
 80122b4:	f000 f988 	bl	80125c8 <raise>
 80122b8:	2001      	movs	r0, #1
 80122ba:	f000 fa11 	bl	80126e0 <_exit>
	...

080122c0 <_close_r>:
 80122c0:	b538      	push	{r3, r4, r5, lr}
 80122c2:	4d06      	ldr	r5, [pc, #24]	; (80122dc <_close_r+0x1c>)
 80122c4:	2300      	movs	r3, #0
 80122c6:	4604      	mov	r4, r0
 80122c8:	4608      	mov	r0, r1
 80122ca:	602b      	str	r3, [r5, #0]
 80122cc:	f000 f9ba 	bl	8012644 <_close>
 80122d0:	1c43      	adds	r3, r0, #1
 80122d2:	d102      	bne.n	80122da <_close_r+0x1a>
 80122d4:	682b      	ldr	r3, [r5, #0]
 80122d6:	b103      	cbz	r3, 80122da <_close_r+0x1a>
 80122d8:	6023      	str	r3, [r4, #0]
 80122da:	bd38      	pop	{r3, r4, r5, pc}
 80122dc:	200029a4 	.word	0x200029a4

080122e0 <__sflush_r>:
 80122e0:	898a      	ldrh	r2, [r1, #12]
 80122e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e6:	4605      	mov	r5, r0
 80122e8:	0710      	lsls	r0, r2, #28
 80122ea:	460c      	mov	r4, r1
 80122ec:	d458      	bmi.n	80123a0 <__sflush_r+0xc0>
 80122ee:	684b      	ldr	r3, [r1, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	dc05      	bgt.n	8012300 <__sflush_r+0x20>
 80122f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	dc02      	bgt.n	8012300 <__sflush_r+0x20>
 80122fa:	2000      	movs	r0, #0
 80122fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012302:	2e00      	cmp	r6, #0
 8012304:	d0f9      	beq.n	80122fa <__sflush_r+0x1a>
 8012306:	2300      	movs	r3, #0
 8012308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801230c:	682f      	ldr	r7, [r5, #0]
 801230e:	602b      	str	r3, [r5, #0]
 8012310:	d032      	beq.n	8012378 <__sflush_r+0x98>
 8012312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	075a      	lsls	r2, r3, #29
 8012318:	d505      	bpl.n	8012326 <__sflush_r+0x46>
 801231a:	6863      	ldr	r3, [r4, #4]
 801231c:	1ac0      	subs	r0, r0, r3
 801231e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012320:	b10b      	cbz	r3, 8012326 <__sflush_r+0x46>
 8012322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012324:	1ac0      	subs	r0, r0, r3
 8012326:	2300      	movs	r3, #0
 8012328:	4602      	mov	r2, r0
 801232a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801232c:	6a21      	ldr	r1, [r4, #32]
 801232e:	4628      	mov	r0, r5
 8012330:	47b0      	blx	r6
 8012332:	1c43      	adds	r3, r0, #1
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	d106      	bne.n	8012346 <__sflush_r+0x66>
 8012338:	6829      	ldr	r1, [r5, #0]
 801233a:	291d      	cmp	r1, #29
 801233c:	d82c      	bhi.n	8012398 <__sflush_r+0xb8>
 801233e:	4a2a      	ldr	r2, [pc, #168]	; (80123e8 <__sflush_r+0x108>)
 8012340:	40ca      	lsrs	r2, r1
 8012342:	07d6      	lsls	r6, r2, #31
 8012344:	d528      	bpl.n	8012398 <__sflush_r+0xb8>
 8012346:	2200      	movs	r2, #0
 8012348:	6062      	str	r2, [r4, #4]
 801234a:	04d9      	lsls	r1, r3, #19
 801234c:	6922      	ldr	r2, [r4, #16]
 801234e:	6022      	str	r2, [r4, #0]
 8012350:	d504      	bpl.n	801235c <__sflush_r+0x7c>
 8012352:	1c42      	adds	r2, r0, #1
 8012354:	d101      	bne.n	801235a <__sflush_r+0x7a>
 8012356:	682b      	ldr	r3, [r5, #0]
 8012358:	b903      	cbnz	r3, 801235c <__sflush_r+0x7c>
 801235a:	6560      	str	r0, [r4, #84]	; 0x54
 801235c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801235e:	602f      	str	r7, [r5, #0]
 8012360:	2900      	cmp	r1, #0
 8012362:	d0ca      	beq.n	80122fa <__sflush_r+0x1a>
 8012364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012368:	4299      	cmp	r1, r3
 801236a:	d002      	beq.n	8012372 <__sflush_r+0x92>
 801236c:	4628      	mov	r0, r5
 801236e:	f7fd fc4f 	bl	800fc10 <_free_r>
 8012372:	2000      	movs	r0, #0
 8012374:	6360      	str	r0, [r4, #52]	; 0x34
 8012376:	e7c1      	b.n	80122fc <__sflush_r+0x1c>
 8012378:	6a21      	ldr	r1, [r4, #32]
 801237a:	2301      	movs	r3, #1
 801237c:	4628      	mov	r0, r5
 801237e:	47b0      	blx	r6
 8012380:	1c41      	adds	r1, r0, #1
 8012382:	d1c7      	bne.n	8012314 <__sflush_r+0x34>
 8012384:	682b      	ldr	r3, [r5, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0c4      	beq.n	8012314 <__sflush_r+0x34>
 801238a:	2b1d      	cmp	r3, #29
 801238c:	d001      	beq.n	8012392 <__sflush_r+0xb2>
 801238e:	2b16      	cmp	r3, #22
 8012390:	d101      	bne.n	8012396 <__sflush_r+0xb6>
 8012392:	602f      	str	r7, [r5, #0]
 8012394:	e7b1      	b.n	80122fa <__sflush_r+0x1a>
 8012396:	89a3      	ldrh	r3, [r4, #12]
 8012398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801239c:	81a3      	strh	r3, [r4, #12]
 801239e:	e7ad      	b.n	80122fc <__sflush_r+0x1c>
 80123a0:	690f      	ldr	r7, [r1, #16]
 80123a2:	2f00      	cmp	r7, #0
 80123a4:	d0a9      	beq.n	80122fa <__sflush_r+0x1a>
 80123a6:	0793      	lsls	r3, r2, #30
 80123a8:	680e      	ldr	r6, [r1, #0]
 80123aa:	bf08      	it	eq
 80123ac:	694b      	ldreq	r3, [r1, #20]
 80123ae:	600f      	str	r7, [r1, #0]
 80123b0:	bf18      	it	ne
 80123b2:	2300      	movne	r3, #0
 80123b4:	eba6 0807 	sub.w	r8, r6, r7
 80123b8:	608b      	str	r3, [r1, #8]
 80123ba:	f1b8 0f00 	cmp.w	r8, #0
 80123be:	dd9c      	ble.n	80122fa <__sflush_r+0x1a>
 80123c0:	6a21      	ldr	r1, [r4, #32]
 80123c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123c4:	4643      	mov	r3, r8
 80123c6:	463a      	mov	r2, r7
 80123c8:	4628      	mov	r0, r5
 80123ca:	47b0      	blx	r6
 80123cc:	2800      	cmp	r0, #0
 80123ce:	dc06      	bgt.n	80123de <__sflush_r+0xfe>
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123d6:	81a3      	strh	r3, [r4, #12]
 80123d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123dc:	e78e      	b.n	80122fc <__sflush_r+0x1c>
 80123de:	4407      	add	r7, r0
 80123e0:	eba8 0800 	sub.w	r8, r8, r0
 80123e4:	e7e9      	b.n	80123ba <__sflush_r+0xda>
 80123e6:	bf00      	nop
 80123e8:	20400001 	.word	0x20400001

080123ec <_fflush_r>:
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	690b      	ldr	r3, [r1, #16]
 80123f0:	4605      	mov	r5, r0
 80123f2:	460c      	mov	r4, r1
 80123f4:	b913      	cbnz	r3, 80123fc <_fflush_r+0x10>
 80123f6:	2500      	movs	r5, #0
 80123f8:	4628      	mov	r0, r5
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	b118      	cbz	r0, 8012406 <_fflush_r+0x1a>
 80123fe:	6983      	ldr	r3, [r0, #24]
 8012400:	b90b      	cbnz	r3, 8012406 <_fflush_r+0x1a>
 8012402:	f7ff f867 	bl	80114d4 <__sinit>
 8012406:	4b14      	ldr	r3, [pc, #80]	; (8012458 <_fflush_r+0x6c>)
 8012408:	429c      	cmp	r4, r3
 801240a:	d11b      	bne.n	8012444 <_fflush_r+0x58>
 801240c:	686c      	ldr	r4, [r5, #4]
 801240e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d0ef      	beq.n	80123f6 <_fflush_r+0xa>
 8012416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012418:	07d0      	lsls	r0, r2, #31
 801241a:	d404      	bmi.n	8012426 <_fflush_r+0x3a>
 801241c:	0599      	lsls	r1, r3, #22
 801241e:	d402      	bmi.n	8012426 <_fflush_r+0x3a>
 8012420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012422:	f7ff f90c 	bl	801163e <__retarget_lock_acquire_recursive>
 8012426:	4628      	mov	r0, r5
 8012428:	4621      	mov	r1, r4
 801242a:	f7ff ff59 	bl	80122e0 <__sflush_r>
 801242e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012430:	07da      	lsls	r2, r3, #31
 8012432:	4605      	mov	r5, r0
 8012434:	d4e0      	bmi.n	80123f8 <_fflush_r+0xc>
 8012436:	89a3      	ldrh	r3, [r4, #12]
 8012438:	059b      	lsls	r3, r3, #22
 801243a:	d4dd      	bmi.n	80123f8 <_fflush_r+0xc>
 801243c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801243e:	f7ff f8ff 	bl	8011640 <__retarget_lock_release_recursive>
 8012442:	e7d9      	b.n	80123f8 <_fflush_r+0xc>
 8012444:	4b05      	ldr	r3, [pc, #20]	; (801245c <_fflush_r+0x70>)
 8012446:	429c      	cmp	r4, r3
 8012448:	d101      	bne.n	801244e <_fflush_r+0x62>
 801244a:	68ac      	ldr	r4, [r5, #8]
 801244c:	e7df      	b.n	801240e <_fflush_r+0x22>
 801244e:	4b04      	ldr	r3, [pc, #16]	; (8012460 <_fflush_r+0x74>)
 8012450:	429c      	cmp	r4, r3
 8012452:	bf08      	it	eq
 8012454:	68ec      	ldreq	r4, [r5, #12]
 8012456:	e7da      	b.n	801240e <_fflush_r+0x22>
 8012458:	08012c40 	.word	0x08012c40
 801245c:	08012c60 	.word	0x08012c60
 8012460:	08012c20 	.word	0x08012c20

08012464 <_lseek_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d07      	ldr	r5, [pc, #28]	; (8012484 <_lseek_r+0x20>)
 8012468:	4604      	mov	r4, r0
 801246a:	4608      	mov	r0, r1
 801246c:	4611      	mov	r1, r2
 801246e:	2200      	movs	r2, #0
 8012470:	602a      	str	r2, [r5, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	f000 f90e 	bl	8012694 <_lseek>
 8012478:	1c43      	adds	r3, r0, #1
 801247a:	d102      	bne.n	8012482 <_lseek_r+0x1e>
 801247c:	682b      	ldr	r3, [r5, #0]
 801247e:	b103      	cbz	r3, 8012482 <_lseek_r+0x1e>
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	200029a4 	.word	0x200029a4

08012488 <__swhatbuf_r>:
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	460e      	mov	r6, r1
 801248c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012490:	2900      	cmp	r1, #0
 8012492:	b096      	sub	sp, #88	; 0x58
 8012494:	4614      	mov	r4, r2
 8012496:	461d      	mov	r5, r3
 8012498:	da08      	bge.n	80124ac <__swhatbuf_r+0x24>
 801249a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801249e:	2200      	movs	r2, #0
 80124a0:	602a      	str	r2, [r5, #0]
 80124a2:	061a      	lsls	r2, r3, #24
 80124a4:	d410      	bmi.n	80124c8 <__swhatbuf_r+0x40>
 80124a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124aa:	e00e      	b.n	80124ca <__swhatbuf_r+0x42>
 80124ac:	466a      	mov	r2, sp
 80124ae:	f000 f8a7 	bl	8012600 <_fstat_r>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	dbf1      	blt.n	801249a <__swhatbuf_r+0x12>
 80124b6:	9a01      	ldr	r2, [sp, #4]
 80124b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124c0:	425a      	negs	r2, r3
 80124c2:	415a      	adcs	r2, r3
 80124c4:	602a      	str	r2, [r5, #0]
 80124c6:	e7ee      	b.n	80124a6 <__swhatbuf_r+0x1e>
 80124c8:	2340      	movs	r3, #64	; 0x40
 80124ca:	2000      	movs	r0, #0
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	b016      	add	sp, #88	; 0x58
 80124d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080124d4 <__smakebuf_r>:
 80124d4:	898b      	ldrh	r3, [r1, #12]
 80124d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124d8:	079d      	lsls	r5, r3, #30
 80124da:	4606      	mov	r6, r0
 80124dc:	460c      	mov	r4, r1
 80124de:	d507      	bpl.n	80124f0 <__smakebuf_r+0x1c>
 80124e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	6123      	str	r3, [r4, #16]
 80124e8:	2301      	movs	r3, #1
 80124ea:	6163      	str	r3, [r4, #20]
 80124ec:	b002      	add	sp, #8
 80124ee:	bd70      	pop	{r4, r5, r6, pc}
 80124f0:	ab01      	add	r3, sp, #4
 80124f2:	466a      	mov	r2, sp
 80124f4:	f7ff ffc8 	bl	8012488 <__swhatbuf_r>
 80124f8:	9900      	ldr	r1, [sp, #0]
 80124fa:	4605      	mov	r5, r0
 80124fc:	4630      	mov	r0, r6
 80124fe:	f7fd fbf3 	bl	800fce8 <_malloc_r>
 8012502:	b948      	cbnz	r0, 8012518 <__smakebuf_r+0x44>
 8012504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012508:	059a      	lsls	r2, r3, #22
 801250a:	d4ef      	bmi.n	80124ec <__smakebuf_r+0x18>
 801250c:	f023 0303 	bic.w	r3, r3, #3
 8012510:	f043 0302 	orr.w	r3, r3, #2
 8012514:	81a3      	strh	r3, [r4, #12]
 8012516:	e7e3      	b.n	80124e0 <__smakebuf_r+0xc>
 8012518:	4b0d      	ldr	r3, [pc, #52]	; (8012550 <__smakebuf_r+0x7c>)
 801251a:	62b3      	str	r3, [r6, #40]	; 0x28
 801251c:	89a3      	ldrh	r3, [r4, #12]
 801251e:	6020      	str	r0, [r4, #0]
 8012520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	9b00      	ldr	r3, [sp, #0]
 8012528:	6163      	str	r3, [r4, #20]
 801252a:	9b01      	ldr	r3, [sp, #4]
 801252c:	6120      	str	r0, [r4, #16]
 801252e:	b15b      	cbz	r3, 8012548 <__smakebuf_r+0x74>
 8012530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012534:	4630      	mov	r0, r6
 8012536:	f000 f875 	bl	8012624 <_isatty_r>
 801253a:	b128      	cbz	r0, 8012548 <__smakebuf_r+0x74>
 801253c:	89a3      	ldrh	r3, [r4, #12]
 801253e:	f023 0303 	bic.w	r3, r3, #3
 8012542:	f043 0301 	orr.w	r3, r3, #1
 8012546:	81a3      	strh	r3, [r4, #12]
 8012548:	89a0      	ldrh	r0, [r4, #12]
 801254a:	4305      	orrs	r5, r0
 801254c:	81a5      	strh	r5, [r4, #12]
 801254e:	e7cd      	b.n	80124ec <__smakebuf_r+0x18>
 8012550:	0801146d 	.word	0x0801146d

08012554 <_read_r>:
 8012554:	b538      	push	{r3, r4, r5, lr}
 8012556:	4d07      	ldr	r5, [pc, #28]	; (8012574 <_read_r+0x20>)
 8012558:	4604      	mov	r4, r0
 801255a:	4608      	mov	r0, r1
 801255c:	4611      	mov	r1, r2
 801255e:	2200      	movs	r2, #0
 8012560:	602a      	str	r2, [r5, #0]
 8012562:	461a      	mov	r2, r3
 8012564:	f000 f89e 	bl	80126a4 <_read>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d102      	bne.n	8012572 <_read_r+0x1e>
 801256c:	682b      	ldr	r3, [r5, #0]
 801256e:	b103      	cbz	r3, 8012572 <_read_r+0x1e>
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	200029a4 	.word	0x200029a4

08012578 <_raise_r>:
 8012578:	291f      	cmp	r1, #31
 801257a:	b538      	push	{r3, r4, r5, lr}
 801257c:	4604      	mov	r4, r0
 801257e:	460d      	mov	r5, r1
 8012580:	d904      	bls.n	801258c <_raise_r+0x14>
 8012582:	2316      	movs	r3, #22
 8012584:	6003      	str	r3, [r0, #0]
 8012586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801258a:	bd38      	pop	{r3, r4, r5, pc}
 801258c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801258e:	b112      	cbz	r2, 8012596 <_raise_r+0x1e>
 8012590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012594:	b94b      	cbnz	r3, 80125aa <_raise_r+0x32>
 8012596:	4620      	mov	r0, r4
 8012598:	f000 f830 	bl	80125fc <_getpid_r>
 801259c:	462a      	mov	r2, r5
 801259e:	4601      	mov	r1, r0
 80125a0:	4620      	mov	r0, r4
 80125a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125a6:	f000 b817 	b.w	80125d8 <_kill_r>
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d00a      	beq.n	80125c4 <_raise_r+0x4c>
 80125ae:	1c59      	adds	r1, r3, #1
 80125b0:	d103      	bne.n	80125ba <_raise_r+0x42>
 80125b2:	2316      	movs	r3, #22
 80125b4:	6003      	str	r3, [r0, #0]
 80125b6:	2001      	movs	r0, #1
 80125b8:	e7e7      	b.n	801258a <_raise_r+0x12>
 80125ba:	2400      	movs	r4, #0
 80125bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80125c0:	4628      	mov	r0, r5
 80125c2:	4798      	blx	r3
 80125c4:	2000      	movs	r0, #0
 80125c6:	e7e0      	b.n	801258a <_raise_r+0x12>

080125c8 <raise>:
 80125c8:	4b02      	ldr	r3, [pc, #8]	; (80125d4 <raise+0xc>)
 80125ca:	4601      	mov	r1, r0
 80125cc:	6818      	ldr	r0, [r3, #0]
 80125ce:	f7ff bfd3 	b.w	8012578 <_raise_r>
 80125d2:	bf00      	nop
 80125d4:	20000188 	.word	0x20000188

080125d8 <_kill_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4d07      	ldr	r5, [pc, #28]	; (80125f8 <_kill_r+0x20>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	4611      	mov	r1, r2
 80125e4:	602b      	str	r3, [r5, #0]
 80125e6:	f000 f84d 	bl	8012684 <_kill>
 80125ea:	1c43      	adds	r3, r0, #1
 80125ec:	d102      	bne.n	80125f4 <_kill_r+0x1c>
 80125ee:	682b      	ldr	r3, [r5, #0]
 80125f0:	b103      	cbz	r3, 80125f4 <_kill_r+0x1c>
 80125f2:	6023      	str	r3, [r4, #0]
 80125f4:	bd38      	pop	{r3, r4, r5, pc}
 80125f6:	bf00      	nop
 80125f8:	200029a4 	.word	0x200029a4

080125fc <_getpid_r>:
 80125fc:	f000 b832 	b.w	8012664 <_getpid>

08012600 <_fstat_r>:
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	4d07      	ldr	r5, [pc, #28]	; (8012620 <_fstat_r+0x20>)
 8012604:	2300      	movs	r3, #0
 8012606:	4604      	mov	r4, r0
 8012608:	4608      	mov	r0, r1
 801260a:	4611      	mov	r1, r2
 801260c:	602b      	str	r3, [r5, #0]
 801260e:	f000 f821 	bl	8012654 <_fstat>
 8012612:	1c43      	adds	r3, r0, #1
 8012614:	d102      	bne.n	801261c <_fstat_r+0x1c>
 8012616:	682b      	ldr	r3, [r5, #0]
 8012618:	b103      	cbz	r3, 801261c <_fstat_r+0x1c>
 801261a:	6023      	str	r3, [r4, #0]
 801261c:	bd38      	pop	{r3, r4, r5, pc}
 801261e:	bf00      	nop
 8012620:	200029a4 	.word	0x200029a4

08012624 <_isatty_r>:
 8012624:	b538      	push	{r3, r4, r5, lr}
 8012626:	4d06      	ldr	r5, [pc, #24]	; (8012640 <_isatty_r+0x1c>)
 8012628:	2300      	movs	r3, #0
 801262a:	4604      	mov	r4, r0
 801262c:	4608      	mov	r0, r1
 801262e:	602b      	str	r3, [r5, #0]
 8012630:	f000 f820 	bl	8012674 <_isatty>
 8012634:	1c43      	adds	r3, r0, #1
 8012636:	d102      	bne.n	801263e <_isatty_r+0x1a>
 8012638:	682b      	ldr	r3, [r5, #0]
 801263a:	b103      	cbz	r3, 801263e <_isatty_r+0x1a>
 801263c:	6023      	str	r3, [r4, #0]
 801263e:	bd38      	pop	{r3, r4, r5, pc}
 8012640:	200029a4 	.word	0x200029a4

08012644 <_close>:
 8012644:	4b02      	ldr	r3, [pc, #8]	; (8012650 <_close+0xc>)
 8012646:	2258      	movs	r2, #88	; 0x58
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801264e:	4770      	bx	lr
 8012650:	200029a4 	.word	0x200029a4

08012654 <_fstat>:
 8012654:	4b02      	ldr	r3, [pc, #8]	; (8012660 <_fstat+0xc>)
 8012656:	2258      	movs	r2, #88	; 0x58
 8012658:	601a      	str	r2, [r3, #0]
 801265a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801265e:	4770      	bx	lr
 8012660:	200029a4 	.word	0x200029a4

08012664 <_getpid>:
 8012664:	4b02      	ldr	r3, [pc, #8]	; (8012670 <_getpid+0xc>)
 8012666:	2258      	movs	r2, #88	; 0x58
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801266e:	4770      	bx	lr
 8012670:	200029a4 	.word	0x200029a4

08012674 <_isatty>:
 8012674:	4b02      	ldr	r3, [pc, #8]	; (8012680 <_isatty+0xc>)
 8012676:	2258      	movs	r2, #88	; 0x58
 8012678:	601a      	str	r2, [r3, #0]
 801267a:	2000      	movs	r0, #0
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	200029a4 	.word	0x200029a4

08012684 <_kill>:
 8012684:	4b02      	ldr	r3, [pc, #8]	; (8012690 <_kill+0xc>)
 8012686:	2258      	movs	r2, #88	; 0x58
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801268e:	4770      	bx	lr
 8012690:	200029a4 	.word	0x200029a4

08012694 <_lseek>:
 8012694:	4b02      	ldr	r3, [pc, #8]	; (80126a0 <_lseek+0xc>)
 8012696:	2258      	movs	r2, #88	; 0x58
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801269e:	4770      	bx	lr
 80126a0:	200029a4 	.word	0x200029a4

080126a4 <_read>:
 80126a4:	4b02      	ldr	r3, [pc, #8]	; (80126b0 <_read+0xc>)
 80126a6:	2258      	movs	r2, #88	; 0x58
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ae:	4770      	bx	lr
 80126b0:	200029a4 	.word	0x200029a4

080126b4 <_sbrk>:
 80126b4:	4a04      	ldr	r2, [pc, #16]	; (80126c8 <_sbrk+0x14>)
 80126b6:	6811      	ldr	r1, [r2, #0]
 80126b8:	4603      	mov	r3, r0
 80126ba:	b909      	cbnz	r1, 80126c0 <_sbrk+0xc>
 80126bc:	4903      	ldr	r1, [pc, #12]	; (80126cc <_sbrk+0x18>)
 80126be:	6011      	str	r1, [r2, #0]
 80126c0:	6810      	ldr	r0, [r2, #0]
 80126c2:	4403      	add	r3, r0
 80126c4:	6013      	str	r3, [r2, #0]
 80126c6:	4770      	bx	lr
 80126c8:	200029a8 	.word	0x200029a8
 80126cc:	200029b0 	.word	0x200029b0

080126d0 <_write>:
 80126d0:	4b02      	ldr	r3, [pc, #8]	; (80126dc <_write+0xc>)
 80126d2:	2258      	movs	r2, #88	; 0x58
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126da:	4770      	bx	lr
 80126dc:	200029a4 	.word	0x200029a4

080126e0 <_exit>:
 80126e0:	e7fe      	b.n	80126e0 <_exit>
	...

080126e4 <_init>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	bf00      	nop
 80126e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ea:	bc08      	pop	{r3}
 80126ec:	469e      	mov	lr, r3
 80126ee:	4770      	bx	lr

080126f0 <_fini>:
 80126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f2:	bf00      	nop
 80126f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126f6:	bc08      	pop	{r3}
 80126f8:	469e      	mov	lr, r3
 80126fa:	4770      	bx	lr
